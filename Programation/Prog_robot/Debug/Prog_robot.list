
Prog_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e750  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800e810  0800e810  0001e810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eda8  0800eda8  00020208  2**0
                  CONTENTS
  4 .ARM          00000000  0800eda8  0800eda8  00020208  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800eda8  0800eda8  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eda8  0800eda8  0001eda8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800edac  0800edac  0001edac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800edb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007f3c  20000208  0800efb8  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008144  0800efb8  00028144  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020230  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001accc  00000000  00000000  00020273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004454  00000000  00000000  0003af3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001900  00000000  00000000  0003f398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001379  00000000  00000000  00040c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a97b  00000000  00000000  00042011  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000204d6  00000000  00000000  0005c98c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009c065  00000000  00000000  0007ce62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006da4  00000000  00000000  00118ec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0011fc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000208 	.word	0x20000208
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e7f8 	.word	0x0800e7f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000020c 	.word	0x2000020c
 8000104:	0800e7f8 	.word	0x0800e7f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f000 ff99 	bl	8001374 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fee9 	bl	8001224 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 ff8b 	bl	8001374 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 ff81 	bl	8001374 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 ff11 	bl	80012a8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 ff07 	bl	80012a8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_d2uiz>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	2200      	movs	r2, #0
 80004ac:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004ae:	0004      	movs	r4, r0
 80004b0:	000d      	movs	r5, r1
 80004b2:	f7ff ffef 	bl	8000494 <__aeabi_dcmpge>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d104      	bne.n	80004c4 <__aeabi_d2uiz+0x1c>
 80004ba:	0020      	movs	r0, r4
 80004bc:	0029      	movs	r1, r5
 80004be:	f001 fe1f 	bl	8002100 <__aeabi_d2iz>
 80004c2:	bd70      	pop	{r4, r5, r6, pc}
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <__aeabi_d2uiz+0x38>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	0020      	movs	r0, r4
 80004ca:	0029      	movs	r1, r5
 80004cc:	f001 fa78 	bl	80019c0 <__aeabi_dsub>
 80004d0:	f001 fe16 	bl	8002100 <__aeabi_d2iz>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	061b      	lsls	r3, r3, #24
 80004d8:	469c      	mov	ip, r3
 80004da:	4460      	add	r0, ip
 80004dc:	e7f1      	b.n	80004c2 <__aeabi_d2uiz+0x1a>
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	41e00000 	.word	0x41e00000

080004e4 <__aeabi_d2lz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	0005      	movs	r5, r0
 80004e8:	000c      	movs	r4, r1
 80004ea:	2200      	movs	r2, #0
 80004ec:	2300      	movs	r3, #0
 80004ee:	0028      	movs	r0, r5
 80004f0:	0021      	movs	r1, r4
 80004f2:	f7ff ffb1 	bl	8000458 <__aeabi_dcmplt>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d108      	bne.n	800050c <__aeabi_d2lz+0x28>
 80004fa:	0028      	movs	r0, r5
 80004fc:	0021      	movs	r1, r4
 80004fe:	f000 f80f 	bl	8000520 <__aeabi_d2ulz>
 8000502:	0002      	movs	r2, r0
 8000504:	000b      	movs	r3, r1
 8000506:	0010      	movs	r0, r2
 8000508:	0019      	movs	r1, r3
 800050a:	bd70      	pop	{r4, r5, r6, pc}
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	061b      	lsls	r3, r3, #24
 8000510:	18e1      	adds	r1, r4, r3
 8000512:	0028      	movs	r0, r5
 8000514:	f000 f804 	bl	8000520 <__aeabi_d2ulz>
 8000518:	2300      	movs	r3, #0
 800051a:	4242      	negs	r2, r0
 800051c:	418b      	sbcs	r3, r1
 800051e:	e7f2      	b.n	8000506 <__aeabi_d2lz+0x22>

08000520 <__aeabi_d2ulz>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	2200      	movs	r2, #0
 8000524:	4b0b      	ldr	r3, [pc, #44]	; (8000554 <__aeabi_d2ulz+0x34>)
 8000526:	000d      	movs	r5, r1
 8000528:	0004      	movs	r4, r0
 800052a:	f000 ff87 	bl	800143c <__aeabi_dmul>
 800052e:	f7ff ffbb 	bl	80004a8 <__aeabi_d2uiz>
 8000532:	0006      	movs	r6, r0
 8000534:	f001 fe4a 	bl	80021cc <__aeabi_ui2d>
 8000538:	2200      	movs	r2, #0
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <__aeabi_d2ulz+0x38>)
 800053c:	f000 ff7e 	bl	800143c <__aeabi_dmul>
 8000540:	0002      	movs	r2, r0
 8000542:	000b      	movs	r3, r1
 8000544:	0020      	movs	r0, r4
 8000546:	0029      	movs	r1, r5
 8000548:	f001 fa3a 	bl	80019c0 <__aeabi_dsub>
 800054c:	f7ff ffac 	bl	80004a8 <__aeabi_d2uiz>
 8000550:	0031      	movs	r1, r6
 8000552:	bd70      	pop	{r4, r5, r6, pc}
 8000554:	3df00000 	.word	0x3df00000
 8000558:	41f00000 	.word	0x41f00000

0800055c <__aeabi_l2d>:
 800055c:	b570      	push	{r4, r5, r6, lr}
 800055e:	0006      	movs	r6, r0
 8000560:	0008      	movs	r0, r1
 8000562:	f001 fe03 	bl	800216c <__aeabi_i2d>
 8000566:	2200      	movs	r2, #0
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <__aeabi_l2d+0x28>)
 800056a:	f000 ff67 	bl	800143c <__aeabi_dmul>
 800056e:	000d      	movs	r5, r1
 8000570:	0004      	movs	r4, r0
 8000572:	0030      	movs	r0, r6
 8000574:	f001 fe2a 	bl	80021cc <__aeabi_ui2d>
 8000578:	002b      	movs	r3, r5
 800057a:	0022      	movs	r2, r4
 800057c:	f000 f804 	bl	8000588 <__aeabi_dadd>
 8000580:	bd70      	pop	{r4, r5, r6, pc}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	41f00000 	.word	0x41f00000

08000588 <__aeabi_dadd>:
 8000588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800058a:	464f      	mov	r7, r9
 800058c:	4646      	mov	r6, r8
 800058e:	46d6      	mov	lr, sl
 8000590:	0004      	movs	r4, r0
 8000592:	b5c0      	push	{r6, r7, lr}
 8000594:	001f      	movs	r7, r3
 8000596:	030b      	lsls	r3, r1, #12
 8000598:	0010      	movs	r0, r2
 800059a:	004e      	lsls	r6, r1, #1
 800059c:	0a5b      	lsrs	r3, r3, #9
 800059e:	0fcd      	lsrs	r5, r1, #31
 80005a0:	0f61      	lsrs	r1, r4, #29
 80005a2:	007a      	lsls	r2, r7, #1
 80005a4:	4319      	orrs	r1, r3
 80005a6:	00e3      	lsls	r3, r4, #3
 80005a8:	033c      	lsls	r4, r7, #12
 80005aa:	0fff      	lsrs	r7, r7, #31
 80005ac:	46bc      	mov	ip, r7
 80005ae:	0a64      	lsrs	r4, r4, #9
 80005b0:	0f47      	lsrs	r7, r0, #29
 80005b2:	4327      	orrs	r7, r4
 80005b4:	0d76      	lsrs	r6, r6, #21
 80005b6:	0d52      	lsrs	r2, r2, #21
 80005b8:	00c0      	lsls	r0, r0, #3
 80005ba:	46b9      	mov	r9, r7
 80005bc:	4680      	mov	r8, r0
 80005be:	1ab7      	subs	r7, r6, r2
 80005c0:	4565      	cmp	r5, ip
 80005c2:	d100      	bne.n	80005c6 <__aeabi_dadd+0x3e>
 80005c4:	e09b      	b.n	80006fe <__aeabi_dadd+0x176>
 80005c6:	2f00      	cmp	r7, #0
 80005c8:	dc00      	bgt.n	80005cc <__aeabi_dadd+0x44>
 80005ca:	e084      	b.n	80006d6 <__aeabi_dadd+0x14e>
 80005cc:	2a00      	cmp	r2, #0
 80005ce:	d100      	bne.n	80005d2 <__aeabi_dadd+0x4a>
 80005d0:	e0be      	b.n	8000750 <__aeabi_dadd+0x1c8>
 80005d2:	4ac8      	ldr	r2, [pc, #800]	; (80008f4 <__aeabi_dadd+0x36c>)
 80005d4:	4296      	cmp	r6, r2
 80005d6:	d100      	bne.n	80005da <__aeabi_dadd+0x52>
 80005d8:	e124      	b.n	8000824 <__aeabi_dadd+0x29c>
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	464c      	mov	r4, r9
 80005de:	0412      	lsls	r2, r2, #16
 80005e0:	4314      	orrs	r4, r2
 80005e2:	46a1      	mov	r9, r4
 80005e4:	2f38      	cmp	r7, #56	; 0x38
 80005e6:	dd00      	ble.n	80005ea <__aeabi_dadd+0x62>
 80005e8:	e167      	b.n	80008ba <__aeabi_dadd+0x332>
 80005ea:	2f1f      	cmp	r7, #31
 80005ec:	dd00      	ble.n	80005f0 <__aeabi_dadd+0x68>
 80005ee:	e1d6      	b.n	800099e <__aeabi_dadd+0x416>
 80005f0:	2220      	movs	r2, #32
 80005f2:	464c      	mov	r4, r9
 80005f4:	1bd2      	subs	r2, r2, r7
 80005f6:	4094      	lsls	r4, r2
 80005f8:	46a2      	mov	sl, r4
 80005fa:	4644      	mov	r4, r8
 80005fc:	40fc      	lsrs	r4, r7
 80005fe:	0020      	movs	r0, r4
 8000600:	4654      	mov	r4, sl
 8000602:	4304      	orrs	r4, r0
 8000604:	4640      	mov	r0, r8
 8000606:	4090      	lsls	r0, r2
 8000608:	1e42      	subs	r2, r0, #1
 800060a:	4190      	sbcs	r0, r2
 800060c:	464a      	mov	r2, r9
 800060e:	40fa      	lsrs	r2, r7
 8000610:	4304      	orrs	r4, r0
 8000612:	1a89      	subs	r1, r1, r2
 8000614:	1b1c      	subs	r4, r3, r4
 8000616:	42a3      	cmp	r3, r4
 8000618:	4192      	sbcs	r2, r2
 800061a:	4252      	negs	r2, r2
 800061c:	1a8b      	subs	r3, r1, r2
 800061e:	469a      	mov	sl, r3
 8000620:	4653      	mov	r3, sl
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	d400      	bmi.n	8000628 <__aeabi_dadd+0xa0>
 8000626:	e0d4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000628:	4653      	mov	r3, sl
 800062a:	025a      	lsls	r2, r3, #9
 800062c:	0a53      	lsrs	r3, r2, #9
 800062e:	469a      	mov	sl, r3
 8000630:	4653      	mov	r3, sl
 8000632:	2b00      	cmp	r3, #0
 8000634:	d100      	bne.n	8000638 <__aeabi_dadd+0xb0>
 8000636:	e104      	b.n	8000842 <__aeabi_dadd+0x2ba>
 8000638:	4650      	mov	r0, sl
 800063a:	f001 fe73 	bl	8002324 <__clzsi2>
 800063e:	0003      	movs	r3, r0
 8000640:	3b08      	subs	r3, #8
 8000642:	2220      	movs	r2, #32
 8000644:	0020      	movs	r0, r4
 8000646:	1ad2      	subs	r2, r2, r3
 8000648:	4651      	mov	r1, sl
 800064a:	40d0      	lsrs	r0, r2
 800064c:	4099      	lsls	r1, r3
 800064e:	0002      	movs	r2, r0
 8000650:	409c      	lsls	r4, r3
 8000652:	430a      	orrs	r2, r1
 8000654:	42b3      	cmp	r3, r6
 8000656:	da00      	bge.n	800065a <__aeabi_dadd+0xd2>
 8000658:	e102      	b.n	8000860 <__aeabi_dadd+0x2d8>
 800065a:	1b9b      	subs	r3, r3, r6
 800065c:	1c59      	adds	r1, r3, #1
 800065e:	291f      	cmp	r1, #31
 8000660:	dd00      	ble.n	8000664 <__aeabi_dadd+0xdc>
 8000662:	e0a7      	b.n	80007b4 <__aeabi_dadd+0x22c>
 8000664:	2320      	movs	r3, #32
 8000666:	0010      	movs	r0, r2
 8000668:	0026      	movs	r6, r4
 800066a:	1a5b      	subs	r3, r3, r1
 800066c:	409c      	lsls	r4, r3
 800066e:	4098      	lsls	r0, r3
 8000670:	40ce      	lsrs	r6, r1
 8000672:	40ca      	lsrs	r2, r1
 8000674:	1e63      	subs	r3, r4, #1
 8000676:	419c      	sbcs	r4, r3
 8000678:	4330      	orrs	r0, r6
 800067a:	4692      	mov	sl, r2
 800067c:	2600      	movs	r6, #0
 800067e:	4304      	orrs	r4, r0
 8000680:	0763      	lsls	r3, r4, #29
 8000682:	d009      	beq.n	8000698 <__aeabi_dadd+0x110>
 8000684:	230f      	movs	r3, #15
 8000686:	4023      	ands	r3, r4
 8000688:	2b04      	cmp	r3, #4
 800068a:	d005      	beq.n	8000698 <__aeabi_dadd+0x110>
 800068c:	1d23      	adds	r3, r4, #4
 800068e:	42a3      	cmp	r3, r4
 8000690:	41a4      	sbcs	r4, r4
 8000692:	4264      	negs	r4, r4
 8000694:	44a2      	add	sl, r4
 8000696:	001c      	movs	r4, r3
 8000698:	4653      	mov	r3, sl
 800069a:	021b      	lsls	r3, r3, #8
 800069c:	d400      	bmi.n	80006a0 <__aeabi_dadd+0x118>
 800069e:	e09b      	b.n	80007d8 <__aeabi_dadd+0x250>
 80006a0:	4b94      	ldr	r3, [pc, #592]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006a2:	3601      	adds	r6, #1
 80006a4:	429e      	cmp	r6, r3
 80006a6:	d100      	bne.n	80006aa <__aeabi_dadd+0x122>
 80006a8:	e0b8      	b.n	800081c <__aeabi_dadd+0x294>
 80006aa:	4653      	mov	r3, sl
 80006ac:	4992      	ldr	r1, [pc, #584]	; (80008f8 <__aeabi_dadd+0x370>)
 80006ae:	08e4      	lsrs	r4, r4, #3
 80006b0:	400b      	ands	r3, r1
 80006b2:	0019      	movs	r1, r3
 80006b4:	075b      	lsls	r3, r3, #29
 80006b6:	4323      	orrs	r3, r4
 80006b8:	0572      	lsls	r2, r6, #21
 80006ba:	024c      	lsls	r4, r1, #9
 80006bc:	0b24      	lsrs	r4, r4, #12
 80006be:	0d52      	lsrs	r2, r2, #21
 80006c0:	0512      	lsls	r2, r2, #20
 80006c2:	07ed      	lsls	r5, r5, #31
 80006c4:	4322      	orrs	r2, r4
 80006c6:	432a      	orrs	r2, r5
 80006c8:	0018      	movs	r0, r3
 80006ca:	0011      	movs	r1, r2
 80006cc:	bce0      	pop	{r5, r6, r7}
 80006ce:	46ba      	mov	sl, r7
 80006d0:	46b1      	mov	r9, r6
 80006d2:	46a8      	mov	r8, r5
 80006d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006d6:	2f00      	cmp	r7, #0
 80006d8:	d048      	beq.n	800076c <__aeabi_dadd+0x1e4>
 80006da:	1b97      	subs	r7, r2, r6
 80006dc:	2e00      	cmp	r6, #0
 80006de:	d000      	beq.n	80006e2 <__aeabi_dadd+0x15a>
 80006e0:	e10e      	b.n	8000900 <__aeabi_dadd+0x378>
 80006e2:	000c      	movs	r4, r1
 80006e4:	431c      	orrs	r4, r3
 80006e6:	d100      	bne.n	80006ea <__aeabi_dadd+0x162>
 80006e8:	e1b7      	b.n	8000a5a <__aeabi_dadd+0x4d2>
 80006ea:	1e7c      	subs	r4, r7, #1
 80006ec:	2f01      	cmp	r7, #1
 80006ee:	d100      	bne.n	80006f2 <__aeabi_dadd+0x16a>
 80006f0:	e226      	b.n	8000b40 <__aeabi_dadd+0x5b8>
 80006f2:	4d80      	ldr	r5, [pc, #512]	; (80008f4 <__aeabi_dadd+0x36c>)
 80006f4:	42af      	cmp	r7, r5
 80006f6:	d100      	bne.n	80006fa <__aeabi_dadd+0x172>
 80006f8:	e1d5      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 80006fa:	0027      	movs	r7, r4
 80006fc:	e107      	b.n	800090e <__aeabi_dadd+0x386>
 80006fe:	2f00      	cmp	r7, #0
 8000700:	dc00      	bgt.n	8000704 <__aeabi_dadd+0x17c>
 8000702:	e0b2      	b.n	800086a <__aeabi_dadd+0x2e2>
 8000704:	2a00      	cmp	r2, #0
 8000706:	d047      	beq.n	8000798 <__aeabi_dadd+0x210>
 8000708:	4a7a      	ldr	r2, [pc, #488]	; (80008f4 <__aeabi_dadd+0x36c>)
 800070a:	4296      	cmp	r6, r2
 800070c:	d100      	bne.n	8000710 <__aeabi_dadd+0x188>
 800070e:	e089      	b.n	8000824 <__aeabi_dadd+0x29c>
 8000710:	2280      	movs	r2, #128	; 0x80
 8000712:	464c      	mov	r4, r9
 8000714:	0412      	lsls	r2, r2, #16
 8000716:	4314      	orrs	r4, r2
 8000718:	46a1      	mov	r9, r4
 800071a:	2f38      	cmp	r7, #56	; 0x38
 800071c:	dc6b      	bgt.n	80007f6 <__aeabi_dadd+0x26e>
 800071e:	2f1f      	cmp	r7, #31
 8000720:	dc00      	bgt.n	8000724 <__aeabi_dadd+0x19c>
 8000722:	e16e      	b.n	8000a02 <__aeabi_dadd+0x47a>
 8000724:	003a      	movs	r2, r7
 8000726:	4648      	mov	r0, r9
 8000728:	3a20      	subs	r2, #32
 800072a:	40d0      	lsrs	r0, r2
 800072c:	4684      	mov	ip, r0
 800072e:	2f20      	cmp	r7, #32
 8000730:	d007      	beq.n	8000742 <__aeabi_dadd+0x1ba>
 8000732:	2240      	movs	r2, #64	; 0x40
 8000734:	4648      	mov	r0, r9
 8000736:	1bd2      	subs	r2, r2, r7
 8000738:	4090      	lsls	r0, r2
 800073a:	0002      	movs	r2, r0
 800073c:	4640      	mov	r0, r8
 800073e:	4310      	orrs	r0, r2
 8000740:	4680      	mov	r8, r0
 8000742:	4640      	mov	r0, r8
 8000744:	1e42      	subs	r2, r0, #1
 8000746:	4190      	sbcs	r0, r2
 8000748:	4662      	mov	r2, ip
 800074a:	0004      	movs	r4, r0
 800074c:	4314      	orrs	r4, r2
 800074e:	e057      	b.n	8000800 <__aeabi_dadd+0x278>
 8000750:	464a      	mov	r2, r9
 8000752:	4302      	orrs	r2, r0
 8000754:	d100      	bne.n	8000758 <__aeabi_dadd+0x1d0>
 8000756:	e103      	b.n	8000960 <__aeabi_dadd+0x3d8>
 8000758:	1e7a      	subs	r2, r7, #1
 800075a:	2f01      	cmp	r7, #1
 800075c:	d100      	bne.n	8000760 <__aeabi_dadd+0x1d8>
 800075e:	e193      	b.n	8000a88 <__aeabi_dadd+0x500>
 8000760:	4c64      	ldr	r4, [pc, #400]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000762:	42a7      	cmp	r7, r4
 8000764:	d100      	bne.n	8000768 <__aeabi_dadd+0x1e0>
 8000766:	e18a      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 8000768:	0017      	movs	r7, r2
 800076a:	e73b      	b.n	80005e4 <__aeabi_dadd+0x5c>
 800076c:	4c63      	ldr	r4, [pc, #396]	; (80008fc <__aeabi_dadd+0x374>)
 800076e:	1c72      	adds	r2, r6, #1
 8000770:	4222      	tst	r2, r4
 8000772:	d000      	beq.n	8000776 <__aeabi_dadd+0x1ee>
 8000774:	e0e0      	b.n	8000938 <__aeabi_dadd+0x3b0>
 8000776:	000a      	movs	r2, r1
 8000778:	431a      	orrs	r2, r3
 800077a:	2e00      	cmp	r6, #0
 800077c:	d000      	beq.n	8000780 <__aeabi_dadd+0x1f8>
 800077e:	e174      	b.n	8000a6a <__aeabi_dadd+0x4e2>
 8000780:	2a00      	cmp	r2, #0
 8000782:	d100      	bne.n	8000786 <__aeabi_dadd+0x1fe>
 8000784:	e1d0      	b.n	8000b28 <__aeabi_dadd+0x5a0>
 8000786:	464a      	mov	r2, r9
 8000788:	4302      	orrs	r2, r0
 800078a:	d000      	beq.n	800078e <__aeabi_dadd+0x206>
 800078c:	e1e3      	b.n	8000b56 <__aeabi_dadd+0x5ce>
 800078e:	074a      	lsls	r2, r1, #29
 8000790:	08db      	lsrs	r3, r3, #3
 8000792:	4313      	orrs	r3, r2
 8000794:	08c9      	lsrs	r1, r1, #3
 8000796:	e029      	b.n	80007ec <__aeabi_dadd+0x264>
 8000798:	464a      	mov	r2, r9
 800079a:	4302      	orrs	r2, r0
 800079c:	d100      	bne.n	80007a0 <__aeabi_dadd+0x218>
 800079e:	e17d      	b.n	8000a9c <__aeabi_dadd+0x514>
 80007a0:	1e7a      	subs	r2, r7, #1
 80007a2:	2f01      	cmp	r7, #1
 80007a4:	d100      	bne.n	80007a8 <__aeabi_dadd+0x220>
 80007a6:	e0e0      	b.n	800096a <__aeabi_dadd+0x3e2>
 80007a8:	4c52      	ldr	r4, [pc, #328]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007aa:	42a7      	cmp	r7, r4
 80007ac:	d100      	bne.n	80007b0 <__aeabi_dadd+0x228>
 80007ae:	e166      	b.n	8000a7e <__aeabi_dadd+0x4f6>
 80007b0:	0017      	movs	r7, r2
 80007b2:	e7b2      	b.n	800071a <__aeabi_dadd+0x192>
 80007b4:	0010      	movs	r0, r2
 80007b6:	3b1f      	subs	r3, #31
 80007b8:	40d8      	lsrs	r0, r3
 80007ba:	2920      	cmp	r1, #32
 80007bc:	d003      	beq.n	80007c6 <__aeabi_dadd+0x23e>
 80007be:	2340      	movs	r3, #64	; 0x40
 80007c0:	1a5b      	subs	r3, r3, r1
 80007c2:	409a      	lsls	r2, r3
 80007c4:	4314      	orrs	r4, r2
 80007c6:	1e63      	subs	r3, r4, #1
 80007c8:	419c      	sbcs	r4, r3
 80007ca:	2300      	movs	r3, #0
 80007cc:	2600      	movs	r6, #0
 80007ce:	469a      	mov	sl, r3
 80007d0:	4304      	orrs	r4, r0
 80007d2:	0763      	lsls	r3, r4, #29
 80007d4:	d000      	beq.n	80007d8 <__aeabi_dadd+0x250>
 80007d6:	e755      	b.n	8000684 <__aeabi_dadd+0xfc>
 80007d8:	4652      	mov	r2, sl
 80007da:	08e3      	lsrs	r3, r4, #3
 80007dc:	0752      	lsls	r2, r2, #29
 80007de:	4313      	orrs	r3, r2
 80007e0:	4652      	mov	r2, sl
 80007e2:	0037      	movs	r7, r6
 80007e4:	08d1      	lsrs	r1, r2, #3
 80007e6:	4a43      	ldr	r2, [pc, #268]	; (80008f4 <__aeabi_dadd+0x36c>)
 80007e8:	4297      	cmp	r7, r2
 80007ea:	d01f      	beq.n	800082c <__aeabi_dadd+0x2a4>
 80007ec:	0309      	lsls	r1, r1, #12
 80007ee:	057a      	lsls	r2, r7, #21
 80007f0:	0b0c      	lsrs	r4, r1, #12
 80007f2:	0d52      	lsrs	r2, r2, #21
 80007f4:	e764      	b.n	80006c0 <__aeabi_dadd+0x138>
 80007f6:	4642      	mov	r2, r8
 80007f8:	464c      	mov	r4, r9
 80007fa:	4314      	orrs	r4, r2
 80007fc:	1e62      	subs	r2, r4, #1
 80007fe:	4194      	sbcs	r4, r2
 8000800:	18e4      	adds	r4, r4, r3
 8000802:	429c      	cmp	r4, r3
 8000804:	4192      	sbcs	r2, r2
 8000806:	4252      	negs	r2, r2
 8000808:	4692      	mov	sl, r2
 800080a:	448a      	add	sl, r1
 800080c:	4653      	mov	r3, sl
 800080e:	021b      	lsls	r3, r3, #8
 8000810:	d5df      	bpl.n	80007d2 <__aeabi_dadd+0x24a>
 8000812:	4b38      	ldr	r3, [pc, #224]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000814:	3601      	adds	r6, #1
 8000816:	429e      	cmp	r6, r3
 8000818:	d000      	beq.n	800081c <__aeabi_dadd+0x294>
 800081a:	e0b3      	b.n	8000984 <__aeabi_dadd+0x3fc>
 800081c:	0032      	movs	r2, r6
 800081e:	2400      	movs	r4, #0
 8000820:	2300      	movs	r3, #0
 8000822:	e74d      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000824:	074a      	lsls	r2, r1, #29
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	4313      	orrs	r3, r2
 800082a:	08c9      	lsrs	r1, r1, #3
 800082c:	001a      	movs	r2, r3
 800082e:	430a      	orrs	r2, r1
 8000830:	d100      	bne.n	8000834 <__aeabi_dadd+0x2ac>
 8000832:	e200      	b.n	8000c36 <__aeabi_dadd+0x6ae>
 8000834:	2480      	movs	r4, #128	; 0x80
 8000836:	0324      	lsls	r4, r4, #12
 8000838:	430c      	orrs	r4, r1
 800083a:	0324      	lsls	r4, r4, #12
 800083c:	4a2d      	ldr	r2, [pc, #180]	; (80008f4 <__aeabi_dadd+0x36c>)
 800083e:	0b24      	lsrs	r4, r4, #12
 8000840:	e73e      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000842:	0020      	movs	r0, r4
 8000844:	f001 fd6e 	bl	8002324 <__clzsi2>
 8000848:	0003      	movs	r3, r0
 800084a:	3318      	adds	r3, #24
 800084c:	2b1f      	cmp	r3, #31
 800084e:	dc00      	bgt.n	8000852 <__aeabi_dadd+0x2ca>
 8000850:	e6f7      	b.n	8000642 <__aeabi_dadd+0xba>
 8000852:	0022      	movs	r2, r4
 8000854:	3808      	subs	r0, #8
 8000856:	4082      	lsls	r2, r0
 8000858:	2400      	movs	r4, #0
 800085a:	42b3      	cmp	r3, r6
 800085c:	db00      	blt.n	8000860 <__aeabi_dadd+0x2d8>
 800085e:	e6fc      	b.n	800065a <__aeabi_dadd+0xd2>
 8000860:	1af6      	subs	r6, r6, r3
 8000862:	4b25      	ldr	r3, [pc, #148]	; (80008f8 <__aeabi_dadd+0x370>)
 8000864:	401a      	ands	r2, r3
 8000866:	4692      	mov	sl, r2
 8000868:	e70a      	b.n	8000680 <__aeabi_dadd+0xf8>
 800086a:	2f00      	cmp	r7, #0
 800086c:	d02b      	beq.n	80008c6 <__aeabi_dadd+0x33e>
 800086e:	1b97      	subs	r7, r2, r6
 8000870:	2e00      	cmp	r6, #0
 8000872:	d100      	bne.n	8000876 <__aeabi_dadd+0x2ee>
 8000874:	e0b8      	b.n	80009e8 <__aeabi_dadd+0x460>
 8000876:	4c1f      	ldr	r4, [pc, #124]	; (80008f4 <__aeabi_dadd+0x36c>)
 8000878:	42a2      	cmp	r2, r4
 800087a:	d100      	bne.n	800087e <__aeabi_dadd+0x2f6>
 800087c:	e11c      	b.n	8000ab8 <__aeabi_dadd+0x530>
 800087e:	2480      	movs	r4, #128	; 0x80
 8000880:	0424      	lsls	r4, r4, #16
 8000882:	4321      	orrs	r1, r4
 8000884:	2f38      	cmp	r7, #56	; 0x38
 8000886:	dd00      	ble.n	800088a <__aeabi_dadd+0x302>
 8000888:	e11e      	b.n	8000ac8 <__aeabi_dadd+0x540>
 800088a:	2f1f      	cmp	r7, #31
 800088c:	dd00      	ble.n	8000890 <__aeabi_dadd+0x308>
 800088e:	e19e      	b.n	8000bce <__aeabi_dadd+0x646>
 8000890:	2620      	movs	r6, #32
 8000892:	000c      	movs	r4, r1
 8000894:	1bf6      	subs	r6, r6, r7
 8000896:	0018      	movs	r0, r3
 8000898:	40b3      	lsls	r3, r6
 800089a:	40b4      	lsls	r4, r6
 800089c:	40f8      	lsrs	r0, r7
 800089e:	1e5e      	subs	r6, r3, #1
 80008a0:	41b3      	sbcs	r3, r6
 80008a2:	40f9      	lsrs	r1, r7
 80008a4:	4304      	orrs	r4, r0
 80008a6:	431c      	orrs	r4, r3
 80008a8:	4489      	add	r9, r1
 80008aa:	4444      	add	r4, r8
 80008ac:	4544      	cmp	r4, r8
 80008ae:	419b      	sbcs	r3, r3
 80008b0:	425b      	negs	r3, r3
 80008b2:	444b      	add	r3, r9
 80008b4:	469a      	mov	sl, r3
 80008b6:	0016      	movs	r6, r2
 80008b8:	e7a8      	b.n	800080c <__aeabi_dadd+0x284>
 80008ba:	4642      	mov	r2, r8
 80008bc:	464c      	mov	r4, r9
 80008be:	4314      	orrs	r4, r2
 80008c0:	1e62      	subs	r2, r4, #1
 80008c2:	4194      	sbcs	r4, r2
 80008c4:	e6a6      	b.n	8000614 <__aeabi_dadd+0x8c>
 80008c6:	4c0d      	ldr	r4, [pc, #52]	; (80008fc <__aeabi_dadd+0x374>)
 80008c8:	1c72      	adds	r2, r6, #1
 80008ca:	4222      	tst	r2, r4
 80008cc:	d000      	beq.n	80008d0 <__aeabi_dadd+0x348>
 80008ce:	e0a8      	b.n	8000a22 <__aeabi_dadd+0x49a>
 80008d0:	000a      	movs	r2, r1
 80008d2:	431a      	orrs	r2, r3
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d000      	beq.n	80008da <__aeabi_dadd+0x352>
 80008d8:	e10a      	b.n	8000af0 <__aeabi_dadd+0x568>
 80008da:	2a00      	cmp	r2, #0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x358>
 80008de:	e15e      	b.n	8000b9e <__aeabi_dadd+0x616>
 80008e0:	464a      	mov	r2, r9
 80008e2:	4302      	orrs	r2, r0
 80008e4:	d000      	beq.n	80008e8 <__aeabi_dadd+0x360>
 80008e6:	e161      	b.n	8000bac <__aeabi_dadd+0x624>
 80008e8:	074a      	lsls	r2, r1, #29
 80008ea:	08db      	lsrs	r3, r3, #3
 80008ec:	4313      	orrs	r3, r2
 80008ee:	08c9      	lsrs	r1, r1, #3
 80008f0:	e77c      	b.n	80007ec <__aeabi_dadd+0x264>
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	000007ff 	.word	0x000007ff
 80008f8:	ff7fffff 	.word	0xff7fffff
 80008fc:	000007fe 	.word	0x000007fe
 8000900:	4ccf      	ldr	r4, [pc, #828]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000902:	42a2      	cmp	r2, r4
 8000904:	d100      	bne.n	8000908 <__aeabi_dadd+0x380>
 8000906:	e0ce      	b.n	8000aa6 <__aeabi_dadd+0x51e>
 8000908:	2480      	movs	r4, #128	; 0x80
 800090a:	0424      	lsls	r4, r4, #16
 800090c:	4321      	orrs	r1, r4
 800090e:	2f38      	cmp	r7, #56	; 0x38
 8000910:	dc5b      	bgt.n	80009ca <__aeabi_dadd+0x442>
 8000912:	2f1f      	cmp	r7, #31
 8000914:	dd00      	ble.n	8000918 <__aeabi_dadd+0x390>
 8000916:	e0dc      	b.n	8000ad2 <__aeabi_dadd+0x54a>
 8000918:	2520      	movs	r5, #32
 800091a:	000c      	movs	r4, r1
 800091c:	1bed      	subs	r5, r5, r7
 800091e:	001e      	movs	r6, r3
 8000920:	40ab      	lsls	r3, r5
 8000922:	40ac      	lsls	r4, r5
 8000924:	40fe      	lsrs	r6, r7
 8000926:	1e5d      	subs	r5, r3, #1
 8000928:	41ab      	sbcs	r3, r5
 800092a:	4334      	orrs	r4, r6
 800092c:	40f9      	lsrs	r1, r7
 800092e:	431c      	orrs	r4, r3
 8000930:	464b      	mov	r3, r9
 8000932:	1a5b      	subs	r3, r3, r1
 8000934:	4699      	mov	r9, r3
 8000936:	e04c      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000938:	464a      	mov	r2, r9
 800093a:	1a1c      	subs	r4, r3, r0
 800093c:	1a88      	subs	r0, r1, r2
 800093e:	42a3      	cmp	r3, r4
 8000940:	4192      	sbcs	r2, r2
 8000942:	4252      	negs	r2, r2
 8000944:	4692      	mov	sl, r2
 8000946:	0002      	movs	r2, r0
 8000948:	4650      	mov	r0, sl
 800094a:	1a12      	subs	r2, r2, r0
 800094c:	4692      	mov	sl, r2
 800094e:	0212      	lsls	r2, r2, #8
 8000950:	d478      	bmi.n	8000a44 <__aeabi_dadd+0x4bc>
 8000952:	4653      	mov	r3, sl
 8000954:	4323      	orrs	r3, r4
 8000956:	d000      	beq.n	800095a <__aeabi_dadd+0x3d2>
 8000958:	e66a      	b.n	8000630 <__aeabi_dadd+0xa8>
 800095a:	2100      	movs	r1, #0
 800095c:	2500      	movs	r5, #0
 800095e:	e745      	b.n	80007ec <__aeabi_dadd+0x264>
 8000960:	074a      	lsls	r2, r1, #29
 8000962:	08db      	lsrs	r3, r3, #3
 8000964:	4313      	orrs	r3, r2
 8000966:	08c9      	lsrs	r1, r1, #3
 8000968:	e73d      	b.n	80007e6 <__aeabi_dadd+0x25e>
 800096a:	181c      	adds	r4, r3, r0
 800096c:	429c      	cmp	r4, r3
 800096e:	419b      	sbcs	r3, r3
 8000970:	4449      	add	r1, r9
 8000972:	468a      	mov	sl, r1
 8000974:	425b      	negs	r3, r3
 8000976:	449a      	add	sl, r3
 8000978:	4653      	mov	r3, sl
 800097a:	2601      	movs	r6, #1
 800097c:	021b      	lsls	r3, r3, #8
 800097e:	d400      	bmi.n	8000982 <__aeabi_dadd+0x3fa>
 8000980:	e727      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000982:	2602      	movs	r6, #2
 8000984:	4652      	mov	r2, sl
 8000986:	4baf      	ldr	r3, [pc, #700]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000988:	2101      	movs	r1, #1
 800098a:	401a      	ands	r2, r3
 800098c:	0013      	movs	r3, r2
 800098e:	4021      	ands	r1, r4
 8000990:	0862      	lsrs	r2, r4, #1
 8000992:	430a      	orrs	r2, r1
 8000994:	07dc      	lsls	r4, r3, #31
 8000996:	085b      	lsrs	r3, r3, #1
 8000998:	469a      	mov	sl, r3
 800099a:	4314      	orrs	r4, r2
 800099c:	e670      	b.n	8000680 <__aeabi_dadd+0xf8>
 800099e:	003a      	movs	r2, r7
 80009a0:	464c      	mov	r4, r9
 80009a2:	3a20      	subs	r2, #32
 80009a4:	40d4      	lsrs	r4, r2
 80009a6:	46a4      	mov	ip, r4
 80009a8:	2f20      	cmp	r7, #32
 80009aa:	d007      	beq.n	80009bc <__aeabi_dadd+0x434>
 80009ac:	2240      	movs	r2, #64	; 0x40
 80009ae:	4648      	mov	r0, r9
 80009b0:	1bd2      	subs	r2, r2, r7
 80009b2:	4090      	lsls	r0, r2
 80009b4:	0002      	movs	r2, r0
 80009b6:	4640      	mov	r0, r8
 80009b8:	4310      	orrs	r0, r2
 80009ba:	4680      	mov	r8, r0
 80009bc:	4640      	mov	r0, r8
 80009be:	1e42      	subs	r2, r0, #1
 80009c0:	4190      	sbcs	r0, r2
 80009c2:	4662      	mov	r2, ip
 80009c4:	0004      	movs	r4, r0
 80009c6:	4314      	orrs	r4, r2
 80009c8:	e624      	b.n	8000614 <__aeabi_dadd+0x8c>
 80009ca:	4319      	orrs	r1, r3
 80009cc:	000c      	movs	r4, r1
 80009ce:	1e63      	subs	r3, r4, #1
 80009d0:	419c      	sbcs	r4, r3
 80009d2:	4643      	mov	r3, r8
 80009d4:	1b1c      	subs	r4, r3, r4
 80009d6:	45a0      	cmp	r8, r4
 80009d8:	419b      	sbcs	r3, r3
 80009da:	4649      	mov	r1, r9
 80009dc:	425b      	negs	r3, r3
 80009de:	1acb      	subs	r3, r1, r3
 80009e0:	469a      	mov	sl, r3
 80009e2:	4665      	mov	r5, ip
 80009e4:	0016      	movs	r6, r2
 80009e6:	e61b      	b.n	8000620 <__aeabi_dadd+0x98>
 80009e8:	000c      	movs	r4, r1
 80009ea:	431c      	orrs	r4, r3
 80009ec:	d100      	bne.n	80009f0 <__aeabi_dadd+0x468>
 80009ee:	e0c7      	b.n	8000b80 <__aeabi_dadd+0x5f8>
 80009f0:	1e7c      	subs	r4, r7, #1
 80009f2:	2f01      	cmp	r7, #1
 80009f4:	d100      	bne.n	80009f8 <__aeabi_dadd+0x470>
 80009f6:	e0f9      	b.n	8000bec <__aeabi_dadd+0x664>
 80009f8:	4e91      	ldr	r6, [pc, #580]	; (8000c40 <__aeabi_dadd+0x6b8>)
 80009fa:	42b7      	cmp	r7, r6
 80009fc:	d05c      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 80009fe:	0027      	movs	r7, r4
 8000a00:	e740      	b.n	8000884 <__aeabi_dadd+0x2fc>
 8000a02:	2220      	movs	r2, #32
 8000a04:	464c      	mov	r4, r9
 8000a06:	4640      	mov	r0, r8
 8000a08:	1bd2      	subs	r2, r2, r7
 8000a0a:	4094      	lsls	r4, r2
 8000a0c:	40f8      	lsrs	r0, r7
 8000a0e:	4304      	orrs	r4, r0
 8000a10:	4640      	mov	r0, r8
 8000a12:	4090      	lsls	r0, r2
 8000a14:	1e42      	subs	r2, r0, #1
 8000a16:	4190      	sbcs	r0, r2
 8000a18:	464a      	mov	r2, r9
 8000a1a:	40fa      	lsrs	r2, r7
 8000a1c:	4304      	orrs	r4, r0
 8000a1e:	1889      	adds	r1, r1, r2
 8000a20:	e6ee      	b.n	8000800 <__aeabi_dadd+0x278>
 8000a22:	4c87      	ldr	r4, [pc, #540]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000a24:	42a2      	cmp	r2, r4
 8000a26:	d100      	bne.n	8000a2a <__aeabi_dadd+0x4a2>
 8000a28:	e6f9      	b.n	800081e <__aeabi_dadd+0x296>
 8000a2a:	1818      	adds	r0, r3, r0
 8000a2c:	4298      	cmp	r0, r3
 8000a2e:	419b      	sbcs	r3, r3
 8000a30:	4449      	add	r1, r9
 8000a32:	425b      	negs	r3, r3
 8000a34:	18cb      	adds	r3, r1, r3
 8000a36:	07dc      	lsls	r4, r3, #31
 8000a38:	0840      	lsrs	r0, r0, #1
 8000a3a:	085b      	lsrs	r3, r3, #1
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	0016      	movs	r6, r2
 8000a40:	4304      	orrs	r4, r0
 8000a42:	e6c6      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000a44:	4642      	mov	r2, r8
 8000a46:	1ad4      	subs	r4, r2, r3
 8000a48:	45a0      	cmp	r8, r4
 8000a4a:	4180      	sbcs	r0, r0
 8000a4c:	464b      	mov	r3, r9
 8000a4e:	4240      	negs	r0, r0
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	1a0b      	subs	r3, r1, r0
 8000a54:	469a      	mov	sl, r3
 8000a56:	4665      	mov	r5, ip
 8000a58:	e5ea      	b.n	8000630 <__aeabi_dadd+0xa8>
 8000a5a:	464b      	mov	r3, r9
 8000a5c:	464a      	mov	r2, r9
 8000a5e:	08c0      	lsrs	r0, r0, #3
 8000a60:	075b      	lsls	r3, r3, #29
 8000a62:	4665      	mov	r5, ip
 8000a64:	4303      	orrs	r3, r0
 8000a66:	08d1      	lsrs	r1, r2, #3
 8000a68:	e6bd      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000a6a:	2a00      	cmp	r2, #0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dadd+0x4e8>
 8000a6e:	e08e      	b.n	8000b8e <__aeabi_dadd+0x606>
 8000a70:	464b      	mov	r3, r9
 8000a72:	4303      	orrs	r3, r0
 8000a74:	d117      	bne.n	8000aa6 <__aeabi_dadd+0x51e>
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	2500      	movs	r5, #0
 8000a7a:	0309      	lsls	r1, r1, #12
 8000a7c:	e6da      	b.n	8000834 <__aeabi_dadd+0x2ac>
 8000a7e:	074a      	lsls	r2, r1, #29
 8000a80:	08db      	lsrs	r3, r3, #3
 8000a82:	4313      	orrs	r3, r2
 8000a84:	08c9      	lsrs	r1, r1, #3
 8000a86:	e6d1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000a88:	1a1c      	subs	r4, r3, r0
 8000a8a:	464a      	mov	r2, r9
 8000a8c:	42a3      	cmp	r3, r4
 8000a8e:	419b      	sbcs	r3, r3
 8000a90:	1a89      	subs	r1, r1, r2
 8000a92:	425b      	negs	r3, r3
 8000a94:	1acb      	subs	r3, r1, r3
 8000a96:	469a      	mov	sl, r3
 8000a98:	2601      	movs	r6, #1
 8000a9a:	e5c1      	b.n	8000620 <__aeabi_dadd+0x98>
 8000a9c:	074a      	lsls	r2, r1, #29
 8000a9e:	08db      	lsrs	r3, r3, #3
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	08c9      	lsrs	r1, r1, #3
 8000aa4:	e69f      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000aa6:	4643      	mov	r3, r8
 8000aa8:	08d8      	lsrs	r0, r3, #3
 8000aaa:	464b      	mov	r3, r9
 8000aac:	464a      	mov	r2, r9
 8000aae:	075b      	lsls	r3, r3, #29
 8000ab0:	4665      	mov	r5, ip
 8000ab2:	4303      	orrs	r3, r0
 8000ab4:	08d1      	lsrs	r1, r2, #3
 8000ab6:	e6b9      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ab8:	4643      	mov	r3, r8
 8000aba:	08d8      	lsrs	r0, r3, #3
 8000abc:	464b      	mov	r3, r9
 8000abe:	464a      	mov	r2, r9
 8000ac0:	075b      	lsls	r3, r3, #29
 8000ac2:	4303      	orrs	r3, r0
 8000ac4:	08d1      	lsrs	r1, r2, #3
 8000ac6:	e6b1      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000ac8:	4319      	orrs	r1, r3
 8000aca:	000c      	movs	r4, r1
 8000acc:	1e63      	subs	r3, r4, #1
 8000ace:	419c      	sbcs	r4, r3
 8000ad0:	e6eb      	b.n	80008aa <__aeabi_dadd+0x322>
 8000ad2:	003c      	movs	r4, r7
 8000ad4:	000d      	movs	r5, r1
 8000ad6:	3c20      	subs	r4, #32
 8000ad8:	40e5      	lsrs	r5, r4
 8000ada:	2f20      	cmp	r7, #32
 8000adc:	d003      	beq.n	8000ae6 <__aeabi_dadd+0x55e>
 8000ade:	2440      	movs	r4, #64	; 0x40
 8000ae0:	1be4      	subs	r4, r4, r7
 8000ae2:	40a1      	lsls	r1, r4
 8000ae4:	430b      	orrs	r3, r1
 8000ae6:	001c      	movs	r4, r3
 8000ae8:	1e63      	subs	r3, r4, #1
 8000aea:	419c      	sbcs	r4, r3
 8000aec:	432c      	orrs	r4, r5
 8000aee:	e770      	b.n	80009d2 <__aeabi_dadd+0x44a>
 8000af0:	2a00      	cmp	r2, #0
 8000af2:	d0e1      	beq.n	8000ab8 <__aeabi_dadd+0x530>
 8000af4:	464a      	mov	r2, r9
 8000af6:	4302      	orrs	r2, r0
 8000af8:	d0c1      	beq.n	8000a7e <__aeabi_dadd+0x4f6>
 8000afa:	074a      	lsls	r2, r1, #29
 8000afc:	08db      	lsrs	r3, r3, #3
 8000afe:	4313      	orrs	r3, r2
 8000b00:	2280      	movs	r2, #128	; 0x80
 8000b02:	08c9      	lsrs	r1, r1, #3
 8000b04:	0312      	lsls	r2, r2, #12
 8000b06:	4211      	tst	r1, r2
 8000b08:	d008      	beq.n	8000b1c <__aeabi_dadd+0x594>
 8000b0a:	4648      	mov	r0, r9
 8000b0c:	08c4      	lsrs	r4, r0, #3
 8000b0e:	4214      	tst	r4, r2
 8000b10:	d104      	bne.n	8000b1c <__aeabi_dadd+0x594>
 8000b12:	4643      	mov	r3, r8
 8000b14:	0021      	movs	r1, r4
 8000b16:	08db      	lsrs	r3, r3, #3
 8000b18:	0742      	lsls	r2, r0, #29
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	0f5a      	lsrs	r2, r3, #29
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	0752      	lsls	r2, r2, #29
 8000b22:	08db      	lsrs	r3, r3, #3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	e681      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b28:	464b      	mov	r3, r9
 8000b2a:	4303      	orrs	r3, r0
 8000b2c:	d100      	bne.n	8000b30 <__aeabi_dadd+0x5a8>
 8000b2e:	e714      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000b30:	464b      	mov	r3, r9
 8000b32:	464a      	mov	r2, r9
 8000b34:	08c0      	lsrs	r0, r0, #3
 8000b36:	075b      	lsls	r3, r3, #29
 8000b38:	4665      	mov	r5, ip
 8000b3a:	4303      	orrs	r3, r0
 8000b3c:	08d1      	lsrs	r1, r2, #3
 8000b3e:	e655      	b.n	80007ec <__aeabi_dadd+0x264>
 8000b40:	1ac4      	subs	r4, r0, r3
 8000b42:	45a0      	cmp	r8, r4
 8000b44:	4180      	sbcs	r0, r0
 8000b46:	464b      	mov	r3, r9
 8000b48:	4240      	negs	r0, r0
 8000b4a:	1a59      	subs	r1, r3, r1
 8000b4c:	1a0b      	subs	r3, r1, r0
 8000b4e:	469a      	mov	sl, r3
 8000b50:	4665      	mov	r5, ip
 8000b52:	2601      	movs	r6, #1
 8000b54:	e564      	b.n	8000620 <__aeabi_dadd+0x98>
 8000b56:	1a1c      	subs	r4, r3, r0
 8000b58:	464a      	mov	r2, r9
 8000b5a:	42a3      	cmp	r3, r4
 8000b5c:	4180      	sbcs	r0, r0
 8000b5e:	1a8a      	subs	r2, r1, r2
 8000b60:	4240      	negs	r0, r0
 8000b62:	1a12      	subs	r2, r2, r0
 8000b64:	4692      	mov	sl, r2
 8000b66:	0212      	lsls	r2, r2, #8
 8000b68:	d549      	bpl.n	8000bfe <__aeabi_dadd+0x676>
 8000b6a:	4642      	mov	r2, r8
 8000b6c:	1ad4      	subs	r4, r2, r3
 8000b6e:	45a0      	cmp	r8, r4
 8000b70:	4180      	sbcs	r0, r0
 8000b72:	464b      	mov	r3, r9
 8000b74:	4240      	negs	r0, r0
 8000b76:	1a59      	subs	r1, r3, r1
 8000b78:	1a0b      	subs	r3, r1, r0
 8000b7a:	469a      	mov	sl, r3
 8000b7c:	4665      	mov	r5, ip
 8000b7e:	e57f      	b.n	8000680 <__aeabi_dadd+0xf8>
 8000b80:	464b      	mov	r3, r9
 8000b82:	464a      	mov	r2, r9
 8000b84:	08c0      	lsrs	r0, r0, #3
 8000b86:	075b      	lsls	r3, r3, #29
 8000b88:	4303      	orrs	r3, r0
 8000b8a:	08d1      	lsrs	r1, r2, #3
 8000b8c:	e62b      	b.n	80007e6 <__aeabi_dadd+0x25e>
 8000b8e:	464a      	mov	r2, r9
 8000b90:	08db      	lsrs	r3, r3, #3
 8000b92:	4302      	orrs	r2, r0
 8000b94:	d138      	bne.n	8000c08 <__aeabi_dadd+0x680>
 8000b96:	074a      	lsls	r2, r1, #29
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	08c9      	lsrs	r1, r1, #3
 8000b9c:	e646      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000b9e:	464b      	mov	r3, r9
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	08c0      	lsrs	r0, r0, #3
 8000ba4:	075b      	lsls	r3, r3, #29
 8000ba6:	4303      	orrs	r3, r0
 8000ba8:	08d1      	lsrs	r1, r2, #3
 8000baa:	e61f      	b.n	80007ec <__aeabi_dadd+0x264>
 8000bac:	181c      	adds	r4, r3, r0
 8000bae:	429c      	cmp	r4, r3
 8000bb0:	419b      	sbcs	r3, r3
 8000bb2:	4449      	add	r1, r9
 8000bb4:	468a      	mov	sl, r1
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	449a      	add	sl, r3
 8000bba:	4653      	mov	r3, sl
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	d400      	bmi.n	8000bc2 <__aeabi_dadd+0x63a>
 8000bc0:	e607      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bc2:	4652      	mov	r2, sl
 8000bc4:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <__aeabi_dadd+0x6bc>)
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	401a      	ands	r2, r3
 8000bca:	4692      	mov	sl, r2
 8000bcc:	e601      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000bce:	003c      	movs	r4, r7
 8000bd0:	000e      	movs	r6, r1
 8000bd2:	3c20      	subs	r4, #32
 8000bd4:	40e6      	lsrs	r6, r4
 8000bd6:	2f20      	cmp	r7, #32
 8000bd8:	d003      	beq.n	8000be2 <__aeabi_dadd+0x65a>
 8000bda:	2440      	movs	r4, #64	; 0x40
 8000bdc:	1be4      	subs	r4, r4, r7
 8000bde:	40a1      	lsls	r1, r4
 8000be0:	430b      	orrs	r3, r1
 8000be2:	001c      	movs	r4, r3
 8000be4:	1e63      	subs	r3, r4, #1
 8000be6:	419c      	sbcs	r4, r3
 8000be8:	4334      	orrs	r4, r6
 8000bea:	e65e      	b.n	80008aa <__aeabi_dadd+0x322>
 8000bec:	4443      	add	r3, r8
 8000bee:	4283      	cmp	r3, r0
 8000bf0:	4180      	sbcs	r0, r0
 8000bf2:	4449      	add	r1, r9
 8000bf4:	468a      	mov	sl, r1
 8000bf6:	4240      	negs	r0, r0
 8000bf8:	001c      	movs	r4, r3
 8000bfa:	4482      	add	sl, r0
 8000bfc:	e6bc      	b.n	8000978 <__aeabi_dadd+0x3f0>
 8000bfe:	4653      	mov	r3, sl
 8000c00:	4323      	orrs	r3, r4
 8000c02:	d100      	bne.n	8000c06 <__aeabi_dadd+0x67e>
 8000c04:	e6a9      	b.n	800095a <__aeabi_dadd+0x3d2>
 8000c06:	e5e4      	b.n	80007d2 <__aeabi_dadd+0x24a>
 8000c08:	074a      	lsls	r2, r1, #29
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	2280      	movs	r2, #128	; 0x80
 8000c0e:	08c9      	lsrs	r1, r1, #3
 8000c10:	0312      	lsls	r2, r2, #12
 8000c12:	4211      	tst	r1, r2
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c16:	4648      	mov	r0, r9
 8000c18:	08c4      	lsrs	r4, r0, #3
 8000c1a:	4214      	tst	r4, r2
 8000c1c:	d105      	bne.n	8000c2a <__aeabi_dadd+0x6a2>
 8000c1e:	4643      	mov	r3, r8
 8000c20:	4665      	mov	r5, ip
 8000c22:	0021      	movs	r1, r4
 8000c24:	08db      	lsrs	r3, r3, #3
 8000c26:	0742      	lsls	r2, r0, #29
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	0f5a      	lsrs	r2, r3, #29
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	08db      	lsrs	r3, r3, #3
 8000c30:	0752      	lsls	r2, r2, #29
 8000c32:	4313      	orrs	r3, r2
 8000c34:	e5fa      	b.n	800082c <__aeabi_dadd+0x2a4>
 8000c36:	2300      	movs	r3, #0
 8000c38:	4a01      	ldr	r2, [pc, #4]	; (8000c40 <__aeabi_dadd+0x6b8>)
 8000c3a:	001c      	movs	r4, r3
 8000c3c:	e540      	b.n	80006c0 <__aeabi_dadd+0x138>
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	000007ff 	.word	0x000007ff
 8000c44:	ff7fffff 	.word	0xff7fffff

08000c48 <__aeabi_ddiv>:
 8000c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c4a:	4657      	mov	r7, sl
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	4645      	mov	r5, r8
 8000c50:	46de      	mov	lr, fp
 8000c52:	b5e0      	push	{r5, r6, r7, lr}
 8000c54:	030c      	lsls	r4, r1, #12
 8000c56:	001f      	movs	r7, r3
 8000c58:	004b      	lsls	r3, r1, #1
 8000c5a:	4681      	mov	r9, r0
 8000c5c:	4692      	mov	sl, r2
 8000c5e:	0005      	movs	r5, r0
 8000c60:	b085      	sub	sp, #20
 8000c62:	0b24      	lsrs	r4, r4, #12
 8000c64:	0d5b      	lsrs	r3, r3, #21
 8000c66:	0fce      	lsrs	r6, r1, #31
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d100      	bne.n	8000c6e <__aeabi_ddiv+0x26>
 8000c6c:	e152      	b.n	8000f14 <__aeabi_ddiv+0x2cc>
 8000c6e:	4ad2      	ldr	r2, [pc, #840]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d100      	bne.n	8000c76 <__aeabi_ddiv+0x2e>
 8000c74:	e16e      	b.n	8000f54 <__aeabi_ddiv+0x30c>
 8000c76:	0f42      	lsrs	r2, r0, #29
 8000c78:	00e4      	lsls	r4, r4, #3
 8000c7a:	4314      	orrs	r4, r2
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	0412      	lsls	r2, r2, #16
 8000c80:	4322      	orrs	r2, r4
 8000c82:	4690      	mov	r8, r2
 8000c84:	4acd      	ldr	r2, [pc, #820]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000c86:	00c5      	lsls	r5, r0, #3
 8000c88:	4693      	mov	fp, r2
 8000c8a:	449b      	add	fp, r3
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4699      	mov	r9, r3
 8000c90:	9300      	str	r3, [sp, #0]
 8000c92:	033c      	lsls	r4, r7, #12
 8000c94:	007b      	lsls	r3, r7, #1
 8000c96:	4650      	mov	r0, sl
 8000c98:	0b24      	lsrs	r4, r4, #12
 8000c9a:	0d5b      	lsrs	r3, r3, #21
 8000c9c:	0fff      	lsrs	r7, r7, #31
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_ddiv+0x5c>
 8000ca2:	e11a      	b.n	8000eda <__aeabi_ddiv+0x292>
 8000ca4:	4ac4      	ldr	r2, [pc, #784]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d100      	bne.n	8000cac <__aeabi_ddiv+0x64>
 8000caa:	e15e      	b.n	8000f6a <__aeabi_ddiv+0x322>
 8000cac:	0f42      	lsrs	r2, r0, #29
 8000cae:	00e4      	lsls	r4, r4, #3
 8000cb0:	4322      	orrs	r2, r4
 8000cb2:	2480      	movs	r4, #128	; 0x80
 8000cb4:	0424      	lsls	r4, r4, #16
 8000cb6:	4314      	orrs	r4, r2
 8000cb8:	4ac0      	ldr	r2, [pc, #768]	; (8000fbc <__aeabi_ddiv+0x374>)
 8000cba:	00c1      	lsls	r1, r0, #3
 8000cbc:	4694      	mov	ip, r2
 8000cbe:	465a      	mov	r2, fp
 8000cc0:	4463      	add	r3, ip
 8000cc2:	1ad3      	subs	r3, r2, r3
 8000cc4:	469b      	mov	fp, r3
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	0033      	movs	r3, r6
 8000cca:	407b      	eors	r3, r7
 8000ccc:	469a      	mov	sl, r3
 8000cce:	464b      	mov	r3, r9
 8000cd0:	2b0f      	cmp	r3, #15
 8000cd2:	d827      	bhi.n	8000d24 <__aeabi_ddiv+0xdc>
 8000cd4:	4aba      	ldr	r2, [pc, #744]	; (8000fc0 <__aeabi_ddiv+0x378>)
 8000cd6:	009b      	lsls	r3, r3, #2
 8000cd8:	58d3      	ldr	r3, [r2, r3]
 8000cda:	469f      	mov	pc, r3
 8000cdc:	46b2      	mov	sl, r6
 8000cde:	9b00      	ldr	r3, [sp, #0]
 8000ce0:	2b02      	cmp	r3, #2
 8000ce2:	d016      	beq.n	8000d12 <__aeabi_ddiv+0xca>
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d100      	bne.n	8000cea <__aeabi_ddiv+0xa2>
 8000ce8:	e287      	b.n	80011fa <__aeabi_ddiv+0x5b2>
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d000      	beq.n	8000cf0 <__aeabi_ddiv+0xa8>
 8000cee:	e0d5      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2500      	movs	r5, #0
 8000cf6:	051b      	lsls	r3, r3, #20
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	4652      	mov	r2, sl
 8000cfc:	07d2      	lsls	r2, r2, #31
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	0028      	movs	r0, r5
 8000d02:	0019      	movs	r1, r3
 8000d04:	b005      	add	sp, #20
 8000d06:	bcf0      	pop	{r4, r5, r6, r7}
 8000d08:	46bb      	mov	fp, r7
 8000d0a:	46b2      	mov	sl, r6
 8000d0c:	46a9      	mov	r9, r5
 8000d0e:	46a0      	mov	r8, r4
 8000d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d12:	2200      	movs	r2, #0
 8000d14:	2500      	movs	r5, #0
 8000d16:	4ba8      	ldr	r3, [pc, #672]	; (8000fb8 <__aeabi_ddiv+0x370>)
 8000d18:	e7ed      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000d1a:	46ba      	mov	sl, r7
 8000d1c:	46a0      	mov	r8, r4
 8000d1e:	000d      	movs	r5, r1
 8000d20:	9000      	str	r0, [sp, #0]
 8000d22:	e7dc      	b.n	8000cde <__aeabi_ddiv+0x96>
 8000d24:	4544      	cmp	r4, r8
 8000d26:	d200      	bcs.n	8000d2a <__aeabi_ddiv+0xe2>
 8000d28:	e1c4      	b.n	80010b4 <__aeabi_ddiv+0x46c>
 8000d2a:	d100      	bne.n	8000d2e <__aeabi_ddiv+0xe6>
 8000d2c:	e1bf      	b.n	80010ae <__aeabi_ddiv+0x466>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	425b      	negs	r3, r3
 8000d32:	469c      	mov	ip, r3
 8000d34:	002e      	movs	r6, r5
 8000d36:	4640      	mov	r0, r8
 8000d38:	2500      	movs	r5, #0
 8000d3a:	44e3      	add	fp, ip
 8000d3c:	0223      	lsls	r3, r4, #8
 8000d3e:	0e0c      	lsrs	r4, r1, #24
 8000d40:	431c      	orrs	r4, r3
 8000d42:	0c1b      	lsrs	r3, r3, #16
 8000d44:	4699      	mov	r9, r3
 8000d46:	0423      	lsls	r3, r4, #16
 8000d48:	020a      	lsls	r2, r1, #8
 8000d4a:	0c1f      	lsrs	r7, r3, #16
 8000d4c:	4649      	mov	r1, r9
 8000d4e:	9200      	str	r2, [sp, #0]
 8000d50:	9701      	str	r7, [sp, #4]
 8000d52:	f7ff fa7b 	bl	800024c <__aeabi_uidivmod>
 8000d56:	0002      	movs	r2, r0
 8000d58:	437a      	muls	r2, r7
 8000d5a:	040b      	lsls	r3, r1, #16
 8000d5c:	0c31      	lsrs	r1, r6, #16
 8000d5e:	4680      	mov	r8, r0
 8000d60:	4319      	orrs	r1, r3
 8000d62:	428a      	cmp	r2, r1
 8000d64:	d907      	bls.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d66:	2301      	movs	r3, #1
 8000d68:	425b      	negs	r3, r3
 8000d6a:	469c      	mov	ip, r3
 8000d6c:	1909      	adds	r1, r1, r4
 8000d6e:	44e0      	add	r8, ip
 8000d70:	428c      	cmp	r4, r1
 8000d72:	d800      	bhi.n	8000d76 <__aeabi_ddiv+0x12e>
 8000d74:	e201      	b.n	800117a <__aeabi_ddiv+0x532>
 8000d76:	1a88      	subs	r0, r1, r2
 8000d78:	4649      	mov	r1, r9
 8000d7a:	f7ff fa67 	bl	800024c <__aeabi_uidivmod>
 8000d7e:	9a01      	ldr	r2, [sp, #4]
 8000d80:	0436      	lsls	r6, r6, #16
 8000d82:	4342      	muls	r2, r0
 8000d84:	0409      	lsls	r1, r1, #16
 8000d86:	0c36      	lsrs	r6, r6, #16
 8000d88:	0003      	movs	r3, r0
 8000d8a:	430e      	orrs	r6, r1
 8000d8c:	42b2      	cmp	r2, r6
 8000d8e:	d904      	bls.n	8000d9a <__aeabi_ddiv+0x152>
 8000d90:	1936      	adds	r6, r6, r4
 8000d92:	3b01      	subs	r3, #1
 8000d94:	42b4      	cmp	r4, r6
 8000d96:	d800      	bhi.n	8000d9a <__aeabi_ddiv+0x152>
 8000d98:	e1e9      	b.n	800116e <__aeabi_ddiv+0x526>
 8000d9a:	1ab0      	subs	r0, r6, r2
 8000d9c:	4642      	mov	r2, r8
 8000d9e:	9e00      	ldr	r6, [sp, #0]
 8000da0:	0412      	lsls	r2, r2, #16
 8000da2:	431a      	orrs	r2, r3
 8000da4:	0c33      	lsrs	r3, r6, #16
 8000da6:	001f      	movs	r7, r3
 8000da8:	0c11      	lsrs	r1, r2, #16
 8000daa:	4690      	mov	r8, r2
 8000dac:	9302      	str	r3, [sp, #8]
 8000dae:	0413      	lsls	r3, r2, #16
 8000db0:	0432      	lsls	r2, r6, #16
 8000db2:	0c16      	lsrs	r6, r2, #16
 8000db4:	0032      	movs	r2, r6
 8000db6:	0c1b      	lsrs	r3, r3, #16
 8000db8:	435a      	muls	r2, r3
 8000dba:	9603      	str	r6, [sp, #12]
 8000dbc:	437b      	muls	r3, r7
 8000dbe:	434e      	muls	r6, r1
 8000dc0:	4379      	muls	r1, r7
 8000dc2:	0c17      	lsrs	r7, r2, #16
 8000dc4:	46bc      	mov	ip, r7
 8000dc6:	199b      	adds	r3, r3, r6
 8000dc8:	4463      	add	r3, ip
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	d903      	bls.n	8000dd6 <__aeabi_ddiv+0x18e>
 8000dce:	2680      	movs	r6, #128	; 0x80
 8000dd0:	0276      	lsls	r6, r6, #9
 8000dd2:	46b4      	mov	ip, r6
 8000dd4:	4461      	add	r1, ip
 8000dd6:	0c1e      	lsrs	r6, r3, #16
 8000dd8:	1871      	adds	r1, r6, r1
 8000dda:	0416      	lsls	r6, r2, #16
 8000ddc:	041b      	lsls	r3, r3, #16
 8000dde:	0c36      	lsrs	r6, r6, #16
 8000de0:	199e      	adds	r6, r3, r6
 8000de2:	4288      	cmp	r0, r1
 8000de4:	d302      	bcc.n	8000dec <__aeabi_ddiv+0x1a4>
 8000de6:	d112      	bne.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000de8:	42b5      	cmp	r5, r6
 8000dea:	d210      	bcs.n	8000e0e <__aeabi_ddiv+0x1c6>
 8000dec:	4643      	mov	r3, r8
 8000dee:	1e5a      	subs	r2, r3, #1
 8000df0:	9b00      	ldr	r3, [sp, #0]
 8000df2:	469c      	mov	ip, r3
 8000df4:	4465      	add	r5, ip
 8000df6:	001f      	movs	r7, r3
 8000df8:	429d      	cmp	r5, r3
 8000dfa:	419b      	sbcs	r3, r3
 8000dfc:	425b      	negs	r3, r3
 8000dfe:	191b      	adds	r3, r3, r4
 8000e00:	18c0      	adds	r0, r0, r3
 8000e02:	4284      	cmp	r4, r0
 8000e04:	d200      	bcs.n	8000e08 <__aeabi_ddiv+0x1c0>
 8000e06:	e19e      	b.n	8001146 <__aeabi_ddiv+0x4fe>
 8000e08:	d100      	bne.n	8000e0c <__aeabi_ddiv+0x1c4>
 8000e0a:	e199      	b.n	8001140 <__aeabi_ddiv+0x4f8>
 8000e0c:	4690      	mov	r8, r2
 8000e0e:	1bae      	subs	r6, r5, r6
 8000e10:	42b5      	cmp	r5, r6
 8000e12:	41ad      	sbcs	r5, r5
 8000e14:	1a40      	subs	r0, r0, r1
 8000e16:	426d      	negs	r5, r5
 8000e18:	1b40      	subs	r0, r0, r5
 8000e1a:	4284      	cmp	r4, r0
 8000e1c:	d100      	bne.n	8000e20 <__aeabi_ddiv+0x1d8>
 8000e1e:	e1d2      	b.n	80011c6 <__aeabi_ddiv+0x57e>
 8000e20:	4649      	mov	r1, r9
 8000e22:	f7ff fa13 	bl	800024c <__aeabi_uidivmod>
 8000e26:	9a01      	ldr	r2, [sp, #4]
 8000e28:	040b      	lsls	r3, r1, #16
 8000e2a:	4342      	muls	r2, r0
 8000e2c:	0c31      	lsrs	r1, r6, #16
 8000e2e:	0005      	movs	r5, r0
 8000e30:	4319      	orrs	r1, r3
 8000e32:	428a      	cmp	r2, r1
 8000e34:	d900      	bls.n	8000e38 <__aeabi_ddiv+0x1f0>
 8000e36:	e16c      	b.n	8001112 <__aeabi_ddiv+0x4ca>
 8000e38:	1a88      	subs	r0, r1, r2
 8000e3a:	4649      	mov	r1, r9
 8000e3c:	f7ff fa06 	bl	800024c <__aeabi_uidivmod>
 8000e40:	9a01      	ldr	r2, [sp, #4]
 8000e42:	0436      	lsls	r6, r6, #16
 8000e44:	4342      	muls	r2, r0
 8000e46:	0409      	lsls	r1, r1, #16
 8000e48:	0c36      	lsrs	r6, r6, #16
 8000e4a:	0003      	movs	r3, r0
 8000e4c:	430e      	orrs	r6, r1
 8000e4e:	42b2      	cmp	r2, r6
 8000e50:	d900      	bls.n	8000e54 <__aeabi_ddiv+0x20c>
 8000e52:	e153      	b.n	80010fc <__aeabi_ddiv+0x4b4>
 8000e54:	9803      	ldr	r0, [sp, #12]
 8000e56:	1ab6      	subs	r6, r6, r2
 8000e58:	0002      	movs	r2, r0
 8000e5a:	042d      	lsls	r5, r5, #16
 8000e5c:	431d      	orrs	r5, r3
 8000e5e:	9f02      	ldr	r7, [sp, #8]
 8000e60:	042b      	lsls	r3, r5, #16
 8000e62:	0c1b      	lsrs	r3, r3, #16
 8000e64:	435a      	muls	r2, r3
 8000e66:	437b      	muls	r3, r7
 8000e68:	469c      	mov	ip, r3
 8000e6a:	0c29      	lsrs	r1, r5, #16
 8000e6c:	4348      	muls	r0, r1
 8000e6e:	0c13      	lsrs	r3, r2, #16
 8000e70:	4484      	add	ip, r0
 8000e72:	4463      	add	r3, ip
 8000e74:	4379      	muls	r1, r7
 8000e76:	4298      	cmp	r0, r3
 8000e78:	d903      	bls.n	8000e82 <__aeabi_ddiv+0x23a>
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	0240      	lsls	r0, r0, #9
 8000e7e:	4684      	mov	ip, r0
 8000e80:	4461      	add	r1, ip
 8000e82:	0c18      	lsrs	r0, r3, #16
 8000e84:	0412      	lsls	r2, r2, #16
 8000e86:	041b      	lsls	r3, r3, #16
 8000e88:	0c12      	lsrs	r2, r2, #16
 8000e8a:	1840      	adds	r0, r0, r1
 8000e8c:	189b      	adds	r3, r3, r2
 8000e8e:	4286      	cmp	r6, r0
 8000e90:	d200      	bcs.n	8000e94 <__aeabi_ddiv+0x24c>
 8000e92:	e100      	b.n	8001096 <__aeabi_ddiv+0x44e>
 8000e94:	d100      	bne.n	8000e98 <__aeabi_ddiv+0x250>
 8000e96:	e0fb      	b.n	8001090 <__aeabi_ddiv+0x448>
 8000e98:	2301      	movs	r3, #1
 8000e9a:	431d      	orrs	r5, r3
 8000e9c:	4b49      	ldr	r3, [pc, #292]	; (8000fc4 <__aeabi_ddiv+0x37c>)
 8000e9e:	445b      	add	r3, fp
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	dc00      	bgt.n	8000ea6 <__aeabi_ddiv+0x25e>
 8000ea4:	e0aa      	b.n	8000ffc <__aeabi_ddiv+0x3b4>
 8000ea6:	076a      	lsls	r2, r5, #29
 8000ea8:	d000      	beq.n	8000eac <__aeabi_ddiv+0x264>
 8000eaa:	e13d      	b.n	8001128 <__aeabi_ddiv+0x4e0>
 8000eac:	08e9      	lsrs	r1, r5, #3
 8000eae:	4642      	mov	r2, r8
 8000eb0:	01d2      	lsls	r2, r2, #7
 8000eb2:	d506      	bpl.n	8000ec2 <__aeabi_ddiv+0x27a>
 8000eb4:	4642      	mov	r2, r8
 8000eb6:	4b44      	ldr	r3, [pc, #272]	; (8000fc8 <__aeabi_ddiv+0x380>)
 8000eb8:	401a      	ands	r2, r3
 8000eba:	2380      	movs	r3, #128	; 0x80
 8000ebc:	4690      	mov	r8, r2
 8000ebe:	00db      	lsls	r3, r3, #3
 8000ec0:	445b      	add	r3, fp
 8000ec2:	4a42      	ldr	r2, [pc, #264]	; (8000fcc <__aeabi_ddiv+0x384>)
 8000ec4:	4293      	cmp	r3, r2
 8000ec6:	dd00      	ble.n	8000eca <__aeabi_ddiv+0x282>
 8000ec8:	e723      	b.n	8000d12 <__aeabi_ddiv+0xca>
 8000eca:	4642      	mov	r2, r8
 8000ecc:	055b      	lsls	r3, r3, #21
 8000ece:	0755      	lsls	r5, r2, #29
 8000ed0:	0252      	lsls	r2, r2, #9
 8000ed2:	430d      	orrs	r5, r1
 8000ed4:	0b12      	lsrs	r2, r2, #12
 8000ed6:	0d5b      	lsrs	r3, r3, #21
 8000ed8:	e70d      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000eda:	4651      	mov	r1, sl
 8000edc:	4321      	orrs	r1, r4
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_ddiv+0x29a>
 8000ee0:	e07c      	b.n	8000fdc <__aeabi_ddiv+0x394>
 8000ee2:	2c00      	cmp	r4, #0
 8000ee4:	d100      	bne.n	8000ee8 <__aeabi_ddiv+0x2a0>
 8000ee6:	e0fb      	b.n	80010e0 <__aeabi_ddiv+0x498>
 8000ee8:	0020      	movs	r0, r4
 8000eea:	f001 fa1b 	bl	8002324 <__clzsi2>
 8000eee:	0002      	movs	r2, r0
 8000ef0:	3a0b      	subs	r2, #11
 8000ef2:	231d      	movs	r3, #29
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	4652      	mov	r2, sl
 8000ef8:	0001      	movs	r1, r0
 8000efa:	40da      	lsrs	r2, r3
 8000efc:	4653      	mov	r3, sl
 8000efe:	3908      	subs	r1, #8
 8000f00:	408b      	lsls	r3, r1
 8000f02:	408c      	lsls	r4, r1
 8000f04:	0019      	movs	r1, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	4b31      	ldr	r3, [pc, #196]	; (8000fd0 <__aeabi_ddiv+0x388>)
 8000f0a:	4458      	add	r0, fp
 8000f0c:	469b      	mov	fp, r3
 8000f0e:	4483      	add	fp, r0
 8000f10:	2000      	movs	r0, #0
 8000f12:	e6d9      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f14:	0003      	movs	r3, r0
 8000f16:	4323      	orrs	r3, r4
 8000f18:	4698      	mov	r8, r3
 8000f1a:	d044      	beq.n	8000fa6 <__aeabi_ddiv+0x35e>
 8000f1c:	2c00      	cmp	r4, #0
 8000f1e:	d100      	bne.n	8000f22 <__aeabi_ddiv+0x2da>
 8000f20:	e0cf      	b.n	80010c2 <__aeabi_ddiv+0x47a>
 8000f22:	0020      	movs	r0, r4
 8000f24:	f001 f9fe 	bl	8002324 <__clzsi2>
 8000f28:	0001      	movs	r1, r0
 8000f2a:	0002      	movs	r2, r0
 8000f2c:	390b      	subs	r1, #11
 8000f2e:	231d      	movs	r3, #29
 8000f30:	1a5b      	subs	r3, r3, r1
 8000f32:	4649      	mov	r1, r9
 8000f34:	0010      	movs	r0, r2
 8000f36:	40d9      	lsrs	r1, r3
 8000f38:	3808      	subs	r0, #8
 8000f3a:	4084      	lsls	r4, r0
 8000f3c:	000b      	movs	r3, r1
 8000f3e:	464d      	mov	r5, r9
 8000f40:	4323      	orrs	r3, r4
 8000f42:	4698      	mov	r8, r3
 8000f44:	4085      	lsls	r5, r0
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <__aeabi_ddiv+0x38c>)
 8000f48:	1a9b      	subs	r3, r3, r2
 8000f4a:	469b      	mov	fp, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4699      	mov	r9, r3
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	e69e      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f54:	0002      	movs	r2, r0
 8000f56:	4322      	orrs	r2, r4
 8000f58:	4690      	mov	r8, r2
 8000f5a:	d11d      	bne.n	8000f98 <__aeabi_ddiv+0x350>
 8000f5c:	2208      	movs	r2, #8
 8000f5e:	469b      	mov	fp, r3
 8000f60:	2302      	movs	r3, #2
 8000f62:	2500      	movs	r5, #0
 8000f64:	4691      	mov	r9, r2
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	e693      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000f6a:	4651      	mov	r1, sl
 8000f6c:	4321      	orrs	r1, r4
 8000f6e:	d109      	bne.n	8000f84 <__aeabi_ddiv+0x33c>
 8000f70:	2302      	movs	r3, #2
 8000f72:	464a      	mov	r2, r9
 8000f74:	431a      	orrs	r2, r3
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f78:	4691      	mov	r9, r2
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	2002      	movs	r0, #2
 8000f80:	44e3      	add	fp, ip
 8000f82:	e6a1      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f84:	2303      	movs	r3, #3
 8000f86:	464a      	mov	r2, r9
 8000f88:	431a      	orrs	r2, r3
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <__aeabi_ddiv+0x390>)
 8000f8c:	4691      	mov	r9, r2
 8000f8e:	469c      	mov	ip, r3
 8000f90:	4651      	mov	r1, sl
 8000f92:	2003      	movs	r0, #3
 8000f94:	44e3      	add	fp, ip
 8000f96:	e697      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000f98:	220c      	movs	r2, #12
 8000f9a:	469b      	mov	fp, r3
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	46a0      	mov	r8, r4
 8000fa0:	4691      	mov	r9, r2
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	e675      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	4699      	mov	r9, r3
 8000faa:	2300      	movs	r3, #0
 8000fac:	469b      	mov	fp, r3
 8000fae:	3301      	adds	r3, #1
 8000fb0:	2500      	movs	r5, #0
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	e66d      	b.n	8000c92 <__aeabi_ddiv+0x4a>
 8000fb6:	46c0      	nop			; (mov r8, r8)
 8000fb8:	000007ff 	.word	0x000007ff
 8000fbc:	fffffc01 	.word	0xfffffc01
 8000fc0:	0800e864 	.word	0x0800e864
 8000fc4:	000003ff 	.word	0x000003ff
 8000fc8:	feffffff 	.word	0xfeffffff
 8000fcc:	000007fe 	.word	0x000007fe
 8000fd0:	000003f3 	.word	0x000003f3
 8000fd4:	fffffc0d 	.word	0xfffffc0d
 8000fd8:	fffff801 	.word	0xfffff801
 8000fdc:	464a      	mov	r2, r9
 8000fde:	2301      	movs	r3, #1
 8000fe0:	431a      	orrs	r2, r3
 8000fe2:	4691      	mov	r9, r2
 8000fe4:	2400      	movs	r4, #0
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	e66e      	b.n	8000cc8 <__aeabi_ddiv+0x80>
 8000fea:	2300      	movs	r3, #0
 8000fec:	2280      	movs	r2, #128	; 0x80
 8000fee:	469a      	mov	sl, r3
 8000ff0:	2500      	movs	r5, #0
 8000ff2:	4b88      	ldr	r3, [pc, #544]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8000ff4:	0312      	lsls	r2, r2, #12
 8000ff6:	e67e      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8000ff8:	2501      	movs	r5, #1
 8000ffa:	426d      	negs	r5, r5
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	2a38      	cmp	r2, #56	; 0x38
 8001002:	dd00      	ble.n	8001006 <__aeabi_ddiv+0x3be>
 8001004:	e674      	b.n	8000cf0 <__aeabi_ddiv+0xa8>
 8001006:	2a1f      	cmp	r2, #31
 8001008:	dc00      	bgt.n	800100c <__aeabi_ddiv+0x3c4>
 800100a:	e0bd      	b.n	8001188 <__aeabi_ddiv+0x540>
 800100c:	211f      	movs	r1, #31
 800100e:	4249      	negs	r1, r1
 8001010:	1acb      	subs	r3, r1, r3
 8001012:	4641      	mov	r1, r8
 8001014:	40d9      	lsrs	r1, r3
 8001016:	000b      	movs	r3, r1
 8001018:	2a20      	cmp	r2, #32
 800101a:	d004      	beq.n	8001026 <__aeabi_ddiv+0x3de>
 800101c:	4641      	mov	r1, r8
 800101e:	4a7e      	ldr	r2, [pc, #504]	; (8001218 <__aeabi_ddiv+0x5d0>)
 8001020:	445a      	add	r2, fp
 8001022:	4091      	lsls	r1, r2
 8001024:	430d      	orrs	r5, r1
 8001026:	0029      	movs	r1, r5
 8001028:	1e4a      	subs	r2, r1, #1
 800102a:	4191      	sbcs	r1, r2
 800102c:	4319      	orrs	r1, r3
 800102e:	2307      	movs	r3, #7
 8001030:	001d      	movs	r5, r3
 8001032:	2200      	movs	r2, #0
 8001034:	400d      	ands	r5, r1
 8001036:	420b      	tst	r3, r1
 8001038:	d100      	bne.n	800103c <__aeabi_ddiv+0x3f4>
 800103a:	e0d0      	b.n	80011de <__aeabi_ddiv+0x596>
 800103c:	220f      	movs	r2, #15
 800103e:	2300      	movs	r3, #0
 8001040:	400a      	ands	r2, r1
 8001042:	2a04      	cmp	r2, #4
 8001044:	d100      	bne.n	8001048 <__aeabi_ddiv+0x400>
 8001046:	e0c7      	b.n	80011d8 <__aeabi_ddiv+0x590>
 8001048:	1d0a      	adds	r2, r1, #4
 800104a:	428a      	cmp	r2, r1
 800104c:	4189      	sbcs	r1, r1
 800104e:	4249      	negs	r1, r1
 8001050:	185b      	adds	r3, r3, r1
 8001052:	0011      	movs	r1, r2
 8001054:	021a      	lsls	r2, r3, #8
 8001056:	d400      	bmi.n	800105a <__aeabi_ddiv+0x412>
 8001058:	e0be      	b.n	80011d8 <__aeabi_ddiv+0x590>
 800105a:	2301      	movs	r3, #1
 800105c:	2200      	movs	r2, #0
 800105e:	2500      	movs	r5, #0
 8001060:	e649      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001062:	2280      	movs	r2, #128	; 0x80
 8001064:	4643      	mov	r3, r8
 8001066:	0312      	lsls	r2, r2, #12
 8001068:	4213      	tst	r3, r2
 800106a:	d008      	beq.n	800107e <__aeabi_ddiv+0x436>
 800106c:	4214      	tst	r4, r2
 800106e:	d106      	bne.n	800107e <__aeabi_ddiv+0x436>
 8001070:	4322      	orrs	r2, r4
 8001072:	0312      	lsls	r2, r2, #12
 8001074:	46ba      	mov	sl, r7
 8001076:	000d      	movs	r5, r1
 8001078:	4b66      	ldr	r3, [pc, #408]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800107a:	0b12      	lsrs	r2, r2, #12
 800107c:	e63b      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800107e:	2280      	movs	r2, #128	; 0x80
 8001080:	4643      	mov	r3, r8
 8001082:	0312      	lsls	r2, r2, #12
 8001084:	431a      	orrs	r2, r3
 8001086:	0312      	lsls	r2, r2, #12
 8001088:	46b2      	mov	sl, r6
 800108a:	4b62      	ldr	r3, [pc, #392]	; (8001214 <__aeabi_ddiv+0x5cc>)
 800108c:	0b12      	lsrs	r2, r2, #12
 800108e:	e632      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 8001090:	2b00      	cmp	r3, #0
 8001092:	d100      	bne.n	8001096 <__aeabi_ddiv+0x44e>
 8001094:	e702      	b.n	8000e9c <__aeabi_ddiv+0x254>
 8001096:	19a6      	adds	r6, r4, r6
 8001098:	1e6a      	subs	r2, r5, #1
 800109a:	42a6      	cmp	r6, r4
 800109c:	d200      	bcs.n	80010a0 <__aeabi_ddiv+0x458>
 800109e:	e089      	b.n	80011b4 <__aeabi_ddiv+0x56c>
 80010a0:	4286      	cmp	r6, r0
 80010a2:	d200      	bcs.n	80010a6 <__aeabi_ddiv+0x45e>
 80010a4:	e09f      	b.n	80011e6 <__aeabi_ddiv+0x59e>
 80010a6:	d100      	bne.n	80010aa <__aeabi_ddiv+0x462>
 80010a8:	e0af      	b.n	800120a <__aeabi_ddiv+0x5c2>
 80010aa:	0015      	movs	r5, r2
 80010ac:	e6f4      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80010ae:	42a9      	cmp	r1, r5
 80010b0:	d900      	bls.n	80010b4 <__aeabi_ddiv+0x46c>
 80010b2:	e63c      	b.n	8000d2e <__aeabi_ddiv+0xe6>
 80010b4:	4643      	mov	r3, r8
 80010b6:	07de      	lsls	r6, r3, #31
 80010b8:	0858      	lsrs	r0, r3, #1
 80010ba:	086b      	lsrs	r3, r5, #1
 80010bc:	431e      	orrs	r6, r3
 80010be:	07ed      	lsls	r5, r5, #31
 80010c0:	e63c      	b.n	8000d3c <__aeabi_ddiv+0xf4>
 80010c2:	f001 f92f 	bl	8002324 <__clzsi2>
 80010c6:	0001      	movs	r1, r0
 80010c8:	0002      	movs	r2, r0
 80010ca:	3115      	adds	r1, #21
 80010cc:	3220      	adds	r2, #32
 80010ce:	291c      	cmp	r1, #28
 80010d0:	dc00      	bgt.n	80010d4 <__aeabi_ddiv+0x48c>
 80010d2:	e72c      	b.n	8000f2e <__aeabi_ddiv+0x2e6>
 80010d4:	464b      	mov	r3, r9
 80010d6:	3808      	subs	r0, #8
 80010d8:	4083      	lsls	r3, r0
 80010da:	2500      	movs	r5, #0
 80010dc:	4698      	mov	r8, r3
 80010de:	e732      	b.n	8000f46 <__aeabi_ddiv+0x2fe>
 80010e0:	f001 f920 	bl	8002324 <__clzsi2>
 80010e4:	0003      	movs	r3, r0
 80010e6:	001a      	movs	r2, r3
 80010e8:	3215      	adds	r2, #21
 80010ea:	3020      	adds	r0, #32
 80010ec:	2a1c      	cmp	r2, #28
 80010ee:	dc00      	bgt.n	80010f2 <__aeabi_ddiv+0x4aa>
 80010f0:	e6ff      	b.n	8000ef2 <__aeabi_ddiv+0x2aa>
 80010f2:	4654      	mov	r4, sl
 80010f4:	3b08      	subs	r3, #8
 80010f6:	2100      	movs	r1, #0
 80010f8:	409c      	lsls	r4, r3
 80010fa:	e705      	b.n	8000f08 <__aeabi_ddiv+0x2c0>
 80010fc:	1936      	adds	r6, r6, r4
 80010fe:	3b01      	subs	r3, #1
 8001100:	42b4      	cmp	r4, r6
 8001102:	d900      	bls.n	8001106 <__aeabi_ddiv+0x4be>
 8001104:	e6a6      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001106:	42b2      	cmp	r2, r6
 8001108:	d800      	bhi.n	800110c <__aeabi_ddiv+0x4c4>
 800110a:	e6a3      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 800110c:	1e83      	subs	r3, r0, #2
 800110e:	1936      	adds	r6, r6, r4
 8001110:	e6a0      	b.n	8000e54 <__aeabi_ddiv+0x20c>
 8001112:	1909      	adds	r1, r1, r4
 8001114:	3d01      	subs	r5, #1
 8001116:	428c      	cmp	r4, r1
 8001118:	d900      	bls.n	800111c <__aeabi_ddiv+0x4d4>
 800111a:	e68d      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 800111c:	428a      	cmp	r2, r1
 800111e:	d800      	bhi.n	8001122 <__aeabi_ddiv+0x4da>
 8001120:	e68a      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001122:	1e85      	subs	r5, r0, #2
 8001124:	1909      	adds	r1, r1, r4
 8001126:	e687      	b.n	8000e38 <__aeabi_ddiv+0x1f0>
 8001128:	220f      	movs	r2, #15
 800112a:	402a      	ands	r2, r5
 800112c:	2a04      	cmp	r2, #4
 800112e:	d100      	bne.n	8001132 <__aeabi_ddiv+0x4ea>
 8001130:	e6bc      	b.n	8000eac <__aeabi_ddiv+0x264>
 8001132:	1d29      	adds	r1, r5, #4
 8001134:	42a9      	cmp	r1, r5
 8001136:	41ad      	sbcs	r5, r5
 8001138:	426d      	negs	r5, r5
 800113a:	08c9      	lsrs	r1, r1, #3
 800113c:	44a8      	add	r8, r5
 800113e:	e6b6      	b.n	8000eae <__aeabi_ddiv+0x266>
 8001140:	42af      	cmp	r7, r5
 8001142:	d900      	bls.n	8001146 <__aeabi_ddiv+0x4fe>
 8001144:	e662      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001146:	4281      	cmp	r1, r0
 8001148:	d804      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 800114a:	d000      	beq.n	800114e <__aeabi_ddiv+0x506>
 800114c:	e65e      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 800114e:	42ae      	cmp	r6, r5
 8001150:	d800      	bhi.n	8001154 <__aeabi_ddiv+0x50c>
 8001152:	e65b      	b.n	8000e0c <__aeabi_ddiv+0x1c4>
 8001154:	2302      	movs	r3, #2
 8001156:	425b      	negs	r3, r3
 8001158:	469c      	mov	ip, r3
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	44e0      	add	r8, ip
 800115e:	469c      	mov	ip, r3
 8001160:	4465      	add	r5, ip
 8001162:	429d      	cmp	r5, r3
 8001164:	419b      	sbcs	r3, r3
 8001166:	425b      	negs	r3, r3
 8001168:	191b      	adds	r3, r3, r4
 800116a:	18c0      	adds	r0, r0, r3
 800116c:	e64f      	b.n	8000e0e <__aeabi_ddiv+0x1c6>
 800116e:	42b2      	cmp	r2, r6
 8001170:	d800      	bhi.n	8001174 <__aeabi_ddiv+0x52c>
 8001172:	e612      	b.n	8000d9a <__aeabi_ddiv+0x152>
 8001174:	1e83      	subs	r3, r0, #2
 8001176:	1936      	adds	r6, r6, r4
 8001178:	e60f      	b.n	8000d9a <__aeabi_ddiv+0x152>
 800117a:	428a      	cmp	r2, r1
 800117c:	d800      	bhi.n	8001180 <__aeabi_ddiv+0x538>
 800117e:	e5fa      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001180:	1e83      	subs	r3, r0, #2
 8001182:	4698      	mov	r8, r3
 8001184:	1909      	adds	r1, r1, r4
 8001186:	e5f6      	b.n	8000d76 <__aeabi_ddiv+0x12e>
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <__aeabi_ddiv+0x5d4>)
 800118a:	0028      	movs	r0, r5
 800118c:	445b      	add	r3, fp
 800118e:	4641      	mov	r1, r8
 8001190:	409d      	lsls	r5, r3
 8001192:	4099      	lsls	r1, r3
 8001194:	40d0      	lsrs	r0, r2
 8001196:	1e6b      	subs	r3, r5, #1
 8001198:	419d      	sbcs	r5, r3
 800119a:	4643      	mov	r3, r8
 800119c:	4301      	orrs	r1, r0
 800119e:	4329      	orrs	r1, r5
 80011a0:	40d3      	lsrs	r3, r2
 80011a2:	074a      	lsls	r2, r1, #29
 80011a4:	d100      	bne.n	80011a8 <__aeabi_ddiv+0x560>
 80011a6:	e755      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011a8:	220f      	movs	r2, #15
 80011aa:	400a      	ands	r2, r1
 80011ac:	2a04      	cmp	r2, #4
 80011ae:	d000      	beq.n	80011b2 <__aeabi_ddiv+0x56a>
 80011b0:	e74a      	b.n	8001048 <__aeabi_ddiv+0x400>
 80011b2:	e74f      	b.n	8001054 <__aeabi_ddiv+0x40c>
 80011b4:	0015      	movs	r5, r2
 80011b6:	4286      	cmp	r6, r0
 80011b8:	d000      	beq.n	80011bc <__aeabi_ddiv+0x574>
 80011ba:	e66d      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011bc:	9a00      	ldr	r2, [sp, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d000      	beq.n	80011c4 <__aeabi_ddiv+0x57c>
 80011c2:	e669      	b.n	8000e98 <__aeabi_ddiv+0x250>
 80011c4:	e66a      	b.n	8000e9c <__aeabi_ddiv+0x254>
 80011c6:	4b16      	ldr	r3, [pc, #88]	; (8001220 <__aeabi_ddiv+0x5d8>)
 80011c8:	445b      	add	r3, fp
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	dc00      	bgt.n	80011d0 <__aeabi_ddiv+0x588>
 80011ce:	e713      	b.n	8000ff8 <__aeabi_ddiv+0x3b0>
 80011d0:	2501      	movs	r5, #1
 80011d2:	2100      	movs	r1, #0
 80011d4:	44a8      	add	r8, r5
 80011d6:	e66a      	b.n	8000eae <__aeabi_ddiv+0x266>
 80011d8:	075d      	lsls	r5, r3, #29
 80011da:	025b      	lsls	r3, r3, #9
 80011dc:	0b1a      	lsrs	r2, r3, #12
 80011de:	08c9      	lsrs	r1, r1, #3
 80011e0:	2300      	movs	r3, #0
 80011e2:	430d      	orrs	r5, r1
 80011e4:	e587      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 80011e6:	9900      	ldr	r1, [sp, #0]
 80011e8:	3d02      	subs	r5, #2
 80011ea:	004a      	lsls	r2, r1, #1
 80011ec:	428a      	cmp	r2, r1
 80011ee:	41bf      	sbcs	r7, r7
 80011f0:	427f      	negs	r7, r7
 80011f2:	193f      	adds	r7, r7, r4
 80011f4:	19f6      	adds	r6, r6, r7
 80011f6:	9200      	str	r2, [sp, #0]
 80011f8:	e7dd      	b.n	80011b6 <__aeabi_ddiv+0x56e>
 80011fa:	2280      	movs	r2, #128	; 0x80
 80011fc:	4643      	mov	r3, r8
 80011fe:	0312      	lsls	r2, r2, #12
 8001200:	431a      	orrs	r2, r3
 8001202:	0312      	lsls	r2, r2, #12
 8001204:	4b03      	ldr	r3, [pc, #12]	; (8001214 <__aeabi_ddiv+0x5cc>)
 8001206:	0b12      	lsrs	r2, r2, #12
 8001208:	e575      	b.n	8000cf6 <__aeabi_ddiv+0xae>
 800120a:	9900      	ldr	r1, [sp, #0]
 800120c:	4299      	cmp	r1, r3
 800120e:	d3ea      	bcc.n	80011e6 <__aeabi_ddiv+0x59e>
 8001210:	0015      	movs	r5, r2
 8001212:	e7d3      	b.n	80011bc <__aeabi_ddiv+0x574>
 8001214:	000007ff 	.word	0x000007ff
 8001218:	0000043e 	.word	0x0000043e
 800121c:	0000041e 	.word	0x0000041e
 8001220:	000003ff 	.word	0x000003ff

08001224 <__eqdf2>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	464e      	mov	r6, r9
 8001228:	4645      	mov	r5, r8
 800122a:	46de      	mov	lr, fp
 800122c:	4657      	mov	r7, sl
 800122e:	4690      	mov	r8, r2
 8001230:	b5e0      	push	{r5, r6, r7, lr}
 8001232:	0017      	movs	r7, r2
 8001234:	031a      	lsls	r2, r3, #12
 8001236:	0b12      	lsrs	r2, r2, #12
 8001238:	0005      	movs	r5, r0
 800123a:	4684      	mov	ip, r0
 800123c:	4819      	ldr	r0, [pc, #100]	; (80012a4 <__eqdf2+0x80>)
 800123e:	030e      	lsls	r6, r1, #12
 8001240:	004c      	lsls	r4, r1, #1
 8001242:	4691      	mov	r9, r2
 8001244:	005a      	lsls	r2, r3, #1
 8001246:	0fdb      	lsrs	r3, r3, #31
 8001248:	469b      	mov	fp, r3
 800124a:	0b36      	lsrs	r6, r6, #12
 800124c:	0d64      	lsrs	r4, r4, #21
 800124e:	0fc9      	lsrs	r1, r1, #31
 8001250:	0d52      	lsrs	r2, r2, #21
 8001252:	4284      	cmp	r4, r0
 8001254:	d019      	beq.n	800128a <__eqdf2+0x66>
 8001256:	4282      	cmp	r2, r0
 8001258:	d010      	beq.n	800127c <__eqdf2+0x58>
 800125a:	2001      	movs	r0, #1
 800125c:	4294      	cmp	r4, r2
 800125e:	d10e      	bne.n	800127e <__eqdf2+0x5a>
 8001260:	454e      	cmp	r6, r9
 8001262:	d10c      	bne.n	800127e <__eqdf2+0x5a>
 8001264:	2001      	movs	r0, #1
 8001266:	45c4      	cmp	ip, r8
 8001268:	d109      	bne.n	800127e <__eqdf2+0x5a>
 800126a:	4559      	cmp	r1, fp
 800126c:	d017      	beq.n	800129e <__eqdf2+0x7a>
 800126e:	2c00      	cmp	r4, #0
 8001270:	d105      	bne.n	800127e <__eqdf2+0x5a>
 8001272:	0030      	movs	r0, r6
 8001274:	4328      	orrs	r0, r5
 8001276:	1e43      	subs	r3, r0, #1
 8001278:	4198      	sbcs	r0, r3
 800127a:	e000      	b.n	800127e <__eqdf2+0x5a>
 800127c:	2001      	movs	r0, #1
 800127e:	bcf0      	pop	{r4, r5, r6, r7}
 8001280:	46bb      	mov	fp, r7
 8001282:	46b2      	mov	sl, r6
 8001284:	46a9      	mov	r9, r5
 8001286:	46a0      	mov	r8, r4
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	0033      	movs	r3, r6
 800128c:	2001      	movs	r0, #1
 800128e:	432b      	orrs	r3, r5
 8001290:	d1f5      	bne.n	800127e <__eqdf2+0x5a>
 8001292:	42a2      	cmp	r2, r4
 8001294:	d1f3      	bne.n	800127e <__eqdf2+0x5a>
 8001296:	464b      	mov	r3, r9
 8001298:	433b      	orrs	r3, r7
 800129a:	d1f0      	bne.n	800127e <__eqdf2+0x5a>
 800129c:	e7e2      	b.n	8001264 <__eqdf2+0x40>
 800129e:	2000      	movs	r0, #0
 80012a0:	e7ed      	b.n	800127e <__eqdf2+0x5a>
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	000007ff 	.word	0x000007ff

080012a8 <__gedf2>:
 80012a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012aa:	4647      	mov	r7, r8
 80012ac:	46ce      	mov	lr, r9
 80012ae:	0004      	movs	r4, r0
 80012b0:	0018      	movs	r0, r3
 80012b2:	0016      	movs	r6, r2
 80012b4:	031b      	lsls	r3, r3, #12
 80012b6:	0b1b      	lsrs	r3, r3, #12
 80012b8:	4d2d      	ldr	r5, [pc, #180]	; (8001370 <__gedf2+0xc8>)
 80012ba:	004a      	lsls	r2, r1, #1
 80012bc:	4699      	mov	r9, r3
 80012be:	b580      	push	{r7, lr}
 80012c0:	0043      	lsls	r3, r0, #1
 80012c2:	030f      	lsls	r7, r1, #12
 80012c4:	46a4      	mov	ip, r4
 80012c6:	46b0      	mov	r8, r6
 80012c8:	0b3f      	lsrs	r7, r7, #12
 80012ca:	0d52      	lsrs	r2, r2, #21
 80012cc:	0fc9      	lsrs	r1, r1, #31
 80012ce:	0d5b      	lsrs	r3, r3, #21
 80012d0:	0fc0      	lsrs	r0, r0, #31
 80012d2:	42aa      	cmp	r2, r5
 80012d4:	d021      	beq.n	800131a <__gedf2+0x72>
 80012d6:	42ab      	cmp	r3, r5
 80012d8:	d013      	beq.n	8001302 <__gedf2+0x5a>
 80012da:	2a00      	cmp	r2, #0
 80012dc:	d122      	bne.n	8001324 <__gedf2+0x7c>
 80012de:	433c      	orrs	r4, r7
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d102      	bne.n	80012ea <__gedf2+0x42>
 80012e4:	464d      	mov	r5, r9
 80012e6:	432e      	orrs	r6, r5
 80012e8:	d022      	beq.n	8001330 <__gedf2+0x88>
 80012ea:	2c00      	cmp	r4, #0
 80012ec:	d010      	beq.n	8001310 <__gedf2+0x68>
 80012ee:	4281      	cmp	r1, r0
 80012f0:	d022      	beq.n	8001338 <__gedf2+0x90>
 80012f2:	2002      	movs	r0, #2
 80012f4:	3901      	subs	r1, #1
 80012f6:	4008      	ands	r0, r1
 80012f8:	3801      	subs	r0, #1
 80012fa:	bcc0      	pop	{r6, r7}
 80012fc:	46b9      	mov	r9, r7
 80012fe:	46b0      	mov	r8, r6
 8001300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001302:	464d      	mov	r5, r9
 8001304:	432e      	orrs	r6, r5
 8001306:	d129      	bne.n	800135c <__gedf2+0xb4>
 8001308:	2a00      	cmp	r2, #0
 800130a:	d1f0      	bne.n	80012ee <__gedf2+0x46>
 800130c:	433c      	orrs	r4, r7
 800130e:	d1ee      	bne.n	80012ee <__gedf2+0x46>
 8001310:	2800      	cmp	r0, #0
 8001312:	d1f2      	bne.n	80012fa <__gedf2+0x52>
 8001314:	2001      	movs	r0, #1
 8001316:	4240      	negs	r0, r0
 8001318:	e7ef      	b.n	80012fa <__gedf2+0x52>
 800131a:	003d      	movs	r5, r7
 800131c:	4325      	orrs	r5, r4
 800131e:	d11d      	bne.n	800135c <__gedf2+0xb4>
 8001320:	4293      	cmp	r3, r2
 8001322:	d0ee      	beq.n	8001302 <__gedf2+0x5a>
 8001324:	2b00      	cmp	r3, #0
 8001326:	d1e2      	bne.n	80012ee <__gedf2+0x46>
 8001328:	464c      	mov	r4, r9
 800132a:	4326      	orrs	r6, r4
 800132c:	d1df      	bne.n	80012ee <__gedf2+0x46>
 800132e:	e7e0      	b.n	80012f2 <__gedf2+0x4a>
 8001330:	2000      	movs	r0, #0
 8001332:	2c00      	cmp	r4, #0
 8001334:	d0e1      	beq.n	80012fa <__gedf2+0x52>
 8001336:	e7dc      	b.n	80012f2 <__gedf2+0x4a>
 8001338:	429a      	cmp	r2, r3
 800133a:	dc0a      	bgt.n	8001352 <__gedf2+0xaa>
 800133c:	dbe8      	blt.n	8001310 <__gedf2+0x68>
 800133e:	454f      	cmp	r7, r9
 8001340:	d8d7      	bhi.n	80012f2 <__gedf2+0x4a>
 8001342:	d00e      	beq.n	8001362 <__gedf2+0xba>
 8001344:	2000      	movs	r0, #0
 8001346:	454f      	cmp	r7, r9
 8001348:	d2d7      	bcs.n	80012fa <__gedf2+0x52>
 800134a:	2900      	cmp	r1, #0
 800134c:	d0e2      	beq.n	8001314 <__gedf2+0x6c>
 800134e:	0008      	movs	r0, r1
 8001350:	e7d3      	b.n	80012fa <__gedf2+0x52>
 8001352:	4243      	negs	r3, r0
 8001354:	4158      	adcs	r0, r3
 8001356:	0040      	lsls	r0, r0, #1
 8001358:	3801      	subs	r0, #1
 800135a:	e7ce      	b.n	80012fa <__gedf2+0x52>
 800135c:	2002      	movs	r0, #2
 800135e:	4240      	negs	r0, r0
 8001360:	e7cb      	b.n	80012fa <__gedf2+0x52>
 8001362:	45c4      	cmp	ip, r8
 8001364:	d8c5      	bhi.n	80012f2 <__gedf2+0x4a>
 8001366:	2000      	movs	r0, #0
 8001368:	45c4      	cmp	ip, r8
 800136a:	d2c6      	bcs.n	80012fa <__gedf2+0x52>
 800136c:	e7ed      	b.n	800134a <__gedf2+0xa2>
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	000007ff 	.word	0x000007ff

08001374 <__ledf2>:
 8001374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001376:	4647      	mov	r7, r8
 8001378:	46ce      	mov	lr, r9
 800137a:	0004      	movs	r4, r0
 800137c:	0018      	movs	r0, r3
 800137e:	0016      	movs	r6, r2
 8001380:	031b      	lsls	r3, r3, #12
 8001382:	0b1b      	lsrs	r3, r3, #12
 8001384:	4d2c      	ldr	r5, [pc, #176]	; (8001438 <__ledf2+0xc4>)
 8001386:	004a      	lsls	r2, r1, #1
 8001388:	4699      	mov	r9, r3
 800138a:	b580      	push	{r7, lr}
 800138c:	0043      	lsls	r3, r0, #1
 800138e:	030f      	lsls	r7, r1, #12
 8001390:	46a4      	mov	ip, r4
 8001392:	46b0      	mov	r8, r6
 8001394:	0b3f      	lsrs	r7, r7, #12
 8001396:	0d52      	lsrs	r2, r2, #21
 8001398:	0fc9      	lsrs	r1, r1, #31
 800139a:	0d5b      	lsrs	r3, r3, #21
 800139c:	0fc0      	lsrs	r0, r0, #31
 800139e:	42aa      	cmp	r2, r5
 80013a0:	d00d      	beq.n	80013be <__ledf2+0x4a>
 80013a2:	42ab      	cmp	r3, r5
 80013a4:	d010      	beq.n	80013c8 <__ledf2+0x54>
 80013a6:	2a00      	cmp	r2, #0
 80013a8:	d127      	bne.n	80013fa <__ledf2+0x86>
 80013aa:	433c      	orrs	r4, r7
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d111      	bne.n	80013d4 <__ledf2+0x60>
 80013b0:	464d      	mov	r5, r9
 80013b2:	432e      	orrs	r6, r5
 80013b4:	d10e      	bne.n	80013d4 <__ledf2+0x60>
 80013b6:	2000      	movs	r0, #0
 80013b8:	2c00      	cmp	r4, #0
 80013ba:	d015      	beq.n	80013e8 <__ledf2+0x74>
 80013bc:	e00e      	b.n	80013dc <__ledf2+0x68>
 80013be:	003d      	movs	r5, r7
 80013c0:	4325      	orrs	r5, r4
 80013c2:	d110      	bne.n	80013e6 <__ledf2+0x72>
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d118      	bne.n	80013fa <__ledf2+0x86>
 80013c8:	464d      	mov	r5, r9
 80013ca:	432e      	orrs	r6, r5
 80013cc:	d10b      	bne.n	80013e6 <__ledf2+0x72>
 80013ce:	2a00      	cmp	r2, #0
 80013d0:	d102      	bne.n	80013d8 <__ledf2+0x64>
 80013d2:	433c      	orrs	r4, r7
 80013d4:	2c00      	cmp	r4, #0
 80013d6:	d00b      	beq.n	80013f0 <__ledf2+0x7c>
 80013d8:	4281      	cmp	r1, r0
 80013da:	d014      	beq.n	8001406 <__ledf2+0x92>
 80013dc:	2002      	movs	r0, #2
 80013de:	3901      	subs	r1, #1
 80013e0:	4008      	ands	r0, r1
 80013e2:	3801      	subs	r0, #1
 80013e4:	e000      	b.n	80013e8 <__ledf2+0x74>
 80013e6:	2002      	movs	r0, #2
 80013e8:	bcc0      	pop	{r6, r7}
 80013ea:	46b9      	mov	r9, r7
 80013ec:	46b0      	mov	r8, r6
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013f0:	2800      	cmp	r0, #0
 80013f2:	d1f9      	bne.n	80013e8 <__ledf2+0x74>
 80013f4:	2001      	movs	r0, #1
 80013f6:	4240      	negs	r0, r0
 80013f8:	e7f6      	b.n	80013e8 <__ledf2+0x74>
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ec      	bne.n	80013d8 <__ledf2+0x64>
 80013fe:	464c      	mov	r4, r9
 8001400:	4326      	orrs	r6, r4
 8001402:	d1e9      	bne.n	80013d8 <__ledf2+0x64>
 8001404:	e7ea      	b.n	80013dc <__ledf2+0x68>
 8001406:	429a      	cmp	r2, r3
 8001408:	dd04      	ble.n	8001414 <__ledf2+0xa0>
 800140a:	4243      	negs	r3, r0
 800140c:	4158      	adcs	r0, r3
 800140e:	0040      	lsls	r0, r0, #1
 8001410:	3801      	subs	r0, #1
 8001412:	e7e9      	b.n	80013e8 <__ledf2+0x74>
 8001414:	429a      	cmp	r2, r3
 8001416:	dbeb      	blt.n	80013f0 <__ledf2+0x7c>
 8001418:	454f      	cmp	r7, r9
 800141a:	d8df      	bhi.n	80013dc <__ledf2+0x68>
 800141c:	d006      	beq.n	800142c <__ledf2+0xb8>
 800141e:	2000      	movs	r0, #0
 8001420:	454f      	cmp	r7, r9
 8001422:	d2e1      	bcs.n	80013e8 <__ledf2+0x74>
 8001424:	2900      	cmp	r1, #0
 8001426:	d0e5      	beq.n	80013f4 <__ledf2+0x80>
 8001428:	0008      	movs	r0, r1
 800142a:	e7dd      	b.n	80013e8 <__ledf2+0x74>
 800142c:	45c4      	cmp	ip, r8
 800142e:	d8d5      	bhi.n	80013dc <__ledf2+0x68>
 8001430:	2000      	movs	r0, #0
 8001432:	45c4      	cmp	ip, r8
 8001434:	d2d8      	bcs.n	80013e8 <__ledf2+0x74>
 8001436:	e7f5      	b.n	8001424 <__ledf2+0xb0>
 8001438:	000007ff 	.word	0x000007ff

0800143c <__aeabi_dmul>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	4645      	mov	r5, r8
 8001440:	46de      	mov	lr, fp
 8001442:	4657      	mov	r7, sl
 8001444:	464e      	mov	r6, r9
 8001446:	b5e0      	push	{r5, r6, r7, lr}
 8001448:	001f      	movs	r7, r3
 800144a:	030b      	lsls	r3, r1, #12
 800144c:	0b1b      	lsrs	r3, r3, #12
 800144e:	469b      	mov	fp, r3
 8001450:	004d      	lsls	r5, r1, #1
 8001452:	0fcb      	lsrs	r3, r1, #31
 8001454:	0004      	movs	r4, r0
 8001456:	4691      	mov	r9, r2
 8001458:	4698      	mov	r8, r3
 800145a:	b087      	sub	sp, #28
 800145c:	0d6d      	lsrs	r5, r5, #21
 800145e:	d100      	bne.n	8001462 <__aeabi_dmul+0x26>
 8001460:	e1cd      	b.n	80017fe <__aeabi_dmul+0x3c2>
 8001462:	4bce      	ldr	r3, [pc, #824]	; (800179c <__aeabi_dmul+0x360>)
 8001464:	429d      	cmp	r5, r3
 8001466:	d100      	bne.n	800146a <__aeabi_dmul+0x2e>
 8001468:	e1e9      	b.n	800183e <__aeabi_dmul+0x402>
 800146a:	465a      	mov	r2, fp
 800146c:	0f43      	lsrs	r3, r0, #29
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	4313      	orrs	r3, r2
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	0412      	lsls	r2, r2, #16
 8001476:	431a      	orrs	r2, r3
 8001478:	00c3      	lsls	r3, r0, #3
 800147a:	469a      	mov	sl, r3
 800147c:	4bc8      	ldr	r3, [pc, #800]	; (80017a0 <__aeabi_dmul+0x364>)
 800147e:	4693      	mov	fp, r2
 8001480:	469c      	mov	ip, r3
 8001482:	2300      	movs	r3, #0
 8001484:	2600      	movs	r6, #0
 8001486:	4465      	add	r5, ip
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	033c      	lsls	r4, r7, #12
 800148c:	007b      	lsls	r3, r7, #1
 800148e:	4648      	mov	r0, r9
 8001490:	0b24      	lsrs	r4, r4, #12
 8001492:	0d5b      	lsrs	r3, r3, #21
 8001494:	0fff      	lsrs	r7, r7, #31
 8001496:	2b00      	cmp	r3, #0
 8001498:	d100      	bne.n	800149c <__aeabi_dmul+0x60>
 800149a:	e189      	b.n	80017b0 <__aeabi_dmul+0x374>
 800149c:	4abf      	ldr	r2, [pc, #764]	; (800179c <__aeabi_dmul+0x360>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d019      	beq.n	80014d6 <__aeabi_dmul+0x9a>
 80014a2:	0f42      	lsrs	r2, r0, #29
 80014a4:	00e4      	lsls	r4, r4, #3
 80014a6:	4322      	orrs	r2, r4
 80014a8:	2480      	movs	r4, #128	; 0x80
 80014aa:	0424      	lsls	r4, r4, #16
 80014ac:	4314      	orrs	r4, r2
 80014ae:	4abc      	ldr	r2, [pc, #752]	; (80017a0 <__aeabi_dmul+0x364>)
 80014b0:	2100      	movs	r1, #0
 80014b2:	4694      	mov	ip, r2
 80014b4:	4642      	mov	r2, r8
 80014b6:	4463      	add	r3, ip
 80014b8:	195b      	adds	r3, r3, r5
 80014ba:	9301      	str	r3, [sp, #4]
 80014bc:	9b01      	ldr	r3, [sp, #4]
 80014be:	407a      	eors	r2, r7
 80014c0:	3301      	adds	r3, #1
 80014c2:	00c0      	lsls	r0, r0, #3
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	9302      	str	r3, [sp, #8]
 80014c8:	2e0a      	cmp	r6, #10
 80014ca:	dd1c      	ble.n	8001506 <__aeabi_dmul+0xca>
 80014cc:	003a      	movs	r2, r7
 80014ce:	2e0b      	cmp	r6, #11
 80014d0:	d05e      	beq.n	8001590 <__aeabi_dmul+0x154>
 80014d2:	4647      	mov	r7, r8
 80014d4:	e056      	b.n	8001584 <__aeabi_dmul+0x148>
 80014d6:	4649      	mov	r1, r9
 80014d8:	4bb0      	ldr	r3, [pc, #704]	; (800179c <__aeabi_dmul+0x360>)
 80014da:	4321      	orrs	r1, r4
 80014dc:	18eb      	adds	r3, r5, r3
 80014de:	9301      	str	r3, [sp, #4]
 80014e0:	2900      	cmp	r1, #0
 80014e2:	d12a      	bne.n	800153a <__aeabi_dmul+0xfe>
 80014e4:	2080      	movs	r0, #128	; 0x80
 80014e6:	2202      	movs	r2, #2
 80014e8:	0100      	lsls	r0, r0, #4
 80014ea:	002b      	movs	r3, r5
 80014ec:	4684      	mov	ip, r0
 80014ee:	4316      	orrs	r6, r2
 80014f0:	4642      	mov	r2, r8
 80014f2:	4463      	add	r3, ip
 80014f4:	407a      	eors	r2, r7
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2e0a      	cmp	r6, #10
 80014fc:	dd00      	ble.n	8001500 <__aeabi_dmul+0xc4>
 80014fe:	e231      	b.n	8001964 <__aeabi_dmul+0x528>
 8001500:	2000      	movs	r0, #0
 8001502:	2400      	movs	r4, #0
 8001504:	2102      	movs	r1, #2
 8001506:	2e02      	cmp	r6, #2
 8001508:	dc26      	bgt.n	8001558 <__aeabi_dmul+0x11c>
 800150a:	3e01      	subs	r6, #1
 800150c:	2e01      	cmp	r6, #1
 800150e:	d852      	bhi.n	80015b6 <__aeabi_dmul+0x17a>
 8001510:	2902      	cmp	r1, #2
 8001512:	d04c      	beq.n	80015ae <__aeabi_dmul+0x172>
 8001514:	2901      	cmp	r1, #1
 8001516:	d000      	beq.n	800151a <__aeabi_dmul+0xde>
 8001518:	e118      	b.n	800174c <__aeabi_dmul+0x310>
 800151a:	2300      	movs	r3, #0
 800151c:	2400      	movs	r4, #0
 800151e:	2500      	movs	r5, #0
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	4323      	orrs	r3, r4
 8001524:	07d2      	lsls	r2, r2, #31
 8001526:	4313      	orrs	r3, r2
 8001528:	0028      	movs	r0, r5
 800152a:	0019      	movs	r1, r3
 800152c:	b007      	add	sp, #28
 800152e:	bcf0      	pop	{r4, r5, r6, r7}
 8001530:	46bb      	mov	fp, r7
 8001532:	46b2      	mov	sl, r6
 8001534:	46a9      	mov	r9, r5
 8001536:	46a0      	mov	r8, r4
 8001538:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800153a:	2180      	movs	r1, #128	; 0x80
 800153c:	2203      	movs	r2, #3
 800153e:	0109      	lsls	r1, r1, #4
 8001540:	002b      	movs	r3, r5
 8001542:	468c      	mov	ip, r1
 8001544:	4316      	orrs	r6, r2
 8001546:	4642      	mov	r2, r8
 8001548:	4463      	add	r3, ip
 800154a:	407a      	eors	r2, r7
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	2e0a      	cmp	r6, #10
 8001552:	dd00      	ble.n	8001556 <__aeabi_dmul+0x11a>
 8001554:	e228      	b.n	80019a8 <__aeabi_dmul+0x56c>
 8001556:	2103      	movs	r1, #3
 8001558:	2501      	movs	r5, #1
 800155a:	40b5      	lsls	r5, r6
 800155c:	46ac      	mov	ip, r5
 800155e:	26a6      	movs	r6, #166	; 0xa6
 8001560:	4663      	mov	r3, ip
 8001562:	00f6      	lsls	r6, r6, #3
 8001564:	4035      	ands	r5, r6
 8001566:	4233      	tst	r3, r6
 8001568:	d10b      	bne.n	8001582 <__aeabi_dmul+0x146>
 800156a:	2690      	movs	r6, #144	; 0x90
 800156c:	00b6      	lsls	r6, r6, #2
 800156e:	4233      	tst	r3, r6
 8001570:	d118      	bne.n	80015a4 <__aeabi_dmul+0x168>
 8001572:	3eb9      	subs	r6, #185	; 0xb9
 8001574:	3eff      	subs	r6, #255	; 0xff
 8001576:	421e      	tst	r6, r3
 8001578:	d01d      	beq.n	80015b6 <__aeabi_dmul+0x17a>
 800157a:	46a3      	mov	fp, r4
 800157c:	4682      	mov	sl, r0
 800157e:	9100      	str	r1, [sp, #0]
 8001580:	e000      	b.n	8001584 <__aeabi_dmul+0x148>
 8001582:	0017      	movs	r7, r2
 8001584:	9900      	ldr	r1, [sp, #0]
 8001586:	003a      	movs	r2, r7
 8001588:	2902      	cmp	r1, #2
 800158a:	d010      	beq.n	80015ae <__aeabi_dmul+0x172>
 800158c:	465c      	mov	r4, fp
 800158e:	4650      	mov	r0, sl
 8001590:	2903      	cmp	r1, #3
 8001592:	d1bf      	bne.n	8001514 <__aeabi_dmul+0xd8>
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	031b      	lsls	r3, r3, #12
 8001598:	431c      	orrs	r4, r3
 800159a:	0324      	lsls	r4, r4, #12
 800159c:	0005      	movs	r5, r0
 800159e:	4b7f      	ldr	r3, [pc, #508]	; (800179c <__aeabi_dmul+0x360>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e7bd      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015a4:	2480      	movs	r4, #128	; 0x80
 80015a6:	2200      	movs	r2, #0
 80015a8:	4b7c      	ldr	r3, [pc, #496]	; (800179c <__aeabi_dmul+0x360>)
 80015aa:	0324      	lsls	r4, r4, #12
 80015ac:	e7b8      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015ae:	2400      	movs	r4, #0
 80015b0:	2500      	movs	r5, #0
 80015b2:	4b7a      	ldr	r3, [pc, #488]	; (800179c <__aeabi_dmul+0x360>)
 80015b4:	e7b4      	b.n	8001520 <__aeabi_dmul+0xe4>
 80015b6:	4653      	mov	r3, sl
 80015b8:	041e      	lsls	r6, r3, #16
 80015ba:	0c36      	lsrs	r6, r6, #16
 80015bc:	0c1f      	lsrs	r7, r3, #16
 80015be:	0033      	movs	r3, r6
 80015c0:	0c01      	lsrs	r1, r0, #16
 80015c2:	0400      	lsls	r0, r0, #16
 80015c4:	0c00      	lsrs	r0, r0, #16
 80015c6:	4343      	muls	r3, r0
 80015c8:	4698      	mov	r8, r3
 80015ca:	0003      	movs	r3, r0
 80015cc:	437b      	muls	r3, r7
 80015ce:	4699      	mov	r9, r3
 80015d0:	0033      	movs	r3, r6
 80015d2:	434b      	muls	r3, r1
 80015d4:	469c      	mov	ip, r3
 80015d6:	4643      	mov	r3, r8
 80015d8:	000d      	movs	r5, r1
 80015da:	0c1b      	lsrs	r3, r3, #16
 80015dc:	469a      	mov	sl, r3
 80015de:	437d      	muls	r5, r7
 80015e0:	44cc      	add	ip, r9
 80015e2:	44d4      	add	ip, sl
 80015e4:	9500      	str	r5, [sp, #0]
 80015e6:	45e1      	cmp	r9, ip
 80015e8:	d904      	bls.n	80015f4 <__aeabi_dmul+0x1b8>
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	025b      	lsls	r3, r3, #9
 80015ee:	4699      	mov	r9, r3
 80015f0:	444d      	add	r5, r9
 80015f2:	9500      	str	r5, [sp, #0]
 80015f4:	4663      	mov	r3, ip
 80015f6:	0c1b      	lsrs	r3, r3, #16
 80015f8:	001d      	movs	r5, r3
 80015fa:	4663      	mov	r3, ip
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	469c      	mov	ip, r3
 8001600:	4643      	mov	r3, r8
 8001602:	041b      	lsls	r3, r3, #16
 8001604:	0c1b      	lsrs	r3, r3, #16
 8001606:	4698      	mov	r8, r3
 8001608:	4663      	mov	r3, ip
 800160a:	4443      	add	r3, r8
 800160c:	9303      	str	r3, [sp, #12]
 800160e:	0c23      	lsrs	r3, r4, #16
 8001610:	4698      	mov	r8, r3
 8001612:	0033      	movs	r3, r6
 8001614:	0424      	lsls	r4, r4, #16
 8001616:	0c24      	lsrs	r4, r4, #16
 8001618:	4363      	muls	r3, r4
 800161a:	469c      	mov	ip, r3
 800161c:	0023      	movs	r3, r4
 800161e:	437b      	muls	r3, r7
 8001620:	4699      	mov	r9, r3
 8001622:	4643      	mov	r3, r8
 8001624:	435e      	muls	r6, r3
 8001626:	435f      	muls	r7, r3
 8001628:	444e      	add	r6, r9
 800162a:	4663      	mov	r3, ip
 800162c:	46b2      	mov	sl, r6
 800162e:	0c1e      	lsrs	r6, r3, #16
 8001630:	4456      	add	r6, sl
 8001632:	45b1      	cmp	r9, r6
 8001634:	d903      	bls.n	800163e <__aeabi_dmul+0x202>
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	025b      	lsls	r3, r3, #9
 800163a:	4699      	mov	r9, r3
 800163c:	444f      	add	r7, r9
 800163e:	0c33      	lsrs	r3, r6, #16
 8001640:	4699      	mov	r9, r3
 8001642:	003b      	movs	r3, r7
 8001644:	444b      	add	r3, r9
 8001646:	9305      	str	r3, [sp, #20]
 8001648:	4663      	mov	r3, ip
 800164a:	46ac      	mov	ip, r5
 800164c:	041f      	lsls	r7, r3, #16
 800164e:	0c3f      	lsrs	r7, r7, #16
 8001650:	0436      	lsls	r6, r6, #16
 8001652:	19f6      	adds	r6, r6, r7
 8001654:	44b4      	add	ip, r6
 8001656:	4663      	mov	r3, ip
 8001658:	9304      	str	r3, [sp, #16]
 800165a:	465b      	mov	r3, fp
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	469c      	mov	ip, r3
 8001660:	465b      	mov	r3, fp
 8001662:	041f      	lsls	r7, r3, #16
 8001664:	0c3f      	lsrs	r7, r7, #16
 8001666:	003b      	movs	r3, r7
 8001668:	4343      	muls	r3, r0
 800166a:	4699      	mov	r9, r3
 800166c:	4663      	mov	r3, ip
 800166e:	4343      	muls	r3, r0
 8001670:	469a      	mov	sl, r3
 8001672:	464b      	mov	r3, r9
 8001674:	4660      	mov	r0, ip
 8001676:	0c1b      	lsrs	r3, r3, #16
 8001678:	469b      	mov	fp, r3
 800167a:	4348      	muls	r0, r1
 800167c:	4379      	muls	r1, r7
 800167e:	4451      	add	r1, sl
 8001680:	4459      	add	r1, fp
 8001682:	458a      	cmp	sl, r1
 8001684:	d903      	bls.n	800168e <__aeabi_dmul+0x252>
 8001686:	2380      	movs	r3, #128	; 0x80
 8001688:	025b      	lsls	r3, r3, #9
 800168a:	469a      	mov	sl, r3
 800168c:	4450      	add	r0, sl
 800168e:	0c0b      	lsrs	r3, r1, #16
 8001690:	469a      	mov	sl, r3
 8001692:	464b      	mov	r3, r9
 8001694:	041b      	lsls	r3, r3, #16
 8001696:	0c1b      	lsrs	r3, r3, #16
 8001698:	4699      	mov	r9, r3
 800169a:	003b      	movs	r3, r7
 800169c:	4363      	muls	r3, r4
 800169e:	0409      	lsls	r1, r1, #16
 80016a0:	4645      	mov	r5, r8
 80016a2:	4449      	add	r1, r9
 80016a4:	4699      	mov	r9, r3
 80016a6:	4663      	mov	r3, ip
 80016a8:	435c      	muls	r4, r3
 80016aa:	436b      	muls	r3, r5
 80016ac:	469c      	mov	ip, r3
 80016ae:	464b      	mov	r3, r9
 80016b0:	0c1b      	lsrs	r3, r3, #16
 80016b2:	4698      	mov	r8, r3
 80016b4:	436f      	muls	r7, r5
 80016b6:	193f      	adds	r7, r7, r4
 80016b8:	4447      	add	r7, r8
 80016ba:	4450      	add	r0, sl
 80016bc:	42bc      	cmp	r4, r7
 80016be:	d903      	bls.n	80016c8 <__aeabi_dmul+0x28c>
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4698      	mov	r8, r3
 80016c6:	44c4      	add	ip, r8
 80016c8:	9b04      	ldr	r3, [sp, #16]
 80016ca:	9d00      	ldr	r5, [sp, #0]
 80016cc:	4698      	mov	r8, r3
 80016ce:	4445      	add	r5, r8
 80016d0:	42b5      	cmp	r5, r6
 80016d2:	41b6      	sbcs	r6, r6
 80016d4:	4273      	negs	r3, r6
 80016d6:	4698      	mov	r8, r3
 80016d8:	464b      	mov	r3, r9
 80016da:	041e      	lsls	r6, r3, #16
 80016dc:	9b05      	ldr	r3, [sp, #20]
 80016de:	043c      	lsls	r4, r7, #16
 80016e0:	4699      	mov	r9, r3
 80016e2:	0c36      	lsrs	r6, r6, #16
 80016e4:	19a4      	adds	r4, r4, r6
 80016e6:	444c      	add	r4, r9
 80016e8:	46a1      	mov	r9, r4
 80016ea:	4683      	mov	fp, r0
 80016ec:	186e      	adds	r6, r5, r1
 80016ee:	44c1      	add	r9, r8
 80016f0:	428e      	cmp	r6, r1
 80016f2:	4189      	sbcs	r1, r1
 80016f4:	44cb      	add	fp, r9
 80016f6:	465d      	mov	r5, fp
 80016f8:	4249      	negs	r1, r1
 80016fa:	186d      	adds	r5, r5, r1
 80016fc:	429c      	cmp	r4, r3
 80016fe:	41a4      	sbcs	r4, r4
 8001700:	45c1      	cmp	r9, r8
 8001702:	419b      	sbcs	r3, r3
 8001704:	4583      	cmp	fp, r0
 8001706:	4180      	sbcs	r0, r0
 8001708:	428d      	cmp	r5, r1
 800170a:	4189      	sbcs	r1, r1
 800170c:	425b      	negs	r3, r3
 800170e:	4264      	negs	r4, r4
 8001710:	431c      	orrs	r4, r3
 8001712:	4240      	negs	r0, r0
 8001714:	9b03      	ldr	r3, [sp, #12]
 8001716:	4249      	negs	r1, r1
 8001718:	4301      	orrs	r1, r0
 800171a:	0270      	lsls	r0, r6, #9
 800171c:	0c3f      	lsrs	r7, r7, #16
 800171e:	4318      	orrs	r0, r3
 8001720:	19e4      	adds	r4, r4, r7
 8001722:	1e47      	subs	r7, r0, #1
 8001724:	41b8      	sbcs	r0, r7
 8001726:	1864      	adds	r4, r4, r1
 8001728:	4464      	add	r4, ip
 800172a:	0df6      	lsrs	r6, r6, #23
 800172c:	0261      	lsls	r1, r4, #9
 800172e:	4330      	orrs	r0, r6
 8001730:	0dec      	lsrs	r4, r5, #23
 8001732:	026e      	lsls	r6, r5, #9
 8001734:	430c      	orrs	r4, r1
 8001736:	4330      	orrs	r0, r6
 8001738:	01c9      	lsls	r1, r1, #7
 800173a:	d400      	bmi.n	800173e <__aeabi_dmul+0x302>
 800173c:	e0f1      	b.n	8001922 <__aeabi_dmul+0x4e6>
 800173e:	2101      	movs	r1, #1
 8001740:	0843      	lsrs	r3, r0, #1
 8001742:	4001      	ands	r1, r0
 8001744:	430b      	orrs	r3, r1
 8001746:	07e0      	lsls	r0, r4, #31
 8001748:	4318      	orrs	r0, r3
 800174a:	0864      	lsrs	r4, r4, #1
 800174c:	4915      	ldr	r1, [pc, #84]	; (80017a4 <__aeabi_dmul+0x368>)
 800174e:	9b02      	ldr	r3, [sp, #8]
 8001750:	468c      	mov	ip, r1
 8001752:	4463      	add	r3, ip
 8001754:	2b00      	cmp	r3, #0
 8001756:	dc00      	bgt.n	800175a <__aeabi_dmul+0x31e>
 8001758:	e097      	b.n	800188a <__aeabi_dmul+0x44e>
 800175a:	0741      	lsls	r1, r0, #29
 800175c:	d009      	beq.n	8001772 <__aeabi_dmul+0x336>
 800175e:	210f      	movs	r1, #15
 8001760:	4001      	ands	r1, r0
 8001762:	2904      	cmp	r1, #4
 8001764:	d005      	beq.n	8001772 <__aeabi_dmul+0x336>
 8001766:	1d01      	adds	r1, r0, #4
 8001768:	4281      	cmp	r1, r0
 800176a:	4180      	sbcs	r0, r0
 800176c:	4240      	negs	r0, r0
 800176e:	1824      	adds	r4, r4, r0
 8001770:	0008      	movs	r0, r1
 8001772:	01e1      	lsls	r1, r4, #7
 8001774:	d506      	bpl.n	8001784 <__aeabi_dmul+0x348>
 8001776:	2180      	movs	r1, #128	; 0x80
 8001778:	00c9      	lsls	r1, r1, #3
 800177a:	468c      	mov	ip, r1
 800177c:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <__aeabi_dmul+0x36c>)
 800177e:	401c      	ands	r4, r3
 8001780:	9b02      	ldr	r3, [sp, #8]
 8001782:	4463      	add	r3, ip
 8001784:	4909      	ldr	r1, [pc, #36]	; (80017ac <__aeabi_dmul+0x370>)
 8001786:	428b      	cmp	r3, r1
 8001788:	dd00      	ble.n	800178c <__aeabi_dmul+0x350>
 800178a:	e710      	b.n	80015ae <__aeabi_dmul+0x172>
 800178c:	0761      	lsls	r1, r4, #29
 800178e:	08c5      	lsrs	r5, r0, #3
 8001790:	0264      	lsls	r4, r4, #9
 8001792:	055b      	lsls	r3, r3, #21
 8001794:	430d      	orrs	r5, r1
 8001796:	0b24      	lsrs	r4, r4, #12
 8001798:	0d5b      	lsrs	r3, r3, #21
 800179a:	e6c1      	b.n	8001520 <__aeabi_dmul+0xe4>
 800179c:	000007ff 	.word	0x000007ff
 80017a0:	fffffc01 	.word	0xfffffc01
 80017a4:	000003ff 	.word	0x000003ff
 80017a8:	feffffff 	.word	0xfeffffff
 80017ac:	000007fe 	.word	0x000007fe
 80017b0:	464b      	mov	r3, r9
 80017b2:	4323      	orrs	r3, r4
 80017b4:	d059      	beq.n	800186a <__aeabi_dmul+0x42e>
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d100      	bne.n	80017bc <__aeabi_dmul+0x380>
 80017ba:	e0a3      	b.n	8001904 <__aeabi_dmul+0x4c8>
 80017bc:	0020      	movs	r0, r4
 80017be:	f000 fdb1 	bl	8002324 <__clzsi2>
 80017c2:	0001      	movs	r1, r0
 80017c4:	0003      	movs	r3, r0
 80017c6:	390b      	subs	r1, #11
 80017c8:	221d      	movs	r2, #29
 80017ca:	1a52      	subs	r2, r2, r1
 80017cc:	4649      	mov	r1, r9
 80017ce:	0018      	movs	r0, r3
 80017d0:	40d1      	lsrs	r1, r2
 80017d2:	464a      	mov	r2, r9
 80017d4:	3808      	subs	r0, #8
 80017d6:	4082      	lsls	r2, r0
 80017d8:	4084      	lsls	r4, r0
 80017da:	0010      	movs	r0, r2
 80017dc:	430c      	orrs	r4, r1
 80017de:	4a74      	ldr	r2, [pc, #464]	; (80019b0 <__aeabi_dmul+0x574>)
 80017e0:	1aeb      	subs	r3, r5, r3
 80017e2:	4694      	mov	ip, r2
 80017e4:	4642      	mov	r2, r8
 80017e6:	4463      	add	r3, ip
 80017e8:	9301      	str	r3, [sp, #4]
 80017ea:	9b01      	ldr	r3, [sp, #4]
 80017ec:	407a      	eors	r2, r7
 80017ee:	3301      	adds	r3, #1
 80017f0:	2100      	movs	r1, #0
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	9302      	str	r3, [sp, #8]
 80017f6:	2e0a      	cmp	r6, #10
 80017f8:	dd00      	ble.n	80017fc <__aeabi_dmul+0x3c0>
 80017fa:	e667      	b.n	80014cc <__aeabi_dmul+0x90>
 80017fc:	e683      	b.n	8001506 <__aeabi_dmul+0xca>
 80017fe:	465b      	mov	r3, fp
 8001800:	4303      	orrs	r3, r0
 8001802:	469a      	mov	sl, r3
 8001804:	d02a      	beq.n	800185c <__aeabi_dmul+0x420>
 8001806:	465b      	mov	r3, fp
 8001808:	2b00      	cmp	r3, #0
 800180a:	d06d      	beq.n	80018e8 <__aeabi_dmul+0x4ac>
 800180c:	4658      	mov	r0, fp
 800180e:	f000 fd89 	bl	8002324 <__clzsi2>
 8001812:	0001      	movs	r1, r0
 8001814:	0003      	movs	r3, r0
 8001816:	390b      	subs	r1, #11
 8001818:	221d      	movs	r2, #29
 800181a:	1a52      	subs	r2, r2, r1
 800181c:	0021      	movs	r1, r4
 800181e:	0018      	movs	r0, r3
 8001820:	465d      	mov	r5, fp
 8001822:	40d1      	lsrs	r1, r2
 8001824:	3808      	subs	r0, #8
 8001826:	4085      	lsls	r5, r0
 8001828:	000a      	movs	r2, r1
 800182a:	4084      	lsls	r4, r0
 800182c:	432a      	orrs	r2, r5
 800182e:	4693      	mov	fp, r2
 8001830:	46a2      	mov	sl, r4
 8001832:	4d5f      	ldr	r5, [pc, #380]	; (80019b0 <__aeabi_dmul+0x574>)
 8001834:	2600      	movs	r6, #0
 8001836:	1aed      	subs	r5, r5, r3
 8001838:	2300      	movs	r3, #0
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	e625      	b.n	800148a <__aeabi_dmul+0x4e>
 800183e:	465b      	mov	r3, fp
 8001840:	4303      	orrs	r3, r0
 8001842:	469a      	mov	sl, r3
 8001844:	d105      	bne.n	8001852 <__aeabi_dmul+0x416>
 8001846:	2300      	movs	r3, #0
 8001848:	469b      	mov	fp, r3
 800184a:	3302      	adds	r3, #2
 800184c:	2608      	movs	r6, #8
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	e61b      	b.n	800148a <__aeabi_dmul+0x4e>
 8001852:	2303      	movs	r3, #3
 8001854:	4682      	mov	sl, r0
 8001856:	260c      	movs	r6, #12
 8001858:	9300      	str	r3, [sp, #0]
 800185a:	e616      	b.n	800148a <__aeabi_dmul+0x4e>
 800185c:	2300      	movs	r3, #0
 800185e:	469b      	mov	fp, r3
 8001860:	3301      	adds	r3, #1
 8001862:	2604      	movs	r6, #4
 8001864:	2500      	movs	r5, #0
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	e60f      	b.n	800148a <__aeabi_dmul+0x4e>
 800186a:	4642      	mov	r2, r8
 800186c:	3301      	adds	r3, #1
 800186e:	9501      	str	r5, [sp, #4]
 8001870:	431e      	orrs	r6, r3
 8001872:	9b01      	ldr	r3, [sp, #4]
 8001874:	407a      	eors	r2, r7
 8001876:	3301      	adds	r3, #1
 8001878:	2400      	movs	r4, #0
 800187a:	2000      	movs	r0, #0
 800187c:	2101      	movs	r1, #1
 800187e:	b2d2      	uxtb	r2, r2
 8001880:	9302      	str	r3, [sp, #8]
 8001882:	2e0a      	cmp	r6, #10
 8001884:	dd00      	ble.n	8001888 <__aeabi_dmul+0x44c>
 8001886:	e621      	b.n	80014cc <__aeabi_dmul+0x90>
 8001888:	e63d      	b.n	8001506 <__aeabi_dmul+0xca>
 800188a:	2101      	movs	r1, #1
 800188c:	1ac9      	subs	r1, r1, r3
 800188e:	2938      	cmp	r1, #56	; 0x38
 8001890:	dd00      	ble.n	8001894 <__aeabi_dmul+0x458>
 8001892:	e642      	b.n	800151a <__aeabi_dmul+0xde>
 8001894:	291f      	cmp	r1, #31
 8001896:	dd47      	ble.n	8001928 <__aeabi_dmul+0x4ec>
 8001898:	261f      	movs	r6, #31
 800189a:	0025      	movs	r5, r4
 800189c:	4276      	negs	r6, r6
 800189e:	1af3      	subs	r3, r6, r3
 80018a0:	40dd      	lsrs	r5, r3
 80018a2:	002b      	movs	r3, r5
 80018a4:	2920      	cmp	r1, #32
 80018a6:	d005      	beq.n	80018b4 <__aeabi_dmul+0x478>
 80018a8:	4942      	ldr	r1, [pc, #264]	; (80019b4 <__aeabi_dmul+0x578>)
 80018aa:	9d02      	ldr	r5, [sp, #8]
 80018ac:	468c      	mov	ip, r1
 80018ae:	4465      	add	r5, ip
 80018b0:	40ac      	lsls	r4, r5
 80018b2:	4320      	orrs	r0, r4
 80018b4:	1e41      	subs	r1, r0, #1
 80018b6:	4188      	sbcs	r0, r1
 80018b8:	4318      	orrs	r0, r3
 80018ba:	2307      	movs	r3, #7
 80018bc:	001d      	movs	r5, r3
 80018be:	2400      	movs	r4, #0
 80018c0:	4005      	ands	r5, r0
 80018c2:	4203      	tst	r3, r0
 80018c4:	d04a      	beq.n	800195c <__aeabi_dmul+0x520>
 80018c6:	230f      	movs	r3, #15
 80018c8:	2400      	movs	r4, #0
 80018ca:	4003      	ands	r3, r0
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d042      	beq.n	8001956 <__aeabi_dmul+0x51a>
 80018d0:	1d03      	adds	r3, r0, #4
 80018d2:	4283      	cmp	r3, r0
 80018d4:	4180      	sbcs	r0, r0
 80018d6:	4240      	negs	r0, r0
 80018d8:	1824      	adds	r4, r4, r0
 80018da:	0018      	movs	r0, r3
 80018dc:	0223      	lsls	r3, r4, #8
 80018de:	d53a      	bpl.n	8001956 <__aeabi_dmul+0x51a>
 80018e0:	2301      	movs	r3, #1
 80018e2:	2400      	movs	r4, #0
 80018e4:	2500      	movs	r5, #0
 80018e6:	e61b      	b.n	8001520 <__aeabi_dmul+0xe4>
 80018e8:	f000 fd1c 	bl	8002324 <__clzsi2>
 80018ec:	0001      	movs	r1, r0
 80018ee:	0003      	movs	r3, r0
 80018f0:	3115      	adds	r1, #21
 80018f2:	3320      	adds	r3, #32
 80018f4:	291c      	cmp	r1, #28
 80018f6:	dd8f      	ble.n	8001818 <__aeabi_dmul+0x3dc>
 80018f8:	3808      	subs	r0, #8
 80018fa:	2200      	movs	r2, #0
 80018fc:	4084      	lsls	r4, r0
 80018fe:	4692      	mov	sl, r2
 8001900:	46a3      	mov	fp, r4
 8001902:	e796      	b.n	8001832 <__aeabi_dmul+0x3f6>
 8001904:	f000 fd0e 	bl	8002324 <__clzsi2>
 8001908:	0001      	movs	r1, r0
 800190a:	0003      	movs	r3, r0
 800190c:	3115      	adds	r1, #21
 800190e:	3320      	adds	r3, #32
 8001910:	291c      	cmp	r1, #28
 8001912:	dc00      	bgt.n	8001916 <__aeabi_dmul+0x4da>
 8001914:	e758      	b.n	80017c8 <__aeabi_dmul+0x38c>
 8001916:	0002      	movs	r2, r0
 8001918:	464c      	mov	r4, r9
 800191a:	3a08      	subs	r2, #8
 800191c:	2000      	movs	r0, #0
 800191e:	4094      	lsls	r4, r2
 8001920:	e75d      	b.n	80017de <__aeabi_dmul+0x3a2>
 8001922:	9b01      	ldr	r3, [sp, #4]
 8001924:	9302      	str	r3, [sp, #8]
 8001926:	e711      	b.n	800174c <__aeabi_dmul+0x310>
 8001928:	4b23      	ldr	r3, [pc, #140]	; (80019b8 <__aeabi_dmul+0x57c>)
 800192a:	0026      	movs	r6, r4
 800192c:	469c      	mov	ip, r3
 800192e:	0003      	movs	r3, r0
 8001930:	9d02      	ldr	r5, [sp, #8]
 8001932:	40cb      	lsrs	r3, r1
 8001934:	4465      	add	r5, ip
 8001936:	40ae      	lsls	r6, r5
 8001938:	431e      	orrs	r6, r3
 800193a:	0003      	movs	r3, r0
 800193c:	40ab      	lsls	r3, r5
 800193e:	1e58      	subs	r0, r3, #1
 8001940:	4183      	sbcs	r3, r0
 8001942:	0030      	movs	r0, r6
 8001944:	4318      	orrs	r0, r3
 8001946:	40cc      	lsrs	r4, r1
 8001948:	0743      	lsls	r3, r0, #29
 800194a:	d0c7      	beq.n	80018dc <__aeabi_dmul+0x4a0>
 800194c:	230f      	movs	r3, #15
 800194e:	4003      	ands	r3, r0
 8001950:	2b04      	cmp	r3, #4
 8001952:	d1bd      	bne.n	80018d0 <__aeabi_dmul+0x494>
 8001954:	e7c2      	b.n	80018dc <__aeabi_dmul+0x4a0>
 8001956:	0765      	lsls	r5, r4, #29
 8001958:	0264      	lsls	r4, r4, #9
 800195a:	0b24      	lsrs	r4, r4, #12
 800195c:	08c0      	lsrs	r0, r0, #3
 800195e:	2300      	movs	r3, #0
 8001960:	4305      	orrs	r5, r0
 8001962:	e5dd      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001964:	2500      	movs	r5, #0
 8001966:	2302      	movs	r3, #2
 8001968:	2e0f      	cmp	r6, #15
 800196a:	d10c      	bne.n	8001986 <__aeabi_dmul+0x54a>
 800196c:	2480      	movs	r4, #128	; 0x80
 800196e:	465b      	mov	r3, fp
 8001970:	0324      	lsls	r4, r4, #12
 8001972:	4223      	tst	r3, r4
 8001974:	d00e      	beq.n	8001994 <__aeabi_dmul+0x558>
 8001976:	4221      	tst	r1, r4
 8001978:	d10c      	bne.n	8001994 <__aeabi_dmul+0x558>
 800197a:	430c      	orrs	r4, r1
 800197c:	0324      	lsls	r4, r4, #12
 800197e:	003a      	movs	r2, r7
 8001980:	4b0e      	ldr	r3, [pc, #56]	; (80019bc <__aeabi_dmul+0x580>)
 8001982:	0b24      	lsrs	r4, r4, #12
 8001984:	e5cc      	b.n	8001520 <__aeabi_dmul+0xe4>
 8001986:	2e0b      	cmp	r6, #11
 8001988:	d000      	beq.n	800198c <__aeabi_dmul+0x550>
 800198a:	e5a2      	b.n	80014d2 <__aeabi_dmul+0x96>
 800198c:	468b      	mov	fp, r1
 800198e:	46aa      	mov	sl, r5
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	e5f7      	b.n	8001584 <__aeabi_dmul+0x148>
 8001994:	2480      	movs	r4, #128	; 0x80
 8001996:	465b      	mov	r3, fp
 8001998:	0324      	lsls	r4, r4, #12
 800199a:	431c      	orrs	r4, r3
 800199c:	0324      	lsls	r4, r4, #12
 800199e:	4642      	mov	r2, r8
 80019a0:	4655      	mov	r5, sl
 80019a2:	4b06      	ldr	r3, [pc, #24]	; (80019bc <__aeabi_dmul+0x580>)
 80019a4:	0b24      	lsrs	r4, r4, #12
 80019a6:	e5bb      	b.n	8001520 <__aeabi_dmul+0xe4>
 80019a8:	464d      	mov	r5, r9
 80019aa:	0021      	movs	r1, r4
 80019ac:	2303      	movs	r3, #3
 80019ae:	e7db      	b.n	8001968 <__aeabi_dmul+0x52c>
 80019b0:	fffffc0d 	.word	0xfffffc0d
 80019b4:	0000043e 	.word	0x0000043e
 80019b8:	0000041e 	.word	0x0000041e
 80019bc:	000007ff 	.word	0x000007ff

080019c0 <__aeabi_dsub>:
 80019c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019c2:	4657      	mov	r7, sl
 80019c4:	464e      	mov	r6, r9
 80019c6:	4645      	mov	r5, r8
 80019c8:	46de      	mov	lr, fp
 80019ca:	b5e0      	push	{r5, r6, r7, lr}
 80019cc:	000d      	movs	r5, r1
 80019ce:	0004      	movs	r4, r0
 80019d0:	0019      	movs	r1, r3
 80019d2:	0010      	movs	r0, r2
 80019d4:	032b      	lsls	r3, r5, #12
 80019d6:	0a5b      	lsrs	r3, r3, #9
 80019d8:	0f62      	lsrs	r2, r4, #29
 80019da:	431a      	orrs	r2, r3
 80019dc:	00e3      	lsls	r3, r4, #3
 80019de:	030c      	lsls	r4, r1, #12
 80019e0:	0a64      	lsrs	r4, r4, #9
 80019e2:	0f47      	lsrs	r7, r0, #29
 80019e4:	4327      	orrs	r7, r4
 80019e6:	4cd0      	ldr	r4, [pc, #832]	; (8001d28 <__aeabi_dsub+0x368>)
 80019e8:	006e      	lsls	r6, r5, #1
 80019ea:	4691      	mov	r9, r2
 80019ec:	b083      	sub	sp, #12
 80019ee:	004a      	lsls	r2, r1, #1
 80019f0:	00c0      	lsls	r0, r0, #3
 80019f2:	4698      	mov	r8, r3
 80019f4:	46a2      	mov	sl, r4
 80019f6:	0d76      	lsrs	r6, r6, #21
 80019f8:	0fed      	lsrs	r5, r5, #31
 80019fa:	0d52      	lsrs	r2, r2, #21
 80019fc:	0fc9      	lsrs	r1, r1, #31
 80019fe:	9001      	str	r0, [sp, #4]
 8001a00:	42a2      	cmp	r2, r4
 8001a02:	d100      	bne.n	8001a06 <__aeabi_dsub+0x46>
 8001a04:	e0b9      	b.n	8001b7a <__aeabi_dsub+0x1ba>
 8001a06:	2401      	movs	r4, #1
 8001a08:	4061      	eors	r1, r4
 8001a0a:	468b      	mov	fp, r1
 8001a0c:	428d      	cmp	r5, r1
 8001a0e:	d100      	bne.n	8001a12 <__aeabi_dsub+0x52>
 8001a10:	e08d      	b.n	8001b2e <__aeabi_dsub+0x16e>
 8001a12:	1ab4      	subs	r4, r6, r2
 8001a14:	46a4      	mov	ip, r4
 8001a16:	2c00      	cmp	r4, #0
 8001a18:	dc00      	bgt.n	8001a1c <__aeabi_dsub+0x5c>
 8001a1a:	e0b7      	b.n	8001b8c <__aeabi_dsub+0x1cc>
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dsub+0x62>
 8001a20:	e0cb      	b.n	8001bba <__aeabi_dsub+0x1fa>
 8001a22:	4ac1      	ldr	r2, [pc, #772]	; (8001d28 <__aeabi_dsub+0x368>)
 8001a24:	4296      	cmp	r6, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dsub+0x6a>
 8001a28:	e186      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	0412      	lsls	r2, r2, #16
 8001a2e:	4317      	orrs	r7, r2
 8001a30:	4662      	mov	r2, ip
 8001a32:	2a38      	cmp	r2, #56	; 0x38
 8001a34:	dd00      	ble.n	8001a38 <__aeabi_dsub+0x78>
 8001a36:	e1a4      	b.n	8001d82 <__aeabi_dsub+0x3c2>
 8001a38:	2a1f      	cmp	r2, #31
 8001a3a:	dd00      	ble.n	8001a3e <__aeabi_dsub+0x7e>
 8001a3c:	e21d      	b.n	8001e7a <__aeabi_dsub+0x4ba>
 8001a3e:	4661      	mov	r1, ip
 8001a40:	2220      	movs	r2, #32
 8001a42:	003c      	movs	r4, r7
 8001a44:	1a52      	subs	r2, r2, r1
 8001a46:	0001      	movs	r1, r0
 8001a48:	4090      	lsls	r0, r2
 8001a4a:	4094      	lsls	r4, r2
 8001a4c:	1e42      	subs	r2, r0, #1
 8001a4e:	4190      	sbcs	r0, r2
 8001a50:	4662      	mov	r2, ip
 8001a52:	46a0      	mov	r8, r4
 8001a54:	4664      	mov	r4, ip
 8001a56:	40d7      	lsrs	r7, r2
 8001a58:	464a      	mov	r2, r9
 8001a5a:	40e1      	lsrs	r1, r4
 8001a5c:	4644      	mov	r4, r8
 8001a5e:	1bd2      	subs	r2, r2, r7
 8001a60:	4691      	mov	r9, r2
 8001a62:	430c      	orrs	r4, r1
 8001a64:	4304      	orrs	r4, r0
 8001a66:	1b1c      	subs	r4, r3, r4
 8001a68:	42a3      	cmp	r3, r4
 8001a6a:	4192      	sbcs	r2, r2
 8001a6c:	464b      	mov	r3, r9
 8001a6e:	4252      	negs	r2, r2
 8001a70:	1a9b      	subs	r3, r3, r2
 8001a72:	469a      	mov	sl, r3
 8001a74:	4653      	mov	r3, sl
 8001a76:	021b      	lsls	r3, r3, #8
 8001a78:	d400      	bmi.n	8001a7c <__aeabi_dsub+0xbc>
 8001a7a:	e12b      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001a7c:	4653      	mov	r3, sl
 8001a7e:	025a      	lsls	r2, r3, #9
 8001a80:	0a53      	lsrs	r3, r2, #9
 8001a82:	469a      	mov	sl, r3
 8001a84:	4653      	mov	r3, sl
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d100      	bne.n	8001a8c <__aeabi_dsub+0xcc>
 8001a8a:	e166      	b.n	8001d5a <__aeabi_dsub+0x39a>
 8001a8c:	4650      	mov	r0, sl
 8001a8e:	f000 fc49 	bl	8002324 <__clzsi2>
 8001a92:	0003      	movs	r3, r0
 8001a94:	3b08      	subs	r3, #8
 8001a96:	2220      	movs	r2, #32
 8001a98:	0020      	movs	r0, r4
 8001a9a:	1ad2      	subs	r2, r2, r3
 8001a9c:	4651      	mov	r1, sl
 8001a9e:	40d0      	lsrs	r0, r2
 8001aa0:	4099      	lsls	r1, r3
 8001aa2:	0002      	movs	r2, r0
 8001aa4:	409c      	lsls	r4, r3
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	429e      	cmp	r6, r3
 8001aaa:	dd00      	ble.n	8001aae <__aeabi_dsub+0xee>
 8001aac:	e164      	b.n	8001d78 <__aeabi_dsub+0x3b8>
 8001aae:	1b9b      	subs	r3, r3, r6
 8001ab0:	1c59      	adds	r1, r3, #1
 8001ab2:	291f      	cmp	r1, #31
 8001ab4:	dd00      	ble.n	8001ab8 <__aeabi_dsub+0xf8>
 8001ab6:	e0fe      	b.n	8001cb6 <__aeabi_dsub+0x2f6>
 8001ab8:	2320      	movs	r3, #32
 8001aba:	0010      	movs	r0, r2
 8001abc:	0026      	movs	r6, r4
 8001abe:	1a5b      	subs	r3, r3, r1
 8001ac0:	409c      	lsls	r4, r3
 8001ac2:	4098      	lsls	r0, r3
 8001ac4:	40ce      	lsrs	r6, r1
 8001ac6:	40ca      	lsrs	r2, r1
 8001ac8:	1e63      	subs	r3, r4, #1
 8001aca:	419c      	sbcs	r4, r3
 8001acc:	4330      	orrs	r0, r6
 8001ace:	4692      	mov	sl, r2
 8001ad0:	2600      	movs	r6, #0
 8001ad2:	4304      	orrs	r4, r0
 8001ad4:	0763      	lsls	r3, r4, #29
 8001ad6:	d009      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ad8:	230f      	movs	r3, #15
 8001ada:	4023      	ands	r3, r4
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	d005      	beq.n	8001aec <__aeabi_dsub+0x12c>
 8001ae0:	1d23      	adds	r3, r4, #4
 8001ae2:	42a3      	cmp	r3, r4
 8001ae4:	41a4      	sbcs	r4, r4
 8001ae6:	4264      	negs	r4, r4
 8001ae8:	44a2      	add	sl, r4
 8001aea:	001c      	movs	r4, r3
 8001aec:	4653      	mov	r3, sl
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dsub+0x134>
 8001af2:	e0f2      	b.n	8001cda <__aeabi_dsub+0x31a>
 8001af4:	4b8c      	ldr	r3, [pc, #560]	; (8001d28 <__aeabi_dsub+0x368>)
 8001af6:	3601      	adds	r6, #1
 8001af8:	429e      	cmp	r6, r3
 8001afa:	d100      	bne.n	8001afe <__aeabi_dsub+0x13e>
 8001afc:	e10f      	b.n	8001d1e <__aeabi_dsub+0x35e>
 8001afe:	4653      	mov	r3, sl
 8001b00:	498a      	ldr	r1, [pc, #552]	; (8001d2c <__aeabi_dsub+0x36c>)
 8001b02:	08e4      	lsrs	r4, r4, #3
 8001b04:	400b      	ands	r3, r1
 8001b06:	0019      	movs	r1, r3
 8001b08:	075b      	lsls	r3, r3, #29
 8001b0a:	4323      	orrs	r3, r4
 8001b0c:	0572      	lsls	r2, r6, #21
 8001b0e:	024c      	lsls	r4, r1, #9
 8001b10:	0b24      	lsrs	r4, r4, #12
 8001b12:	0d52      	lsrs	r2, r2, #21
 8001b14:	0512      	lsls	r2, r2, #20
 8001b16:	4322      	orrs	r2, r4
 8001b18:	07ed      	lsls	r5, r5, #31
 8001b1a:	432a      	orrs	r2, r5
 8001b1c:	0018      	movs	r0, r3
 8001b1e:	0011      	movs	r1, r2
 8001b20:	b003      	add	sp, #12
 8001b22:	bcf0      	pop	{r4, r5, r6, r7}
 8001b24:	46bb      	mov	fp, r7
 8001b26:	46b2      	mov	sl, r6
 8001b28:	46a9      	mov	r9, r5
 8001b2a:	46a0      	mov	r8, r4
 8001b2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b2e:	1ab4      	subs	r4, r6, r2
 8001b30:	46a4      	mov	ip, r4
 8001b32:	2c00      	cmp	r4, #0
 8001b34:	dd59      	ble.n	8001bea <__aeabi_dsub+0x22a>
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d100      	bne.n	8001b3c <__aeabi_dsub+0x17c>
 8001b3a:	e0b0      	b.n	8001c9e <__aeabi_dsub+0x2de>
 8001b3c:	4556      	cmp	r6, sl
 8001b3e:	d100      	bne.n	8001b42 <__aeabi_dsub+0x182>
 8001b40:	e0fa      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001b42:	2280      	movs	r2, #128	; 0x80
 8001b44:	0412      	lsls	r2, r2, #16
 8001b46:	4317      	orrs	r7, r2
 8001b48:	4662      	mov	r2, ip
 8001b4a:	2a38      	cmp	r2, #56	; 0x38
 8001b4c:	dd00      	ble.n	8001b50 <__aeabi_dsub+0x190>
 8001b4e:	e0d4      	b.n	8001cfa <__aeabi_dsub+0x33a>
 8001b50:	2a1f      	cmp	r2, #31
 8001b52:	dc00      	bgt.n	8001b56 <__aeabi_dsub+0x196>
 8001b54:	e1c0      	b.n	8001ed8 <__aeabi_dsub+0x518>
 8001b56:	0039      	movs	r1, r7
 8001b58:	3a20      	subs	r2, #32
 8001b5a:	40d1      	lsrs	r1, r2
 8001b5c:	4662      	mov	r2, ip
 8001b5e:	2a20      	cmp	r2, #32
 8001b60:	d006      	beq.n	8001b70 <__aeabi_dsub+0x1b0>
 8001b62:	4664      	mov	r4, ip
 8001b64:	2240      	movs	r2, #64	; 0x40
 8001b66:	1b12      	subs	r2, r2, r4
 8001b68:	003c      	movs	r4, r7
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4304      	orrs	r4, r0
 8001b6e:	9401      	str	r4, [sp, #4]
 8001b70:	9c01      	ldr	r4, [sp, #4]
 8001b72:	1e62      	subs	r2, r4, #1
 8001b74:	4194      	sbcs	r4, r2
 8001b76:	430c      	orrs	r4, r1
 8001b78:	e0c3      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001b7a:	003c      	movs	r4, r7
 8001b7c:	4304      	orrs	r4, r0
 8001b7e:	d02b      	beq.n	8001bd8 <__aeabi_dsub+0x218>
 8001b80:	468b      	mov	fp, r1
 8001b82:	428d      	cmp	r5, r1
 8001b84:	d02e      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001b86:	4c6a      	ldr	r4, [pc, #424]	; (8001d30 <__aeabi_dsub+0x370>)
 8001b88:	46a4      	mov	ip, r4
 8001b8a:	44b4      	add	ip, r6
 8001b8c:	4664      	mov	r4, ip
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d05f      	beq.n	8001c52 <__aeabi_dsub+0x292>
 8001b92:	1b94      	subs	r4, r2, r6
 8001b94:	46a4      	mov	ip, r4
 8001b96:	2e00      	cmp	r6, #0
 8001b98:	d000      	beq.n	8001b9c <__aeabi_dsub+0x1dc>
 8001b9a:	e120      	b.n	8001dde <__aeabi_dsub+0x41e>
 8001b9c:	464c      	mov	r4, r9
 8001b9e:	431c      	orrs	r4, r3
 8001ba0:	d100      	bne.n	8001ba4 <__aeabi_dsub+0x1e4>
 8001ba2:	e1c7      	b.n	8001f34 <__aeabi_dsub+0x574>
 8001ba4:	4661      	mov	r1, ip
 8001ba6:	1e4c      	subs	r4, r1, #1
 8001ba8:	2901      	cmp	r1, #1
 8001baa:	d100      	bne.n	8001bae <__aeabi_dsub+0x1ee>
 8001bac:	e223      	b.n	8001ff6 <__aeabi_dsub+0x636>
 8001bae:	4d5e      	ldr	r5, [pc, #376]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bb0:	45ac      	cmp	ip, r5
 8001bb2:	d100      	bne.n	8001bb6 <__aeabi_dsub+0x1f6>
 8001bb4:	e1d8      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001bb6:	46a4      	mov	ip, r4
 8001bb8:	e11a      	b.n	8001df0 <__aeabi_dsub+0x430>
 8001bba:	003a      	movs	r2, r7
 8001bbc:	4302      	orrs	r2, r0
 8001bbe:	d100      	bne.n	8001bc2 <__aeabi_dsub+0x202>
 8001bc0:	e0e4      	b.n	8001d8c <__aeabi_dsub+0x3cc>
 8001bc2:	0022      	movs	r2, r4
 8001bc4:	3a01      	subs	r2, #1
 8001bc6:	2c01      	cmp	r4, #1
 8001bc8:	d100      	bne.n	8001bcc <__aeabi_dsub+0x20c>
 8001bca:	e1c3      	b.n	8001f54 <__aeabi_dsub+0x594>
 8001bcc:	4956      	ldr	r1, [pc, #344]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bce:	428c      	cmp	r4, r1
 8001bd0:	d100      	bne.n	8001bd4 <__aeabi_dsub+0x214>
 8001bd2:	e0b1      	b.n	8001d38 <__aeabi_dsub+0x378>
 8001bd4:	4694      	mov	ip, r2
 8001bd6:	e72b      	b.n	8001a30 <__aeabi_dsub+0x70>
 8001bd8:	2401      	movs	r4, #1
 8001bda:	4061      	eors	r1, r4
 8001bdc:	468b      	mov	fp, r1
 8001bde:	428d      	cmp	r5, r1
 8001be0:	d000      	beq.n	8001be4 <__aeabi_dsub+0x224>
 8001be2:	e716      	b.n	8001a12 <__aeabi_dsub+0x52>
 8001be4:	4952      	ldr	r1, [pc, #328]	; (8001d30 <__aeabi_dsub+0x370>)
 8001be6:	468c      	mov	ip, r1
 8001be8:	44b4      	add	ip, r6
 8001bea:	4664      	mov	r4, ip
 8001bec:	2c00      	cmp	r4, #0
 8001bee:	d100      	bne.n	8001bf2 <__aeabi_dsub+0x232>
 8001bf0:	e0d3      	b.n	8001d9a <__aeabi_dsub+0x3da>
 8001bf2:	1b91      	subs	r1, r2, r6
 8001bf4:	468c      	mov	ip, r1
 8001bf6:	2e00      	cmp	r6, #0
 8001bf8:	d100      	bne.n	8001bfc <__aeabi_dsub+0x23c>
 8001bfa:	e15e      	b.n	8001eba <__aeabi_dsub+0x4fa>
 8001bfc:	494a      	ldr	r1, [pc, #296]	; (8001d28 <__aeabi_dsub+0x368>)
 8001bfe:	428a      	cmp	r2, r1
 8001c00:	d100      	bne.n	8001c04 <__aeabi_dsub+0x244>
 8001c02:	e1be      	b.n	8001f82 <__aeabi_dsub+0x5c2>
 8001c04:	2180      	movs	r1, #128	; 0x80
 8001c06:	464c      	mov	r4, r9
 8001c08:	0409      	lsls	r1, r1, #16
 8001c0a:	430c      	orrs	r4, r1
 8001c0c:	46a1      	mov	r9, r4
 8001c0e:	4661      	mov	r1, ip
 8001c10:	2938      	cmp	r1, #56	; 0x38
 8001c12:	dd00      	ble.n	8001c16 <__aeabi_dsub+0x256>
 8001c14:	e1ba      	b.n	8001f8c <__aeabi_dsub+0x5cc>
 8001c16:	291f      	cmp	r1, #31
 8001c18:	dd00      	ble.n	8001c1c <__aeabi_dsub+0x25c>
 8001c1a:	e227      	b.n	800206c <__aeabi_dsub+0x6ac>
 8001c1c:	2420      	movs	r4, #32
 8001c1e:	1a64      	subs	r4, r4, r1
 8001c20:	4649      	mov	r1, r9
 8001c22:	40a1      	lsls	r1, r4
 8001c24:	001e      	movs	r6, r3
 8001c26:	4688      	mov	r8, r1
 8001c28:	4661      	mov	r1, ip
 8001c2a:	40a3      	lsls	r3, r4
 8001c2c:	40ce      	lsrs	r6, r1
 8001c2e:	4641      	mov	r1, r8
 8001c30:	1e5c      	subs	r4, r3, #1
 8001c32:	41a3      	sbcs	r3, r4
 8001c34:	4331      	orrs	r1, r6
 8001c36:	4319      	orrs	r1, r3
 8001c38:	000c      	movs	r4, r1
 8001c3a:	4663      	mov	r3, ip
 8001c3c:	4649      	mov	r1, r9
 8001c3e:	40d9      	lsrs	r1, r3
 8001c40:	187f      	adds	r7, r7, r1
 8001c42:	1824      	adds	r4, r4, r0
 8001c44:	4284      	cmp	r4, r0
 8001c46:	419b      	sbcs	r3, r3
 8001c48:	425b      	negs	r3, r3
 8001c4a:	469a      	mov	sl, r3
 8001c4c:	0016      	movs	r6, r2
 8001c4e:	44ba      	add	sl, r7
 8001c50:	e05d      	b.n	8001d0e <__aeabi_dsub+0x34e>
 8001c52:	4c38      	ldr	r4, [pc, #224]	; (8001d34 <__aeabi_dsub+0x374>)
 8001c54:	1c72      	adds	r2, r6, #1
 8001c56:	4222      	tst	r2, r4
 8001c58:	d000      	beq.n	8001c5c <__aeabi_dsub+0x29c>
 8001c5a:	e0df      	b.n	8001e1c <__aeabi_dsub+0x45c>
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	2e00      	cmp	r6, #0
 8001c62:	d000      	beq.n	8001c66 <__aeabi_dsub+0x2a6>
 8001c64:	e15c      	b.n	8001f20 <__aeabi_dsub+0x560>
 8001c66:	2a00      	cmp	r2, #0
 8001c68:	d100      	bne.n	8001c6c <__aeabi_dsub+0x2ac>
 8001c6a:	e1cf      	b.n	800200c <__aeabi_dsub+0x64c>
 8001c6c:	003a      	movs	r2, r7
 8001c6e:	4302      	orrs	r2, r0
 8001c70:	d100      	bne.n	8001c74 <__aeabi_dsub+0x2b4>
 8001c72:	e17f      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001c74:	1a1c      	subs	r4, r3, r0
 8001c76:	464a      	mov	r2, r9
 8001c78:	42a3      	cmp	r3, r4
 8001c7a:	4189      	sbcs	r1, r1
 8001c7c:	1bd2      	subs	r2, r2, r7
 8001c7e:	4249      	negs	r1, r1
 8001c80:	1a52      	subs	r2, r2, r1
 8001c82:	4692      	mov	sl, r2
 8001c84:	0212      	lsls	r2, r2, #8
 8001c86:	d400      	bmi.n	8001c8a <__aeabi_dsub+0x2ca>
 8001c88:	e20a      	b.n	80020a0 <__aeabi_dsub+0x6e0>
 8001c8a:	1ac4      	subs	r4, r0, r3
 8001c8c:	42a0      	cmp	r0, r4
 8001c8e:	4180      	sbcs	r0, r0
 8001c90:	464b      	mov	r3, r9
 8001c92:	4240      	negs	r0, r0
 8001c94:	1aff      	subs	r7, r7, r3
 8001c96:	1a3b      	subs	r3, r7, r0
 8001c98:	469a      	mov	sl, r3
 8001c9a:	465d      	mov	r5, fp
 8001c9c:	e71a      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001c9e:	003a      	movs	r2, r7
 8001ca0:	4302      	orrs	r2, r0
 8001ca2:	d073      	beq.n	8001d8c <__aeabi_dsub+0x3cc>
 8001ca4:	0022      	movs	r2, r4
 8001ca6:	3a01      	subs	r2, #1
 8001ca8:	2c01      	cmp	r4, #1
 8001caa:	d100      	bne.n	8001cae <__aeabi_dsub+0x2ee>
 8001cac:	e0cb      	b.n	8001e46 <__aeabi_dsub+0x486>
 8001cae:	4554      	cmp	r4, sl
 8001cb0:	d042      	beq.n	8001d38 <__aeabi_dsub+0x378>
 8001cb2:	4694      	mov	ip, r2
 8001cb4:	e748      	b.n	8001b48 <__aeabi_dsub+0x188>
 8001cb6:	0010      	movs	r0, r2
 8001cb8:	3b1f      	subs	r3, #31
 8001cba:	40d8      	lsrs	r0, r3
 8001cbc:	2920      	cmp	r1, #32
 8001cbe:	d003      	beq.n	8001cc8 <__aeabi_dsub+0x308>
 8001cc0:	2340      	movs	r3, #64	; 0x40
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	409a      	lsls	r2, r3
 8001cc6:	4314      	orrs	r4, r2
 8001cc8:	1e63      	subs	r3, r4, #1
 8001cca:	419c      	sbcs	r4, r3
 8001ccc:	2300      	movs	r3, #0
 8001cce:	2600      	movs	r6, #0
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	4304      	orrs	r4, r0
 8001cd4:	0763      	lsls	r3, r4, #29
 8001cd6:	d000      	beq.n	8001cda <__aeabi_dsub+0x31a>
 8001cd8:	e6fe      	b.n	8001ad8 <__aeabi_dsub+0x118>
 8001cda:	4652      	mov	r2, sl
 8001cdc:	08e3      	lsrs	r3, r4, #3
 8001cde:	0752      	lsls	r2, r2, #29
 8001ce0:	4313      	orrs	r3, r2
 8001ce2:	4652      	mov	r2, sl
 8001ce4:	46b4      	mov	ip, r6
 8001ce6:	08d2      	lsrs	r2, r2, #3
 8001ce8:	490f      	ldr	r1, [pc, #60]	; (8001d28 <__aeabi_dsub+0x368>)
 8001cea:	458c      	cmp	ip, r1
 8001cec:	d02a      	beq.n	8001d44 <__aeabi_dsub+0x384>
 8001cee:	0312      	lsls	r2, r2, #12
 8001cf0:	0b14      	lsrs	r4, r2, #12
 8001cf2:	4662      	mov	r2, ip
 8001cf4:	0552      	lsls	r2, r2, #21
 8001cf6:	0d52      	lsrs	r2, r2, #21
 8001cf8:	e70c      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001cfa:	003c      	movs	r4, r7
 8001cfc:	4304      	orrs	r4, r0
 8001cfe:	1e62      	subs	r2, r4, #1
 8001d00:	4194      	sbcs	r4, r2
 8001d02:	18e4      	adds	r4, r4, r3
 8001d04:	429c      	cmp	r4, r3
 8001d06:	4192      	sbcs	r2, r2
 8001d08:	4252      	negs	r2, r2
 8001d0a:	444a      	add	r2, r9
 8001d0c:	4692      	mov	sl, r2
 8001d0e:	4653      	mov	r3, sl
 8001d10:	021b      	lsls	r3, r3, #8
 8001d12:	d5df      	bpl.n	8001cd4 <__aeabi_dsub+0x314>
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <__aeabi_dsub+0x368>)
 8001d16:	3601      	adds	r6, #1
 8001d18:	429e      	cmp	r6, r3
 8001d1a:	d000      	beq.n	8001d1e <__aeabi_dsub+0x35e>
 8001d1c:	e0a0      	b.n	8001e60 <__aeabi_dsub+0x4a0>
 8001d1e:	0032      	movs	r2, r6
 8001d20:	2400      	movs	r4, #0
 8001d22:	2300      	movs	r3, #0
 8001d24:	e6f6      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	000007ff 	.word	0x000007ff
 8001d2c:	ff7fffff 	.word	0xff7fffff
 8001d30:	fffff801 	.word	0xfffff801
 8001d34:	000007fe 	.word	0x000007fe
 8001d38:	08db      	lsrs	r3, r3, #3
 8001d3a:	464a      	mov	r2, r9
 8001d3c:	0752      	lsls	r2, r2, #29
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	464a      	mov	r2, r9
 8001d42:	08d2      	lsrs	r2, r2, #3
 8001d44:	0019      	movs	r1, r3
 8001d46:	4311      	orrs	r1, r2
 8001d48:	d100      	bne.n	8001d4c <__aeabi_dsub+0x38c>
 8001d4a:	e1b5      	b.n	80020b8 <__aeabi_dsub+0x6f8>
 8001d4c:	2480      	movs	r4, #128	; 0x80
 8001d4e:	0324      	lsls	r4, r4, #12
 8001d50:	4314      	orrs	r4, r2
 8001d52:	0324      	lsls	r4, r4, #12
 8001d54:	4ad5      	ldr	r2, [pc, #852]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001d56:	0b24      	lsrs	r4, r4, #12
 8001d58:	e6dc      	b.n	8001b14 <__aeabi_dsub+0x154>
 8001d5a:	0020      	movs	r0, r4
 8001d5c:	f000 fae2 	bl	8002324 <__clzsi2>
 8001d60:	0003      	movs	r3, r0
 8001d62:	3318      	adds	r3, #24
 8001d64:	2b1f      	cmp	r3, #31
 8001d66:	dc00      	bgt.n	8001d6a <__aeabi_dsub+0x3aa>
 8001d68:	e695      	b.n	8001a96 <__aeabi_dsub+0xd6>
 8001d6a:	0022      	movs	r2, r4
 8001d6c:	3808      	subs	r0, #8
 8001d6e:	4082      	lsls	r2, r0
 8001d70:	2400      	movs	r4, #0
 8001d72:	429e      	cmp	r6, r3
 8001d74:	dc00      	bgt.n	8001d78 <__aeabi_dsub+0x3b8>
 8001d76:	e69a      	b.n	8001aae <__aeabi_dsub+0xee>
 8001d78:	1af6      	subs	r6, r6, r3
 8001d7a:	4bcd      	ldr	r3, [pc, #820]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	4692      	mov	sl, r2
 8001d80:	e6a8      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001d82:	003c      	movs	r4, r7
 8001d84:	4304      	orrs	r4, r0
 8001d86:	1e62      	subs	r2, r4, #1
 8001d88:	4194      	sbcs	r4, r2
 8001d8a:	e66c      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001d8c:	464a      	mov	r2, r9
 8001d8e:	08db      	lsrs	r3, r3, #3
 8001d90:	0752      	lsls	r2, r2, #29
 8001d92:	4313      	orrs	r3, r2
 8001d94:	464a      	mov	r2, r9
 8001d96:	08d2      	lsrs	r2, r2, #3
 8001d98:	e7a6      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001d9a:	4cc6      	ldr	r4, [pc, #792]	; (80020b4 <__aeabi_dsub+0x6f4>)
 8001d9c:	1c72      	adds	r2, r6, #1
 8001d9e:	4222      	tst	r2, r4
 8001da0:	d000      	beq.n	8001da4 <__aeabi_dsub+0x3e4>
 8001da2:	e0ac      	b.n	8001efe <__aeabi_dsub+0x53e>
 8001da4:	464a      	mov	r2, r9
 8001da6:	431a      	orrs	r2, r3
 8001da8:	2e00      	cmp	r6, #0
 8001daa:	d000      	beq.n	8001dae <__aeabi_dsub+0x3ee>
 8001dac:	e105      	b.n	8001fba <__aeabi_dsub+0x5fa>
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	d100      	bne.n	8001db4 <__aeabi_dsub+0x3f4>
 8001db2:	e156      	b.n	8002062 <__aeabi_dsub+0x6a2>
 8001db4:	003a      	movs	r2, r7
 8001db6:	4302      	orrs	r2, r0
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x3fc>
 8001dba:	e0db      	b.n	8001f74 <__aeabi_dsub+0x5b4>
 8001dbc:	181c      	adds	r4, r3, r0
 8001dbe:	429c      	cmp	r4, r3
 8001dc0:	419b      	sbcs	r3, r3
 8001dc2:	444f      	add	r7, r9
 8001dc4:	46ba      	mov	sl, r7
 8001dc6:	425b      	negs	r3, r3
 8001dc8:	449a      	add	sl, r3
 8001dca:	4653      	mov	r3, sl
 8001dcc:	021b      	lsls	r3, r3, #8
 8001dce:	d400      	bmi.n	8001dd2 <__aeabi_dsub+0x412>
 8001dd0:	e780      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dd2:	4652      	mov	r2, sl
 8001dd4:	4bb6      	ldr	r3, [pc, #728]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001dd6:	2601      	movs	r6, #1
 8001dd8:	401a      	ands	r2, r3
 8001dda:	4692      	mov	sl, r2
 8001ddc:	e77a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001dde:	4cb3      	ldr	r4, [pc, #716]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001de0:	42a2      	cmp	r2, r4
 8001de2:	d100      	bne.n	8001de6 <__aeabi_dsub+0x426>
 8001de4:	e0c0      	b.n	8001f68 <__aeabi_dsub+0x5a8>
 8001de6:	2480      	movs	r4, #128	; 0x80
 8001de8:	464d      	mov	r5, r9
 8001dea:	0424      	lsls	r4, r4, #16
 8001dec:	4325      	orrs	r5, r4
 8001dee:	46a9      	mov	r9, r5
 8001df0:	4664      	mov	r4, ip
 8001df2:	2c38      	cmp	r4, #56	; 0x38
 8001df4:	dc53      	bgt.n	8001e9e <__aeabi_dsub+0x4de>
 8001df6:	4661      	mov	r1, ip
 8001df8:	2c1f      	cmp	r4, #31
 8001dfa:	dd00      	ble.n	8001dfe <__aeabi_dsub+0x43e>
 8001dfc:	e0cd      	b.n	8001f9a <__aeabi_dsub+0x5da>
 8001dfe:	2520      	movs	r5, #32
 8001e00:	001e      	movs	r6, r3
 8001e02:	1b2d      	subs	r5, r5, r4
 8001e04:	464c      	mov	r4, r9
 8001e06:	40ab      	lsls	r3, r5
 8001e08:	40ac      	lsls	r4, r5
 8001e0a:	40ce      	lsrs	r6, r1
 8001e0c:	1e5d      	subs	r5, r3, #1
 8001e0e:	41ab      	sbcs	r3, r5
 8001e10:	4334      	orrs	r4, r6
 8001e12:	4323      	orrs	r3, r4
 8001e14:	464c      	mov	r4, r9
 8001e16:	40cc      	lsrs	r4, r1
 8001e18:	1b3f      	subs	r7, r7, r4
 8001e1a:	e045      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001e1c:	464a      	mov	r2, r9
 8001e1e:	1a1c      	subs	r4, r3, r0
 8001e20:	1bd1      	subs	r1, r2, r7
 8001e22:	42a3      	cmp	r3, r4
 8001e24:	4192      	sbcs	r2, r2
 8001e26:	4252      	negs	r2, r2
 8001e28:	4692      	mov	sl, r2
 8001e2a:	000a      	movs	r2, r1
 8001e2c:	4651      	mov	r1, sl
 8001e2e:	1a52      	subs	r2, r2, r1
 8001e30:	4692      	mov	sl, r2
 8001e32:	0212      	lsls	r2, r2, #8
 8001e34:	d500      	bpl.n	8001e38 <__aeabi_dsub+0x478>
 8001e36:	e083      	b.n	8001f40 <__aeabi_dsub+0x580>
 8001e38:	4653      	mov	r3, sl
 8001e3a:	4323      	orrs	r3, r4
 8001e3c:	d000      	beq.n	8001e40 <__aeabi_dsub+0x480>
 8001e3e:	e621      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001e40:	2200      	movs	r2, #0
 8001e42:	2500      	movs	r5, #0
 8001e44:	e753      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001e46:	181c      	adds	r4, r3, r0
 8001e48:	429c      	cmp	r4, r3
 8001e4a:	419b      	sbcs	r3, r3
 8001e4c:	444f      	add	r7, r9
 8001e4e:	46ba      	mov	sl, r7
 8001e50:	425b      	negs	r3, r3
 8001e52:	449a      	add	sl, r3
 8001e54:	4653      	mov	r3, sl
 8001e56:	2601      	movs	r6, #1
 8001e58:	021b      	lsls	r3, r3, #8
 8001e5a:	d400      	bmi.n	8001e5e <__aeabi_dsub+0x49e>
 8001e5c:	e73a      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001e5e:	2602      	movs	r6, #2
 8001e60:	4652      	mov	r2, sl
 8001e62:	4b93      	ldr	r3, [pc, #588]	; (80020b0 <__aeabi_dsub+0x6f0>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	401a      	ands	r2, r3
 8001e68:	0013      	movs	r3, r2
 8001e6a:	4021      	ands	r1, r4
 8001e6c:	0862      	lsrs	r2, r4, #1
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	07dc      	lsls	r4, r3, #31
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	469a      	mov	sl, r3
 8001e76:	4314      	orrs	r4, r2
 8001e78:	e62c      	b.n	8001ad4 <__aeabi_dsub+0x114>
 8001e7a:	0039      	movs	r1, r7
 8001e7c:	3a20      	subs	r2, #32
 8001e7e:	40d1      	lsrs	r1, r2
 8001e80:	4662      	mov	r2, ip
 8001e82:	2a20      	cmp	r2, #32
 8001e84:	d006      	beq.n	8001e94 <__aeabi_dsub+0x4d4>
 8001e86:	4664      	mov	r4, ip
 8001e88:	2240      	movs	r2, #64	; 0x40
 8001e8a:	1b12      	subs	r2, r2, r4
 8001e8c:	003c      	movs	r4, r7
 8001e8e:	4094      	lsls	r4, r2
 8001e90:	4304      	orrs	r4, r0
 8001e92:	9401      	str	r4, [sp, #4]
 8001e94:	9c01      	ldr	r4, [sp, #4]
 8001e96:	1e62      	subs	r2, r4, #1
 8001e98:	4194      	sbcs	r4, r2
 8001e9a:	430c      	orrs	r4, r1
 8001e9c:	e5e3      	b.n	8001a66 <__aeabi_dsub+0xa6>
 8001e9e:	4649      	mov	r1, r9
 8001ea0:	4319      	orrs	r1, r3
 8001ea2:	000b      	movs	r3, r1
 8001ea4:	1e5c      	subs	r4, r3, #1
 8001ea6:	41a3      	sbcs	r3, r4
 8001ea8:	1ac4      	subs	r4, r0, r3
 8001eaa:	42a0      	cmp	r0, r4
 8001eac:	419b      	sbcs	r3, r3
 8001eae:	425b      	negs	r3, r3
 8001eb0:	1afb      	subs	r3, r7, r3
 8001eb2:	469a      	mov	sl, r3
 8001eb4:	465d      	mov	r5, fp
 8001eb6:	0016      	movs	r6, r2
 8001eb8:	e5dc      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001eba:	4649      	mov	r1, r9
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	d100      	bne.n	8001ec2 <__aeabi_dsub+0x502>
 8001ec0:	e0ae      	b.n	8002020 <__aeabi_dsub+0x660>
 8001ec2:	4661      	mov	r1, ip
 8001ec4:	4664      	mov	r4, ip
 8001ec6:	3901      	subs	r1, #1
 8001ec8:	2c01      	cmp	r4, #1
 8001eca:	d100      	bne.n	8001ece <__aeabi_dsub+0x50e>
 8001ecc:	e0e0      	b.n	8002090 <__aeabi_dsub+0x6d0>
 8001ece:	4c77      	ldr	r4, [pc, #476]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001ed0:	45a4      	cmp	ip, r4
 8001ed2:	d056      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001ed4:	468c      	mov	ip, r1
 8001ed6:	e69a      	b.n	8001c0e <__aeabi_dsub+0x24e>
 8001ed8:	4661      	mov	r1, ip
 8001eda:	2220      	movs	r2, #32
 8001edc:	003c      	movs	r4, r7
 8001ede:	1a52      	subs	r2, r2, r1
 8001ee0:	4094      	lsls	r4, r2
 8001ee2:	0001      	movs	r1, r0
 8001ee4:	4090      	lsls	r0, r2
 8001ee6:	46a0      	mov	r8, r4
 8001ee8:	4664      	mov	r4, ip
 8001eea:	1e42      	subs	r2, r0, #1
 8001eec:	4190      	sbcs	r0, r2
 8001eee:	4662      	mov	r2, ip
 8001ef0:	40e1      	lsrs	r1, r4
 8001ef2:	4644      	mov	r4, r8
 8001ef4:	40d7      	lsrs	r7, r2
 8001ef6:	430c      	orrs	r4, r1
 8001ef8:	4304      	orrs	r4, r0
 8001efa:	44b9      	add	r9, r7
 8001efc:	e701      	b.n	8001d02 <__aeabi_dsub+0x342>
 8001efe:	496b      	ldr	r1, [pc, #428]	; (80020ac <__aeabi_dsub+0x6ec>)
 8001f00:	428a      	cmp	r2, r1
 8001f02:	d100      	bne.n	8001f06 <__aeabi_dsub+0x546>
 8001f04:	e70c      	b.n	8001d20 <__aeabi_dsub+0x360>
 8001f06:	1818      	adds	r0, r3, r0
 8001f08:	4298      	cmp	r0, r3
 8001f0a:	419b      	sbcs	r3, r3
 8001f0c:	444f      	add	r7, r9
 8001f0e:	425b      	negs	r3, r3
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	07dc      	lsls	r4, r3, #31
 8001f14:	0840      	lsrs	r0, r0, #1
 8001f16:	085b      	lsrs	r3, r3, #1
 8001f18:	469a      	mov	sl, r3
 8001f1a:	0016      	movs	r6, r2
 8001f1c:	4304      	orrs	r4, r0
 8001f1e:	e6d9      	b.n	8001cd4 <__aeabi_dsub+0x314>
 8001f20:	2a00      	cmp	r2, #0
 8001f22:	d000      	beq.n	8001f26 <__aeabi_dsub+0x566>
 8001f24:	e081      	b.n	800202a <__aeabi_dsub+0x66a>
 8001f26:	003b      	movs	r3, r7
 8001f28:	4303      	orrs	r3, r0
 8001f2a:	d11d      	bne.n	8001f68 <__aeabi_dsub+0x5a8>
 8001f2c:	2280      	movs	r2, #128	; 0x80
 8001f2e:	2500      	movs	r5, #0
 8001f30:	0312      	lsls	r2, r2, #12
 8001f32:	e70b      	b.n	8001d4c <__aeabi_dsub+0x38c>
 8001f34:	08c0      	lsrs	r0, r0, #3
 8001f36:	077b      	lsls	r3, r7, #29
 8001f38:	465d      	mov	r5, fp
 8001f3a:	4303      	orrs	r3, r0
 8001f3c:	08fa      	lsrs	r2, r7, #3
 8001f3e:	e6d3      	b.n	8001ce8 <__aeabi_dsub+0x328>
 8001f40:	1ac4      	subs	r4, r0, r3
 8001f42:	42a0      	cmp	r0, r4
 8001f44:	4180      	sbcs	r0, r0
 8001f46:	464b      	mov	r3, r9
 8001f48:	4240      	negs	r0, r0
 8001f4a:	1aff      	subs	r7, r7, r3
 8001f4c:	1a3b      	subs	r3, r7, r0
 8001f4e:	469a      	mov	sl, r3
 8001f50:	465d      	mov	r5, fp
 8001f52:	e597      	b.n	8001a84 <__aeabi_dsub+0xc4>
 8001f54:	1a1c      	subs	r4, r3, r0
 8001f56:	464a      	mov	r2, r9
 8001f58:	42a3      	cmp	r3, r4
 8001f5a:	419b      	sbcs	r3, r3
 8001f5c:	1bd7      	subs	r7, r2, r7
 8001f5e:	425b      	negs	r3, r3
 8001f60:	1afb      	subs	r3, r7, r3
 8001f62:	469a      	mov	sl, r3
 8001f64:	2601      	movs	r6, #1
 8001f66:	e585      	b.n	8001a74 <__aeabi_dsub+0xb4>
 8001f68:	08c0      	lsrs	r0, r0, #3
 8001f6a:	077b      	lsls	r3, r7, #29
 8001f6c:	465d      	mov	r5, fp
 8001f6e:	4303      	orrs	r3, r0
 8001f70:	08fa      	lsrs	r2, r7, #3
 8001f72:	e6e7      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f74:	464a      	mov	r2, r9
 8001f76:	08db      	lsrs	r3, r3, #3
 8001f78:	0752      	lsls	r2, r2, #29
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	464a      	mov	r2, r9
 8001f7e:	08d2      	lsrs	r2, r2, #3
 8001f80:	e6b5      	b.n	8001cee <__aeabi_dsub+0x32e>
 8001f82:	08c0      	lsrs	r0, r0, #3
 8001f84:	077b      	lsls	r3, r7, #29
 8001f86:	4303      	orrs	r3, r0
 8001f88:	08fa      	lsrs	r2, r7, #3
 8001f8a:	e6db      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001f8c:	4649      	mov	r1, r9
 8001f8e:	4319      	orrs	r1, r3
 8001f90:	000b      	movs	r3, r1
 8001f92:	1e59      	subs	r1, r3, #1
 8001f94:	418b      	sbcs	r3, r1
 8001f96:	001c      	movs	r4, r3
 8001f98:	e653      	b.n	8001c42 <__aeabi_dsub+0x282>
 8001f9a:	464d      	mov	r5, r9
 8001f9c:	3c20      	subs	r4, #32
 8001f9e:	40e5      	lsrs	r5, r4
 8001fa0:	2920      	cmp	r1, #32
 8001fa2:	d005      	beq.n	8001fb0 <__aeabi_dsub+0x5f0>
 8001fa4:	2440      	movs	r4, #64	; 0x40
 8001fa6:	1a64      	subs	r4, r4, r1
 8001fa8:	4649      	mov	r1, r9
 8001faa:	40a1      	lsls	r1, r4
 8001fac:	430b      	orrs	r3, r1
 8001fae:	4698      	mov	r8, r3
 8001fb0:	4643      	mov	r3, r8
 8001fb2:	1e5c      	subs	r4, r3, #1
 8001fb4:	41a3      	sbcs	r3, r4
 8001fb6:	432b      	orrs	r3, r5
 8001fb8:	e776      	b.n	8001ea8 <__aeabi_dsub+0x4e8>
 8001fba:	2a00      	cmp	r2, #0
 8001fbc:	d0e1      	beq.n	8001f82 <__aeabi_dsub+0x5c2>
 8001fbe:	003a      	movs	r2, r7
 8001fc0:	08db      	lsrs	r3, r3, #3
 8001fc2:	4302      	orrs	r2, r0
 8001fc4:	d100      	bne.n	8001fc8 <__aeabi_dsub+0x608>
 8001fc6:	e6b8      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8001fc8:	464a      	mov	r2, r9
 8001fca:	0752      	lsls	r2, r2, #29
 8001fcc:	2480      	movs	r4, #128	; 0x80
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	464a      	mov	r2, r9
 8001fd2:	0324      	lsls	r4, r4, #12
 8001fd4:	08d2      	lsrs	r2, r2, #3
 8001fd6:	4222      	tst	r2, r4
 8001fd8:	d007      	beq.n	8001fea <__aeabi_dsub+0x62a>
 8001fda:	08fe      	lsrs	r6, r7, #3
 8001fdc:	4226      	tst	r6, r4
 8001fde:	d104      	bne.n	8001fea <__aeabi_dsub+0x62a>
 8001fe0:	465d      	mov	r5, fp
 8001fe2:	0032      	movs	r2, r6
 8001fe4:	08c3      	lsrs	r3, r0, #3
 8001fe6:	077f      	lsls	r7, r7, #29
 8001fe8:	433b      	orrs	r3, r7
 8001fea:	0f59      	lsrs	r1, r3, #29
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	0749      	lsls	r1, r1, #29
 8001ff0:	08db      	lsrs	r3, r3, #3
 8001ff2:	430b      	orrs	r3, r1
 8001ff4:	e6a6      	b.n	8001d44 <__aeabi_dsub+0x384>
 8001ff6:	1ac4      	subs	r4, r0, r3
 8001ff8:	42a0      	cmp	r0, r4
 8001ffa:	4180      	sbcs	r0, r0
 8001ffc:	464b      	mov	r3, r9
 8001ffe:	4240      	negs	r0, r0
 8002000:	1aff      	subs	r7, r7, r3
 8002002:	1a3b      	subs	r3, r7, r0
 8002004:	469a      	mov	sl, r3
 8002006:	465d      	mov	r5, fp
 8002008:	2601      	movs	r6, #1
 800200a:	e533      	b.n	8001a74 <__aeabi_dsub+0xb4>
 800200c:	003b      	movs	r3, r7
 800200e:	4303      	orrs	r3, r0
 8002010:	d100      	bne.n	8002014 <__aeabi_dsub+0x654>
 8002012:	e715      	b.n	8001e40 <__aeabi_dsub+0x480>
 8002014:	08c0      	lsrs	r0, r0, #3
 8002016:	077b      	lsls	r3, r7, #29
 8002018:	465d      	mov	r5, fp
 800201a:	4303      	orrs	r3, r0
 800201c:	08fa      	lsrs	r2, r7, #3
 800201e:	e666      	b.n	8001cee <__aeabi_dsub+0x32e>
 8002020:	08c0      	lsrs	r0, r0, #3
 8002022:	077b      	lsls	r3, r7, #29
 8002024:	4303      	orrs	r3, r0
 8002026:	08fa      	lsrs	r2, r7, #3
 8002028:	e65e      	b.n	8001ce8 <__aeabi_dsub+0x328>
 800202a:	003a      	movs	r2, r7
 800202c:	08db      	lsrs	r3, r3, #3
 800202e:	4302      	orrs	r2, r0
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x674>
 8002032:	e682      	b.n	8001d3a <__aeabi_dsub+0x37a>
 8002034:	464a      	mov	r2, r9
 8002036:	0752      	lsls	r2, r2, #29
 8002038:	2480      	movs	r4, #128	; 0x80
 800203a:	4313      	orrs	r3, r2
 800203c:	464a      	mov	r2, r9
 800203e:	0324      	lsls	r4, r4, #12
 8002040:	08d2      	lsrs	r2, r2, #3
 8002042:	4222      	tst	r2, r4
 8002044:	d007      	beq.n	8002056 <__aeabi_dsub+0x696>
 8002046:	08fe      	lsrs	r6, r7, #3
 8002048:	4226      	tst	r6, r4
 800204a:	d104      	bne.n	8002056 <__aeabi_dsub+0x696>
 800204c:	465d      	mov	r5, fp
 800204e:	0032      	movs	r2, r6
 8002050:	08c3      	lsrs	r3, r0, #3
 8002052:	077f      	lsls	r7, r7, #29
 8002054:	433b      	orrs	r3, r7
 8002056:	0f59      	lsrs	r1, r3, #29
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	08db      	lsrs	r3, r3, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	430b      	orrs	r3, r1
 8002060:	e670      	b.n	8001d44 <__aeabi_dsub+0x384>
 8002062:	08c0      	lsrs	r0, r0, #3
 8002064:	077b      	lsls	r3, r7, #29
 8002066:	4303      	orrs	r3, r0
 8002068:	08fa      	lsrs	r2, r7, #3
 800206a:	e640      	b.n	8001cee <__aeabi_dsub+0x32e>
 800206c:	464c      	mov	r4, r9
 800206e:	3920      	subs	r1, #32
 8002070:	40cc      	lsrs	r4, r1
 8002072:	4661      	mov	r1, ip
 8002074:	2920      	cmp	r1, #32
 8002076:	d006      	beq.n	8002086 <__aeabi_dsub+0x6c6>
 8002078:	4666      	mov	r6, ip
 800207a:	2140      	movs	r1, #64	; 0x40
 800207c:	1b89      	subs	r1, r1, r6
 800207e:	464e      	mov	r6, r9
 8002080:	408e      	lsls	r6, r1
 8002082:	4333      	orrs	r3, r6
 8002084:	4698      	mov	r8, r3
 8002086:	4643      	mov	r3, r8
 8002088:	1e59      	subs	r1, r3, #1
 800208a:	418b      	sbcs	r3, r1
 800208c:	431c      	orrs	r4, r3
 800208e:	e5d8      	b.n	8001c42 <__aeabi_dsub+0x282>
 8002090:	181c      	adds	r4, r3, r0
 8002092:	4284      	cmp	r4, r0
 8002094:	4180      	sbcs	r0, r0
 8002096:	444f      	add	r7, r9
 8002098:	46ba      	mov	sl, r7
 800209a:	4240      	negs	r0, r0
 800209c:	4482      	add	sl, r0
 800209e:	e6d9      	b.n	8001e54 <__aeabi_dsub+0x494>
 80020a0:	4653      	mov	r3, sl
 80020a2:	4323      	orrs	r3, r4
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x6e8>
 80020a6:	e6cb      	b.n	8001e40 <__aeabi_dsub+0x480>
 80020a8:	e614      	b.n	8001cd4 <__aeabi_dsub+0x314>
 80020aa:	46c0      	nop			; (mov r8, r8)
 80020ac:	000007ff 	.word	0x000007ff
 80020b0:	ff7fffff 	.word	0xff7fffff
 80020b4:	000007fe 	.word	0x000007fe
 80020b8:	2300      	movs	r3, #0
 80020ba:	4a01      	ldr	r2, [pc, #4]	; (80020c0 <__aeabi_dsub+0x700>)
 80020bc:	001c      	movs	r4, r3
 80020be:	e529      	b.n	8001b14 <__aeabi_dsub+0x154>
 80020c0:	000007ff 	.word	0x000007ff

080020c4 <__aeabi_dcmpun>:
 80020c4:	b570      	push	{r4, r5, r6, lr}
 80020c6:	0005      	movs	r5, r0
 80020c8:	480c      	ldr	r0, [pc, #48]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020ca:	031c      	lsls	r4, r3, #12
 80020cc:	0016      	movs	r6, r2
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	030a      	lsls	r2, r1, #12
 80020d2:	0049      	lsls	r1, r1, #1
 80020d4:	0b12      	lsrs	r2, r2, #12
 80020d6:	0d49      	lsrs	r1, r1, #21
 80020d8:	0b24      	lsrs	r4, r4, #12
 80020da:	0d5b      	lsrs	r3, r3, #21
 80020dc:	4281      	cmp	r1, r0
 80020de:	d008      	beq.n	80020f2 <__aeabi_dcmpun+0x2e>
 80020e0:	4a06      	ldr	r2, [pc, #24]	; (80020fc <__aeabi_dcmpun+0x38>)
 80020e2:	2000      	movs	r0, #0
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d103      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020e8:	0020      	movs	r0, r4
 80020ea:	4330      	orrs	r0, r6
 80020ec:	1e43      	subs	r3, r0, #1
 80020ee:	4198      	sbcs	r0, r3
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	2001      	movs	r0, #1
 80020f4:	432a      	orrs	r2, r5
 80020f6:	d1fb      	bne.n	80020f0 <__aeabi_dcmpun+0x2c>
 80020f8:	e7f2      	b.n	80020e0 <__aeabi_dcmpun+0x1c>
 80020fa:	46c0      	nop			; (mov r8, r8)
 80020fc:	000007ff 	.word	0x000007ff

08002100 <__aeabi_d2iz>:
 8002100:	000a      	movs	r2, r1
 8002102:	b530      	push	{r4, r5, lr}
 8002104:	4c13      	ldr	r4, [pc, #76]	; (8002154 <__aeabi_d2iz+0x54>)
 8002106:	0053      	lsls	r3, r2, #1
 8002108:	0309      	lsls	r1, r1, #12
 800210a:	0005      	movs	r5, r0
 800210c:	0b09      	lsrs	r1, r1, #12
 800210e:	2000      	movs	r0, #0
 8002110:	0d5b      	lsrs	r3, r3, #21
 8002112:	0fd2      	lsrs	r2, r2, #31
 8002114:	42a3      	cmp	r3, r4
 8002116:	dd04      	ble.n	8002122 <__aeabi_d2iz+0x22>
 8002118:	480f      	ldr	r0, [pc, #60]	; (8002158 <__aeabi_d2iz+0x58>)
 800211a:	4283      	cmp	r3, r0
 800211c:	dd02      	ble.n	8002124 <__aeabi_d2iz+0x24>
 800211e:	4b0f      	ldr	r3, [pc, #60]	; (800215c <__aeabi_d2iz+0x5c>)
 8002120:	18d0      	adds	r0, r2, r3
 8002122:	bd30      	pop	{r4, r5, pc}
 8002124:	2080      	movs	r0, #128	; 0x80
 8002126:	0340      	lsls	r0, r0, #13
 8002128:	4301      	orrs	r1, r0
 800212a:	480d      	ldr	r0, [pc, #52]	; (8002160 <__aeabi_d2iz+0x60>)
 800212c:	1ac0      	subs	r0, r0, r3
 800212e:	281f      	cmp	r0, #31
 8002130:	dd08      	ble.n	8002144 <__aeabi_d2iz+0x44>
 8002132:	480c      	ldr	r0, [pc, #48]	; (8002164 <__aeabi_d2iz+0x64>)
 8002134:	1ac3      	subs	r3, r0, r3
 8002136:	40d9      	lsrs	r1, r3
 8002138:	000b      	movs	r3, r1
 800213a:	4258      	negs	r0, r3
 800213c:	2a00      	cmp	r2, #0
 800213e:	d1f0      	bne.n	8002122 <__aeabi_d2iz+0x22>
 8002140:	0018      	movs	r0, r3
 8002142:	e7ee      	b.n	8002122 <__aeabi_d2iz+0x22>
 8002144:	4c08      	ldr	r4, [pc, #32]	; (8002168 <__aeabi_d2iz+0x68>)
 8002146:	40c5      	lsrs	r5, r0
 8002148:	46a4      	mov	ip, r4
 800214a:	4463      	add	r3, ip
 800214c:	4099      	lsls	r1, r3
 800214e:	000b      	movs	r3, r1
 8002150:	432b      	orrs	r3, r5
 8002152:	e7f2      	b.n	800213a <__aeabi_d2iz+0x3a>
 8002154:	000003fe 	.word	0x000003fe
 8002158:	0000041d 	.word	0x0000041d
 800215c:	7fffffff 	.word	0x7fffffff
 8002160:	00000433 	.word	0x00000433
 8002164:	00000413 	.word	0x00000413
 8002168:	fffffbed 	.word	0xfffffbed

0800216c <__aeabi_i2d>:
 800216c:	b570      	push	{r4, r5, r6, lr}
 800216e:	2800      	cmp	r0, #0
 8002170:	d016      	beq.n	80021a0 <__aeabi_i2d+0x34>
 8002172:	17c3      	asrs	r3, r0, #31
 8002174:	18c5      	adds	r5, r0, r3
 8002176:	405d      	eors	r5, r3
 8002178:	0fc4      	lsrs	r4, r0, #31
 800217a:	0028      	movs	r0, r5
 800217c:	f000 f8d2 	bl	8002324 <__clzsi2>
 8002180:	4b11      	ldr	r3, [pc, #68]	; (80021c8 <__aeabi_i2d+0x5c>)
 8002182:	1a1b      	subs	r3, r3, r0
 8002184:	280a      	cmp	r0, #10
 8002186:	dc16      	bgt.n	80021b6 <__aeabi_i2d+0x4a>
 8002188:	0002      	movs	r2, r0
 800218a:	002e      	movs	r6, r5
 800218c:	3215      	adds	r2, #21
 800218e:	4096      	lsls	r6, r2
 8002190:	220b      	movs	r2, #11
 8002192:	1a12      	subs	r2, r2, r0
 8002194:	40d5      	lsrs	r5, r2
 8002196:	055b      	lsls	r3, r3, #21
 8002198:	032d      	lsls	r5, r5, #12
 800219a:	0b2d      	lsrs	r5, r5, #12
 800219c:	0d5b      	lsrs	r3, r3, #21
 800219e:	e003      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021a0:	2400      	movs	r4, #0
 80021a2:	2300      	movs	r3, #0
 80021a4:	2500      	movs	r5, #0
 80021a6:	2600      	movs	r6, #0
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	432b      	orrs	r3, r5
 80021ac:	07e4      	lsls	r4, r4, #31
 80021ae:	4323      	orrs	r3, r4
 80021b0:	0030      	movs	r0, r6
 80021b2:	0019      	movs	r1, r3
 80021b4:	bd70      	pop	{r4, r5, r6, pc}
 80021b6:	380b      	subs	r0, #11
 80021b8:	4085      	lsls	r5, r0
 80021ba:	055b      	lsls	r3, r3, #21
 80021bc:	032d      	lsls	r5, r5, #12
 80021be:	2600      	movs	r6, #0
 80021c0:	0b2d      	lsrs	r5, r5, #12
 80021c2:	0d5b      	lsrs	r3, r3, #21
 80021c4:	e7f0      	b.n	80021a8 <__aeabi_i2d+0x3c>
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	0000041e 	.word	0x0000041e

080021cc <__aeabi_ui2d>:
 80021cc:	b510      	push	{r4, lr}
 80021ce:	1e04      	subs	r4, r0, #0
 80021d0:	d010      	beq.n	80021f4 <__aeabi_ui2d+0x28>
 80021d2:	f000 f8a7 	bl	8002324 <__clzsi2>
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <__aeabi_ui2d+0x48>)
 80021d8:	1a1b      	subs	r3, r3, r0
 80021da:	280a      	cmp	r0, #10
 80021dc:	dc11      	bgt.n	8002202 <__aeabi_ui2d+0x36>
 80021de:	220b      	movs	r2, #11
 80021e0:	0021      	movs	r1, r4
 80021e2:	1a12      	subs	r2, r2, r0
 80021e4:	40d1      	lsrs	r1, r2
 80021e6:	3015      	adds	r0, #21
 80021e8:	030a      	lsls	r2, r1, #12
 80021ea:	055b      	lsls	r3, r3, #21
 80021ec:	4084      	lsls	r4, r0
 80021ee:	0b12      	lsrs	r2, r2, #12
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	e001      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 80021f4:	2300      	movs	r3, #0
 80021f6:	2200      	movs	r2, #0
 80021f8:	051b      	lsls	r3, r3, #20
 80021fa:	4313      	orrs	r3, r2
 80021fc:	0020      	movs	r0, r4
 80021fe:	0019      	movs	r1, r3
 8002200:	bd10      	pop	{r4, pc}
 8002202:	0022      	movs	r2, r4
 8002204:	380b      	subs	r0, #11
 8002206:	4082      	lsls	r2, r0
 8002208:	055b      	lsls	r3, r3, #21
 800220a:	0312      	lsls	r2, r2, #12
 800220c:	2400      	movs	r4, #0
 800220e:	0b12      	lsrs	r2, r2, #12
 8002210:	0d5b      	lsrs	r3, r3, #21
 8002212:	e7f1      	b.n	80021f8 <__aeabi_ui2d+0x2c>
 8002214:	0000041e 	.word	0x0000041e

08002218 <__aeabi_d2f>:
 8002218:	0002      	movs	r2, r0
 800221a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800221c:	004b      	lsls	r3, r1, #1
 800221e:	030d      	lsls	r5, r1, #12
 8002220:	0f40      	lsrs	r0, r0, #29
 8002222:	0d5b      	lsrs	r3, r3, #21
 8002224:	0fcc      	lsrs	r4, r1, #31
 8002226:	0a6d      	lsrs	r5, r5, #9
 8002228:	493a      	ldr	r1, [pc, #232]	; (8002314 <__aeabi_d2f+0xfc>)
 800222a:	4305      	orrs	r5, r0
 800222c:	1c58      	adds	r0, r3, #1
 800222e:	00d7      	lsls	r7, r2, #3
 8002230:	4208      	tst	r0, r1
 8002232:	d00a      	beq.n	800224a <__aeabi_d2f+0x32>
 8002234:	4938      	ldr	r1, [pc, #224]	; (8002318 <__aeabi_d2f+0x100>)
 8002236:	1859      	adds	r1, r3, r1
 8002238:	29fe      	cmp	r1, #254	; 0xfe
 800223a:	dd16      	ble.n	800226a <__aeabi_d2f+0x52>
 800223c:	20ff      	movs	r0, #255	; 0xff
 800223e:	2200      	movs	r2, #0
 8002240:	05c0      	lsls	r0, r0, #23
 8002242:	4310      	orrs	r0, r2
 8002244:	07e4      	lsls	r4, r4, #31
 8002246:	4320      	orrs	r0, r4
 8002248:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800224a:	2b00      	cmp	r3, #0
 800224c:	d106      	bne.n	800225c <__aeabi_d2f+0x44>
 800224e:	433d      	orrs	r5, r7
 8002250:	d026      	beq.n	80022a0 <__aeabi_d2f+0x88>
 8002252:	2205      	movs	r2, #5
 8002254:	0192      	lsls	r2, r2, #6
 8002256:	0a52      	lsrs	r2, r2, #9
 8002258:	b2d8      	uxtb	r0, r3
 800225a:	e7f1      	b.n	8002240 <__aeabi_d2f+0x28>
 800225c:	432f      	orrs	r7, r5
 800225e:	d0ed      	beq.n	800223c <__aeabi_d2f+0x24>
 8002260:	2280      	movs	r2, #128	; 0x80
 8002262:	03d2      	lsls	r2, r2, #15
 8002264:	20ff      	movs	r0, #255	; 0xff
 8002266:	432a      	orrs	r2, r5
 8002268:	e7ea      	b.n	8002240 <__aeabi_d2f+0x28>
 800226a:	2900      	cmp	r1, #0
 800226c:	dd1b      	ble.n	80022a6 <__aeabi_d2f+0x8e>
 800226e:	0192      	lsls	r2, r2, #6
 8002270:	1e50      	subs	r0, r2, #1
 8002272:	4182      	sbcs	r2, r0
 8002274:	00ed      	lsls	r5, r5, #3
 8002276:	0f7f      	lsrs	r7, r7, #29
 8002278:	432a      	orrs	r2, r5
 800227a:	433a      	orrs	r2, r7
 800227c:	0753      	lsls	r3, r2, #29
 800227e:	d047      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002280:	230f      	movs	r3, #15
 8002282:	4013      	ands	r3, r2
 8002284:	2b04      	cmp	r3, #4
 8002286:	d000      	beq.n	800228a <__aeabi_d2f+0x72>
 8002288:	3204      	adds	r2, #4
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	04db      	lsls	r3, r3, #19
 800228e:	4013      	ands	r3, r2
 8002290:	d03e      	beq.n	8002310 <__aeabi_d2f+0xf8>
 8002292:	1c48      	adds	r0, r1, #1
 8002294:	29fe      	cmp	r1, #254	; 0xfe
 8002296:	d0d1      	beq.n	800223c <__aeabi_d2f+0x24>
 8002298:	0192      	lsls	r2, r2, #6
 800229a:	0a52      	lsrs	r2, r2, #9
 800229c:	b2c0      	uxtb	r0, r0
 800229e:	e7cf      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a0:	2000      	movs	r0, #0
 80022a2:	2200      	movs	r2, #0
 80022a4:	e7cc      	b.n	8002240 <__aeabi_d2f+0x28>
 80022a6:	000a      	movs	r2, r1
 80022a8:	3217      	adds	r2, #23
 80022aa:	db2f      	blt.n	800230c <__aeabi_d2f+0xf4>
 80022ac:	2680      	movs	r6, #128	; 0x80
 80022ae:	0436      	lsls	r6, r6, #16
 80022b0:	432e      	orrs	r6, r5
 80022b2:	251e      	movs	r5, #30
 80022b4:	1a6d      	subs	r5, r5, r1
 80022b6:	2d1f      	cmp	r5, #31
 80022b8:	dd11      	ble.n	80022de <__aeabi_d2f+0xc6>
 80022ba:	2202      	movs	r2, #2
 80022bc:	4252      	negs	r2, r2
 80022be:	1a52      	subs	r2, r2, r1
 80022c0:	0031      	movs	r1, r6
 80022c2:	40d1      	lsrs	r1, r2
 80022c4:	2d20      	cmp	r5, #32
 80022c6:	d004      	beq.n	80022d2 <__aeabi_d2f+0xba>
 80022c8:	4a14      	ldr	r2, [pc, #80]	; (800231c <__aeabi_d2f+0x104>)
 80022ca:	4694      	mov	ip, r2
 80022cc:	4463      	add	r3, ip
 80022ce:	409e      	lsls	r6, r3
 80022d0:	4337      	orrs	r7, r6
 80022d2:	003a      	movs	r2, r7
 80022d4:	1e53      	subs	r3, r2, #1
 80022d6:	419a      	sbcs	r2, r3
 80022d8:	430a      	orrs	r2, r1
 80022da:	2100      	movs	r1, #0
 80022dc:	e7ce      	b.n	800227c <__aeabi_d2f+0x64>
 80022de:	4a10      	ldr	r2, [pc, #64]	; (8002320 <__aeabi_d2f+0x108>)
 80022e0:	0038      	movs	r0, r7
 80022e2:	4694      	mov	ip, r2
 80022e4:	4463      	add	r3, ip
 80022e6:	4098      	lsls	r0, r3
 80022e8:	003a      	movs	r2, r7
 80022ea:	1e41      	subs	r1, r0, #1
 80022ec:	4188      	sbcs	r0, r1
 80022ee:	409e      	lsls	r6, r3
 80022f0:	40ea      	lsrs	r2, r5
 80022f2:	4330      	orrs	r0, r6
 80022f4:	4302      	orrs	r2, r0
 80022f6:	2100      	movs	r1, #0
 80022f8:	0753      	lsls	r3, r2, #29
 80022fa:	d1c1      	bne.n	8002280 <__aeabi_d2f+0x68>
 80022fc:	2180      	movs	r1, #128	; 0x80
 80022fe:	0013      	movs	r3, r2
 8002300:	04c9      	lsls	r1, r1, #19
 8002302:	2001      	movs	r0, #1
 8002304:	400b      	ands	r3, r1
 8002306:	420a      	tst	r2, r1
 8002308:	d1c6      	bne.n	8002298 <__aeabi_d2f+0x80>
 800230a:	e7a3      	b.n	8002254 <__aeabi_d2f+0x3c>
 800230c:	2300      	movs	r3, #0
 800230e:	e7a0      	b.n	8002252 <__aeabi_d2f+0x3a>
 8002310:	000b      	movs	r3, r1
 8002312:	e79f      	b.n	8002254 <__aeabi_d2f+0x3c>
 8002314:	000007fe 	.word	0x000007fe
 8002318:	fffffc80 	.word	0xfffffc80
 800231c:	fffffca2 	.word	0xfffffca2
 8002320:	fffffc82 	.word	0xfffffc82

08002324 <__clzsi2>:
 8002324:	211c      	movs	r1, #28
 8002326:	2301      	movs	r3, #1
 8002328:	041b      	lsls	r3, r3, #16
 800232a:	4298      	cmp	r0, r3
 800232c:	d301      	bcc.n	8002332 <__clzsi2+0xe>
 800232e:	0c00      	lsrs	r0, r0, #16
 8002330:	3910      	subs	r1, #16
 8002332:	0a1b      	lsrs	r3, r3, #8
 8002334:	4298      	cmp	r0, r3
 8002336:	d301      	bcc.n	800233c <__clzsi2+0x18>
 8002338:	0a00      	lsrs	r0, r0, #8
 800233a:	3908      	subs	r1, #8
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	4298      	cmp	r0, r3
 8002340:	d301      	bcc.n	8002346 <__clzsi2+0x22>
 8002342:	0900      	lsrs	r0, r0, #4
 8002344:	3904      	subs	r1, #4
 8002346:	a202      	add	r2, pc, #8	; (adr r2, 8002350 <__clzsi2+0x2c>)
 8002348:	5c10      	ldrb	r0, [r2, r0]
 800234a:	1840      	adds	r0, r0, r1
 800234c:	4770      	bx	lr
 800234e:	46c0      	nop			; (mov r8, r8)
 8002350:	02020304 	.word	0x02020304
 8002354:	01010101 	.word	0x01010101
	...

08002360 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002360:	b590      	push	{r4, r7, lr}
 8002362:	b087      	sub	sp, #28
 8002364:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002366:	1d3b      	adds	r3, r7, #4
 8002368:	4a08      	ldr	r2, [pc, #32]	; (800238c <MX_FREERTOS_Init+0x2c>)
 800236a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800236c:	c313      	stmia	r3!, {r0, r1, r4}
 800236e:	ca03      	ldmia	r2!, {r0, r1}
 8002370:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2100      	movs	r1, #0
 8002376:	0018      	movs	r0, r3
 8002378:	f006 f8ad 	bl	80084d6 <osThreadCreate>
 800237c:	0002      	movs	r2, r0
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <MX_FREERTOS_Init+0x30>)
 8002380:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	46bd      	mov	sp, r7
 8002386:	b007      	add	sp, #28
 8002388:	bd90      	pop	{r4, r7, pc}
 800238a:	46c0      	nop			; (mov r8, r8)
 800238c:	0800e81c 	.word	0x0800e81c
 8002390:	20000224 	.word	0x20000224

08002394 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800239c:	2001      	movs	r0, #1
 800239e:	f006 f8c2 	bl	8008526 <osDelay>
 80023a2:	e7fb      	b.n	800239c <StartDefaultTask+0x8>

080023a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b08b      	sub	sp, #44	; 0x2c
 80023a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023aa:	2414      	movs	r4, #20
 80023ac:	193b      	adds	r3, r7, r4
 80023ae:	0018      	movs	r0, r3
 80023b0:	2314      	movs	r3, #20
 80023b2:	001a      	movs	r2, r3
 80023b4:	2100      	movs	r1, #0
 80023b6:	f008 fd43 	bl	800ae40 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	4b68      	ldr	r3, [pc, #416]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023be:	4b67      	ldr	r3, [pc, #412]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023c0:	2104      	movs	r1, #4
 80023c2:	430a      	orrs	r2, r1
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
 80023c6:	4b65      	ldr	r3, [pc, #404]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	2204      	movs	r2, #4
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d2:	4b62      	ldr	r3, [pc, #392]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d6:	4b61      	ldr	r3, [pc, #388]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023d8:	2120      	movs	r1, #32
 80023da:	430a      	orrs	r2, r1
 80023dc:	635a      	str	r2, [r3, #52]	; 0x34
 80023de:	4b5f      	ldr	r3, [pc, #380]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	2220      	movs	r2, #32
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	4b5c      	ldr	r3, [pc, #368]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ee:	4b5b      	ldr	r3, [pc, #364]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	430a      	orrs	r2, r1
 80023f4:	635a      	str	r2, [r3, #52]	; 0x34
 80023f6:	4b59      	ldr	r3, [pc, #356]	; (800255c <MX_GPIO_Init+0x1b8>)
 80023f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023fa:	2201      	movs	r2, #1
 80023fc:	4013      	ands	r3, r2
 80023fe:	60bb      	str	r3, [r7, #8]
 8002400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <MX_GPIO_Init+0x1b8>)
 8002404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002406:	4b55      	ldr	r3, [pc, #340]	; (800255c <MX_GPIO_Init+0x1b8>)
 8002408:	2102      	movs	r1, #2
 800240a:	430a      	orrs	r2, r1
 800240c:	635a      	str	r2, [r3, #52]	; 0x34
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <MX_GPIO_Init+0x1b8>)
 8002410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002412:	2202      	movs	r2, #2
 8002414:	4013      	ands	r3, r2
 8002416:	607b      	str	r3, [r7, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	4b50      	ldr	r3, [pc, #320]	; (800255c <MX_GPIO_Init+0x1b8>)
 800241c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241e:	4b4f      	ldr	r3, [pc, #316]	; (800255c <MX_GPIO_Init+0x1b8>)
 8002420:	2108      	movs	r1, #8
 8002422:	430a      	orrs	r2, r1
 8002424:	635a      	str	r2, [r3, #52]	; 0x34
 8002426:	4b4d      	ldr	r3, [pc, #308]	; (800255c <MX_GPIO_Init+0x1b8>)
 8002428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242a:	2208      	movs	r2, #8
 800242c:	4013      	ands	r3, r2
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin, GPIO_PIN_RESET);
 8002432:	23c0      	movs	r3, #192	; 0xc0
 8002434:	01db      	lsls	r3, r3, #7
 8002436:	484a      	ldr	r0, [pc, #296]	; (8002560 <MX_GPIO_Init+0x1bc>)
 8002438:	2200      	movs	r2, #0
 800243a:	0019      	movs	r1, r3
 800243c:	f002 f95e 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 8002440:	23a0      	movs	r3, #160	; 0xa0
 8002442:	05db      	lsls	r3, r3, #23
 8002444:	2200      	movs	r2, #0
 8002446:	2103      	movs	r1, #3
 8002448:	0018      	movs	r0, r3
 800244a:	f002 f957 	bl	80046fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin;
 800244e:	193b      	adds	r3, r7, r4
 8002450:	22c0      	movs	r2, #192	; 0xc0
 8002452:	01d2      	lsls	r2, r2, #7
 8002454:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002456:	193b      	adds	r3, r7, r4
 8002458:	2201      	movs	r2, #1
 800245a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	193b      	adds	r3, r7, r4
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002462:	193b      	adds	r3, r7, r4
 8002464:	2200      	movs	r2, #0
 8002466:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002468:	193b      	adds	r3, r7, r4
 800246a:	4a3d      	ldr	r2, [pc, #244]	; (8002560 <MX_GPIO_Init+0x1bc>)
 800246c:	0019      	movs	r1, r3
 800246e:	0010      	movs	r0, r2
 8002470:	f001 ffe0 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_ERROR_Pin;
 8002474:	193b      	adds	r3, r7, r4
 8002476:	2203      	movs	r2, #3
 8002478:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800247a:	193b      	adds	r3, r7, r4
 800247c:	2201      	movs	r2, #1
 800247e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	193b      	adds	r3, r7, r4
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	193b      	adds	r3, r7, r4
 8002488:	2200      	movs	r2, #0
 800248a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800248c:	193a      	adds	r2, r7, r4
 800248e:	23a0      	movs	r3, #160	; 0xa0
 8002490:	05db      	lsls	r3, r3, #23
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f001 ffcd 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BORDURE_1_Pin|BORDURE_2_Pin|BORDURE_3_Pin;
 800249a:	0021      	movs	r1, r4
 800249c:	187b      	adds	r3, r7, r1
 800249e:	22e0      	movs	r2, #224	; 0xe0
 80024a0:	0212      	lsls	r2, r2, #8
 80024a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2288      	movs	r2, #136	; 0x88
 80024a8:	0352      	lsls	r2, r2, #13
 80024aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	000c      	movs	r4, r1
 80024ae:	193b      	adds	r3, r7, r4
 80024b0:	2200      	movs	r2, #0
 80024b2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	4a2b      	ldr	r2, [pc, #172]	; (8002564 <MX_GPIO_Init+0x1c0>)
 80024b8:	0019      	movs	r1, r3
 80024ba:	0010      	movs	r0, r2
 80024bc:	f001 ffba 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUMPER_1_Pin|BUMPER_2_Pin;
 80024c0:	193b      	adds	r3, r7, r4
 80024c2:	22c0      	movs	r2, #192	; 0xc0
 80024c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024c6:	193b      	adds	r3, r7, r4
 80024c8:	2288      	movs	r2, #136	; 0x88
 80024ca:	0352      	lsls	r2, r2, #13
 80024cc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	193b      	adds	r3, r7, r4
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	193b      	adds	r3, r7, r4
 80024d6:	4a22      	ldr	r2, [pc, #136]	; (8002560 <MX_GPIO_Init+0x1bc>)
 80024d8:	0019      	movs	r1, r3
 80024da:	0010      	movs	r0, r2
 80024dc:	f001 ffaa 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BUMPER_3_Pin|BUMPER_4_Pin;
 80024e0:	193b      	adds	r3, r7, r4
 80024e2:	22c0      	movs	r2, #192	; 0xc0
 80024e4:	0092      	lsls	r2, r2, #2
 80024e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80024e8:	193b      	adds	r3, r7, r4
 80024ea:	2288      	movs	r2, #136	; 0x88
 80024ec:	0352      	lsls	r2, r2, #13
 80024ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f0:	193b      	adds	r3, r7, r4
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f6:	193b      	adds	r3, r7, r4
 80024f8:	4a1b      	ldr	r2, [pc, #108]	; (8002568 <MX_GPIO_Init+0x1c4>)
 80024fa:	0019      	movs	r1, r3
 80024fc:	0010      	movs	r0, r2
 80024fe:	f001 ff99 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 8002502:	193b      	adds	r3, r7, r4
 8002504:	22e0      	movs	r2, #224	; 0xe0
 8002506:	0152      	lsls	r2, r2, #5
 8002508:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800250a:	193b      	adds	r3, r7, r4
 800250c:	2288      	movs	r2, #136	; 0x88
 800250e:	0352      	lsls	r2, r2, #13
 8002510:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	193b      	adds	r3, r7, r4
 8002514:	2200      	movs	r2, #0
 8002516:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002518:	193a      	adds	r2, r7, r4
 800251a:	23a0      	movs	r3, #160	; 0xa0
 800251c:	05db      	lsls	r3, r3, #23
 800251e:	0011      	movs	r1, r2
 8002520:	0018      	movs	r0, r3
 8002522:	f001 ff87 	bl	8004434 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002526:	193b      	adds	r3, r7, r4
 8002528:	227f      	movs	r2, #127	; 0x7f
 800252a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800252c:	193b      	adds	r3, r7, r4
 800252e:	2200      	movs	r2, #0
 8002530:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	193b      	adds	r3, r7, r4
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002538:	193b      	adds	r3, r7, r4
 800253a:	4a0b      	ldr	r2, [pc, #44]	; (8002568 <MX_GPIO_Init+0x1c4>)
 800253c:	0019      	movs	r1, r3
 800253e:	0010      	movs	r0, r2
 8002540:	f001 ff78 	bl	8004434 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8002544:	2200      	movs	r2, #0
 8002546:	2103      	movs	r1, #3
 8002548:	2007      	movs	r0, #7
 800254a:	f001 fe75 	bl	8004238 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800254e:	2007      	movs	r0, #7
 8002550:	f001 fe87 	bl	8004262 <HAL_NVIC_EnableIRQ>

}
 8002554:	46c0      	nop			; (mov r8, r8)
 8002556:	46bd      	mov	sp, r7
 8002558:	b00b      	add	sp, #44	; 0x2c
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	50000800 	.word	0x50000800
 8002564:	50000400 	.word	0x50000400
 8002568:	50000c00 	.word	0x50000c00

0800256c <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002570:	4b1b      	ldr	r3, [pc, #108]	; (80025e0 <MX_I2C2_Init+0x74>)
 8002572:	4a1c      	ldr	r2, [pc, #112]	; (80025e4 <MX_I2C2_Init+0x78>)
 8002574:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <MX_I2C2_Init+0x74>)
 8002578:	4a1b      	ldr	r2, [pc, #108]	; (80025e8 <MX_I2C2_Init+0x7c>)
 800257a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800257c:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <MX_I2C2_Init+0x74>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002582:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <MX_I2C2_Init+0x74>)
 8002584:	2201      	movs	r2, #1
 8002586:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <MX_I2C2_Init+0x74>)
 800258a:	2200      	movs	r2, #0
 800258c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <MX_I2C2_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002594:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <MX_I2C2_Init+0x74>)
 8002596:	2200      	movs	r2, #0
 8002598:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <MX_I2C2_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80025a0:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <MX_I2C2_Init+0x74>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80025a6:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <MX_I2C2_Init+0x74>)
 80025a8:	0018      	movs	r0, r3
 80025aa:	f002 f903 	bl	80047b4 <HAL_I2C_Init>
 80025ae:	1e03      	subs	r3, r0, #0
 80025b0:	d001      	beq.n	80025b6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80025b2:	f000 f8f9 	bl	80027a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <MX_I2C2_Init+0x74>)
 80025b8:	2100      	movs	r1, #0
 80025ba:	0018      	movs	r0, r3
 80025bc:	f002 f990 	bl	80048e0 <HAL_I2CEx_ConfigAnalogFilter>
 80025c0:	1e03      	subs	r3, r0, #0
 80025c2:	d001      	beq.n	80025c8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80025c4:	f000 f8f0 	bl	80027a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80025c8:	4b05      	ldr	r3, [pc, #20]	; (80025e0 <MX_I2C2_Init+0x74>)
 80025ca:	2100      	movs	r1, #0
 80025cc:	0018      	movs	r0, r3
 80025ce:	f002 f9d3 	bl	8004978 <HAL_I2CEx_ConfigDigitalFilter>
 80025d2:	1e03      	subs	r3, r0, #0
 80025d4:	d001      	beq.n	80025da <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80025d6:	f000 f8e7 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	20000228 	.word	0x20000228
 80025e4:	40005800 	.word	0x40005800
 80025e8:	00303d5b 	.word	0x00303d5b

080025ec <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80025ec:	b590      	push	{r4, r7, lr}
 80025ee:	b08b      	sub	sp, #44	; 0x2c
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f4:	2414      	movs	r4, #20
 80025f6:	193b      	adds	r3, r7, r4
 80025f8:	0018      	movs	r0, r3
 80025fa:	2314      	movs	r3, #20
 80025fc:	001a      	movs	r2, r3
 80025fe:	2100      	movs	r1, #0
 8002600:	f008 fc1e 	bl	800ae40 <memset>
  if(i2cHandle->Instance==I2C2)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <HAL_I2C_MspInit+0x8c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d130      	bne.n	8002670 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_I2C_MspInit+0x90>)
 8002610:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002612:	4b1a      	ldr	r3, [pc, #104]	; (800267c <HAL_I2C_MspInit+0x90>)
 8002614:	2102      	movs	r1, #2
 8002616:	430a      	orrs	r2, r1
 8002618:	635a      	str	r2, [r3, #52]	; 0x34
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <HAL_I2C_MspInit+0x90>)
 800261c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261e:	2202      	movs	r2, #2
 8002620:	4013      	ands	r3, r2
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002626:	193b      	adds	r3, r7, r4
 8002628:	22c0      	movs	r2, #192	; 0xc0
 800262a:	0112      	lsls	r2, r2, #4
 800262c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800262e:	0021      	movs	r1, r4
 8002630:	187b      	adds	r3, r7, r1
 8002632:	2212      	movs	r2, #18
 8002634:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	187b      	adds	r3, r7, r1
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	187b      	adds	r3, r7, r1
 800263e:	2200      	movs	r2, #0
 8002640:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002642:	187b      	adds	r3, r7, r1
 8002644:	2206      	movs	r2, #6
 8002646:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	187b      	adds	r3, r7, r1
 800264a:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_I2C_MspInit+0x94>)
 800264c:	0019      	movs	r1, r3
 800264e:	0010      	movs	r0, r2
 8002650:	f001 fef0 	bl	8004434 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_I2C_MspInit+0x90>)
 8002656:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002658:	4b08      	ldr	r3, [pc, #32]	; (800267c <HAL_I2C_MspInit+0x90>)
 800265a:	2180      	movs	r1, #128	; 0x80
 800265c:	03c9      	lsls	r1, r1, #15
 800265e:	430a      	orrs	r2, r1
 8002660:	63da      	str	r2, [r3, #60]	; 0x3c
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <HAL_I2C_MspInit+0x90>)
 8002664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	03db      	lsls	r3, r3, #15
 800266a:	4013      	ands	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8002670:	46c0      	nop			; (mov r8, r8)
 8002672:	46bd      	mov	sp, r7
 8002674:	b00b      	add	sp, #44	; 0x2c
 8002676:	bd90      	pop	{r4, r7, pc}
 8002678:	40005800 	.word	0x40005800
 800267c:	40021000 	.word	0x40021000
 8002680:	50000400 	.word	0x50000400

08002684 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002688:	f001 fca4 	bl	8003fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800268c:	f000 f84a 	bl	8002724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002690:	f7ff fe88 	bl	80023a4 <MX_GPIO_Init>
  MX_I2C2_Init();
 8002694:	f7ff ff6a 	bl	800256c <MX_I2C2_Init>
  MX_TIM1_Init();
 8002698:	f000 f9ec 	bl	8002a74 <MX_TIM1_Init>
  MX_TIM3_Init();
 800269c:	f000 fa54 	bl	8002b48 <MX_TIM3_Init>
  MX_TIM6_Init();
 80026a0:	f000 fab6 	bl	8002c10 <MX_TIM6_Init>
  MX_TIM7_Init();
 80026a4:	f000 faf0 	bl	8002c88 <MX_TIM7_Init>
  MX_TIM14_Init();
 80026a8:	f000 fb2a 	bl	8002d00 <MX_TIM14_Init>
  MX_TIM15_Init();
 80026ac:	f000 fb78 	bl	8002da0 <MX_TIM15_Init>
  MX_TIM16_Init();
 80026b0:	f000 fc18 	bl	8002ee4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80026b4:	f000 fc9c 	bl	8002ff0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80026b8:	f000 fef6 	bl	80034a8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80026bc:	f000 ff90 	bl	80035e0 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80026c0:	f000 ff40 	bl	8003544 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Create and start FreeRTOS tasks
  HAL_TIM_PWM_Start(left_motor.forward_htim,left_motor.forward_CHANNEL);
 80026c4:	4b15      	ldr	r3, [pc, #84]	; (800271c <main+0x98>)
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4b14      	ldr	r3, [pc, #80]	; (800271c <main+0x98>)
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	0019      	movs	r1, r3
 80026ce:	0010      	movs	r0, r2
 80026d0:	f003 f886 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(left_motor.reverse_htim,left_motor.reverse_CHANNEL);
 80026d4:	4b11      	ldr	r3, [pc, #68]	; (800271c <main+0x98>)
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	4b10      	ldr	r3, [pc, #64]	; (800271c <main+0x98>)
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	0019      	movs	r1, r3
 80026de:	0010      	movs	r0, r2
 80026e0:	f003 f87e 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(right_motor.forward_htim,right_motor.forward_CHANNEL);
 80026e4:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <main+0x9c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b0d      	ldr	r3, [pc, #52]	; (8002720 <main+0x9c>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0019      	movs	r1, r3
 80026ee:	0010      	movs	r0, r2
 80026f0:	f003 f876 	bl	80057e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(right_motor.reverse_htim,right_motor.reverse_CHANNEL);
 80026f4:	4b0a      	ldr	r3, [pc, #40]	; (8002720 <main+0x9c>)
 80026f6:	689a      	ldr	r2, [r3, #8]
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <main+0x9c>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	0019      	movs	r1, r3
 80026fe:	0010      	movs	r0, r2
 8002700:	f003 f86e 	bl	80057e0 <HAL_TIM_PWM_Start>
  Start_HC05_Tasks();
 8002704:	f001 f92e 	bl	8003964 <Start_HC05_Tasks>
  Start_motor_Tasks();
 8002708:	f001 f980 	bl	8003a0c <Start_motor_Tasks>
  // Start the scheduler
  vTaskStartScheduler();
 800270c:	f006 fcca 	bl	80090a4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8002710:	f7ff fe26 	bl	8002360 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002714:	f005 fed7 	bl	80084c6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002718:	e7fe      	b.n	8002718 <main+0x94>
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	20000014 	.word	0x20000014
 8002720:	20000024 	.word	0x20000024

08002724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002724:	b590      	push	{r4, r7, lr}
 8002726:	b093      	sub	sp, #76	; 0x4c
 8002728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800272a:	2414      	movs	r4, #20
 800272c:	193b      	adds	r3, r7, r4
 800272e:	0018      	movs	r0, r3
 8002730:	2334      	movs	r3, #52	; 0x34
 8002732:	001a      	movs	r2, r3
 8002734:	2100      	movs	r1, #0
 8002736:	f008 fb83 	bl	800ae40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800273a:	1d3b      	adds	r3, r7, #4
 800273c:	0018      	movs	r0, r3
 800273e:	2310      	movs	r3, #16
 8002740:	001a      	movs	r2, r3
 8002742:	2100      	movs	r1, #0
 8002744:	f008 fb7c 	bl	800ae40 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	0018      	movs	r0, r3
 800274e:	f002 f95f 	bl	8004a10 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002752:	193b      	adds	r3, r7, r4
 8002754:	2201      	movs	r2, #1
 8002756:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002758:	193b      	adds	r3, r7, r4
 800275a:	2280      	movs	r2, #128	; 0x80
 800275c:	0252      	lsls	r2, r2, #9
 800275e:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002760:	193b      	adds	r3, r7, r4
 8002762:	2200      	movs	r2, #0
 8002764:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002766:	193b      	adds	r3, r7, r4
 8002768:	0018      	movs	r0, r3
 800276a:	f002 f99d 	bl	8004aa8 <HAL_RCC_OscConfig>
 800276e:	1e03      	subs	r3, r0, #0
 8002770:	d001      	beq.n	8002776 <SystemClock_Config+0x52>
  {
    Error_Handler();
 8002772:	f000 f819 	bl	80027a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002776:	1d3b      	adds	r3, r7, #4
 8002778:	2207      	movs	r2, #7
 800277a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2201      	movs	r2, #1
 8002780:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002782:	1d3b      	adds	r3, r7, #4
 8002784:	2200      	movs	r2, #0
 8002786:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002788:	1d3b      	adds	r3, r7, #4
 800278a:	2200      	movs	r2, #0
 800278c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800278e:	1d3b      	adds	r3, r7, #4
 8002790:	2100      	movs	r1, #0
 8002792:	0018      	movs	r0, r3
 8002794:	f002 fc98 	bl	80050c8 <HAL_RCC_ClockConfig>
 8002798:	1e03      	subs	r3, r0, #0
 800279a:	d001      	beq.n	80027a0 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800279c:	f000 f804 	bl	80027a8 <Error_Handler>
  }
}
 80027a0:	46c0      	nop			; (mov r8, r8)
 80027a2:	46bd      	mov	sp, r7
 80027a4:	b013      	add	sp, #76	; 0x4c
 80027a6:	bd90      	pop	{r4, r7, pc}

080027a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027ac:	b672      	cpsid	i
}
 80027ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027b0:	e7fe      	b.n	80027b0 <Error_Handler+0x8>
	...

080027b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ba:	4b12      	ldr	r3, [pc, #72]	; (8002804 <HAL_MspInit+0x50>)
 80027bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027be:	4b11      	ldr	r3, [pc, #68]	; (8002804 <HAL_MspInit+0x50>)
 80027c0:	2101      	movs	r1, #1
 80027c2:	430a      	orrs	r2, r1
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
 80027c6:	4b0f      	ldr	r3, [pc, #60]	; (8002804 <HAL_MspInit+0x50>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	2201      	movs	r2, #1
 80027cc:	4013      	ands	r3, r2
 80027ce:	607b      	str	r3, [r7, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <HAL_MspInit+0x50>)
 80027d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027d6:	4b0b      	ldr	r3, [pc, #44]	; (8002804 <HAL_MspInit+0x50>)
 80027d8:	2180      	movs	r1, #128	; 0x80
 80027da:	0549      	lsls	r1, r1, #21
 80027dc:	430a      	orrs	r2, r1
 80027de:	63da      	str	r2, [r3, #60]	; 0x3c
 80027e0:	4b08      	ldr	r3, [pc, #32]	; (8002804 <HAL_MspInit+0x50>)
 80027e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027e4:	2380      	movs	r3, #128	; 0x80
 80027e6:	055b      	lsls	r3, r3, #21
 80027e8:	4013      	ands	r3, r2
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80027ee:	2302      	movs	r3, #2
 80027f0:	425b      	negs	r3, r3
 80027f2:	2200      	movs	r2, #0
 80027f4:	2103      	movs	r1, #3
 80027f6:	0018      	movs	r0, r3
 80027f8:	f001 fd1e 	bl	8004238 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027fc:	46c0      	nop			; (mov r8, r8)
 80027fe:	46bd      	mov	sp, r7
 8002800:	b002      	add	sp, #8
 8002802:	bd80      	pop	{r7, pc}
 8002804:	40021000 	.word	0x40021000

08002808 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800280c:	e7fe      	b.n	800280c <NMI_Handler+0x4>

0800280e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800280e:	b580      	push	{r7, lr}
 8002810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002812:	e7fe      	b.n	8002812 <HardFault_Handler+0x4>

08002814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002818:	f001 fc46 	bl	80040a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800281c:	f006 ffac 	bl	8009778 <xTaskGetSchedulerState>
 8002820:	0003      	movs	r3, r0
 8002822:	2b01      	cmp	r3, #1
 8002824:	d001      	beq.n	800282a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002826:	f007 f967 	bl	8009af8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800282a:	46c0      	nop			; (mov r8, r8)
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUMPER_1_Pin);
 8002834:	2040      	movs	r0, #64	; 0x40
 8002836:	f001 ff7f 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_2_Pin);
 800283a:	2080      	movs	r0, #128	; 0x80
 800283c:	f001 ff7c 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_3_Pin);
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	0018      	movs	r0, r3
 8002846:	f001 ff77 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_4_Pin);
 800284a:	2380      	movs	r3, #128	; 0x80
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	0018      	movs	r0, r3
 8002850:	f001 ff72 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 8002854:	2380      	movs	r3, #128	; 0x80
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	0018      	movs	r0, r3
 800285a:	f001 ff6d 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	011b      	lsls	r3, r3, #4
 8002862:	0018      	movs	r0, r3
 8002864:	f001 ff68 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_3_Pin);
 8002868:	2380      	movs	r3, #128	; 0x80
 800286a:	015b      	lsls	r3, r3, #5
 800286c:	0018      	movs	r0, r3
 800286e:	f001 ff63 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_1_Pin);
 8002872:	2380      	movs	r3, #128	; 0x80
 8002874:	019b      	lsls	r3, r3, #6
 8002876:	0018      	movs	r0, r3
 8002878:	f001 ff5e 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_2_Pin);
 800287c:	2380      	movs	r3, #128	; 0x80
 800287e:	01db      	lsls	r3, r3, #7
 8002880:	0018      	movs	r0, r3
 8002882:	f001 ff59 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_3_Pin);
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	021b      	lsls	r3, r3, #8
 800288a:	0018      	movs	r0, r3
 800288c:	f001 ff54 	bl	8004738 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */
	BaseType_t higher_priority_task_woken=pdFALSE;
 800289e:	2300      	movs	r3, #0
 80028a0:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(q_read_BT,(void*)&buffer,&higher_priority_task_woken);
 80028a2:	4b0e      	ldr	r3, [pc, #56]	; (80028dc <USART3_4_IRQHandler+0x44>)
 80028a4:	6818      	ldr	r0, [r3, #0]
 80028a6:	1d3a      	adds	r2, r7, #4
 80028a8:	490d      	ldr	r1, [pc, #52]	; (80028e0 <USART3_4_IRQHandler+0x48>)
 80028aa:	2300      	movs	r3, #0
 80028ac:	f006 f860 	bl	8008970 <xQueueGenericSendFromISR>

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <USART3_4_IRQHandler+0x4c>)
 80028b2:	0018      	movs	r0, r3
 80028b4:	f003 ffd6 	bl	8006864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */
	HAL_UART_Receive_IT(&huart3,&buffer,1);
 80028b8:	4909      	ldr	r1, [pc, #36]	; (80028e0 <USART3_4_IRQHandler+0x48>)
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <USART3_4_IRQHandler+0x4c>)
 80028bc:	2201      	movs	r2, #1
 80028be:	0018      	movs	r0, r3
 80028c0:	f003 ff78 	bl	80067b4 <HAL_UART_Receive_IT>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d003      	beq.n	80028d2 <USART3_4_IRQHandler+0x3a>
 80028ca:	4b07      	ldr	r3, [pc, #28]	; (80028e8 <USART3_4_IRQHandler+0x50>)
 80028cc:	2280      	movs	r2, #128	; 0x80
 80028ce:	0552      	lsls	r2, r2, #21
 80028d0:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_4_IRQn 1 */
}
 80028d2:	46c0      	nop			; (mov r8, r8)
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	200006a0 	.word	0x200006a0
 80028e0:	200006a4 	.word	0x200006a4
 80028e4:	20000608 	.word	0x20000608
 80028e8:	e000ed04 	.word	0xe000ed04

080028ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  return 1;
 80028f0:	2301      	movs	r3, #1
}
 80028f2:	0018      	movs	r0, r3
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_kill>:

int _kill(int pid, int sig)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002902:	f008 faf7 	bl	800aef4 <__errno>
 8002906:	0003      	movs	r3, r0
 8002908:	2216      	movs	r2, #22
 800290a:	601a      	str	r2, [r3, #0]
  return -1;
 800290c:	2301      	movs	r3, #1
 800290e:	425b      	negs	r3, r3
}
 8002910:	0018      	movs	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	b002      	add	sp, #8
 8002916:	bd80      	pop	{r7, pc}

08002918 <_exit>:

void _exit (int status)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002920:	2301      	movs	r3, #1
 8002922:	425a      	negs	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	0011      	movs	r1, r2
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ffe5 	bl	80028f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800292e:	e7fe      	b.n	800292e <_exit+0x16>

08002930 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
 8002940:	e00a      	b.n	8002958 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002942:	e000      	b.n	8002946 <_read+0x16>
 8002944:	bf00      	nop
 8002946:	0001      	movs	r1, r0
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	60ba      	str	r2, [r7, #8]
 800294e:	b2ca      	uxtb	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3301      	adds	r3, #1
 8002956:	617b      	str	r3, [r7, #20]
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	429a      	cmp	r2, r3
 800295e:	dbf0      	blt.n	8002942 <_read+0x12>
  }

  return len;
 8002960:	687b      	ldr	r3, [r7, #4]
}
 8002962:	0018      	movs	r0, r3
 8002964:	46bd      	mov	sp, r7
 8002966:	b006      	add	sp, #24
 8002968:	bd80      	pop	{r7, pc}

0800296a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b086      	sub	sp, #24
 800296e:	af00      	add	r7, sp, #0
 8002970:	60f8      	str	r0, [r7, #12]
 8002972:	60b9      	str	r1, [r7, #8]
 8002974:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	e009      	b.n	8002990 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	1c5a      	adds	r2, r3, #1
 8002980:	60ba      	str	r2, [r7, #8]
 8002982:	781b      	ldrb	r3, [r3, #0]
 8002984:	0018      	movs	r0, r3
 8002986:	e000      	b.n	800298a <_write+0x20>
 8002988:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	3301      	adds	r3, #1
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	dbf1      	blt.n	800297c <_write+0x12>
  }
  return len;
 8002998:	687b      	ldr	r3, [r7, #4]
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b006      	add	sp, #24
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_close>:

int _close(int file)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b082      	sub	sp, #8
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	425b      	negs	r3, r3
}
 80029ae:	0018      	movs	r0, r3
 80029b0:	46bd      	mov	sp, r7
 80029b2:	b002      	add	sp, #8
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b082      	sub	sp, #8
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	2280      	movs	r2, #128	; 0x80
 80029c4:	0192      	lsls	r2, r2, #6
 80029c6:	605a      	str	r2, [r3, #4]
  return 0;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b002      	add	sp, #8
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_isatty>:

int _isatty(int file)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b082      	sub	sp, #8
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	0018      	movs	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	b002      	add	sp, #8
 80029e2:	bd80      	pop	{r7, pc}

080029e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	0018      	movs	r0, r3
 80029f4:	46bd      	mov	sp, r7
 80029f6:	b004      	add	sp, #16
 80029f8:	bd80      	pop	{r7, pc}
	...

080029fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a04:	4a14      	ldr	r2, [pc, #80]	; (8002a58 <_sbrk+0x5c>)
 8002a06:	4b15      	ldr	r3, [pc, #84]	; (8002a5c <_sbrk+0x60>)
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a10:	4b13      	ldr	r3, [pc, #76]	; (8002a60 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d102      	bne.n	8002a1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <_sbrk+0x64>)
 8002a1a:	4a12      	ldr	r2, [pc, #72]	; (8002a64 <_sbrk+0x68>)
 8002a1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a1e:	4b10      	ldr	r3, [pc, #64]	; (8002a60 <_sbrk+0x64>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	18d3      	adds	r3, r2, r3
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d207      	bcs.n	8002a3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a2c:	f008 fa62 	bl	800aef4 <__errno>
 8002a30:	0003      	movs	r3, r0
 8002a32:	220c      	movs	r2, #12
 8002a34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	425b      	negs	r3, r3
 8002a3a:	e009      	b.n	8002a50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a3c:	4b08      	ldr	r3, [pc, #32]	; (8002a60 <_sbrk+0x64>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a42:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <_sbrk+0x64>)
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	18d2      	adds	r2, r2, r3
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <_sbrk+0x64>)
 8002a4c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b006      	add	sp, #24
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20009000 	.word	0x20009000
 8002a5c:	00000400 	.word	0x00000400
 8002a60:	2000027c 	.word	0x2000027c
 8002a64:	20008148 	.word	0x20008148

08002a68 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a6c:	46c0      	nop			; (mov r8, r8)
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
	...

08002a74 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b08d      	sub	sp, #52	; 0x34
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002a7a:	240c      	movs	r4, #12
 8002a7c:	193b      	adds	r3, r7, r4
 8002a7e:	0018      	movs	r0, r3
 8002a80:	2324      	movs	r3, #36	; 0x24
 8002a82:	001a      	movs	r2, r3
 8002a84:	2100      	movs	r1, #0
 8002a86:	f008 f9db 	bl	800ae40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	003b      	movs	r3, r7
 8002a8c:	0018      	movs	r0, r3
 8002a8e:	230c      	movs	r3, #12
 8002a90:	001a      	movs	r2, r3
 8002a92:	2100      	movs	r1, #0
 8002a94:	f008 f9d4 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002a98:	4b28      	ldr	r3, [pc, #160]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002a9a:	4a29      	ldr	r2, [pc, #164]	; (8002b40 <MX_TIM1_Init+0xcc>)
 8002a9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002a9e:	4b27      	ldr	r3, [pc, #156]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aa4:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002aaa:	4b24      	ldr	r3, [pc, #144]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002aac:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <MX_TIM1_Init+0xd0>)
 8002aae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ab0:	4b22      	ldr	r3, [pc, #136]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002ab6:	4b21      	ldr	r3, [pc, #132]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002abc:	4b1f      	ldr	r3, [pc, #124]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002ac2:	0021      	movs	r1, r4
 8002ac4:	187b      	adds	r3, r7, r1
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002aca:	187b      	adds	r3, r7, r1
 8002acc:	2200      	movs	r2, #0
 8002ace:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002ad0:	187b      	adds	r3, r7, r1
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ad6:	187b      	adds	r3, r7, r1
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002adc:	187b      	adds	r3, r7, r1
 8002ade:	2200      	movs	r2, #0
 8002ae0:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002ae2:	187b      	adds	r3, r7, r1
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002ae8:	187b      	adds	r3, r7, r1
 8002aea:	2201      	movs	r2, #1
 8002aec:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002aee:	187b      	adds	r3, r7, r1
 8002af0:	2200      	movs	r2, #0
 8002af2:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002af4:	187b      	adds	r3, r7, r1
 8002af6:	2200      	movs	r2, #0
 8002af8:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002afa:	187a      	adds	r2, r7, r1
 8002afc:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002afe:	0011      	movs	r1, r2
 8002b00:	0018      	movs	r0, r3
 8002b02:	f002 ff51 	bl	80059a8 <HAL_TIM_Encoder_Init>
 8002b06:	1e03      	subs	r3, r0, #0
 8002b08:	d001      	beq.n	8002b0e <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8002b0a:	f7ff fe4d 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b0e:	003b      	movs	r3, r7
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002b14:	003b      	movs	r3, r7
 8002b16:	2200      	movs	r2, #0
 8002b18:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b1a:	003b      	movs	r3, r7
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002b20:	003a      	movs	r2, r7
 8002b22:	4b06      	ldr	r3, [pc, #24]	; (8002b3c <MX_TIM1_Init+0xc8>)
 8002b24:	0011      	movs	r1, r2
 8002b26:	0018      	movs	r0, r3
 8002b28:	f003 fc44 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002b2c:	1e03      	subs	r3, r0, #0
 8002b2e:	d001      	beq.n	8002b34 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8002b30:	f7ff fe3a 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002b34:	46c0      	nop			; (mov r8, r8)
 8002b36:	46bd      	mov	sp, r7
 8002b38:	b00d      	add	sp, #52	; 0x34
 8002b3a:	bd90      	pop	{r4, r7, pc}
 8002b3c:	20000280 	.word	0x20000280
 8002b40:	40012c00 	.word	0x40012c00
 8002b44:	0000ffff 	.word	0x0000ffff

08002b48 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b08d      	sub	sp, #52	; 0x34
 8002b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b4e:	240c      	movs	r4, #12
 8002b50:	193b      	adds	r3, r7, r4
 8002b52:	0018      	movs	r0, r3
 8002b54:	2324      	movs	r3, #36	; 0x24
 8002b56:	001a      	movs	r2, r3
 8002b58:	2100      	movs	r1, #0
 8002b5a:	f008 f971 	bl	800ae40 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b5e:	003b      	movs	r3, r7
 8002b60:	0018      	movs	r0, r3
 8002b62:	230c      	movs	r3, #12
 8002b64:	001a      	movs	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	f008 f96a 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002b6c:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b6e:	4a26      	ldr	r2, [pc, #152]	; (8002c08 <MX_TIM3_Init+0xc0>)
 8002b70:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002b72:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b78:	4b22      	ldr	r3, [pc, #136]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <MX_TIM3_Init+0xc4>)
 8002b82:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002b90:	0021      	movs	r1, r4
 8002b92:	187b      	adds	r3, r7, r1
 8002b94:	2201      	movs	r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002b98:	187b      	adds	r3, r7, r1
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b9e:	187b      	adds	r3, r7, r1
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002ba4:	187b      	adds	r3, r7, r1
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8002baa:	187b      	adds	r3, r7, r1
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002bb0:	187b      	adds	r3, r7, r1
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002bb6:	187b      	adds	r3, r7, r1
 8002bb8:	2201      	movs	r2, #1
 8002bba:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002bbc:	187b      	adds	r3, r7, r1
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002bc8:	187a      	adds	r2, r7, r1
 8002bca:	4b0e      	ldr	r3, [pc, #56]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002bcc:	0011      	movs	r1, r2
 8002bce:	0018      	movs	r0, r3
 8002bd0:	f002 feea 	bl	80059a8 <HAL_TIM_Encoder_Init>
 8002bd4:	1e03      	subs	r3, r0, #0
 8002bd6:	d001      	beq.n	8002bdc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002bd8:	f7ff fde6 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bdc:	003b      	movs	r3, r7
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002be2:	003b      	movs	r3, r7
 8002be4:	2200      	movs	r2, #0
 8002be6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002be8:	003a      	movs	r2, r7
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_TIM3_Init+0xbc>)
 8002bec:	0011      	movs	r1, r2
 8002bee:	0018      	movs	r0, r3
 8002bf0:	f003 fbe0 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002bf4:	1e03      	subs	r3, r0, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8002bf8:	f7ff fdd6 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002bfc:	46c0      	nop			; (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b00d      	add	sp, #52	; 0x34
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	200002cc 	.word	0x200002cc
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	0000ffff 	.word	0x0000ffff

08002c10 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c16:	1d3b      	adds	r3, r7, #4
 8002c18:	0018      	movs	r0, r3
 8002c1a:	230c      	movs	r3, #12
 8002c1c:	001a      	movs	r2, r3
 8002c1e:	2100      	movs	r1, #0
 8002c20:	f008 f90e 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002c24:	4b15      	ldr	r3, [pc, #84]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c26:	4a16      	ldr	r2, [pc, #88]	; (8002c80 <MX_TIM6_Init+0x70>)
 8002c28:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002c2a:	4b14      	ldr	r3, [pc, #80]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8002c36:	4b11      	ldr	r3, [pc, #68]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c38:	4a12      	ldr	r2, [pc, #72]	; (8002c84 <MX_TIM6_Init+0x74>)
 8002c3a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002c42:	4b0e      	ldr	r3, [pc, #56]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c44:	0018      	movs	r0, r3
 8002c46:	f002 fd1b 	bl	8005680 <HAL_TIM_Base_Init>
 8002c4a:	1e03      	subs	r3, r0, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002c4e:	f7ff fdab 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c52:	1d3b      	adds	r3, r7, #4
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c58:	1d3b      	adds	r3, r7, #4
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002c5e:	1d3a      	adds	r2, r7, #4
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <MX_TIM6_Init+0x6c>)
 8002c62:	0011      	movs	r1, r2
 8002c64:	0018      	movs	r0, r3
 8002c66:	f003 fba5 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6a:	1e03      	subs	r3, r0, #0
 8002c6c:	d001      	beq.n	8002c72 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8002c6e:	f7ff fd9b 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	46bd      	mov	sp, r7
 8002c76:	b004      	add	sp, #16
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	46c0      	nop			; (mov r8, r8)
 8002c7c:	20000318 	.word	0x20000318
 8002c80:	40001000 	.word	0x40001000
 8002c84:	0000ffff 	.word	0x0000ffff

08002c88 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c8e:	1d3b      	adds	r3, r7, #4
 8002c90:	0018      	movs	r0, r3
 8002c92:	230c      	movs	r3, #12
 8002c94:	001a      	movs	r2, r3
 8002c96:	2100      	movs	r1, #0
 8002c98:	f008 f8d2 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002c9e:	4a16      	ldr	r2, [pc, #88]	; (8002cf8 <MX_TIM7_Init+0x70>)
 8002ca0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8002ca2:	4b14      	ldr	r3, [pc, #80]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002cae:	4b11      	ldr	r3, [pc, #68]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002cb0:	4a12      	ldr	r2, [pc, #72]	; (8002cfc <MX_TIM7_Init+0x74>)
 8002cb2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cb4:	4b0f      	ldr	r3, [pc, #60]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002cba:	4b0e      	ldr	r3, [pc, #56]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f002 fcdf 	bl	8005680 <HAL_TIM_Base_Init>
 8002cc2:	1e03      	subs	r3, r0, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8002cc6:	f7ff fd6f 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cca:	1d3b      	adds	r3, r7, #4
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cd0:	1d3b      	adds	r3, r7, #4
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002cd6:	1d3a      	adds	r2, r7, #4
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <MX_TIM7_Init+0x6c>)
 8002cda:	0011      	movs	r1, r2
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f003 fb69 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d001      	beq.n	8002cea <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8002ce6:	f7ff fd5f 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	46c0      	nop			; (mov r8, r8)
 8002cf4:	20000364 	.word	0x20000364
 8002cf8:	40001400 	.word	0x40001400
 8002cfc:	0000ffff 	.word	0x0000ffff

08002d00 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b088      	sub	sp, #32
 8002d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002d06:	1d3b      	adds	r3, r7, #4
 8002d08:	0018      	movs	r0, r3
 8002d0a:	231c      	movs	r3, #28
 8002d0c:	001a      	movs	r2, r3
 8002d0e:	2100      	movs	r1, #0
 8002d10:	f008 f896 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002d14:	4b1f      	ldr	r3, [pc, #124]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d16:	4a20      	ldr	r2, [pc, #128]	; (8002d98 <MX_TIM14_Init+0x98>)
 8002d18:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8002d1a:	4b1e      	ldr	r3, [pc, #120]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d20:	4b1c      	ldr	r3, [pc, #112]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8002d26:	4b1b      	ldr	r3, [pc, #108]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d28:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <MX_TIM14_Init+0x9c>)
 8002d2a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d2c:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d32:	4b18      	ldr	r3, [pc, #96]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002d38:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f002 fca0 	bl	8005680 <HAL_TIM_Base_Init>
 8002d40:	1e03      	subs	r3, r0, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8002d44:	f7ff fd30 	bl	80027a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002d48:	4b12      	ldr	r3, [pc, #72]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	f002 fcf0 	bl	8005730 <HAL_TIM_PWM_Init>
 8002d50:	1e03      	subs	r3, r0, #0
 8002d52:	d001      	beq.n	8002d58 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8002d54:	f7ff fd28 	bl	80027a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d58:	1d3b      	adds	r3, r7, #4
 8002d5a:	2260      	movs	r2, #96	; 0x60
 8002d5c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002d5e:	1d3b      	adds	r3, r7, #4
 8002d60:	2200      	movs	r2, #0
 8002d62:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d64:	1d3b      	adds	r3, r7, #4
 8002d66:	2200      	movs	r2, #0
 8002d68:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d6a:	1d3b      	adds	r3, r7, #4
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d70:	1d39      	adds	r1, r7, #4
 8002d72:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	0018      	movs	r0, r3
 8002d78:	f002 febe 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002d80:	f7ff fd12 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002d84:	4b03      	ldr	r3, [pc, #12]	; (8002d94 <MX_TIM14_Init+0x94>)
 8002d86:	0018      	movs	r0, r3
 8002d88:	f000 face 	bl	8003328 <HAL_TIM_MspPostInit>

}
 8002d8c:	46c0      	nop			; (mov r8, r8)
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	b008      	add	sp, #32
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	200003b0 	.word	0x200003b0
 8002d98:	40002000 	.word	0x40002000
 8002d9c:	0000ffff 	.word	0x0000ffff

08002da0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b098      	sub	sp, #96	; 0x60
 8002da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002da6:	2354      	movs	r3, #84	; 0x54
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	0018      	movs	r0, r3
 8002dac:	230c      	movs	r3, #12
 8002dae:	001a      	movs	r2, r3
 8002db0:	2100      	movs	r1, #0
 8002db2:	f008 f845 	bl	800ae40 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002db6:	2338      	movs	r3, #56	; 0x38
 8002db8:	18fb      	adds	r3, r7, r3
 8002dba:	0018      	movs	r0, r3
 8002dbc:	231c      	movs	r3, #28
 8002dbe:	001a      	movs	r2, r3
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	f008 f83d 	bl	800ae40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002dc6:	1d3b      	adds	r3, r7, #4
 8002dc8:	0018      	movs	r0, r3
 8002dca:	2334      	movs	r3, #52	; 0x34
 8002dcc:	001a      	movs	r2, r3
 8002dce:	2100      	movs	r1, #0
 8002dd0:	f008 f836 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002dd4:	4b41      	ldr	r3, [pc, #260]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002dd6:	4a42      	ldr	r2, [pc, #264]	; (8002ee0 <MX_TIM15_Init+0x140>)
 8002dd8:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4;
 8002dda:	4b40      	ldr	r3, [pc, #256]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002ddc:	2204      	movs	r2, #4
 8002dde:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002de0:	4b3e      	ldr	r3, [pc, #248]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 127;
 8002de6:	4b3d      	ldr	r3, [pc, #244]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002de8:	227f      	movs	r2, #127	; 0x7f
 8002dea:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dec:	4b3b      	ldr	r3, [pc, #236]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002df2:	4b3a      	ldr	r3, [pc, #232]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002df4:	2200      	movs	r2, #0
 8002df6:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002df8:	4b38      	ldr	r3, [pc, #224]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002dfa:	2280      	movs	r2, #128	; 0x80
 8002dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8002dfe:	4b37      	ldr	r3, [pc, #220]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002e00:	0018      	movs	r0, r3
 8002e02:	f002 fc95 	bl	8005730 <HAL_TIM_PWM_Init>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d001      	beq.n	8002e0e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8002e0a:	f7ff fccd 	bl	80027a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e0e:	2154      	movs	r1, #84	; 0x54
 8002e10:	187b      	adds	r3, r7, r1
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e16:	187b      	adds	r3, r7, r1
 8002e18:	2200      	movs	r2, #0
 8002e1a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002e1c:	187a      	adds	r2, r7, r1
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002e20:	0011      	movs	r1, r2
 8002e22:	0018      	movs	r0, r3
 8002e24:	f003 fac6 	bl	80063b4 <HAL_TIMEx_MasterConfigSynchronization>
 8002e28:	1e03      	subs	r3, r0, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002e2c:	f7ff fcbc 	bl	80027a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e30:	2138      	movs	r1, #56	; 0x38
 8002e32:	187b      	adds	r3, r7, r1
 8002e34:	2260      	movs	r2, #96	; 0x60
 8002e36:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002e38:	187b      	adds	r3, r7, r1
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e3e:	187b      	adds	r3, r7, r1
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002e44:	187b      	adds	r3, r7, r1
 8002e46:	2200      	movs	r2, #0
 8002e48:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e4a:	187b      	adds	r3, r7, r1
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002e50:	187b      	adds	r3, r7, r1
 8002e52:	2200      	movs	r2, #0
 8002e54:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002e56:	187b      	adds	r3, r7, r1
 8002e58:	2200      	movs	r2, #0
 8002e5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002e5c:	1879      	adds	r1, r7, r1
 8002e5e:	4b1f      	ldr	r3, [pc, #124]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	0018      	movs	r0, r3
 8002e64:	f002 fe48 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002e68:	1e03      	subs	r3, r0, #0
 8002e6a:	d001      	beq.n	8002e70 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8002e6c:	f7ff fc9c 	bl	80027a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002e70:	2338      	movs	r3, #56	; 0x38
 8002e72:	18f9      	adds	r1, r7, r3
 8002e74:	4b19      	ldr	r3, [pc, #100]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002e76:	2204      	movs	r2, #4
 8002e78:	0018      	movs	r0, r3
 8002e7a:	f002 fe3d 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002e7e:	1e03      	subs	r3, r0, #0
 8002e80:	d001      	beq.n	8002e86 <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8002e82:	f7ff fc91 	bl	80027a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002e86:	1d3b      	adds	r3, r7, #4
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	2200      	movs	r2, #0
 8002e90:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002e92:	1d3b      	adds	r3, r7, #4
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002e98:	1d3b      	adds	r3, r7, #4
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002e9e:	1d3b      	adds	r3, r7, #4
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ea4:	1d3b      	adds	r3, r7, #4
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	0192      	lsls	r2, r2, #6
 8002eaa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002eac:	1d3b      	adds	r3, r7, #4
 8002eae:	2200      	movs	r2, #0
 8002eb0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002eb8:	1d3a      	adds	r2, r7, #4
 8002eba:	4b08      	ldr	r3, [pc, #32]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f003 fae0 	bl	8006484 <HAL_TIMEx_ConfigBreakDeadTime>
 8002ec4:	1e03      	subs	r3, r0, #0
 8002ec6:	d001      	beq.n	8002ecc <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8002ec8:	f7ff fc6e 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8002ecc:	4b03      	ldr	r3, [pc, #12]	; (8002edc <MX_TIM15_Init+0x13c>)
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fa2a 	bl	8003328 <HAL_TIM_MspPostInit>

}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b018      	add	sp, #96	; 0x60
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	200003fc 	.word	0x200003fc
 8002ee0:	40014000 	.word	0x40014000

08002ee4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b094      	sub	sp, #80	; 0x50
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002eea:	2334      	movs	r3, #52	; 0x34
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	0018      	movs	r0, r3
 8002ef0:	231c      	movs	r3, #28
 8002ef2:	001a      	movs	r2, r3
 8002ef4:	2100      	movs	r1, #0
 8002ef6:	f007 ffa3 	bl	800ae40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002efa:	003b      	movs	r3, r7
 8002efc:	0018      	movs	r0, r3
 8002efe:	2334      	movs	r3, #52	; 0x34
 8002f00:	001a      	movs	r2, r3
 8002f02:	2100      	movs	r1, #0
 8002f04:	f007 ff9c 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002f08:	4b37      	ldr	r3, [pc, #220]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f0a:	4a38      	ldr	r2, [pc, #224]	; (8002fec <MX_TIM16_Init+0x108>)
 8002f0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8002f0e:	4b36      	ldr	r3, [pc, #216]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f10:	2204      	movs	r2, #4
 8002f12:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f14:	4b34      	ldr	r3, [pc, #208]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 127;
 8002f1a:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f1c:	227f      	movs	r2, #127	; 0x7f
 8002f1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f20:	4b31      	ldr	r3, [pc, #196]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002f26:	4b30      	ldr	r3, [pc, #192]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f28:	2200      	movs	r2, #0
 8002f2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f2c:	4b2e      	ldr	r3, [pc, #184]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002f32:	4b2d      	ldr	r3, [pc, #180]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f34:	0018      	movs	r0, r3
 8002f36:	f002 fba3 	bl	8005680 <HAL_TIM_Base_Init>
 8002f3a:	1e03      	subs	r3, r0, #0
 8002f3c:	d001      	beq.n	8002f42 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002f3e:	f7ff fc33 	bl	80027a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f44:	0018      	movs	r0, r3
 8002f46:	f002 fbf3 	bl	8005730 <HAL_TIM_PWM_Init>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8002f4e:	f7ff fc2b 	bl	80027a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f52:	2134      	movs	r1, #52	; 0x34
 8002f54:	187b      	adds	r3, r7, r1
 8002f56:	2260      	movs	r2, #96	; 0x60
 8002f58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8002f5a:	187b      	adds	r3, r7, r1
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f60:	187b      	adds	r3, r7, r1
 8002f62:	2200      	movs	r2, #0
 8002f64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002f66:	187b      	adds	r3, r7, r1
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f6c:	187b      	adds	r3, r7, r1
 8002f6e:	2200      	movs	r2, #0
 8002f70:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	2200      	movs	r2, #0
 8002f76:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002f78:	187b      	adds	r3, r7, r1
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002f7e:	1879      	adds	r1, r7, r1
 8002f80:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	0018      	movs	r0, r3
 8002f86:	f002 fdb7 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8002f8a:	1e03      	subs	r3, r0, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8002f8e:	f7ff fc0b 	bl	80027a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002f92:	003b      	movs	r3, r7
 8002f94:	2200      	movs	r2, #0
 8002f96:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002f98:	003b      	movs	r3, r7
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002f9e:	003b      	movs	r3, r7
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002fa4:	003b      	movs	r3, r7
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002faa:	003b      	movs	r3, r7
 8002fac:	2200      	movs	r2, #0
 8002fae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002fb0:	003b      	movs	r3, r7
 8002fb2:	2280      	movs	r2, #128	; 0x80
 8002fb4:	0192      	lsls	r2, r2, #6
 8002fb6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002fb8:	003b      	movs	r3, r7
 8002fba:	2200      	movs	r2, #0
 8002fbc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002fbe:	003b      	movs	r3, r7
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002fc4:	003a      	movs	r2, r7
 8002fc6:	4b08      	ldr	r3, [pc, #32]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002fc8:	0011      	movs	r1, r2
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f003 fa5a 	bl	8006484 <HAL_TIMEx_ConfigBreakDeadTime>
 8002fd0:	1e03      	subs	r3, r0, #0
 8002fd2:	d001      	beq.n	8002fd8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8002fd4:	f7ff fbe8 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002fd8:	4b03      	ldr	r3, [pc, #12]	; (8002fe8 <MX_TIM16_Init+0x104>)
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 f9a4 	bl	8003328 <HAL_TIM_MspPostInit>

}
 8002fe0:	46c0      	nop			; (mov r8, r8)
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b014      	add	sp, #80	; 0x50
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	20000448 	.word	0x20000448
 8002fec:	40014400 	.word	0x40014400

08002ff0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b094      	sub	sp, #80	; 0x50
 8002ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002ff6:	2334      	movs	r3, #52	; 0x34
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	231c      	movs	r3, #28
 8002ffe:	001a      	movs	r2, r3
 8003000:	2100      	movs	r1, #0
 8003002:	f007 ff1d 	bl	800ae40 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003006:	003b      	movs	r3, r7
 8003008:	0018      	movs	r0, r3
 800300a:	2334      	movs	r3, #52	; 0x34
 800300c:	001a      	movs	r2, r3
 800300e:	2100      	movs	r1, #0
 8003010:	f007 ff16 	bl	800ae40 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <MX_TIM17_Init+0x104>)
 8003016:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <MX_TIM17_Init+0x108>)
 8003018:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 800301a:	4b36      	ldr	r3, [pc, #216]	; (80030f4 <MX_TIM17_Init+0x104>)
 800301c:	2204      	movs	r2, #4
 800301e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003020:	4b34      	ldr	r3, [pc, #208]	; (80030f4 <MX_TIM17_Init+0x104>)
 8003022:	2200      	movs	r2, #0
 8003024:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 127;
 8003026:	4b33      	ldr	r3, [pc, #204]	; (80030f4 <MX_TIM17_Init+0x104>)
 8003028:	227f      	movs	r2, #127	; 0x7f
 800302a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800302c:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <MX_TIM17_Init+0x104>)
 800302e:	2200      	movs	r2, #0
 8003030:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003032:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <MX_TIM17_Init+0x104>)
 8003034:	2200      	movs	r2, #0
 8003036:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003038:	4b2e      	ldr	r3, [pc, #184]	; (80030f4 <MX_TIM17_Init+0x104>)
 800303a:	2200      	movs	r2, #0
 800303c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800303e:	4b2d      	ldr	r3, [pc, #180]	; (80030f4 <MX_TIM17_Init+0x104>)
 8003040:	0018      	movs	r0, r3
 8003042:	f002 fb1d 	bl	8005680 <HAL_TIM_Base_Init>
 8003046:	1e03      	subs	r3, r0, #0
 8003048:	d001      	beq.n	800304e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 800304a:	f7ff fbad 	bl	80027a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800304e:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <MX_TIM17_Init+0x104>)
 8003050:	0018      	movs	r0, r3
 8003052:	f002 fb6d 	bl	8005730 <HAL_TIM_PWM_Init>
 8003056:	1e03      	subs	r3, r0, #0
 8003058:	d001      	beq.n	800305e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 800305a:	f7ff fba5 	bl	80027a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800305e:	2134      	movs	r1, #52	; 0x34
 8003060:	187b      	adds	r3, r7, r1
 8003062:	2260      	movs	r2, #96	; 0x60
 8003064:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003066:	187b      	adds	r3, r7, r1
 8003068:	2200      	movs	r2, #0
 800306a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800306c:	187b      	adds	r3, r7, r1
 800306e:	2200      	movs	r2, #0
 8003070:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003072:	187b      	adds	r3, r7, r1
 8003074:	2200      	movs	r2, #0
 8003076:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003078:	187b      	adds	r3, r7, r1
 800307a:	2200      	movs	r2, #0
 800307c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800307e:	187b      	adds	r3, r7, r1
 8003080:	2200      	movs	r2, #0
 8003082:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003084:	187b      	adds	r3, r7, r1
 8003086:	2200      	movs	r2, #0
 8003088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800308a:	1879      	adds	r1, r7, r1
 800308c:	4b19      	ldr	r3, [pc, #100]	; (80030f4 <MX_TIM17_Init+0x104>)
 800308e:	2200      	movs	r2, #0
 8003090:	0018      	movs	r0, r3
 8003092:	f002 fd31 	bl	8005af8 <HAL_TIM_PWM_ConfigChannel>
 8003096:	1e03      	subs	r3, r0, #0
 8003098:	d001      	beq.n	800309e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800309a:	f7ff fb85 	bl	80027a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800309e:	003b      	movs	r3, r7
 80030a0:	2200      	movs	r2, #0
 80030a2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80030a4:	003b      	movs	r3, r7
 80030a6:	2200      	movs	r2, #0
 80030a8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80030aa:	003b      	movs	r3, r7
 80030ac:	2200      	movs	r2, #0
 80030ae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80030b0:	003b      	movs	r3, r7
 80030b2:	2200      	movs	r2, #0
 80030b4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80030b6:	003b      	movs	r3, r7
 80030b8:	2200      	movs	r2, #0
 80030ba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80030bc:	003b      	movs	r3, r7
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	0192      	lsls	r2, r2, #6
 80030c2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80030c4:	003b      	movs	r3, r7
 80030c6:	2200      	movs	r2, #0
 80030c8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80030ca:	003b      	movs	r3, r7
 80030cc:	2200      	movs	r2, #0
 80030ce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80030d0:	003a      	movs	r2, r7
 80030d2:	4b08      	ldr	r3, [pc, #32]	; (80030f4 <MX_TIM17_Init+0x104>)
 80030d4:	0011      	movs	r1, r2
 80030d6:	0018      	movs	r0, r3
 80030d8:	f003 f9d4 	bl	8006484 <HAL_TIMEx_ConfigBreakDeadTime>
 80030dc:	1e03      	subs	r3, r0, #0
 80030de:	d001      	beq.n	80030e4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 80030e0:	f7ff fb62 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <MX_TIM17_Init+0x104>)
 80030e6:	0018      	movs	r0, r3
 80030e8:	f000 f91e 	bl	8003328 <HAL_TIM_MspPostInit>

}
 80030ec:	46c0      	nop			; (mov r8, r8)
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b014      	add	sp, #80	; 0x50
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000494 	.word	0x20000494
 80030f8:	40014800 	.word	0x40014800

080030fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80030fc:	b590      	push	{r4, r7, lr}
 80030fe:	b08d      	sub	sp, #52	; 0x34
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003104:	241c      	movs	r4, #28
 8003106:	193b      	adds	r3, r7, r4
 8003108:	0018      	movs	r0, r3
 800310a:	2314      	movs	r3, #20
 800310c:	001a      	movs	r2, r3
 800310e:	2100      	movs	r1, #0
 8003110:	f007 fe96 	bl	800ae40 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a36      	ldr	r2, [pc, #216]	; (80031f4 <HAL_TIM_Encoder_MspInit+0xf8>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d132      	bne.n	8003184 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800311e:	4b36      	ldr	r3, [pc, #216]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003122:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003124:	2180      	movs	r1, #128	; 0x80
 8003126:	0109      	lsls	r1, r1, #4
 8003128:	430a      	orrs	r2, r1
 800312a:	641a      	str	r2, [r3, #64]	; 0x40
 800312c:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800312e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800313a:	4b2f      	ldr	r3, [pc, #188]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800313c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800313e:	4b2e      	ldr	r3, [pc, #184]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003140:	2101      	movs	r1, #1
 8003142:	430a      	orrs	r2, r1
 8003144:	635a      	str	r2, [r3, #52]	; 0x34
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	2201      	movs	r2, #1
 800314c:	4013      	ands	r3, r2
 800314e:	617b      	str	r3, [r7, #20]
 8003150:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_B_Pin|ENCODER_1_A_Pin;
 8003152:	193b      	adds	r3, r7, r4
 8003154:	22c0      	movs	r2, #192	; 0xc0
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800315a:	0021      	movs	r1, r4
 800315c:	187b      	adds	r3, r7, r1
 800315e:	2202      	movs	r2, #2
 8003160:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	187b      	adds	r3, r7, r1
 8003164:	2200      	movs	r2, #0
 8003166:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003168:	187b      	adds	r3, r7, r1
 800316a:	2200      	movs	r2, #0
 800316c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800316e:	187b      	adds	r3, r7, r1
 8003170:	2202      	movs	r2, #2
 8003172:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003174:	187a      	adds	r2, r7, r1
 8003176:	23a0      	movs	r3, #160	; 0xa0
 8003178:	05db      	lsls	r3, r3, #23
 800317a:	0011      	movs	r1, r2
 800317c:	0018      	movs	r0, r3
 800317e:	f001 f959 	bl	8004434 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003182:	e033      	b.n	80031ec <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1c      	ldr	r2, [pc, #112]	; (80031fc <HAL_TIM_Encoder_MspInit+0x100>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d12e      	bne.n	80031ec <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800318e:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003190:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003192:	4b19      	ldr	r3, [pc, #100]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 8003194:	2102      	movs	r1, #2
 8003196:	430a      	orrs	r2, r1
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c
 800319a:	4b17      	ldr	r3, [pc, #92]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 800319c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319e:	2202      	movs	r2, #2
 80031a0:	4013      	ands	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031a6:	4b14      	ldr	r3, [pc, #80]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80031a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031aa:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80031ac:	2101      	movs	r1, #1
 80031ae:	430a      	orrs	r2, r1
 80031b0:	635a      	str	r2, [r3, #52]	; 0x34
 80031b2:	4b11      	ldr	r3, [pc, #68]	; (80031f8 <HAL_TIM_Encoder_MspInit+0xfc>)
 80031b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b6:	2201      	movs	r2, #1
 80031b8:	4013      	ands	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_2_A_Pin|ENCODER_2_B_Pin;
 80031be:	211c      	movs	r1, #28
 80031c0:	187b      	adds	r3, r7, r1
 80031c2:	22c0      	movs	r2, #192	; 0xc0
 80031c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	2202      	movs	r2, #2
 80031ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	2200      	movs	r2, #0
 80031d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031d2:	187b      	adds	r3, r7, r1
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80031d8:	187b      	adds	r3, r7, r1
 80031da:	2201      	movs	r2, #1
 80031dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031de:	187a      	adds	r2, r7, r1
 80031e0:	23a0      	movs	r3, #160	; 0xa0
 80031e2:	05db      	lsls	r3, r3, #23
 80031e4:	0011      	movs	r1, r2
 80031e6:	0018      	movs	r0, r3
 80031e8:	f001 f924 	bl	8004434 <HAL_GPIO_Init>
}
 80031ec:	46c0      	nop			; (mov r8, r8)
 80031ee:	46bd      	mov	sp, r7
 80031f0:	b00d      	add	sp, #52	; 0x34
 80031f2:	bd90      	pop	{r4, r7, pc}
 80031f4:	40012c00 	.word	0x40012c00
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40000400 	.word	0x40000400

08003200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a30      	ldr	r2, [pc, #192]	; (80032d0 <HAL_TIM_Base_MspInit+0xd0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d10c      	bne.n	800322c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003212:	4b30      	ldr	r3, [pc, #192]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003214:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003216:	4b2f      	ldr	r3, [pc, #188]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003218:	2110      	movs	r1, #16
 800321a:	430a      	orrs	r2, r1
 800321c:	63da      	str	r2, [r3, #60]	; 0x3c
 800321e:	4b2d      	ldr	r3, [pc, #180]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	2210      	movs	r2, #16
 8003224:	4013      	ands	r3, r2
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800322a:	e04c      	b.n	80032c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a29      	ldr	r2, [pc, #164]	; (80032d8 <HAL_TIM_Base_MspInit+0xd8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d10c      	bne.n	8003250 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003236:	4b27      	ldr	r3, [pc, #156]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003238:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800323a:	4b26      	ldr	r3, [pc, #152]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 800323c:	2120      	movs	r1, #32
 800323e:	430a      	orrs	r2, r1
 8003240:	63da      	str	r2, [r3, #60]	; 0x3c
 8003242:	4b24      	ldr	r3, [pc, #144]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003246:	2220      	movs	r2, #32
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
 800324c:	69bb      	ldr	r3, [r7, #24]
}
 800324e:	e03a      	b.n	80032c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a21      	ldr	r2, [pc, #132]	; (80032dc <HAL_TIM_Base_MspInit+0xdc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800325a:	4b1e      	ldr	r3, [pc, #120]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 800325c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003260:	2180      	movs	r1, #128	; 0x80
 8003262:	0209      	lsls	r1, r1, #8
 8003264:	430a      	orrs	r2, r1
 8003266:	641a      	str	r2, [r3, #64]	; 0x40
 8003268:	4b1a      	ldr	r3, [pc, #104]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 800326a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800326c:	2380      	movs	r3, #128	; 0x80
 800326e:	021b      	lsls	r3, r3, #8
 8003270:	4013      	ands	r3, r2
 8003272:	617b      	str	r3, [r7, #20]
 8003274:	697b      	ldr	r3, [r7, #20]
}
 8003276:	e026      	b.n	80032c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a18      	ldr	r2, [pc, #96]	; (80032e0 <HAL_TIM_Base_MspInit+0xe0>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d10e      	bne.n	80032a0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003282:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003288:	2180      	movs	r1, #128	; 0x80
 800328a:	0289      	lsls	r1, r1, #10
 800328c:	430a      	orrs	r2, r1
 800328e:	641a      	str	r2, [r3, #64]	; 0x40
 8003290:	4b10      	ldr	r3, [pc, #64]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 8003292:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003294:	2380      	movs	r3, #128	; 0x80
 8003296:	029b      	lsls	r3, r3, #10
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
 800329c:	693b      	ldr	r3, [r7, #16]
}
 800329e:	e012      	b.n	80032c6 <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM17)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a0f      	ldr	r2, [pc, #60]	; (80032e4 <HAL_TIM_Base_MspInit+0xe4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d10d      	bne.n	80032c6 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 80032ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032ae:	4b09      	ldr	r3, [pc, #36]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 80032b0:	2180      	movs	r1, #128	; 0x80
 80032b2:	02c9      	lsls	r1, r1, #11
 80032b4:	430a      	orrs	r2, r1
 80032b6:	641a      	str	r2, [r3, #64]	; 0x40
 80032b8:	4b06      	ldr	r3, [pc, #24]	; (80032d4 <HAL_TIM_Base_MspInit+0xd4>)
 80032ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032bc:	2380      	movs	r3, #128	; 0x80
 80032be:	02db      	lsls	r3, r3, #11
 80032c0:	4013      	ands	r3, r2
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
}
 80032c6:	46c0      	nop			; (mov r8, r8)
 80032c8:	46bd      	mov	sp, r7
 80032ca:	b008      	add	sp, #32
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	46c0      	nop			; (mov r8, r8)
 80032d0:	40001000 	.word	0x40001000
 80032d4:	40021000 	.word	0x40021000
 80032d8:	40001400 	.word	0x40001400
 80032dc:	40002000 	.word	0x40002000
 80032e0:	40014400 	.word	0x40014400
 80032e4:	40014800 	.word	0x40014800

080032e8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_TIM_PWM_MspInit+0x38>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d10d      	bne.n	8003316 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <HAL_TIM_PWM_MspInit+0x3c>)
 80032fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032fe:	4b09      	ldr	r3, [pc, #36]	; (8003324 <HAL_TIM_PWM_MspInit+0x3c>)
 8003300:	2180      	movs	r1, #128	; 0x80
 8003302:	0249      	lsls	r1, r1, #9
 8003304:	430a      	orrs	r2, r1
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
 8003308:	4b06      	ldr	r3, [pc, #24]	; (8003324 <HAL_TIM_PWM_MspInit+0x3c>)
 800330a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	025b      	lsls	r3, r3, #9
 8003310:	4013      	ands	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003316:	46c0      	nop			; (mov r8, r8)
 8003318:	46bd      	mov	sp, r7
 800331a:	b004      	add	sp, #16
 800331c:	bd80      	pop	{r7, pc}
 800331e:	46c0      	nop			; (mov r8, r8)
 8003320:	40014000 	.word	0x40014000
 8003324:	40021000 	.word	0x40021000

08003328 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b08d      	sub	sp, #52	; 0x34
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003330:	241c      	movs	r4, #28
 8003332:	193b      	adds	r3, r7, r4
 8003334:	0018      	movs	r0, r3
 8003336:	2314      	movs	r3, #20
 8003338:	001a      	movs	r2, r3
 800333a:	2100      	movs	r1, #0
 800333c:	f007 fd80 	bl	800ae40 <memset>
  if(timHandle->Instance==TIM14)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a51      	ldr	r2, [pc, #324]	; (800348c <HAL_TIM_MspPostInit+0x164>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d123      	bne.n	8003392 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800334a:	4b51      	ldr	r3, [pc, #324]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 800334c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800334e:	4b50      	ldr	r3, [pc, #320]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 8003350:	2104      	movs	r1, #4
 8003352:	430a      	orrs	r2, r1
 8003354:	635a      	str	r2, [r3, #52]	; 0x34
 8003356:	4b4e      	ldr	r3, [pc, #312]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	2204      	movs	r2, #4
 800335c:	4013      	ands	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
 8003360:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8003362:	193b      	adds	r3, r7, r4
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	0152      	lsls	r2, r2, #5
 8003368:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800336a:	0021      	movs	r1, r4
 800336c:	187b      	adds	r3, r7, r1
 800336e:	2202      	movs	r2, #2
 8003370:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003372:	187b      	adds	r3, r7, r1
 8003374:	2200      	movs	r2, #0
 8003376:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	187b      	adds	r3, r7, r1
 800337a:	2200      	movs	r2, #0
 800337c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 800337e:	187b      	adds	r3, r7, r1
 8003380:	2202      	movs	r2, #2
 8003382:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8003384:	187b      	adds	r3, r7, r1
 8003386:	4a43      	ldr	r2, [pc, #268]	; (8003494 <HAL_TIM_MspPostInit+0x16c>)
 8003388:	0019      	movs	r1, r3
 800338a:	0010      	movs	r0, r2
 800338c:	f001 f852 	bl	8004434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003390:	e078      	b.n	8003484 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a40      	ldr	r2, [pc, #256]	; (8003498 <HAL_TIM_MspPostInit+0x170>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d122      	bne.n	80033e2 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800339c:	4b3c      	ldr	r3, [pc, #240]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 800339e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a0:	4b3b      	ldr	r3, [pc, #236]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 80033a2:	2104      	movs	r1, #4
 80033a4:	430a      	orrs	r2, r1
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
 80033a8:	4b39      	ldr	r3, [pc, #228]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	2204      	movs	r2, #4
 80033ae:	4013      	ands	r3, r2
 80033b0:	617b      	str	r3, [r7, #20]
 80033b2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR_1_FWD_Pin|MOTOR_1_REV_Pin;
 80033b4:	211c      	movs	r1, #28
 80033b6:	187b      	adds	r3, r7, r1
 80033b8:	2206      	movs	r2, #6
 80033ba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033bc:	187b      	adds	r3, r7, r1
 80033be:	2202      	movs	r2, #2
 80033c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c2:	187b      	adds	r3, r7, r1
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c8:	187b      	adds	r3, r7, r1
 80033ca:	2200      	movs	r2, #0
 80033cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	2202      	movs	r2, #2
 80033d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033d4:	187b      	adds	r3, r7, r1
 80033d6:	4a2f      	ldr	r2, [pc, #188]	; (8003494 <HAL_TIM_MspPostInit+0x16c>)
 80033d8:	0019      	movs	r1, r3
 80033da:	0010      	movs	r0, r2
 80033dc:	f001 f82a 	bl	8004434 <HAL_GPIO_Init>
}
 80033e0:	e050      	b.n	8003484 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a2d      	ldr	r2, [pc, #180]	; (800349c <HAL_TIM_MspPostInit+0x174>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d123      	bne.n	8003434 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033ec:	4b28      	ldr	r3, [pc, #160]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 80033ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033f0:	4b27      	ldr	r3, [pc, #156]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 80033f2:	2102      	movs	r1, #2
 80033f4:	430a      	orrs	r2, r1
 80033f6:	635a      	str	r2, [r3, #52]	; 0x34
 80033f8:	4b25      	ldr	r3, [pc, #148]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 80033fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033fc:	2202      	movs	r2, #2
 80033fe:	4013      	ands	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
 8003402:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_2_REV_Pin;
 8003404:	211c      	movs	r1, #28
 8003406:	187b      	adds	r3, r7, r1
 8003408:	2280      	movs	r2, #128	; 0x80
 800340a:	0052      	lsls	r2, r2, #1
 800340c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	187b      	adds	r3, r7, r1
 8003410:	2202      	movs	r2, #2
 8003412:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	187b      	adds	r3, r7, r1
 8003416:	2200      	movs	r2, #0
 8003418:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	187b      	adds	r3, r7, r1
 800341c:	2200      	movs	r2, #0
 800341e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8003420:	187b      	adds	r3, r7, r1
 8003422:	2202      	movs	r2, #2
 8003424:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_REV_GPIO_Port, &GPIO_InitStruct);
 8003426:	187b      	adds	r3, r7, r1
 8003428:	4a1d      	ldr	r2, [pc, #116]	; (80034a0 <HAL_TIM_MspPostInit+0x178>)
 800342a:	0019      	movs	r1, r3
 800342c:	0010      	movs	r0, r2
 800342e:	f001 f801 	bl	8004434 <HAL_GPIO_Init>
}
 8003432:	e027      	b.n	8003484 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1a      	ldr	r2, [pc, #104]	; (80034a4 <HAL_TIM_MspPostInit+0x17c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d122      	bne.n	8003484 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343e:	4b14      	ldr	r3, [pc, #80]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 8003440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003442:	4b13      	ldr	r3, [pc, #76]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 8003444:	2102      	movs	r1, #2
 8003446:	430a      	orrs	r2, r1
 8003448:	635a      	str	r2, [r3, #52]	; 0x34
 800344a:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_TIM_MspPostInit+0x168>)
 800344c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800344e:	2202      	movs	r2, #2
 8003450:	4013      	ands	r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
 8003454:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_2_FWD_Pin;
 8003456:	211c      	movs	r1, #28
 8003458:	187b      	adds	r3, r7, r1
 800345a:	2280      	movs	r2, #128	; 0x80
 800345c:	0092      	lsls	r2, r2, #2
 800345e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003460:	187b      	adds	r3, r7, r1
 8003462:	2202      	movs	r2, #2
 8003464:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003466:	187b      	adds	r3, r7, r1
 8003468:	2200      	movs	r2, #0
 800346a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800346c:	187b      	adds	r3, r7, r1
 800346e:	2200      	movs	r2, #0
 8003470:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8003472:	187b      	adds	r3, r7, r1
 8003474:	2202      	movs	r2, #2
 8003476:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_FWD_GPIO_Port, &GPIO_InitStruct);
 8003478:	187b      	adds	r3, r7, r1
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <HAL_TIM_MspPostInit+0x178>)
 800347c:	0019      	movs	r1, r3
 800347e:	0010      	movs	r0, r2
 8003480:	f000 ffd8 	bl	8004434 <HAL_GPIO_Init>
}
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	46bd      	mov	sp, r7
 8003488:	b00d      	add	sp, #52	; 0x34
 800348a:	bd90      	pop	{r4, r7, pc}
 800348c:	40002000 	.word	0x40002000
 8003490:	40021000 	.word	0x40021000
 8003494:	50000800 	.word	0x50000800
 8003498:	40014000 	.word	0x40014000
 800349c:	40014400 	.word	0x40014400
 80034a0:	50000400 	.word	0x50000400
 80034a4:	40014800 	.word	0x40014800

080034a8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80034ac:	4b23      	ldr	r3, [pc, #140]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034ae:	4a24      	ldr	r2, [pc, #144]	; (8003540 <MX_USART1_UART_Init+0x98>)
 80034b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80034b2:	4b22      	ldr	r3, [pc, #136]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034b4:	22e1      	movs	r2, #225	; 0xe1
 80034b6:	0252      	lsls	r2, r2, #9
 80034b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034bc:	2200      	movs	r2, #0
 80034be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80034c0:	4b1e      	ldr	r3, [pc, #120]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80034c6:	4b1d      	ldr	r3, [pc, #116]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034ce:	220c      	movs	r2, #12
 80034d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80034d2:	4b1a      	ldr	r3, [pc, #104]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80034d8:	4b18      	ldr	r3, [pc, #96]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034da:	2200      	movs	r2, #0
 80034dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034de:	4b17      	ldr	r3, [pc, #92]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80034ea:	4b14      	ldr	r3, [pc, #80]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <MX_USART1_UART_Init+0x94>)
 80034f2:	0018      	movs	r0, r3
 80034f4:	f003 f86c 	bl	80065d0 <HAL_UART_Init>
 80034f8:	1e03      	subs	r3, r0, #0
 80034fa:	d001      	beq.n	8003500 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80034fc:	f7ff f954 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003500:	4b0e      	ldr	r3, [pc, #56]	; (800353c <MX_USART1_UART_Init+0x94>)
 8003502:	2100      	movs	r1, #0
 8003504:	0018      	movs	r0, r3
 8003506:	f004 fee5 	bl	80082d4 <HAL_UARTEx_SetTxFifoThreshold>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d001      	beq.n	8003512 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800350e:	f7ff f94b 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <MX_USART1_UART_Init+0x94>)
 8003514:	2100      	movs	r1, #0
 8003516:	0018      	movs	r0, r3
 8003518:	f004 ff1c 	bl	8008354 <HAL_UARTEx_SetRxFifoThreshold>
 800351c:	1e03      	subs	r3, r0, #0
 800351e:	d001      	beq.n	8003524 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003520:	f7ff f942 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <MX_USART1_UART_Init+0x94>)
 8003526:	0018      	movs	r0, r3
 8003528:	f004 fe9a 	bl	8008260 <HAL_UARTEx_DisableFifoMode>
 800352c:	1e03      	subs	r3, r0, #0
 800352e:	d001      	beq.n	8003534 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003530:	f7ff f93a 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	200004e0 	.word	0x200004e0
 8003540:	40013800 	.word	0x40013800

08003544 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003548:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 800354a:	4a24      	ldr	r2, [pc, #144]	; (80035dc <MX_USART2_UART_Init+0x98>)
 800354c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800354e:	4b22      	ldr	r3, [pc, #136]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003550:	22e1      	movs	r2, #225	; 0xe1
 8003552:	0252      	lsls	r2, r2, #9
 8003554:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003558:	2200      	movs	r2, #0
 800355a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800355c:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 800355e:	2200      	movs	r2, #0
 8003560:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003562:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003564:	2200      	movs	r2, #0
 8003566:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003568:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 800356a:	220c      	movs	r2, #12
 800356c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800356e:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003570:	2200      	movs	r2, #0
 8003572:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003576:	2200      	movs	r2, #0
 8003578:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357a:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 800357c:	2200      	movs	r2, #0
 800357e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003582:	2200      	movs	r2, #0
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 8003588:	2200      	movs	r2, #0
 800358a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 800358e:	0018      	movs	r0, r3
 8003590:	f003 f81e 	bl	80065d0 <HAL_UART_Init>
 8003594:	1e03      	subs	r3, r0, #0
 8003596:	d001      	beq.n	800359c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003598:	f7ff f906 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800359c:	4b0e      	ldr	r3, [pc, #56]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 800359e:	2100      	movs	r1, #0
 80035a0:	0018      	movs	r0, r3
 80035a2:	f004 fe97 	bl	80082d4 <HAL_UARTEx_SetTxFifoThreshold>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d001      	beq.n	80035ae <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80035aa:	f7ff f8fd 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 80035b0:	2100      	movs	r1, #0
 80035b2:	0018      	movs	r0, r3
 80035b4:	f004 fece 	bl	8008354 <HAL_UARTEx_SetRxFifoThreshold>
 80035b8:	1e03      	subs	r3, r0, #0
 80035ba:	d001      	beq.n	80035c0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80035bc:	f7ff f8f4 	bl	80027a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80035c0:	4b05      	ldr	r3, [pc, #20]	; (80035d8 <MX_USART2_UART_Init+0x94>)
 80035c2:	0018      	movs	r0, r3
 80035c4:	f004 fe4c 	bl	8008260 <HAL_UARTEx_DisableFifoMode>
 80035c8:	1e03      	subs	r3, r0, #0
 80035ca:	d001      	beq.n	80035d0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80035cc:	f7ff f8ec 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	46c0      	nop			; (mov r8, r8)
 80035d8:	20000574 	.word	0x20000574
 80035dc:	40004400 	.word	0x40004400

080035e0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80035e4:	4b16      	ldr	r3, [pc, #88]	; (8003640 <MX_USART3_UART_Init+0x60>)
 80035e6:	4a17      	ldr	r2, [pc, #92]	; (8003644 <MX_USART3_UART_Init+0x64>)
 80035e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80035ea:	4b15      	ldr	r3, [pc, #84]	; (8003640 <MX_USART3_UART_Init+0x60>)
 80035ec:	2296      	movs	r2, #150	; 0x96
 80035ee:	0192      	lsls	r2, r2, #6
 80035f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035f2:	4b13      	ldr	r3, [pc, #76]	; (8003640 <MX_USART3_UART_Init+0x60>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80035f8:	4b11      	ldr	r3, [pc, #68]	; (8003640 <MX_USART3_UART_Init+0x60>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035fe:	4b10      	ldr	r3, [pc, #64]	; (8003640 <MX_USART3_UART_Init+0x60>)
 8003600:	2200      	movs	r2, #0
 8003602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <MX_USART3_UART_Init+0x60>)
 8003606:	220c      	movs	r2, #12
 8003608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800360a:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <MX_USART3_UART_Init+0x60>)
 800360c:	2200      	movs	r2, #0
 800360e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003610:	4b0b      	ldr	r3, [pc, #44]	; (8003640 <MX_USART3_UART_Init+0x60>)
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <MX_USART3_UART_Init+0x60>)
 8003618:	2200      	movs	r2, #0
 800361a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800361c:	4b08      	ldr	r3, [pc, #32]	; (8003640 <MX_USART3_UART_Init+0x60>)
 800361e:	2200      	movs	r2, #0
 8003620:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003622:	4b07      	ldr	r3, [pc, #28]	; (8003640 <MX_USART3_UART_Init+0x60>)
 8003624:	2200      	movs	r2, #0
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003628:	4b05      	ldr	r3, [pc, #20]	; (8003640 <MX_USART3_UART_Init+0x60>)
 800362a:	0018      	movs	r0, r3
 800362c:	f002 ffd0 	bl	80065d0 <HAL_UART_Init>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d001      	beq.n	8003638 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003634:	f7ff f8b8 	bl	80027a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003638:	46c0      	nop			; (mov r8, r8)
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	20000608 	.word	0x20000608
 8003644:	40004800 	.word	0x40004800

08003648 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003648:	b590      	push	{r4, r7, lr}
 800364a:	b095      	sub	sp, #84	; 0x54
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	233c      	movs	r3, #60	; 0x3c
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	0018      	movs	r0, r3
 8003656:	2314      	movs	r3, #20
 8003658:	001a      	movs	r2, r3
 800365a:	2100      	movs	r1, #0
 800365c:	f007 fbf0 	bl	800ae40 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003660:	2420      	movs	r4, #32
 8003662:	193b      	adds	r3, r7, r4
 8003664:	0018      	movs	r0, r3
 8003666:	231c      	movs	r3, #28
 8003668:	001a      	movs	r2, r3
 800366a:	2100      	movs	r1, #0
 800366c:	f007 fbe8 	bl	800ae40 <memset>
  if(uartHandle->Instance==USART1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a64      	ldr	r2, [pc, #400]	; (8003808 <HAL_UART_MspInit+0x1c0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d13e      	bne.n	80036f8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800367a:	193b      	adds	r3, r7, r4
 800367c:	2201      	movs	r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003680:	193b      	adds	r3, r7, r4
 8003682:	2200      	movs	r2, #0
 8003684:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003686:	193b      	adds	r3, r7, r4
 8003688:	0018      	movs	r0, r3
 800368a:	f001 fec5 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 800368e:	1e03      	subs	r3, r0, #0
 8003690:	d001      	beq.n	8003696 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003692:	f7ff f889 	bl	80027a8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003696:	4b5d      	ldr	r3, [pc, #372]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800369a:	4b5c      	ldr	r3, [pc, #368]	; (800380c <HAL_UART_MspInit+0x1c4>)
 800369c:	2180      	movs	r1, #128	; 0x80
 800369e:	01c9      	lsls	r1, r1, #7
 80036a0:	430a      	orrs	r2, r1
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40
 80036a4:	4b59      	ldr	r3, [pc, #356]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80036a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a8:	2380      	movs	r3, #128	; 0x80
 80036aa:	01db      	lsls	r3, r3, #7
 80036ac:	4013      	ands	r3, r2
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b2:	4b56      	ldr	r3, [pc, #344]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80036b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036b6:	4b55      	ldr	r3, [pc, #340]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80036b8:	2102      	movs	r1, #2
 80036ba:	430a      	orrs	r2, r1
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34
 80036be:	4b53      	ldr	r3, [pc, #332]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80036c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c2:	2202      	movs	r2, #2
 80036c4:	4013      	ands	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]
 80036c8:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80036ca:	213c      	movs	r1, #60	; 0x3c
 80036cc:	187b      	adds	r3, r7, r1
 80036ce:	22c0      	movs	r2, #192	; 0xc0
 80036d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	187b      	adds	r3, r7, r1
 80036d4:	2202      	movs	r2, #2
 80036d6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	187b      	adds	r3, r7, r1
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036de:	187b      	adds	r3, r7, r1
 80036e0:	2200      	movs	r2, #0
 80036e2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	2200      	movs	r2, #0
 80036e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036ea:	187b      	adds	r3, r7, r1
 80036ec:	4a48      	ldr	r2, [pc, #288]	; (8003810 <HAL_UART_MspInit+0x1c8>)
 80036ee:	0019      	movs	r1, r3
 80036f0:	0010      	movs	r0, r2
 80036f2:	f000 fe9f 	bl	8004434 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80036f6:	e082      	b.n	80037fe <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a45      	ldr	r2, [pc, #276]	; (8003814 <HAL_UART_MspInit+0x1cc>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d140      	bne.n	8003784 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003702:	2120      	movs	r1, #32
 8003704:	187b      	adds	r3, r7, r1
 8003706:	2202      	movs	r2, #2
 8003708:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800370a:	187b      	adds	r3, r7, r1
 800370c:	2200      	movs	r2, #0
 800370e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003710:	187b      	adds	r3, r7, r1
 8003712:	0018      	movs	r0, r3
 8003714:	f001 fe80 	bl	8005418 <HAL_RCCEx_PeriphCLKConfig>
 8003718:	1e03      	subs	r3, r0, #0
 800371a:	d001      	beq.n	8003720 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800371c:	f7ff f844 	bl	80027a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003722:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003724:	4b39      	ldr	r3, [pc, #228]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003726:	2180      	movs	r1, #128	; 0x80
 8003728:	0289      	lsls	r1, r1, #10
 800372a:	430a      	orrs	r2, r1
 800372c:	63da      	str	r2, [r3, #60]	; 0x3c
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003730:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003732:	2380      	movs	r3, #128	; 0x80
 8003734:	029b      	lsls	r3, r3, #10
 8003736:	4013      	ands	r3, r2
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800373c:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_UART_MspInit+0x1c4>)
 800373e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003742:	2101      	movs	r1, #1
 8003744:	430a      	orrs	r2, r1
 8003746:	635a      	str	r2, [r3, #52]	; 0x34
 8003748:	4b30      	ldr	r3, [pc, #192]	; (800380c <HAL_UART_MspInit+0x1c4>)
 800374a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374c:	2201      	movs	r2, #1
 800374e:	4013      	ands	r3, r2
 8003750:	613b      	str	r3, [r7, #16]
 8003752:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003754:	213c      	movs	r1, #60	; 0x3c
 8003756:	187b      	adds	r3, r7, r1
 8003758:	220c      	movs	r2, #12
 800375a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800375c:	187b      	adds	r3, r7, r1
 800375e:	2202      	movs	r2, #2
 8003760:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003762:	187b      	adds	r3, r7, r1
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003768:	187b      	adds	r3, r7, r1
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800376e:	187b      	adds	r3, r7, r1
 8003770:	2201      	movs	r2, #1
 8003772:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003774:	187a      	adds	r2, r7, r1
 8003776:	23a0      	movs	r3, #160	; 0xa0
 8003778:	05db      	lsls	r3, r3, #23
 800377a:	0011      	movs	r1, r2
 800377c:	0018      	movs	r0, r3
 800377e:	f000 fe59 	bl	8004434 <HAL_GPIO_Init>
}
 8003782:	e03c      	b.n	80037fe <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART3)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a23      	ldr	r2, [pc, #140]	; (8003818 <HAL_UART_MspInit+0x1d0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d137      	bne.n	80037fe <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 800378e:	4b1f      	ldr	r3, [pc, #124]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003790:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_UART_MspInit+0x1c4>)
 8003794:	2180      	movs	r1, #128	; 0x80
 8003796:	02c9      	lsls	r1, r1, #11
 8003798:	430a      	orrs	r2, r1
 800379a:	63da      	str	r2, [r3, #60]	; 0x3c
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_UART_MspInit+0x1c4>)
 800379e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	02db      	lsls	r3, r3, #11
 80037a4:	4013      	ands	r3, r2
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80037aa:	4b18      	ldr	r3, [pc, #96]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80037ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037ae:	4b17      	ldr	r3, [pc, #92]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80037b0:	2104      	movs	r1, #4
 80037b2:	430a      	orrs	r2, r1
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34
 80037b6:	4b15      	ldr	r3, [pc, #84]	; (800380c <HAL_UART_MspInit+0x1c4>)
 80037b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037ba:	2204      	movs	r2, #4
 80037bc:	4013      	ands	r3, r2
 80037be:	60bb      	str	r3, [r7, #8]
 80037c0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80037c2:	213c      	movs	r1, #60	; 0x3c
 80037c4:	187b      	adds	r3, r7, r1
 80037c6:	2230      	movs	r2, #48	; 0x30
 80037c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ca:	187b      	adds	r3, r7, r1
 80037cc:	2202      	movs	r2, #2
 80037ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d0:	187b      	adds	r3, r7, r1
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d6:	187b      	adds	r3, r7, r1
 80037d8:	2200      	movs	r2, #0
 80037da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80037dc:	187b      	adds	r3, r7, r1
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037e2:	187b      	adds	r3, r7, r1
 80037e4:	4a0d      	ldr	r2, [pc, #52]	; (800381c <HAL_UART_MspInit+0x1d4>)
 80037e6:	0019      	movs	r1, r3
 80037e8:	0010      	movs	r0, r2
 80037ea:	f000 fe23 	bl	8004434 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2103      	movs	r1, #3
 80037f2:	201d      	movs	r0, #29
 80037f4:	f000 fd20 	bl	8004238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 80037f8:	201d      	movs	r0, #29
 80037fa:	f000 fd32 	bl	8004262 <HAL_NVIC_EnableIRQ>
}
 80037fe:	46c0      	nop			; (mov r8, r8)
 8003800:	46bd      	mov	sp, r7
 8003802:	b015      	add	sp, #84	; 0x54
 8003804:	bd90      	pop	{r4, r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	40013800 	.word	0x40013800
 800380c:	40021000 	.word	0x40021000
 8003810:	50000400 	.word	0x50000400
 8003814:	40004400 	.word	0x40004400
 8003818:	40004800 	.word	0x40004800
 800381c:	50000800 	.word	0x50000800

08003820 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003820:	480d      	ldr	r0, [pc, #52]	; (8003858 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003822:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003824:	f7ff f920 	bl	8002a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003828:	480c      	ldr	r0, [pc, #48]	; (800385c <LoopForever+0x6>)
  ldr r1, =_edata
 800382a:	490d      	ldr	r1, [pc, #52]	; (8003860 <LoopForever+0xa>)
  ldr r2, =_sidata
 800382c:	4a0d      	ldr	r2, [pc, #52]	; (8003864 <LoopForever+0xe>)
  movs r3, #0
 800382e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003830:	e002      	b.n	8003838 <LoopCopyDataInit>

08003832 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003832:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003834:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003836:	3304      	adds	r3, #4

08003838 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003838:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800383a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800383c:	d3f9      	bcc.n	8003832 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800383e:	4a0a      	ldr	r2, [pc, #40]	; (8003868 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003840:	4c0a      	ldr	r4, [pc, #40]	; (800386c <LoopForever+0x16>)
  movs r3, #0
 8003842:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003844:	e001      	b.n	800384a <LoopFillZerobss>

08003846 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003846:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003848:	3204      	adds	r2, #4

0800384a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800384a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800384c:	d3fb      	bcc.n	8003846 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800384e:	f007 fb57 	bl	800af00 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8003852:	f7fe ff17 	bl	8002684 <main>

08003856 <LoopForever>:

LoopForever:
  b LoopForever
 8003856:	e7fe      	b.n	8003856 <LoopForever>
  ldr   r0, =_estack
 8003858:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800385c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003860:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 8003864:	0800edb0 	.word	0x0800edb0
  ldr r2, =_sbss
 8003868:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 800386c:	20008144 	.word	0x20008144

08003870 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003870:	e7fe      	b.n	8003870 <ADC1_IRQHandler>
	...

08003874 <print_BT_Task>:

QueueHandle_t q_print_BT=NULL;
QueueHandle_t q_read_BT=NULL;
uint8_t buffer;

void print_BT_Task(void *pvParameters){
 8003874:	b590      	push	{r4, r7, lr}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	uint8_t char_to_send;

	for(;;){
		xQueueReceive(q_print_BT,(void*)&char_to_send,portMAX_DELAY);
 800387c:	4b07      	ldr	r3, [pc, #28]	; (800389c <print_BT_Task+0x28>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2201      	movs	r2, #1
 8003882:	4252      	negs	r2, r2
 8003884:	240f      	movs	r4, #15
 8003886:	1939      	adds	r1, r7, r4
 8003888:	0018      	movs	r0, r3
 800388a:	f005 f8e5 	bl	8008a58 <xQueueReceive>
		HAL_UART_Transmit(&huart3, (uint8_t *)&char_to_send, 1, 0xFFFF);
 800388e:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <print_BT_Task+0x2c>)
 8003890:	1939      	adds	r1, r7, r4
 8003892:	4804      	ldr	r0, [pc, #16]	; (80038a4 <print_BT_Task+0x30>)
 8003894:	2201      	movs	r2, #1
 8003896:	f002 fef1 	bl	800667c <HAL_UART_Transmit>
		xQueueReceive(q_print_BT,(void*)&char_to_send,portMAX_DELAY);
 800389a:	e7ef      	b.n	800387c <print_BT_Task+0x8>
 800389c:	2000069c 	.word	0x2000069c
 80038a0:	0000ffff 	.word	0x0000ffff
 80038a4:	20000608 	.word	0x20000608

080038a8 <send_text>:
	}
}

void send_text(void *pvParameters){
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	static char input_char[]="Hello World\r\n";
	for(;;){
		fill_queue(q_print_BT,input_char);
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <send_text+0x20>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a05      	ldr	r2, [pc, #20]	; (80038cc <send_text+0x24>)
 80038b6:	0011      	movs	r1, r2
 80038b8:	0018      	movs	r0, r3
 80038ba:	f000 f80b 	bl	80038d4 <fill_queue>
		vTaskDelay(10000);
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <send_text+0x28>)
 80038c0:	0018      	movs	r0, r3
 80038c2:	f005 fbc9 	bl	8009058 <vTaskDelay>
		fill_queue(q_print_BT,input_char);
 80038c6:	e7f3      	b.n	80038b0 <send_text+0x8>
 80038c8:	2000069c 	.word	0x2000069c
 80038cc:	20000004 	.word	0x20000004
 80038d0:	00002710 	.word	0x00002710

080038d4 <fill_queue>:
	}
}

void fill_queue(QueueHandle_t queue, const char* text){
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
	for(int i=0;i<strlen(text);i++){
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	e00c      	b.n	80038fe <fill_queue+0x2a>
		xQueueSend(q_print_BT,&text[i],portMAX_DELAY);
 80038e4:	4b0c      	ldr	r3, [pc, #48]	; (8003918 <fill_queue+0x44>)
 80038e6:	6818      	ldr	r0, [r3, #0]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	18d1      	adds	r1, r2, r3
 80038ee:	2301      	movs	r3, #1
 80038f0:	425a      	negs	r2, r3
 80038f2:	2300      	movs	r3, #0
 80038f4:	f004 ff78 	bl	80087e8 <xQueueGenericSend>
	for(int i=0;i<strlen(text);i++){
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	0018      	movs	r0, r3
 8003902:	f7fc fc01 	bl	8000108 <strlen>
 8003906:	0002      	movs	r2, r0
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	429a      	cmp	r2, r3
 800390c:	d8ea      	bhi.n	80038e4 <fill_queue+0x10>
	}
}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	46c0      	nop			; (mov r8, r8)
 8003912:	46bd      	mov	sp, r7
 8003914:	b004      	add	sp, #16
 8003916:	bd80      	pop	{r7, pc}
 8003918:	2000069c 	.word	0x2000069c

0800391c <renvoie>:
		HAL_UART_Receive(&huart3,&buffer,1,portMAX_DELAY);
		xQueueSend(q_read_BT,&buffer,portMAX_DELAY);
	}
}

void renvoie(void *pvParameters){
 800391c:	b590      	push	{r4, r7, lr}
 800391e:	b085      	sub	sp, #20
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
	uint8_t char_to_send;
	HAL_UART_Receive_IT(&huart3,&buffer,1);
 8003924:	490a      	ldr	r1, [pc, #40]	; (8003950 <renvoie+0x34>)
 8003926:	4b0b      	ldr	r3, [pc, #44]	; (8003954 <renvoie+0x38>)
 8003928:	2201      	movs	r2, #1
 800392a:	0018      	movs	r0, r3
 800392c:	f002 ff42 	bl	80067b4 <HAL_UART_Receive_IT>
	for(;;){
		xQueueReceive(q_read_BT,(uint8_t*)&char_to_send,portMAX_DELAY);
 8003930:	4b09      	ldr	r3, [pc, #36]	; (8003958 <renvoie+0x3c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2201      	movs	r2, #1
 8003936:	4252      	negs	r2, r2
 8003938:	240f      	movs	r4, #15
 800393a:	1939      	adds	r1, r7, r4
 800393c:	0018      	movs	r0, r3
 800393e:	f005 f88b 	bl	8008a58 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t *)&char_to_send, 1, 0xFFFF);
 8003942:	4b06      	ldr	r3, [pc, #24]	; (800395c <renvoie+0x40>)
 8003944:	1939      	adds	r1, r7, r4
 8003946:	4806      	ldr	r0, [pc, #24]	; (8003960 <renvoie+0x44>)
 8003948:	2201      	movs	r2, #1
 800394a:	f002 fe97 	bl	800667c <HAL_UART_Transmit>
		xQueueReceive(q_read_BT,(uint8_t*)&char_to_send,portMAX_DELAY);
 800394e:	e7ef      	b.n	8003930 <renvoie+0x14>
 8003950:	200006a4 	.word	0x200006a4
 8003954:	20000608 	.word	0x20000608
 8003958:	200006a0 	.word	0x200006a0
 800395c:	0000ffff 	.word	0x0000ffff
 8003960:	200004e0 	.word	0x200004e0

08003964 <Start_HC05_Tasks>:
	}
}


void Start_HC05_Tasks(void) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af02      	add	r7, sp, #8
	TaskHandle_t TaskHandle_print_BT;
	TaskHandle_t TaskHandle_send_text;
	//TaskHandle_t TaskHandle_read_BT;
	TaskHandle_t TaskHandle_renvoie;

	q_print_BT=xQueueCreate(Q_PRINT_BT_LENGTH,Q_PRINT_BT_SIZE);
 800396a:	2200      	movs	r2, #0
 800396c:	2101      	movs	r1, #1
 800396e:	2064      	movs	r0, #100	; 0x64
 8003970:	f004 feea 	bl	8008748 <xQueueGenericCreate>
 8003974:	0002      	movs	r2, r0
 8003976:	4b17      	ldr	r3, [pc, #92]	; (80039d4 <Start_HC05_Tasks+0x70>)
 8003978:	601a      	str	r2, [r3, #0]
	q_read_BT=xQueueCreate(Q_PRINT_BT_LENGTH,Q_PRINT_BT_SIZE);
 800397a:	2200      	movs	r2, #0
 800397c:	2101      	movs	r1, #1
 800397e:	2064      	movs	r0, #100	; 0x64
 8003980:	f004 fee2 	bl	8008748 <xQueueGenericCreate>
 8003984:	0002      	movs	r2, r0
 8003986:	4b14      	ldr	r3, [pc, #80]	; (80039d8 <Start_HC05_Tasks+0x74>)
 8003988:	601a      	str	r2, [r3, #0]

    xTaskCreate(print_BT_Task,"print_BT_Task",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_print_BT);
 800398a:	4914      	ldr	r1, [pc, #80]	; (80039dc <Start_HC05_Tasks+0x78>)
 800398c:	4814      	ldr	r0, [pc, #80]	; (80039e0 <Start_HC05_Tasks+0x7c>)
 800398e:	230c      	movs	r3, #12
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	9301      	str	r3, [sp, #4]
 8003994:	2301      	movs	r3, #1
 8003996:	9300      	str	r3, [sp, #0]
 8003998:	2300      	movs	r3, #0
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	f005 fa2e 	bl	8008dfc <xTaskCreate>
    xTaskCreate(send_text,"send_text",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_send_text);
 80039a0:	4910      	ldr	r1, [pc, #64]	; (80039e4 <Start_HC05_Tasks+0x80>)
 80039a2:	4811      	ldr	r0, [pc, #68]	; (80039e8 <Start_HC05_Tasks+0x84>)
 80039a4:	2308      	movs	r3, #8
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	9301      	str	r3, [sp, #4]
 80039aa:	2301      	movs	r3, #1
 80039ac:	9300      	str	r3, [sp, #0]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2280      	movs	r2, #128	; 0x80
 80039b2:	f005 fa23 	bl	8008dfc <xTaskCreate>
    //xTaskCreate(read_BT,"read_BT",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_read_BT);
    xTaskCreate(renvoie,"renvoie",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_renvoie);
 80039b6:	490d      	ldr	r1, [pc, #52]	; (80039ec <Start_HC05_Tasks+0x88>)
 80039b8:	480d      	ldr	r0, [pc, #52]	; (80039f0 <Start_HC05_Tasks+0x8c>)
 80039ba:	1d3b      	adds	r3, r7, #4
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2301      	movs	r3, #1
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	f005 fa19 	bl	8008dfc <xTaskCreate>
}
 80039ca:	46c0      	nop			; (mov r8, r8)
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			; (mov r8, r8)
 80039d4:	2000069c 	.word	0x2000069c
 80039d8:	200006a0 	.word	0x200006a0
 80039dc:	0800e830 	.word	0x0800e830
 80039e0:	08003875 	.word	0x08003875
 80039e4:	0800e840 	.word	0x0800e840
 80039e8:	080038a9 	.word	0x080038a9
 80039ec:	0800e84c 	.word	0x0800e84c
 80039f0:	0800391d 	.word	0x0800391d

080039f4 <test3>:
	}
	stop();
	vTaskDelay(2000);
}

void test3(){
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
	move_on_curve_left(1000,50);
 80039f8:	23fa      	movs	r3, #250	; 0xfa
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	2132      	movs	r1, #50	; 0x32
 80039fe:	0018      	movs	r0, r3
 8003a00:	f000 fa96 	bl	8003f30 <move_on_curve_left>
}
 8003a04:	46c0      	nop			; (mov r8, r8)
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
	...

08003a0c <Start_motor_Tasks>:
		vTaskDelay(pdMS_TO_TICKS(2000));
	}
}


void Start_motor_Tasks(){
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af02      	add	r7, sp, #8
	//TaskHandle_t TaskHandle_test1;
	TaskHandle_t TaskHandle_test3;

	//xTaskCreate(test1,"test1",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_test1);
	xTaskCreate((void*)test3,"test3",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_test3);
 8003a12:	4907      	ldr	r1, [pc, #28]	; (8003a30 <Start_motor_Tasks+0x24>)
 8003a14:	4807      	ldr	r0, [pc, #28]	; (8003a34 <Start_motor_Tasks+0x28>)
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	2280      	movs	r2, #128	; 0x80
 8003a22:	f005 f9eb 	bl	8008dfc <xTaskCreate>
}
 8003a26:	46c0      	nop			; (mov r8, r8)
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	b002      	add	sp, #8
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	0800e854 	.word	0x0800e854
 8003a34:	080039f5 	.word	0x080039f5

08003a38 <forward_mode>:

// fonctions de niveau 0: controle moteur

void forward_mode(uint16_t speed,struct driver_motor_t motor)
{
 8003a38:	b084      	sub	sp, #16
 8003a3a:	b5b0      	push	{r4, r5, r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	0004      	movs	r4, r0
 8003a42:	2004      	movs	r0, #4
 8003a44:	2520      	movs	r5, #32
 8003a46:	1940      	adds	r0, r0, r5
 8003a48:	19c0      	adds	r0, r0, r7
 8003a4a:	6001      	str	r1, [r0, #0]
 8003a4c:	6042      	str	r2, [r0, #4]
 8003a4e:	6083      	str	r3, [r0, #8]
 8003a50:	1dbb      	adds	r3, r7, #6
 8003a52:	1c22      	adds	r2, r4, #0
 8003a54:	801a      	strh	r2, [r3, #0]
	if (speed>MAX_SPEED){speed=MAX_SPEED;}
 8003a56:	1dbb      	adds	r3, r7, #6
 8003a58:	881b      	ldrh	r3, [r3, #0]
 8003a5a:	2bf5      	cmp	r3, #245	; 0xf5
 8003a5c:	d902      	bls.n	8003a64 <forward_mode+0x2c>
 8003a5e:	1dbb      	adds	r3, r7, #6
 8003a60:	22f5      	movs	r2, #245	; 0xf5
 8003a62:	801a      	strh	r2, [r3, #0]
	uint16_t compare=speed*MAX_COMPTEUR/MAX_SPEED;
 8003a64:	1dbb      	adds	r3, r7, #6
 8003a66:	881a      	ldrh	r2, [r3, #0]
 8003a68:	0013      	movs	r3, r2
 8003a6a:	01db      	lsls	r3, r3, #7
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	21f5      	movs	r1, #245	; 0xf5
 8003a70:	0018      	movs	r0, r3
 8003a72:	f7fc fbef 	bl	8000254 <__divsi3>
 8003a76:	0003      	movs	r3, r0
 8003a78:	001a      	movs	r2, r3
 8003a7a:	230e      	movs	r3, #14
 8003a7c:	18fb      	adds	r3, r7, r3
 8003a7e:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, 0);
 8003a80:	2304      	movs	r3, #4
 8003a82:	2220      	movs	r2, #32
 8003a84:	189b      	adds	r3, r3, r2
 8003a86:	19db      	adds	r3, r3, r7
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <forward_mode+0x66>
 8003a8e:	2304      	movs	r3, #4
 8003a90:	189b      	adds	r3, r3, r2
 8003a92:	19db      	adds	r3, r3, r7
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	635a      	str	r2, [r3, #52]	; 0x34
 8003a9c:	e043      	b.n	8003b26 <forward_mode+0xee>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	2220      	movs	r2, #32
 8003aa2:	189b      	adds	r3, r3, r2
 8003aa4:	19db      	adds	r3, r3, r7
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b04      	cmp	r3, #4
 8003aaa:	d107      	bne.n	8003abc <forward_mode+0x84>
 8003aac:	2304      	movs	r3, #4
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	6393      	str	r3, [r2, #56]	; 0x38
 8003aba:	e034      	b.n	8003b26 <forward_mode+0xee>
 8003abc:	2304      	movs	r3, #4
 8003abe:	2220      	movs	r2, #32
 8003ac0:	189b      	adds	r3, r3, r2
 8003ac2:	19db      	adds	r3, r3, r7
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d107      	bne.n	8003ada <forward_mode+0xa2>
 8003aca:	2304      	movs	r3, #4
 8003acc:	189b      	adds	r3, r3, r2
 8003ace:	19db      	adds	r3, r3, r7
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003ad8:	e025      	b.n	8003b26 <forward_mode+0xee>
 8003ada:	2304      	movs	r3, #4
 8003adc:	2220      	movs	r2, #32
 8003ade:	189b      	adds	r3, r3, r2
 8003ae0:	19db      	adds	r3, r3, r7
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b0c      	cmp	r3, #12
 8003ae6:	d107      	bne.n	8003af8 <forward_mode+0xc0>
 8003ae8:	2304      	movs	r3, #4
 8003aea:	189b      	adds	r3, r3, r2
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	2300      	movs	r3, #0
 8003af4:	6413      	str	r3, [r2, #64]	; 0x40
 8003af6:	e016      	b.n	8003b26 <forward_mode+0xee>
 8003af8:	2304      	movs	r3, #4
 8003afa:	2220      	movs	r2, #32
 8003afc:	189b      	adds	r3, r3, r2
 8003afe:	19db      	adds	r3, r3, r7
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d107      	bne.n	8003b16 <forward_mode+0xde>
 8003b06:	2304      	movs	r3, #4
 8003b08:	189b      	adds	r3, r3, r2
 8003b0a:	19db      	adds	r3, r3, r7
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2300      	movs	r3, #0
 8003b12:	6593      	str	r3, [r2, #88]	; 0x58
 8003b14:	e007      	b.n	8003b26 <forward_mode+0xee>
 8003b16:	2304      	movs	r3, #4
 8003b18:	2220      	movs	r2, #32
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	19db      	adds	r3, r3, r7
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	2300      	movs	r3, #0
 8003b24:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8003b26:	2304      	movs	r3, #4
 8003b28:	2220      	movs	r2, #32
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	19db      	adds	r3, r3, r7
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d109      	bne.n	8003b48 <forward_mode+0x110>
 8003b34:	2304      	movs	r3, #4
 8003b36:	189b      	adds	r3, r3, r2
 8003b38:	19db      	adds	r3, r3, r7
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	220e      	movs	r2, #14
 8003b40:	18ba      	adds	r2, r7, r2
 8003b42:	8812      	ldrh	r2, [r2, #0]
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003b46:	e04d      	b.n	8003be4 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8003b48:	2304      	movs	r3, #4
 8003b4a:	2220      	movs	r2, #32
 8003b4c:	189b      	adds	r3, r3, r2
 8003b4e:	19db      	adds	r3, r3, r7
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b04      	cmp	r3, #4
 8003b54:	d109      	bne.n	8003b6a <forward_mode+0x132>
 8003b56:	2304      	movs	r3, #4
 8003b58:	189b      	adds	r3, r3, r2
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	230e      	movs	r3, #14
 8003b62:	18fb      	adds	r3, r7, r3
 8003b64:	881b      	ldrh	r3, [r3, #0]
 8003b66:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003b68:	e03c      	b.n	8003be4 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8003b6a:	2304      	movs	r3, #4
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	189b      	adds	r3, r3, r2
 8003b70:	19db      	adds	r3, r3, r7
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b08      	cmp	r3, #8
 8003b76:	d109      	bne.n	8003b8c <forward_mode+0x154>
 8003b78:	2304      	movs	r3, #4
 8003b7a:	189b      	adds	r3, r3, r2
 8003b7c:	19db      	adds	r3, r3, r7
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	230e      	movs	r3, #14
 8003b84:	18fb      	adds	r3, r7, r3
 8003b86:	881b      	ldrh	r3, [r3, #0]
 8003b88:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003b8a:	e02b      	b.n	8003be4 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8003b8c:	2304      	movs	r3, #4
 8003b8e:	2220      	movs	r2, #32
 8003b90:	189b      	adds	r3, r3, r2
 8003b92:	19db      	adds	r3, r3, r7
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d109      	bne.n	8003bae <forward_mode+0x176>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	189b      	adds	r3, r3, r2
 8003b9e:	19db      	adds	r3, r3, r7
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	230e      	movs	r3, #14
 8003ba6:	18fb      	adds	r3, r7, r3
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003bac:	e01a      	b.n	8003be4 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8003bae:	2304      	movs	r3, #4
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	19db      	adds	r3, r3, r7
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	2b10      	cmp	r3, #16
 8003bba:	d109      	bne.n	8003bd0 <forward_mode+0x198>
 8003bbc:	2304      	movs	r3, #4
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	230e      	movs	r3, #14
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003bce:	e009      	b.n	8003be4 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	230e      	movs	r3, #14
 8003bde:	18fb      	adds	r3, r7, r3
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	46bd      	mov	sp, r7
 8003be8:	b004      	add	sp, #16
 8003bea:	bcb0      	pop	{r4, r5, r7}
 8003bec:	bc08      	pop	{r3}
 8003bee:	b004      	add	sp, #16
 8003bf0:	4718      	bx	r3

08003bf2 <reverse_mode>:

void reverse_mode(uint16_t speed,struct driver_motor_t motor)
{
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	b5b0      	push	{r4, r5, r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	0004      	movs	r4, r0
 8003bfc:	2004      	movs	r0, #4
 8003bfe:	2520      	movs	r5, #32
 8003c00:	1940      	adds	r0, r0, r5
 8003c02:	19c0      	adds	r0, r0, r7
 8003c04:	6001      	str	r1, [r0, #0]
 8003c06:	6042      	str	r2, [r0, #4]
 8003c08:	6083      	str	r3, [r0, #8]
 8003c0a:	1dbb      	adds	r3, r7, #6
 8003c0c:	1c22      	adds	r2, r4, #0
 8003c0e:	801a      	strh	r2, [r3, #0]
	if (speed>MAX_SPEED){speed=MAX_SPEED;}
 8003c10:	1dbb      	adds	r3, r7, #6
 8003c12:	881b      	ldrh	r3, [r3, #0]
 8003c14:	2bf5      	cmp	r3, #245	; 0xf5
 8003c16:	d902      	bls.n	8003c1e <reverse_mode+0x2c>
 8003c18:	1dbb      	adds	r3, r7, #6
 8003c1a:	22f5      	movs	r2, #245	; 0xf5
 8003c1c:	801a      	strh	r2, [r3, #0]
	uint16_t compare=speed*MAX_COMPTEUR/MAX_SPEED;
 8003c1e:	1dbb      	adds	r3, r7, #6
 8003c20:	881a      	ldrh	r2, [r3, #0]
 8003c22:	0013      	movs	r3, r2
 8003c24:	01db      	lsls	r3, r3, #7
 8003c26:	1a9b      	subs	r3, r3, r2
 8003c28:	21f5      	movs	r1, #245	; 0xf5
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7fc fb12 	bl	8000254 <__divsi3>
 8003c30:	0003      	movs	r3, r0
 8003c32:	001a      	movs	r2, r3
 8003c34:	230e      	movs	r3, #14
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, 0);
 8003c3a:	2304      	movs	r3, #4
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	189b      	adds	r3, r3, r2
 8003c40:	19db      	adds	r3, r3, r7
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d107      	bne.n	8003c58 <reverse_mode+0x66>
 8003c48:	2304      	movs	r3, #4
 8003c4a:	189b      	adds	r3, r3, r2
 8003c4c:	19db      	adds	r3, r3, r7
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2200      	movs	r2, #0
 8003c54:	635a      	str	r2, [r3, #52]	; 0x34
 8003c56:	e043      	b.n	8003ce0 <reverse_mode+0xee>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	189b      	adds	r3, r3, r2
 8003c5e:	19db      	adds	r3, r3, r7
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d107      	bne.n	8003c76 <reverse_mode+0x84>
 8003c66:	2304      	movs	r3, #4
 8003c68:	189b      	adds	r3, r3, r2
 8003c6a:	19db      	adds	r3, r3, r7
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	2300      	movs	r3, #0
 8003c72:	6393      	str	r3, [r2, #56]	; 0x38
 8003c74:	e034      	b.n	8003ce0 <reverse_mode+0xee>
 8003c76:	2304      	movs	r3, #4
 8003c78:	2220      	movs	r2, #32
 8003c7a:	189b      	adds	r3, r3, r2
 8003c7c:	19db      	adds	r3, r3, r7
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d107      	bne.n	8003c94 <reverse_mode+0xa2>
 8003c84:	2304      	movs	r3, #4
 8003c86:	189b      	adds	r3, r3, r2
 8003c88:	19db      	adds	r3, r3, r7
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	2300      	movs	r3, #0
 8003c90:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003c92:	e025      	b.n	8003ce0 <reverse_mode+0xee>
 8003c94:	2304      	movs	r3, #4
 8003c96:	2220      	movs	r2, #32
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	19db      	adds	r3, r3, r7
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	2b0c      	cmp	r3, #12
 8003ca0:	d107      	bne.n	8003cb2 <reverse_mode+0xc0>
 8003ca2:	2304      	movs	r3, #4
 8003ca4:	189b      	adds	r3, r3, r2
 8003ca6:	19db      	adds	r3, r3, r7
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	6413      	str	r3, [r2, #64]	; 0x40
 8003cb0:	e016      	b.n	8003ce0 <reverse_mode+0xee>
 8003cb2:	2304      	movs	r3, #4
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	189b      	adds	r3, r3, r2
 8003cb8:	19db      	adds	r3, r3, r7
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	d107      	bne.n	8003cd0 <reverse_mode+0xde>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	19db      	adds	r3, r3, r7
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	2300      	movs	r3, #0
 8003ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8003cce:	e007      	b.n	8003ce0 <reverse_mode+0xee>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	189b      	adds	r3, r3, r2
 8003ce6:	19db      	adds	r3, r3, r7
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <reverse_mode+0x110>
 8003cee:	2304      	movs	r3, #4
 8003cf0:	189b      	adds	r3, r3, r2
 8003cf2:	19db      	adds	r3, r3, r7
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	220e      	movs	r2, #14
 8003cfa:	18ba      	adds	r2, r7, r2
 8003cfc:	8812      	ldrh	r2, [r2, #0]
 8003cfe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003d00:	e04d      	b.n	8003d9e <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8003d02:	2304      	movs	r3, #4
 8003d04:	2220      	movs	r2, #32
 8003d06:	189b      	adds	r3, r3, r2
 8003d08:	19db      	adds	r3, r3, r7
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	2b04      	cmp	r3, #4
 8003d0e:	d109      	bne.n	8003d24 <reverse_mode+0x132>
 8003d10:	2304      	movs	r3, #4
 8003d12:	189b      	adds	r3, r3, r2
 8003d14:	19db      	adds	r3, r3, r7
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	230e      	movs	r3, #14
 8003d1c:	18fb      	adds	r3, r7, r3
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003d22:	e03c      	b.n	8003d9e <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8003d24:	2304      	movs	r3, #4
 8003d26:	2220      	movs	r2, #32
 8003d28:	189b      	adds	r3, r3, r2
 8003d2a:	19db      	adds	r3, r3, r7
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d109      	bne.n	8003d46 <reverse_mode+0x154>
 8003d32:	2304      	movs	r3, #4
 8003d34:	189b      	adds	r3, r3, r2
 8003d36:	19db      	adds	r3, r3, r7
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	230e      	movs	r3, #14
 8003d3e:	18fb      	adds	r3, r7, r3
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003d44:	e02b      	b.n	8003d9e <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8003d46:	2304      	movs	r3, #4
 8003d48:	2220      	movs	r2, #32
 8003d4a:	189b      	adds	r3, r3, r2
 8003d4c:	19db      	adds	r3, r3, r7
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b0c      	cmp	r3, #12
 8003d52:	d109      	bne.n	8003d68 <reverse_mode+0x176>
 8003d54:	2304      	movs	r3, #4
 8003d56:	189b      	adds	r3, r3, r2
 8003d58:	19db      	adds	r3, r3, r7
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	230e      	movs	r3, #14
 8003d60:	18fb      	adds	r3, r7, r3
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003d66:	e01a      	b.n	8003d9e <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8003d68:	2304      	movs	r3, #4
 8003d6a:	2220      	movs	r2, #32
 8003d6c:	189b      	adds	r3, r3, r2
 8003d6e:	19db      	adds	r3, r3, r7
 8003d70:	68db      	ldr	r3, [r3, #12]
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d109      	bne.n	8003d8a <reverse_mode+0x198>
 8003d76:	2304      	movs	r3, #4
 8003d78:	189b      	adds	r3, r3, r2
 8003d7a:	19db      	adds	r3, r3, r7
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	230e      	movs	r3, #14
 8003d82:	18fb      	adds	r3, r7, r3
 8003d84:	881b      	ldrh	r3, [r3, #0]
 8003d86:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003d88:	e009      	b.n	8003d9e <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	189b      	adds	r3, r3, r2
 8003d90:	19db      	adds	r3, r3, r7
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	230e      	movs	r3, #14
 8003d98:	18fb      	adds	r3, r7, r3
 8003d9a:	881b      	ldrh	r3, [r3, #0]
 8003d9c:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	46bd      	mov	sp, r7
 8003da2:	b004      	add	sp, #16
 8003da4:	bcb0      	pop	{r4, r5, r7}
 8003da6:	bc08      	pop	{r3}
 8003da8:	b004      	add	sp, #16
 8003daa:	4718      	bx	r3

08003dac <brake_mode>:
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, 0);
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, 0);
}

void brake_mode(struct driver_motor_t motor)
{
 8003dac:	b590      	push	{r4, r7, lr}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	003c      	movs	r4, r7
 8003db4:	6020      	str	r0, [r4, #0]
 8003db6:	6061      	str	r1, [r4, #4]
 8003db8:	60a2      	str	r2, [r4, #8]
 8003dba:	60e3      	str	r3, [r4, #12]
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, MAX_COMPTEUR);
 8003dbc:	003b      	movs	r3, r7
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d105      	bne.n	8003dd0 <brake_mode+0x24>
 8003dc4:	003b      	movs	r3, r7
 8003dc6:	689b      	ldr	r3, [r3, #8]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	227f      	movs	r2, #127	; 0x7f
 8003dcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003dce:	e02c      	b.n	8003e2a <brake_mode+0x7e>
 8003dd0:	003b      	movs	r3, r7
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d105      	bne.n	8003de4 <brake_mode+0x38>
 8003dd8:	003b      	movs	r3, r7
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	237f      	movs	r3, #127	; 0x7f
 8003de0:	6393      	str	r3, [r2, #56]	; 0x38
 8003de2:	e022      	b.n	8003e2a <brake_mode+0x7e>
 8003de4:	003b      	movs	r3, r7
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d105      	bne.n	8003df8 <brake_mode+0x4c>
 8003dec:	003b      	movs	r3, r7
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	237f      	movs	r3, #127	; 0x7f
 8003df4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8003df6:	e018      	b.n	8003e2a <brake_mode+0x7e>
 8003df8:	003b      	movs	r3, r7
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	d105      	bne.n	8003e0c <brake_mode+0x60>
 8003e00:	003b      	movs	r3, r7
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	237f      	movs	r3, #127	; 0x7f
 8003e08:	6413      	str	r3, [r2, #64]	; 0x40
 8003e0a:	e00e      	b.n	8003e2a <brake_mode+0x7e>
 8003e0c:	003b      	movs	r3, r7
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	2b10      	cmp	r3, #16
 8003e12:	d105      	bne.n	8003e20 <brake_mode+0x74>
 8003e14:	003b      	movs	r3, r7
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	237f      	movs	r3, #127	; 0x7f
 8003e1c:	6593      	str	r3, [r2, #88]	; 0x58
 8003e1e:	e004      	b.n	8003e2a <brake_mode+0x7e>
 8003e20:	003b      	movs	r3, r7
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	237f      	movs	r3, #127	; 0x7f
 8003e28:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8003e2a:	003b      	movs	r3, r7
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d105      	bne.n	8003e3e <brake_mode+0x92>
 8003e32:	003b      	movs	r3, r7
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	227f      	movs	r2, #127	; 0x7f
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003e3c:	e02c      	b.n	8003e98 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8003e3e:	003b      	movs	r3, r7
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	2b04      	cmp	r3, #4
 8003e44:	d105      	bne.n	8003e52 <brake_mode+0xa6>
 8003e46:	003b      	movs	r3, r7
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	237f      	movs	r3, #127	; 0x7f
 8003e4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003e50:	e022      	b.n	8003e98 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8003e52:	003b      	movs	r3, r7
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	2b08      	cmp	r3, #8
 8003e58:	d105      	bne.n	8003e66 <brake_mode+0xba>
 8003e5a:	003b      	movs	r3, r7
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	237f      	movs	r3, #127	; 0x7f
 8003e62:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8003e64:	e018      	b.n	8003e98 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8003e66:	003b      	movs	r3, r7
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	2b0c      	cmp	r3, #12
 8003e6c:	d105      	bne.n	8003e7a <brake_mode+0xce>
 8003e6e:	003b      	movs	r3, r7
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	237f      	movs	r3, #127	; 0x7f
 8003e76:	6413      	str	r3, [r2, #64]	; 0x40
}
 8003e78:	e00e      	b.n	8003e98 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8003e7a:	003b      	movs	r3, r7
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b10      	cmp	r3, #16
 8003e80:	d105      	bne.n	8003e8e <brake_mode+0xe2>
 8003e82:	003b      	movs	r3, r7
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	237f      	movs	r3, #127	; 0x7f
 8003e8a:	6593      	str	r3, [r2, #88]	; 0x58
}
 8003e8c:	e004      	b.n	8003e98 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8003e8e:	003b      	movs	r3, r7
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	237f      	movs	r3, #127	; 0x7f
 8003e96:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8003e98:	46c0      	nop			; (mov r8, r8)
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	b005      	add	sp, #20
 8003e9e:	bd90      	pop	{r4, r7, pc}

08003ea0 <set_speed>:

void set_speed(uint16_t speed,struct driver_motor_t motor){
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	b5b0      	push	{r4, r5, r7, lr}
 8003ea4:	b084      	sub	sp, #16
 8003ea6:	af02      	add	r7, sp, #8
 8003ea8:	0004      	movs	r4, r0
 8003eaa:	2004      	movs	r0, #4
 8003eac:	2518      	movs	r5, #24
 8003eae:	1940      	adds	r0, r0, r5
 8003eb0:	19c0      	adds	r0, r0, r7
 8003eb2:	6001      	str	r1, [r0, #0]
 8003eb4:	6042      	str	r2, [r0, #4]
 8003eb6:	6083      	str	r3, [r0, #8]
 8003eb8:	1dbb      	adds	r3, r7, #6
 8003eba:	1c22      	adds	r2, r4, #0
 8003ebc:	801a      	strh	r2, [r3, #0]
	if(speed==0){brake_mode(motor);}
 8003ebe:	1dbb      	adds	r3, r7, #6
 8003ec0:	881b      	ldrh	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d109      	bne.n	8003eda <set_speed+0x3a>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	195b      	adds	r3, r3, r5
 8003eca:	19db      	adds	r3, r3, r7
 8003ecc:	6818      	ldr	r0, [r3, #0]
 8003ece:	6859      	ldr	r1, [r3, #4]
 8003ed0:	689a      	ldr	r2, [r3, #8]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f7ff ff6a 	bl	8003dac <brake_mode>
	else if(speed>0){forward_mode(speed,motor);}
	else {reverse_mode(-speed,motor);}
}
 8003ed8:	e022      	b.n	8003f20 <set_speed+0x80>
	else if(speed>0){forward_mode(speed,motor);}
 8003eda:	1dbb      	adds	r3, r7, #6
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00e      	beq.n	8003f00 <set_speed+0x60>
 8003ee2:	2304      	movs	r3, #4
 8003ee4:	2218      	movs	r2, #24
 8003ee6:	189b      	adds	r3, r3, r2
 8003ee8:	19db      	adds	r3, r3, r7
 8003eea:	1dba      	adds	r2, r7, #6
 8003eec:	8810      	ldrh	r0, [r2, #0]
 8003eee:	466a      	mov	r2, sp
 8003ef0:	68d9      	ldr	r1, [r3, #12]
 8003ef2:	6011      	str	r1, [r2, #0]
 8003ef4:	6819      	ldr	r1, [r3, #0]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f7ff fd9d 	bl	8003a38 <forward_mode>
}
 8003efe:	e00f      	b.n	8003f20 <set_speed+0x80>
	else {reverse_mode(-speed,motor);}
 8003f00:	1dbb      	adds	r3, r7, #6
 8003f02:	881b      	ldrh	r3, [r3, #0]
 8003f04:	425b      	negs	r3, r3
 8003f06:	b298      	uxth	r0, r3
 8003f08:	2304      	movs	r3, #4
 8003f0a:	2218      	movs	r2, #24
 8003f0c:	189b      	adds	r3, r3, r2
 8003f0e:	19db      	adds	r3, r3, r7
 8003f10:	466a      	mov	r2, sp
 8003f12:	68d9      	ldr	r1, [r3, #12]
 8003f14:	6011      	str	r1, [r2, #0]
 8003f16:	6819      	ldr	r1, [r3, #0]
 8003f18:	685a      	ldr	r2, [r3, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	f7ff fe69 	bl	8003bf2 <reverse_mode>
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bcb0      	pop	{r4, r5, r7}
 8003f28:	bc08      	pop	{r3}
 8003f2a:	b004      	add	sp, #16
 8003f2c:	4718      	bx	r3
	...

08003f30 <move_on_curve_left>:

//fonctions plus niveau 1: courbe simple

void move_on_curve_left(int16_t radius,int16_t speed)
{
 8003f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f32:	b087      	sub	sp, #28
 8003f34:	af02      	add	r7, sp, #8
 8003f36:	0002      	movs	r2, r0
 8003f38:	1dbb      	adds	r3, r7, #6
 8003f3a:	801a      	strh	r2, [r3, #0]
 8003f3c:	1d3b      	adds	r3, r7, #4
 8003f3e:	1c0a      	adds	r2, r1, #0
 8003f40:	801a      	strh	r2, [r3, #0]
	uint16_t speed_R=speed+speed*WHEELBASE/(2*radius);
 8003f42:	1d3b      	adds	r3, r7, #4
 8003f44:	2200      	movs	r2, #0
 8003f46:	5e9b      	ldrsh	r3, [r3, r2]
 8003f48:	22a3      	movs	r2, #163	; 0xa3
 8003f4a:	435a      	muls	r2, r3
 8003f4c:	1dbb      	adds	r3, r7, #6
 8003f4e:	2100      	movs	r1, #0
 8003f50:	5e5b      	ldrsh	r3, [r3, r1]
 8003f52:	005b      	lsls	r3, r3, #1
 8003f54:	0019      	movs	r1, r3
 8003f56:	0010      	movs	r0, r2
 8003f58:	f7fc f97c 	bl	8000254 <__divsi3>
 8003f5c:	0003      	movs	r3, r0
 8003f5e:	b299      	uxth	r1, r3
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	881a      	ldrh	r2, [r3, #0]
 8003f64:	250e      	movs	r5, #14
 8003f66:	197b      	adds	r3, r7, r5
 8003f68:	188a      	adds	r2, r1, r2
 8003f6a:	801a      	strh	r2, [r3, #0]
	uint16_t speed_L=speed-speed*WHEELBASE/(2*radius);
 8003f6c:	1d3b      	adds	r3, r7, #4
 8003f6e:	881c      	ldrh	r4, [r3, #0]
 8003f70:	1d3b      	adds	r3, r7, #4
 8003f72:	2200      	movs	r2, #0
 8003f74:	5e9b      	ldrsh	r3, [r3, r2]
 8003f76:	22a3      	movs	r2, #163	; 0xa3
 8003f78:	435a      	muls	r2, r3
 8003f7a:	1dbb      	adds	r3, r7, #6
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	5e5b      	ldrsh	r3, [r3, r1]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	0019      	movs	r1, r3
 8003f84:	0010      	movs	r0, r2
 8003f86:	f7fc f965 	bl	8000254 <__divsi3>
 8003f8a:	0003      	movs	r3, r0
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	260c      	movs	r6, #12
 8003f90:	19bb      	adds	r3, r7, r6
 8003f92:	1aa2      	subs	r2, r4, r2
 8003f94:	801a      	strh	r2, [r3, #0]

	set_speed(speed_R,right_motor);
 8003f96:	4b0d      	ldr	r3, [pc, #52]	; (8003fcc <move_on_curve_left+0x9c>)
 8003f98:	197a      	adds	r2, r7, r5
 8003f9a:	8810      	ldrh	r0, [r2, #0]
 8003f9c:	466a      	mov	r2, sp
 8003f9e:	68d9      	ldr	r1, [r3, #12]
 8003fa0:	6011      	str	r1, [r2, #0]
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f7ff ff7a 	bl	8003ea0 <set_speed>
	set_speed(speed_L,left_motor);
 8003fac:	4b08      	ldr	r3, [pc, #32]	; (8003fd0 <move_on_curve_left+0xa0>)
 8003fae:	19ba      	adds	r2, r7, r6
 8003fb0:	8810      	ldrh	r0, [r2, #0]
 8003fb2:	466a      	mov	r2, sp
 8003fb4:	68d9      	ldr	r1, [r3, #12]
 8003fb6:	6011      	str	r1, [r2, #0]
 8003fb8:	6819      	ldr	r1, [r3, #0]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f7ff ff6f 	bl	8003ea0 <set_speed>
}
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	b005      	add	sp, #20
 8003fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fca:	46c0      	nop			; (mov r8, r8)
 8003fcc:	20000024 	.word	0x20000024
 8003fd0:	20000014 	.word	0x20000014

08003fd4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fda:	1dfb      	adds	r3, r7, #7
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fe0:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_Init+0x3c>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	4b0a      	ldr	r3, [pc, #40]	; (8004010 <HAL_Init+0x3c>)
 8003fe6:	2180      	movs	r1, #128	; 0x80
 8003fe8:	0049      	lsls	r1, r1, #1
 8003fea:	430a      	orrs	r2, r1
 8003fec:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fee:	2003      	movs	r0, #3
 8003ff0:	f000 f810 	bl	8004014 <HAL_InitTick>
 8003ff4:	1e03      	subs	r3, r0, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8003ff8:	1dfb      	adds	r3, r7, #7
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
 8003ffe:	e001      	b.n	8004004 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004000:	f7fe fbd8 	bl	80027b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004004:	1dfb      	adds	r3, r7, #7
 8004006:	781b      	ldrb	r3, [r3, #0]
}
 8004008:	0018      	movs	r0, r3
 800400a:	46bd      	mov	sp, r7
 800400c:	b002      	add	sp, #8
 800400e:	bd80      	pop	{r7, pc}
 8004010:	40022000 	.word	0x40022000

08004014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004014:	b590      	push	{r4, r7, lr}
 8004016:	b085      	sub	sp, #20
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800401c:	230f      	movs	r3, #15
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_InitTick+0x88>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d02b      	beq.n	8004084 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800402c:	4b1c      	ldr	r3, [pc, #112]	; (80040a0 <HAL_InitTick+0x8c>)
 800402e:	681c      	ldr	r4, [r3, #0]
 8004030:	4b1a      	ldr	r3, [pc, #104]	; (800409c <HAL_InitTick+0x88>)
 8004032:	781b      	ldrb	r3, [r3, #0]
 8004034:	0019      	movs	r1, r3
 8004036:	23fa      	movs	r3, #250	; 0xfa
 8004038:	0098      	lsls	r0, r3, #2
 800403a:	f7fc f881 	bl	8000140 <__udivsi3>
 800403e:	0003      	movs	r3, r0
 8004040:	0019      	movs	r1, r3
 8004042:	0020      	movs	r0, r4
 8004044:	f7fc f87c 	bl	8000140 <__udivsi3>
 8004048:	0003      	movs	r3, r0
 800404a:	0018      	movs	r0, r3
 800404c:	f000 f919 	bl	8004282 <HAL_SYSTICK_Config>
 8004050:	1e03      	subs	r3, r0, #0
 8004052:	d112      	bne.n	800407a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b03      	cmp	r3, #3
 8004058:	d80a      	bhi.n	8004070 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	2301      	movs	r3, #1
 800405e:	425b      	negs	r3, r3
 8004060:	2200      	movs	r2, #0
 8004062:	0018      	movs	r0, r3
 8004064:	f000 f8e8 	bl	8004238 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004068:	4b0e      	ldr	r3, [pc, #56]	; (80040a4 <HAL_InitTick+0x90>)
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	e00d      	b.n	800408c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8004070:	230f      	movs	r3, #15
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	2201      	movs	r2, #1
 8004076:	701a      	strb	r2, [r3, #0]
 8004078:	e008      	b.n	800408c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800407a:	230f      	movs	r3, #15
 800407c:	18fb      	adds	r3, r7, r3
 800407e:	2201      	movs	r2, #1
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	e003      	b.n	800408c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004084:	230f      	movs	r3, #15
 8004086:	18fb      	adds	r3, r7, r3
 8004088:	2201      	movs	r2, #1
 800408a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800408c:	230f      	movs	r3, #15
 800408e:	18fb      	adds	r3, r7, r3
 8004090:	781b      	ldrb	r3, [r3, #0]
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b005      	add	sp, #20
 8004098:	bd90      	pop	{r4, r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	20000038 	.word	0x20000038
 80040a0:	20000000 	.word	0x20000000
 80040a4:	20000034 	.word	0x20000034

080040a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80040ac:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <HAL_IncTick+0x1c>)
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	001a      	movs	r2, r3
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_IncTick+0x20>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	18d2      	adds	r2, r2, r3
 80040b8:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <HAL_IncTick+0x20>)
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	46c0      	nop			; (mov r8, r8)
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	46c0      	nop			; (mov r8, r8)
 80040c4:	20000038 	.word	0x20000038
 80040c8:	200006a8 	.word	0x200006a8

080040cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	af00      	add	r7, sp, #0
  return uwTick;
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <HAL_GetTick+0x10>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	0018      	movs	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	200006a8 	.word	0x200006a8

080040e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b082      	sub	sp, #8
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	0002      	movs	r2, r0
 80040e8:	1dfb      	adds	r3, r7, #7
 80040ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80040ec:	1dfb      	adds	r3, r7, #7
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b7f      	cmp	r3, #127	; 0x7f
 80040f2:	d809      	bhi.n	8004108 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040f4:	1dfb      	adds	r3, r7, #7
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	001a      	movs	r2, r3
 80040fa:	231f      	movs	r3, #31
 80040fc:	401a      	ands	r2, r3
 80040fe:	4b04      	ldr	r3, [pc, #16]	; (8004110 <__NVIC_EnableIRQ+0x30>)
 8004100:	2101      	movs	r1, #1
 8004102:	4091      	lsls	r1, r2
 8004104:	000a      	movs	r2, r1
 8004106:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	46bd      	mov	sp, r7
 800410c:	b002      	add	sp, #8
 800410e:	bd80      	pop	{r7, pc}
 8004110:	e000e100 	.word	0xe000e100

08004114 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004114:	b590      	push	{r4, r7, lr}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	0002      	movs	r2, r0
 800411c:	6039      	str	r1, [r7, #0]
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004122:	1dfb      	adds	r3, r7, #7
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2b7f      	cmp	r3, #127	; 0x7f
 8004128:	d828      	bhi.n	800417c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800412a:	4a2f      	ldr	r2, [pc, #188]	; (80041e8 <__NVIC_SetPriority+0xd4>)
 800412c:	1dfb      	adds	r3, r7, #7
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b25b      	sxtb	r3, r3
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	33c0      	adds	r3, #192	; 0xc0
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	589b      	ldr	r3, [r3, r2]
 800413a:	1dfa      	adds	r2, r7, #7
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	0011      	movs	r1, r2
 8004140:	2203      	movs	r2, #3
 8004142:	400a      	ands	r2, r1
 8004144:	00d2      	lsls	r2, r2, #3
 8004146:	21ff      	movs	r1, #255	; 0xff
 8004148:	4091      	lsls	r1, r2
 800414a:	000a      	movs	r2, r1
 800414c:	43d2      	mvns	r2, r2
 800414e:	401a      	ands	r2, r3
 8004150:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	019b      	lsls	r3, r3, #6
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	401a      	ands	r2, r3
 800415a:	1dfb      	adds	r3, r7, #7
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	0018      	movs	r0, r3
 8004160:	2303      	movs	r3, #3
 8004162:	4003      	ands	r3, r0
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004168:	481f      	ldr	r0, [pc, #124]	; (80041e8 <__NVIC_SetPriority+0xd4>)
 800416a:	1dfb      	adds	r3, r7, #7
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	b25b      	sxtb	r3, r3
 8004170:	089b      	lsrs	r3, r3, #2
 8004172:	430a      	orrs	r2, r1
 8004174:	33c0      	adds	r3, #192	; 0xc0
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800417a:	e031      	b.n	80041e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800417c:	4a1b      	ldr	r2, [pc, #108]	; (80041ec <__NVIC_SetPriority+0xd8>)
 800417e:	1dfb      	adds	r3, r7, #7
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	0019      	movs	r1, r3
 8004184:	230f      	movs	r3, #15
 8004186:	400b      	ands	r3, r1
 8004188:	3b08      	subs	r3, #8
 800418a:	089b      	lsrs	r3, r3, #2
 800418c:	3306      	adds	r3, #6
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	18d3      	adds	r3, r2, r3
 8004192:	3304      	adds	r3, #4
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	1dfa      	adds	r2, r7, #7
 8004198:	7812      	ldrb	r2, [r2, #0]
 800419a:	0011      	movs	r1, r2
 800419c:	2203      	movs	r2, #3
 800419e:	400a      	ands	r2, r1
 80041a0:	00d2      	lsls	r2, r2, #3
 80041a2:	21ff      	movs	r1, #255	; 0xff
 80041a4:	4091      	lsls	r1, r2
 80041a6:	000a      	movs	r2, r1
 80041a8:	43d2      	mvns	r2, r2
 80041aa:	401a      	ands	r2, r3
 80041ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	019b      	lsls	r3, r3, #6
 80041b2:	22ff      	movs	r2, #255	; 0xff
 80041b4:	401a      	ands	r2, r3
 80041b6:	1dfb      	adds	r3, r7, #7
 80041b8:	781b      	ldrb	r3, [r3, #0]
 80041ba:	0018      	movs	r0, r3
 80041bc:	2303      	movs	r3, #3
 80041be:	4003      	ands	r3, r0
 80041c0:	00db      	lsls	r3, r3, #3
 80041c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041c4:	4809      	ldr	r0, [pc, #36]	; (80041ec <__NVIC_SetPriority+0xd8>)
 80041c6:	1dfb      	adds	r3, r7, #7
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	001c      	movs	r4, r3
 80041cc:	230f      	movs	r3, #15
 80041ce:	4023      	ands	r3, r4
 80041d0:	3b08      	subs	r3, #8
 80041d2:	089b      	lsrs	r3, r3, #2
 80041d4:	430a      	orrs	r2, r1
 80041d6:	3306      	adds	r3, #6
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	18c3      	adds	r3, r0, r3
 80041dc:	3304      	adds	r3, #4
 80041de:	601a      	str	r2, [r3, #0]
}
 80041e0:	46c0      	nop			; (mov r8, r8)
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b003      	add	sp, #12
 80041e6:	bd90      	pop	{r4, r7, pc}
 80041e8:	e000e100 	.word	0xe000e100
 80041ec:	e000ed00 	.word	0xe000ed00

080041f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	1e5a      	subs	r2, r3, #1
 80041fc:	2380      	movs	r3, #128	; 0x80
 80041fe:	045b      	lsls	r3, r3, #17
 8004200:	429a      	cmp	r2, r3
 8004202:	d301      	bcc.n	8004208 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004204:	2301      	movs	r3, #1
 8004206:	e010      	b.n	800422a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004208:	4b0a      	ldr	r3, [pc, #40]	; (8004234 <SysTick_Config+0x44>)
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	3a01      	subs	r2, #1
 800420e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004210:	2301      	movs	r3, #1
 8004212:	425b      	negs	r3, r3
 8004214:	2103      	movs	r1, #3
 8004216:	0018      	movs	r0, r3
 8004218:	f7ff ff7c 	bl	8004114 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800421c:	4b05      	ldr	r3, [pc, #20]	; (8004234 <SysTick_Config+0x44>)
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004222:	4b04      	ldr	r3, [pc, #16]	; (8004234 <SysTick_Config+0x44>)
 8004224:	2207      	movs	r2, #7
 8004226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004228:	2300      	movs	r3, #0
}
 800422a:	0018      	movs	r0, r3
 800422c:	46bd      	mov	sp, r7
 800422e:	b002      	add	sp, #8
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	e000e010 	.word	0xe000e010

08004238 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	210f      	movs	r1, #15
 8004244:	187b      	adds	r3, r7, r1
 8004246:	1c02      	adds	r2, r0, #0
 8004248:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800424a:	68ba      	ldr	r2, [r7, #8]
 800424c:	187b      	adds	r3, r7, r1
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	b25b      	sxtb	r3, r3
 8004252:	0011      	movs	r1, r2
 8004254:	0018      	movs	r0, r3
 8004256:	f7ff ff5d 	bl	8004114 <__NVIC_SetPriority>
}
 800425a:	46c0      	nop			; (mov r8, r8)
 800425c:	46bd      	mov	sp, r7
 800425e:	b004      	add	sp, #16
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	0002      	movs	r2, r0
 800426a:	1dfb      	adds	r3, r7, #7
 800426c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800426e:	1dfb      	adds	r3, r7, #7
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	b25b      	sxtb	r3, r3
 8004274:	0018      	movs	r0, r3
 8004276:	f7ff ff33 	bl	80040e0 <__NVIC_EnableIRQ>
}
 800427a:	46c0      	nop			; (mov r8, r8)
 800427c:	46bd      	mov	sp, r7
 800427e:	b002      	add	sp, #8
 8004280:	bd80      	pop	{r7, pc}

08004282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b082      	sub	sp, #8
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff ffaf 	bl	80041f0 <SysTick_Config>
 8004292:	0003      	movs	r3, r0
}
 8004294:	0018      	movs	r0, r3
 8004296:	46bd      	mov	sp, r7
 8004298:	b002      	add	sp, #8
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b082      	sub	sp, #8
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d101      	bne.n	80042ae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e050      	b.n	8004350 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2225      	movs	r2, #37	; 0x25
 80042b2:	5c9b      	ldrb	r3, [r3, r2]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b02      	cmp	r3, #2
 80042b8:	d008      	beq.n	80042cc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2204      	movs	r2, #4
 80042be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2224      	movs	r2, #36	; 0x24
 80042c4:	2100      	movs	r1, #0
 80042c6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e041      	b.n	8004350 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	210e      	movs	r1, #14
 80042d8:	438a      	bics	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042e6:	491c      	ldr	r1, [pc, #112]	; (8004358 <HAL_DMA_Abort+0xbc>)
 80042e8:	400a      	ands	r2, r1
 80042ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2101      	movs	r1, #1
 80042f8:	438a      	bics	r2, r1
 80042fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80042fc:	4b17      	ldr	r3, [pc, #92]	; (800435c <HAL_DMA_Abort+0xc0>)
 80042fe:	6859      	ldr	r1, [r3, #4]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	221c      	movs	r2, #28
 8004306:	4013      	ands	r3, r2
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	4b13      	ldr	r3, [pc, #76]	; (800435c <HAL_DMA_Abort+0xc0>)
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800431a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00c      	beq.n	800433e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432e:	490a      	ldr	r1, [pc, #40]	; (8004358 <HAL_DMA_Abort+0xbc>)
 8004330:	400a      	ands	r2, r1
 8004332:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800433c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2225      	movs	r2, #37	; 0x25
 8004342:	2101      	movs	r1, #1
 8004344:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2224      	movs	r2, #36	; 0x24
 800434a:	2100      	movs	r1, #0
 800434c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800434e:	2300      	movs	r3, #0
}
 8004350:	0018      	movs	r0, r3
 8004352:	46bd      	mov	sp, r7
 8004354:	b002      	add	sp, #8
 8004356:	bd80      	pop	{r7, pc}
 8004358:	fffffeff 	.word	0xfffffeff
 800435c:	40020000 	.word	0x40020000

08004360 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004368:	210f      	movs	r1, #15
 800436a:	187b      	adds	r3, r7, r1
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2225      	movs	r2, #37	; 0x25
 8004374:	5c9b      	ldrb	r3, [r3, r2]
 8004376:	b2db      	uxtb	r3, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d006      	beq.n	800438a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2204      	movs	r2, #4
 8004380:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004382:	187b      	adds	r3, r7, r1
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
 8004388:	e049      	b.n	800441e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	210e      	movs	r1, #14
 8004396:	438a      	bics	r2, r1
 8004398:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2101      	movs	r1, #1
 80043a6:	438a      	bics	r2, r1
 80043a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b4:	491d      	ldr	r1, [pc, #116]	; (800442c <HAL_DMA_Abort_IT+0xcc>)
 80043b6:	400a      	ands	r2, r1
 80043b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80043ba:	4b1d      	ldr	r3, [pc, #116]	; (8004430 <HAL_DMA_Abort_IT+0xd0>)
 80043bc:	6859      	ldr	r1, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c2:	221c      	movs	r2, #28
 80043c4:	4013      	ands	r3, r2
 80043c6:	2201      	movs	r2, #1
 80043c8:	409a      	lsls	r2, r3
 80043ca:	4b19      	ldr	r3, [pc, #100]	; (8004430 <HAL_DMA_Abort_IT+0xd0>)
 80043cc:	430a      	orrs	r2, r1
 80043ce:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043d8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00c      	beq.n	80043fc <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ec:	490f      	ldr	r1, [pc, #60]	; (800442c <HAL_DMA_Abort_IT+0xcc>)
 80043ee:	400a      	ands	r2, r1
 80043f0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043fa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2225      	movs	r2, #37	; 0x25
 8004400:	2101      	movs	r1, #1
 8004402:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	2100      	movs	r1, #0
 800440a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	0010      	movs	r0, r2
 800441c:	4798      	blx	r3
    }
  }
  return status;
 800441e:	230f      	movs	r3, #15
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	781b      	ldrb	r3, [r3, #0]
}
 8004424:	0018      	movs	r0, r3
 8004426:	46bd      	mov	sp, r7
 8004428:	b004      	add	sp, #16
 800442a:	bd80      	pop	{r7, pc}
 800442c:	fffffeff 	.word	0xfffffeff
 8004430:	40020000 	.word	0x40020000

08004434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
 800443c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004442:	e147      	b.n	80046d4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2101      	movs	r1, #1
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4091      	lsls	r1, r2
 800444e:	000a      	movs	r2, r1
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d100      	bne.n	800445c <HAL_GPIO_Init+0x28>
 800445a:	e138      	b.n	80046ce <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2203      	movs	r2, #3
 8004462:	4013      	ands	r3, r2
 8004464:	2b01      	cmp	r3, #1
 8004466:	d005      	beq.n	8004474 <HAL_GPIO_Init+0x40>
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2203      	movs	r2, #3
 800446e:	4013      	ands	r3, r2
 8004470:	2b02      	cmp	r3, #2
 8004472:	d130      	bne.n	80044d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	005b      	lsls	r3, r3, #1
 800447e:	2203      	movs	r2, #3
 8004480:	409a      	lsls	r2, r3
 8004482:	0013      	movs	r3, r2
 8004484:	43da      	mvns	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	4013      	ands	r3, r2
 800448a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	005b      	lsls	r3, r3, #1
 8004494:	409a      	lsls	r2, r3
 8004496:	0013      	movs	r3, r2
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044aa:	2201      	movs	r2, #1
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	409a      	lsls	r2, r3
 80044b0:	0013      	movs	r3, r2
 80044b2:	43da      	mvns	r2, r3
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	4013      	ands	r3, r2
 80044b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	091b      	lsrs	r3, r3, #4
 80044c0:	2201      	movs	r2, #1
 80044c2:	401a      	ands	r2, r3
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	409a      	lsls	r2, r3
 80044c8:	0013      	movs	r3, r2
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2203      	movs	r2, #3
 80044dc:	4013      	ands	r3, r2
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d017      	beq.n	8004512 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	005b      	lsls	r3, r3, #1
 80044ec:	2203      	movs	r2, #3
 80044ee:	409a      	lsls	r2, r3
 80044f0:	0013      	movs	r3, r2
 80044f2:	43da      	mvns	r2, r3
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4013      	ands	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	689a      	ldr	r2, [r3, #8]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	409a      	lsls	r2, r3
 8004504:	0013      	movs	r3, r2
 8004506:	693a      	ldr	r2, [r7, #16]
 8004508:	4313      	orrs	r3, r2
 800450a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2203      	movs	r2, #3
 8004518:	4013      	ands	r3, r2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d123      	bne.n	8004566 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	08da      	lsrs	r2, r3, #3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	3208      	adds	r2, #8
 8004526:	0092      	lsls	r2, r2, #2
 8004528:	58d3      	ldr	r3, [r2, r3]
 800452a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	2207      	movs	r2, #7
 8004530:	4013      	ands	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	220f      	movs	r2, #15
 8004536:	409a      	lsls	r2, r3
 8004538:	0013      	movs	r3, r2
 800453a:	43da      	mvns	r2, r3
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4013      	ands	r3, r2
 8004540:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691a      	ldr	r2, [r3, #16]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2107      	movs	r1, #7
 800454a:	400b      	ands	r3, r1
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	409a      	lsls	r2, r3
 8004550:	0013      	movs	r3, r2
 8004552:	693a      	ldr	r2, [r7, #16]
 8004554:	4313      	orrs	r3, r2
 8004556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	08da      	lsrs	r2, r3, #3
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3208      	adds	r2, #8
 8004560:	0092      	lsls	r2, r2, #2
 8004562:	6939      	ldr	r1, [r7, #16]
 8004564:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	005b      	lsls	r3, r3, #1
 8004570:	2203      	movs	r2, #3
 8004572:	409a      	lsls	r2, r3
 8004574:	0013      	movs	r3, r2
 8004576:	43da      	mvns	r2, r3
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	4013      	ands	r3, r2
 800457c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2203      	movs	r2, #3
 8004584:	401a      	ands	r2, r3
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	005b      	lsls	r3, r3, #1
 800458a:	409a      	lsls	r2, r3
 800458c:	0013      	movs	r3, r2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	23c0      	movs	r3, #192	; 0xc0
 80045a0:	029b      	lsls	r3, r3, #10
 80045a2:	4013      	ands	r3, r2
 80045a4:	d100      	bne.n	80045a8 <HAL_GPIO_Init+0x174>
 80045a6:	e092      	b.n	80046ce <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80045a8:	4a50      	ldr	r2, [pc, #320]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	089b      	lsrs	r3, r3, #2
 80045ae:	3318      	adds	r3, #24
 80045b0:	009b      	lsls	r3, r3, #2
 80045b2:	589b      	ldr	r3, [r3, r2]
 80045b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	2203      	movs	r2, #3
 80045ba:	4013      	ands	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	220f      	movs	r2, #15
 80045c0:	409a      	lsls	r2, r3
 80045c2:	0013      	movs	r3, r2
 80045c4:	43da      	mvns	r2, r3
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4013      	ands	r3, r2
 80045ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	23a0      	movs	r3, #160	; 0xa0
 80045d0:	05db      	lsls	r3, r3, #23
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d013      	beq.n	80045fe <HAL_GPIO_Init+0x1ca>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a45      	ldr	r2, [pc, #276]	; (80046f0 <HAL_GPIO_Init+0x2bc>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d00d      	beq.n	80045fa <HAL_GPIO_Init+0x1c6>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	4a44      	ldr	r2, [pc, #272]	; (80046f4 <HAL_GPIO_Init+0x2c0>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d007      	beq.n	80045f6 <HAL_GPIO_Init+0x1c2>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	4a43      	ldr	r2, [pc, #268]	; (80046f8 <HAL_GPIO_Init+0x2c4>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d101      	bne.n	80045f2 <HAL_GPIO_Init+0x1be>
 80045ee:	2303      	movs	r3, #3
 80045f0:	e006      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045f2:	2305      	movs	r3, #5
 80045f4:	e004      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045f6:	2302      	movs	r3, #2
 80045f8:	e002      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <HAL_GPIO_Init+0x1cc>
 80045fe:	2300      	movs	r3, #0
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	2103      	movs	r1, #3
 8004604:	400a      	ands	r2, r1
 8004606:	00d2      	lsls	r2, r2, #3
 8004608:	4093      	lsls	r3, r2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8004610:	4936      	ldr	r1, [pc, #216]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	089b      	lsrs	r3, r3, #2
 8004616:	3318      	adds	r3, #24
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800461e:	4b33      	ldr	r3, [pc, #204]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	43da      	mvns	r2, r3
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4013      	ands	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	035b      	lsls	r3, r3, #13
 8004636:	4013      	ands	r3, r2
 8004638:	d003      	beq.n	8004642 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4313      	orrs	r3, r2
 8004640:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004642:	4b2a      	ldr	r3, [pc, #168]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8004648:	4b28      	ldr	r3, [pc, #160]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	43da      	mvns	r2, r3
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4013      	ands	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	2380      	movs	r3, #128	; 0x80
 800465e:	039b      	lsls	r3, r3, #14
 8004660:	4013      	ands	r3, r2
 8004662:	d003      	beq.n	800466c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8004664:	693a      	ldr	r2, [r7, #16]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800466c:	4b1f      	ldr	r3, [pc, #124]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004672:	4a1e      	ldr	r2, [pc, #120]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 8004674:	2384      	movs	r3, #132	; 0x84
 8004676:	58d3      	ldr	r3, [r2, r3]
 8004678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	43da      	mvns	r2, r3
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	685a      	ldr	r2, [r3, #4]
 8004688:	2380      	movs	r3, #128	; 0x80
 800468a:	029b      	lsls	r3, r3, #10
 800468c:	4013      	ands	r3, r2
 800468e:	d003      	beq.n	8004698 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004698:	4914      	ldr	r1, [pc, #80]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 800469a:	2284      	movs	r2, #132	; 0x84
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80046a0:	4a12      	ldr	r2, [pc, #72]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80046a2:	2380      	movs	r3, #128	; 0x80
 80046a4:	58d3      	ldr	r3, [r2, r3]
 80046a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	43da      	mvns	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4013      	ands	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	025b      	lsls	r3, r3, #9
 80046ba:	4013      	ands	r3, r2
 80046bc:	d003      	beq.n	80046c6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80046c6:	4909      	ldr	r1, [pc, #36]	; (80046ec <HAL_GPIO_Init+0x2b8>)
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	3301      	adds	r3, #1
 80046d2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	40da      	lsrs	r2, r3
 80046dc:	1e13      	subs	r3, r2, #0
 80046de:	d000      	beq.n	80046e2 <HAL_GPIO_Init+0x2ae>
 80046e0:	e6b0      	b.n	8004444 <HAL_GPIO_Init+0x10>
  }
}
 80046e2:	46c0      	nop			; (mov r8, r8)
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b006      	add	sp, #24
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	40021800 	.word	0x40021800
 80046f0:	50000400 	.word	0x50000400
 80046f4:	50000800 	.word	0x50000800
 80046f8:	50000c00 	.word	0x50000c00

080046fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b082      	sub	sp, #8
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	0008      	movs	r0, r1
 8004706:	0011      	movs	r1, r2
 8004708:	1cbb      	adds	r3, r7, #2
 800470a:	1c02      	adds	r2, r0, #0
 800470c:	801a      	strh	r2, [r3, #0]
 800470e:	1c7b      	adds	r3, r7, #1
 8004710:	1c0a      	adds	r2, r1, #0
 8004712:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004714:	1c7b      	adds	r3, r7, #1
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800471c:	1cbb      	adds	r3, r7, #2
 800471e:	881a      	ldrh	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004724:	e003      	b.n	800472e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004726:	1cbb      	adds	r3, r7, #2
 8004728:	881a      	ldrh	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800472e:	46c0      	nop			; (mov r8, r8)
 8004730:	46bd      	mov	sp, r7
 8004732:	b002      	add	sp, #8
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	0002      	movs	r2, r0
 8004740:	1dbb      	adds	r3, r7, #6
 8004742:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8004744:	4b10      	ldr	r3, [pc, #64]	; (8004788 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	1dba      	adds	r2, r7, #6
 800474a:	8812      	ldrh	r2, [r2, #0]
 800474c:	4013      	ands	r3, r2
 800474e:	d008      	beq.n	8004762 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8004750:	4b0d      	ldr	r3, [pc, #52]	; (8004788 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004752:	1dba      	adds	r2, r7, #6
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8004758:	1dbb      	adds	r3, r7, #6
 800475a:	881b      	ldrh	r3, [r3, #0]
 800475c:	0018      	movs	r0, r3
 800475e:	f000 f815 	bl	800478c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	1dba      	adds	r2, r7, #6
 8004768:	8812      	ldrh	r2, [r2, #0]
 800476a:	4013      	ands	r3, r2
 800476c:	d008      	beq.n	8004780 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800476e:	4b06      	ldr	r3, [pc, #24]	; (8004788 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8004770:	1dba      	adds	r2, r7, #6
 8004772:	8812      	ldrh	r2, [r2, #0]
 8004774:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8004776:	1dbb      	adds	r3, r7, #6
 8004778:	881b      	ldrh	r3, [r3, #0]
 800477a:	0018      	movs	r0, r3
 800477c:	f000 f810 	bl	80047a0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8004780:	46c0      	nop			; (mov r8, r8)
 8004782:	46bd      	mov	sp, r7
 8004784:	b002      	add	sp, #8
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40021800 	.word	0x40021800

0800478c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b082      	sub	sp, #8
 8004790:	af00      	add	r7, sp, #0
 8004792:	0002      	movs	r2, r0
 8004794:	1dbb      	adds	r3, r7, #6
 8004796:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8004798:	46c0      	nop			; (mov r8, r8)
 800479a:	46bd      	mov	sp, r7
 800479c:	b002      	add	sp, #8
 800479e:	bd80      	pop	{r7, pc}

080047a0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	0002      	movs	r2, r0
 80047a8:	1dbb      	adds	r3, r7, #6
 80047aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80047ac:	46c0      	nop			; (mov r8, r8)
 80047ae:	46bd      	mov	sp, r7
 80047b0:	b002      	add	sp, #8
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e082      	b.n	80048cc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2241      	movs	r2, #65	; 0x41
 80047ca:	5c9b      	ldrb	r3, [r3, r2]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d107      	bne.n	80047e2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2240      	movs	r2, #64	; 0x40
 80047d6:	2100      	movs	r1, #0
 80047d8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	0018      	movs	r0, r3
 80047de:	f7fd ff05 	bl	80025ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2241      	movs	r2, #65	; 0x41
 80047e6:	2124      	movs	r1, #36	; 0x24
 80047e8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2101      	movs	r1, #1
 80047f6:	438a      	bics	r2, r1
 80047f8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4934      	ldr	r1, [pc, #208]	; (80048d4 <HAL_I2C_Init+0x120>)
 8004804:	400a      	ands	r2, r1
 8004806:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4931      	ldr	r1, [pc, #196]	; (80048d8 <HAL_I2C_Init+0x124>)
 8004814:	400a      	ands	r2, r1
 8004816:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d108      	bne.n	8004832 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2180      	movs	r1, #128	; 0x80
 800482a:	0209      	lsls	r1, r1, #8
 800482c:	430a      	orrs	r2, r1
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	e007      	b.n	8004842 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	689a      	ldr	r2, [r3, #8]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2184      	movs	r1, #132	; 0x84
 800483c:	0209      	lsls	r1, r1, #8
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b02      	cmp	r3, #2
 8004848:	d104      	bne.n	8004854 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	0112      	lsls	r2, r2, #4
 8004852:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	491f      	ldr	r1, [pc, #124]	; (80048dc <HAL_I2C_Init+0x128>)
 8004860:	430a      	orrs	r2, r1
 8004862:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68da      	ldr	r2, [r3, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	491a      	ldr	r1, [pc, #104]	; (80048d8 <HAL_I2C_Init+0x124>)
 8004870:	400a      	ands	r2, r1
 8004872:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	691a      	ldr	r2, [r3, #16]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	695b      	ldr	r3, [r3, #20]
 800487c:	431a      	orrs	r2, r3
 800487e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69d9      	ldr	r1, [r3, #28]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1a      	ldr	r2, [r3, #32]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2101      	movs	r1, #1
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2241      	movs	r2, #65	; 0x41
 80048b8:	2120      	movs	r1, #32
 80048ba:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2242      	movs	r2, #66	; 0x42
 80048c6:	2100      	movs	r1, #0
 80048c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	0018      	movs	r0, r3
 80048ce:	46bd      	mov	sp, r7
 80048d0:	b002      	add	sp, #8
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	f0ffffff 	.word	0xf0ffffff
 80048d8:	ffff7fff 	.word	0xffff7fff
 80048dc:	02008000 	.word	0x02008000

080048e0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b082      	sub	sp, #8
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2241      	movs	r2, #65	; 0x41
 80048ee:	5c9b      	ldrb	r3, [r3, r2]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d138      	bne.n	8004968 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2240      	movs	r2, #64	; 0x40
 80048fa:	5c9b      	ldrb	r3, [r3, r2]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d101      	bne.n	8004904 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004900:	2302      	movs	r3, #2
 8004902:	e032      	b.n	800496a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2240      	movs	r2, #64	; 0x40
 8004908:	2101      	movs	r1, #1
 800490a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2241      	movs	r2, #65	; 0x41
 8004910:	2124      	movs	r1, #36	; 0x24
 8004912:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2101      	movs	r1, #1
 8004920:	438a      	bics	r2, r1
 8004922:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4911      	ldr	r1, [pc, #68]	; (8004974 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8004930:	400a      	ands	r2, r1
 8004932:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6819      	ldr	r1, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	430a      	orrs	r2, r1
 8004942:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2101      	movs	r1, #1
 8004950:	430a      	orrs	r2, r1
 8004952:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2241      	movs	r2, #65	; 0x41
 8004958:	2120      	movs	r1, #32
 800495a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2240      	movs	r2, #64	; 0x40
 8004960:	2100      	movs	r1, #0
 8004962:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004964:	2300      	movs	r3, #0
 8004966:	e000      	b.n	800496a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004968:	2302      	movs	r3, #2
  }
}
 800496a:	0018      	movs	r0, r3
 800496c:	46bd      	mov	sp, r7
 800496e:	b002      	add	sp, #8
 8004970:	bd80      	pop	{r7, pc}
 8004972:	46c0      	nop			; (mov r8, r8)
 8004974:	ffffefff 	.word	0xffffefff

08004978 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
 8004980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2241      	movs	r2, #65	; 0x41
 8004986:	5c9b      	ldrb	r3, [r3, r2]
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b20      	cmp	r3, #32
 800498c:	d139      	bne.n	8004a02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2240      	movs	r2, #64	; 0x40
 8004992:	5c9b      	ldrb	r3, [r3, r2]
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004998:	2302      	movs	r3, #2
 800499a:	e033      	b.n	8004a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2240      	movs	r2, #64	; 0x40
 80049a0:	2101      	movs	r1, #1
 80049a2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2241      	movs	r2, #65	; 0x41
 80049a8:	2124      	movs	r1, #36	; 0x24
 80049aa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2101      	movs	r1, #1
 80049b8:	438a      	bics	r2, r1
 80049ba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4a11      	ldr	r2, [pc, #68]	; (8004a0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80049c8:	4013      	ands	r3, r2
 80049ca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	021b      	lsls	r3, r3, #8
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	4313      	orrs	r3, r2
 80049d4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68fa      	ldr	r2, [r7, #12]
 80049dc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	2101      	movs	r1, #1
 80049ea:	430a      	orrs	r2, r1
 80049ec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2241      	movs	r2, #65	; 0x41
 80049f2:	2120      	movs	r1, #32
 80049f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2240      	movs	r2, #64	; 0x40
 80049fa:	2100      	movs	r1, #0
 80049fc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80049fe:	2300      	movs	r3, #0
 8004a00:	e000      	b.n	8004a04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
  }
}
 8004a04:	0018      	movs	r0, r3
 8004a06:	46bd      	mov	sp, r7
 8004a08:	b004      	add	sp, #16
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	fffff0ff 	.word	0xfffff0ff

08004a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004a18:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a19      	ldr	r2, [pc, #100]	; (8004a84 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8004a1e:	4013      	ands	r3, r2
 8004a20:	0019      	movs	r1, r3
 8004a22:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	430a      	orrs	r2, r1
 8004a28:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	2380      	movs	r3, #128	; 0x80
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d11f      	bne.n	8004a74 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004a34:	4b14      	ldr	r3, [pc, #80]	; (8004a88 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	0013      	movs	r3, r2
 8004a3a:	005b      	lsls	r3, r3, #1
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	4912      	ldr	r1, [pc, #72]	; (8004a8c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004a42:	0018      	movs	r0, r3
 8004a44:	f7fb fb7c 	bl	8000140 <__udivsi3>
 8004a48:	0003      	movs	r3, r0
 8004a4a:	3301      	adds	r3, #1
 8004a4c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a4e:	e008      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e001      	b.n	8004a62 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e009      	b.n	8004a76 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a62:	4b07      	ldr	r3, [pc, #28]	; (8004a80 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004a64:	695a      	ldr	r2, [r3, #20]
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	2380      	movs	r3, #128	; 0x80
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d0ed      	beq.n	8004a50 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b004      	add	sp, #16
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	40007000 	.word	0x40007000
 8004a84:	fffff9ff 	.word	0xfffff9ff
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	000f4240 	.word	0x000f4240

08004a90 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004a94:	4b03      	ldr	r3, [pc, #12]	; (8004aa4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	23e0      	movs	r3, #224	; 0xe0
 8004a9a:	01db      	lsls	r3, r3, #7
 8004a9c:	4013      	ands	r3, r2
}
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	40021000 	.word	0x40021000

08004aa8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b088      	sub	sp, #32
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e2f3      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	d100      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x1e>
 8004ac4:	e07c      	b.n	8004bc0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ac6:	4bc3      	ldr	r3, [pc, #780]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	2238      	movs	r2, #56	; 0x38
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ad0:	4bc0      	ldr	r3, [pc, #768]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2203      	movs	r2, #3
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	2b10      	cmp	r3, #16
 8004ade:	d102      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x3e>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d002      	beq.n	8004aec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	2b08      	cmp	r3, #8
 8004aea:	d10b      	bne.n	8004b04 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aec:	4bb9      	ldr	r3, [pc, #740]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	2380      	movs	r3, #128	; 0x80
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	4013      	ands	r3, r2
 8004af6:	d062      	beq.n	8004bbe <HAL_RCC_OscConfig+0x116>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d15e      	bne.n	8004bbe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	e2ce      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	025b      	lsls	r3, r3, #9
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x78>
 8004b10:	4bb0      	ldr	r3, [pc, #704]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4baf      	ldr	r3, [pc, #700]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0249      	lsls	r1, r1, #9
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e020      	b.n	8004b62 <HAL_RCC_OscConfig+0xba>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	23a0      	movs	r3, #160	; 0xa0
 8004b26:	02db      	lsls	r3, r3, #11
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d10e      	bne.n	8004b4a <HAL_RCC_OscConfig+0xa2>
 8004b2c:	4ba9      	ldr	r3, [pc, #676]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	4ba8      	ldr	r3, [pc, #672]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b32:	2180      	movs	r1, #128	; 0x80
 8004b34:	02c9      	lsls	r1, r1, #11
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	4ba6      	ldr	r3, [pc, #664]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	4ba5      	ldr	r3, [pc, #660]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b40:	2180      	movs	r1, #128	; 0x80
 8004b42:	0249      	lsls	r1, r1, #9
 8004b44:	430a      	orrs	r2, r1
 8004b46:	601a      	str	r2, [r3, #0]
 8004b48:	e00b      	b.n	8004b62 <HAL_RCC_OscConfig+0xba>
 8004b4a:	4ba2      	ldr	r3, [pc, #648]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4ba1      	ldr	r3, [pc, #644]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b50:	49a1      	ldr	r1, [pc, #644]	; (8004dd8 <HAL_RCC_OscConfig+0x330>)
 8004b52:	400a      	ands	r2, r1
 8004b54:	601a      	str	r2, [r3, #0]
 8004b56:	4b9f      	ldr	r3, [pc, #636]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	4b9e      	ldr	r3, [pc, #632]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b5c:	499f      	ldr	r1, [pc, #636]	; (8004ddc <HAL_RCC_OscConfig+0x334>)
 8004b5e:	400a      	ands	r2, r1
 8004b60:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d014      	beq.n	8004b94 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6a:	f7ff faaf 	bl	80040cc <HAL_GetTick>
 8004b6e:	0003      	movs	r3, r0
 8004b70:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b72:	e008      	b.n	8004b86 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b74:	f7ff faaa 	bl	80040cc <HAL_GetTick>
 8004b78:	0002      	movs	r2, r0
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	2b64      	cmp	r3, #100	; 0x64
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e28d      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b86:	4b93      	ldr	r3, [pc, #588]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	2380      	movs	r3, #128	; 0x80
 8004b8c:	029b      	lsls	r3, r3, #10
 8004b8e:	4013      	ands	r3, r2
 8004b90:	d0f0      	beq.n	8004b74 <HAL_RCC_OscConfig+0xcc>
 8004b92:	e015      	b.n	8004bc0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7ff fa9a 	bl	80040cc <HAL_GetTick>
 8004b98:	0003      	movs	r3, r0
 8004b9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b9e:	f7ff fa95 	bl	80040cc <HAL_GetTick>
 8004ba2:	0002      	movs	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b64      	cmp	r3, #100	; 0x64
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e278      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bb0:	4b88      	ldr	r3, [pc, #544]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	2380      	movs	r3, #128	; 0x80
 8004bb6:	029b      	lsls	r3, r3, #10
 8004bb8:	4013      	ands	r3, r2
 8004bba:	d1f0      	bne.n	8004b9e <HAL_RCC_OscConfig+0xf6>
 8004bbc:	e000      	b.n	8004bc0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bbe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	d100      	bne.n	8004bcc <HAL_RCC_OscConfig+0x124>
 8004bca:	e099      	b.n	8004d00 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bcc:	4b81      	ldr	r3, [pc, #516]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	2238      	movs	r2, #56	; 0x38
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd6:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2203      	movs	r2, #3
 8004bdc:	4013      	ands	r3, r2
 8004bde:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	2b10      	cmp	r3, #16
 8004be4:	d102      	bne.n	8004bec <HAL_RCC_OscConfig+0x144>
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d002      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8004bec:	69bb      	ldr	r3, [r7, #24]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d135      	bne.n	8004c5e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004bf2:	4b78      	ldr	r3, [pc, #480]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	2380      	movs	r3, #128	; 0x80
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	d005      	beq.n	8004c0a <HAL_RCC_OscConfig+0x162>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e24b      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c0a:	4b72      	ldr	r3, [pc, #456]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	4a74      	ldr	r2, [pc, #464]	; (8004de0 <HAL_RCC_OscConfig+0x338>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	0019      	movs	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	021a      	lsls	r2, r3, #8
 8004c1a:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c1c:	430a      	orrs	r2, r1
 8004c1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d112      	bne.n	8004c4c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c26:	4b6b      	ldr	r3, [pc, #428]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a6e      	ldr	r2, [pc, #440]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	0019      	movs	r1, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	691a      	ldr	r2, [r3, #16]
 8004c34:	4b67      	ldr	r3, [pc, #412]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c36:	430a      	orrs	r2, r1
 8004c38:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004c3a:	4b66      	ldr	r3, [pc, #408]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	0adb      	lsrs	r3, r3, #11
 8004c40:	2207      	movs	r2, #7
 8004c42:	4013      	ands	r3, r2
 8004c44:	4a68      	ldr	r2, [pc, #416]	; (8004de8 <HAL_RCC_OscConfig+0x340>)
 8004c46:	40da      	lsrs	r2, r3
 8004c48:	4b68      	ldr	r3, [pc, #416]	; (8004dec <HAL_RCC_OscConfig+0x344>)
 8004c4a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004c4c:	4b68      	ldr	r3, [pc, #416]	; (8004df0 <HAL_RCC_OscConfig+0x348>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0018      	movs	r0, r3
 8004c52:	f7ff f9df 	bl	8004014 <HAL_InitTick>
 8004c56:	1e03      	subs	r3, r0, #0
 8004c58:	d051      	beq.n	8004cfe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e221      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d030      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004c66:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a5e      	ldr	r2, [pc, #376]	; (8004de4 <HAL_RCC_OscConfig+0x33c>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	0019      	movs	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	691a      	ldr	r2, [r3, #16]
 8004c74:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c76:	430a      	orrs	r2, r1
 8004c78:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004c7a:	4b56      	ldr	r3, [pc, #344]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	4b55      	ldr	r3, [pc, #340]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004c80:	2180      	movs	r1, #128	; 0x80
 8004c82:	0049      	lsls	r1, r1, #1
 8004c84:	430a      	orrs	r2, r1
 8004c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c88:	f7ff fa20 	bl	80040cc <HAL_GetTick>
 8004c8c:	0003      	movs	r3, r0
 8004c8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c92:	f7ff fa1b 	bl	80040cc <HAL_GetTick>
 8004c96:	0002      	movs	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e1fe      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ca4:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	2380      	movs	r3, #128	; 0x80
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	4013      	ands	r3, r2
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb0:	4b48      	ldr	r3, [pc, #288]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	4a4a      	ldr	r2, [pc, #296]	; (8004de0 <HAL_RCC_OscConfig+0x338>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	0019      	movs	r1, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	021a      	lsls	r2, r3, #8
 8004cc0:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004cc2:	430a      	orrs	r2, r1
 8004cc4:	605a      	str	r2, [r3, #4]
 8004cc6:	e01b      	b.n	8004d00 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004cc8:	4b42      	ldr	r3, [pc, #264]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004cce:	4949      	ldr	r1, [pc, #292]	; (8004df4 <HAL_RCC_OscConfig+0x34c>)
 8004cd0:	400a      	ands	r2, r1
 8004cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd4:	f7ff f9fa 	bl	80040cc <HAL_GetTick>
 8004cd8:	0003      	movs	r3, r0
 8004cda:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cde:	f7ff f9f5 	bl	80040cc <HAL_GetTick>
 8004ce2:	0002      	movs	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e1d8      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004cf0:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	2380      	movs	r3, #128	; 0x80
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0x236>
 8004cfc:	e000      	b.n	8004d00 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cfe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2208      	movs	r2, #8
 8004d06:	4013      	ands	r3, r2
 8004d08:	d047      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004d0a:	4b32      	ldr	r3, [pc, #200]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	2238      	movs	r2, #56	; 0x38
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b18      	cmp	r3, #24
 8004d14:	d10a      	bne.n	8004d2c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004d16:	4b2f      	ldr	r3, [pc, #188]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d03c      	beq.n	8004d9a <HAL_RCC_OscConfig+0x2f2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	699b      	ldr	r3, [r3, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d138      	bne.n	8004d9a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e1ba      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004d34:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d38:	4b26      	ldr	r3, [pc, #152]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7ff f9c4 	bl	80040cc <HAL_GetTick>
 8004d44:	0003      	movs	r3, r0
 8004d46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d48:	e008      	b.n	8004d5c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d4a:	f7ff f9bf 	bl	80040cc <HAL_GetTick>
 8004d4e:	0002      	movs	r2, r0
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	2b02      	cmp	r3, #2
 8004d56:	d901      	bls.n	8004d5c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004d58:	2303      	movs	r3, #3
 8004d5a:	e1a2      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d60:	2202      	movs	r2, #2
 8004d62:	4013      	ands	r3, r2
 8004d64:	d0f1      	beq.n	8004d4a <HAL_RCC_OscConfig+0x2a2>
 8004d66:	e018      	b.n	8004d9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004d68:	4b1a      	ldr	r3, [pc, #104]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d6e:	2101      	movs	r1, #1
 8004d70:	438a      	bics	r2, r1
 8004d72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7ff f9aa 	bl	80040cc <HAL_GetTick>
 8004d78:	0003      	movs	r3, r0
 8004d7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7ff f9a5 	bl	80040cc <HAL_GetTick>
 8004d82:	0002      	movs	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e188      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d94:	2202      	movs	r2, #2
 8004d96:	4013      	ands	r3, r2
 8004d98:	d1f1      	bne.n	8004d7e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2204      	movs	r2, #4
 8004da0:	4013      	ands	r3, r2
 8004da2:	d100      	bne.n	8004da6 <HAL_RCC_OscConfig+0x2fe>
 8004da4:	e0c6      	b.n	8004f34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004da6:	231f      	movs	r3, #31
 8004da8:	18fb      	adds	r3, r7, r3
 8004daa:	2200      	movs	r2, #0
 8004dac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004dae:	4b09      	ldr	r3, [pc, #36]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2238      	movs	r2, #56	; 0x38
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d11e      	bne.n	8004df8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_OscConfig+0x32c>)
 8004dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x31e>
 8004dc4:	e0b6      	b.n	8004f34 <HAL_RCC_OscConfig+0x48c>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d000      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x328>
 8004dce:	e0b1      	b.n	8004f34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	e166      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	fffeffff 	.word	0xfffeffff
 8004ddc:	fffbffff 	.word	0xfffbffff
 8004de0:	ffff80ff 	.word	0xffff80ff
 8004de4:	ffffc7ff 	.word	0xffffc7ff
 8004de8:	00f42400 	.word	0x00f42400
 8004dec:	20000000 	.word	0x20000000
 8004df0:	20000034 	.word	0x20000034
 8004df4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004df8:	4bac      	ldr	r3, [pc, #688]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004dfc:	2380      	movs	r3, #128	; 0x80
 8004dfe:	055b      	lsls	r3, r3, #21
 8004e00:	4013      	ands	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_RCC_OscConfig+0x360>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_RCC_OscConfig+0x362>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d011      	beq.n	8004e32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004e0e:	4ba7      	ldr	r3, [pc, #668]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e12:	4ba6      	ldr	r3, [pc, #664]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	0549      	lsls	r1, r1, #21
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004e1c:	4ba3      	ldr	r3, [pc, #652]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	055b      	lsls	r3, r3, #21
 8004e24:	4013      	ands	r3, r2
 8004e26:	60fb      	str	r3, [r7, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004e2a:	231f      	movs	r3, #31
 8004e2c:	18fb      	adds	r3, r7, r3
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e32:	4b9f      	ldr	r3, [pc, #636]	; (80050b0 <HAL_RCC_OscConfig+0x608>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	2380      	movs	r3, #128	; 0x80
 8004e38:	005b      	lsls	r3, r3, #1
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	d11a      	bne.n	8004e74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e3e:	4b9c      	ldr	r3, [pc, #624]	; (80050b0 <HAL_RCC_OscConfig+0x608>)
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4b9b      	ldr	r3, [pc, #620]	; (80050b0 <HAL_RCC_OscConfig+0x608>)
 8004e44:	2180      	movs	r1, #128	; 0x80
 8004e46:	0049      	lsls	r1, r1, #1
 8004e48:	430a      	orrs	r2, r1
 8004e4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004e4c:	f7ff f93e 	bl	80040cc <HAL_GetTick>
 8004e50:	0003      	movs	r3, r0
 8004e52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e54:	e008      	b.n	8004e68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e56:	f7ff f939 	bl	80040cc <HAL_GetTick>
 8004e5a:	0002      	movs	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e11c      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e68:	4b91      	ldr	r3, [pc, #580]	; (80050b0 <HAL_RCC_OscConfig+0x608>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	2380      	movs	r3, #128	; 0x80
 8004e6e:	005b      	lsls	r3, r3, #1
 8004e70:	4013      	ands	r3, r2
 8004e72:	d0f0      	beq.n	8004e56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d106      	bne.n	8004e8a <HAL_RCC_OscConfig+0x3e2>
 8004e7c:	4b8b      	ldr	r3, [pc, #556]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e80:	4b8a      	ldr	r3, [pc, #552]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e82:	2101      	movs	r1, #1
 8004e84:	430a      	orrs	r2, r1
 8004e86:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e88:	e01c      	b.n	8004ec4 <HAL_RCC_OscConfig+0x41c>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	2b05      	cmp	r3, #5
 8004e90:	d10c      	bne.n	8004eac <HAL_RCC_OscConfig+0x404>
 8004e92:	4b86      	ldr	r3, [pc, #536]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004e96:	4b85      	ldr	r3, [pc, #532]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004e98:	2104      	movs	r1, #4
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e9e:	4b83      	ldr	r3, [pc, #524]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004ea0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ea2:	4b82      	ldr	r3, [pc, #520]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eaa:	e00b      	b.n	8004ec4 <HAL_RCC_OscConfig+0x41c>
 8004eac:	4b7f      	ldr	r3, [pc, #508]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004eae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004eb0:	4b7e      	ldr	r3, [pc, #504]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	438a      	bics	r2, r1
 8004eb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004eb8:	4b7c      	ldr	r3, [pc, #496]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004eba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ebc:	4b7b      	ldr	r3, [pc, #492]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004ebe:	2104      	movs	r1, #4
 8004ec0:	438a      	bics	r2, r1
 8004ec2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d014      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ecc:	f7ff f8fe 	bl	80040cc <HAL_GetTick>
 8004ed0:	0003      	movs	r3, r0
 8004ed2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ed4:	e009      	b.n	8004eea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ed6:	f7ff f8f9 	bl	80040cc <HAL_GetTick>
 8004eda:	0002      	movs	r2, r0
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	4a74      	ldr	r2, [pc, #464]	; (80050b4 <HAL_RCC_OscConfig+0x60c>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e0db      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eea:	4b70      	ldr	r3, [pc, #448]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eee:	2202      	movs	r2, #2
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	d0f0      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x42e>
 8004ef4:	e013      	b.n	8004f1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef6:	f7ff f8e9 	bl	80040cc <HAL_GetTick>
 8004efa:	0003      	movs	r3, r0
 8004efc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004efe:	e009      	b.n	8004f14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f00:	f7ff f8e4 	bl	80040cc <HAL_GetTick>
 8004f04:	0002      	movs	r2, r0
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	4a6a      	ldr	r2, [pc, #424]	; (80050b4 <HAL_RCC_OscConfig+0x60c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d901      	bls.n	8004f14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004f10:	2303      	movs	r3, #3
 8004f12:	e0c6      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004f14:	4b65      	ldr	r3, [pc, #404]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f18:	2202      	movs	r2, #2
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	d1f0      	bne.n	8004f00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004f1e:	231f      	movs	r3, #31
 8004f20:	18fb      	adds	r3, r7, r3
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	2b01      	cmp	r3, #1
 8004f26:	d105      	bne.n	8004f34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004f28:	4b60      	ldr	r3, [pc, #384]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f2c:	4b5f      	ldr	r3, [pc, #380]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f2e:	4962      	ldr	r1, [pc, #392]	; (80050b8 <HAL_RCC_OscConfig+0x610>)
 8004f30:	400a      	ands	r2, r1
 8004f32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d100      	bne.n	8004f3e <HAL_RCC_OscConfig+0x496>
 8004f3c:	e0b0      	b.n	80050a0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f3e:	4b5b      	ldr	r3, [pc, #364]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2238      	movs	r2, #56	; 0x38
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b10      	cmp	r3, #16
 8004f48:	d100      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4a4>
 8004f4a:	e078      	b.n	800503e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	69db      	ldr	r3, [r3, #28]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d153      	bne.n	8004ffc <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f54:	4b55      	ldr	r3, [pc, #340]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b54      	ldr	r3, [pc, #336]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f5a:	4958      	ldr	r1, [pc, #352]	; (80050bc <HAL_RCC_OscConfig+0x614>)
 8004f5c:	400a      	ands	r2, r1
 8004f5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f60:	f7ff f8b4 	bl	80040cc <HAL_GetTick>
 8004f64:	0003      	movs	r3, r0
 8004f66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f68:	e008      	b.n	8004f7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6a:	f7ff f8af 	bl	80040cc <HAL_GetTick>
 8004f6e:	0002      	movs	r2, r0
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d901      	bls.n	8004f7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e092      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f7c:	4b4b      	ldr	r3, [pc, #300]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	2380      	movs	r3, #128	; 0x80
 8004f82:	049b      	lsls	r3, r3, #18
 8004f84:	4013      	ands	r3, r2
 8004f86:	d1f0      	bne.n	8004f6a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f88:	4b48      	ldr	r3, [pc, #288]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4a4c      	ldr	r2, [pc, #304]	; (80050c0 <HAL_RCC_OscConfig+0x618>)
 8004f8e:	4013      	ands	r3, r2
 8004f90:	0019      	movs	r1, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa0:	021b      	lsls	r3, r3, #8
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	4b3e      	ldr	r3, [pc, #248]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004fb2:	430a      	orrs	r2, r1
 8004fb4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fb6:	4b3d      	ldr	r3, [pc, #244]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004fb8:	681a      	ldr	r2, [r3, #0]
 8004fba:	4b3c      	ldr	r3, [pc, #240]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004fbc:	2180      	movs	r1, #128	; 0x80
 8004fbe:	0449      	lsls	r1, r1, #17
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004fc4:	4b39      	ldr	r3, [pc, #228]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	4b38      	ldr	r3, [pc, #224]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004fca:	2180      	movs	r1, #128	; 0x80
 8004fcc:	0549      	lsls	r1, r1, #21
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd2:	f7ff f87b 	bl	80040cc <HAL_GetTick>
 8004fd6:	0003      	movs	r3, r0
 8004fd8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fda:	e008      	b.n	8004fee <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fdc:	f7ff f876 	bl	80040cc <HAL_GetTick>
 8004fe0:	0002      	movs	r2, r0
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d901      	bls.n	8004fee <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e059      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004fee:	4b2f      	ldr	r3, [pc, #188]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	2380      	movs	r3, #128	; 0x80
 8004ff4:	049b      	lsls	r3, r3, #18
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	d0f0      	beq.n	8004fdc <HAL_RCC_OscConfig+0x534>
 8004ffa:	e051      	b.n	80050a0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ffc:	4b2b      	ldr	r3, [pc, #172]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	4b2a      	ldr	r3, [pc, #168]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8005002:	492e      	ldr	r1, [pc, #184]	; (80050bc <HAL_RCC_OscConfig+0x614>)
 8005004:	400a      	ands	r2, r1
 8005006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005008:	f7ff f860 	bl	80040cc <HAL_GetTick>
 800500c:	0003      	movs	r3, r0
 800500e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005010:	e008      	b.n	8005024 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005012:	f7ff f85b 	bl	80040cc <HAL_GetTick>
 8005016:	0002      	movs	r2, r0
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	2b02      	cmp	r3, #2
 800501e:	d901      	bls.n	8005024 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	e03e      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005024:	4b21      	ldr	r3, [pc, #132]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	2380      	movs	r3, #128	; 0x80
 800502a:	049b      	lsls	r3, r3, #18
 800502c:	4013      	ands	r3, r2
 800502e:	d1f0      	bne.n	8005012 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005030:	4b1e      	ldr	r3, [pc, #120]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8005032:	68da      	ldr	r2, [r3, #12]
 8005034:	4b1d      	ldr	r3, [pc, #116]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 8005036:	4923      	ldr	r1, [pc, #140]	; (80050c4 <HAL_RCC_OscConfig+0x61c>)
 8005038:	400a      	ands	r2, r1
 800503a:	60da      	str	r2, [r3, #12]
 800503c:	e030      	b.n	80050a0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e02b      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800504a:	4b18      	ldr	r3, [pc, #96]	; (80050ac <HAL_RCC_OscConfig+0x604>)
 800504c:	68db      	ldr	r3, [r3, #12]
 800504e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2203      	movs	r2, #3
 8005054:	401a      	ands	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	429a      	cmp	r2, r3
 800505c:	d11e      	bne.n	800509c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	2270      	movs	r2, #112	; 0x70
 8005062:	401a      	ands	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005068:	429a      	cmp	r2, r3
 800506a:	d117      	bne.n	800509c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800506c:	697a      	ldr	r2, [r7, #20]
 800506e:	23fe      	movs	r3, #254	; 0xfe
 8005070:	01db      	lsls	r3, r3, #7
 8005072:	401a      	ands	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005078:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800507a:	429a      	cmp	r2, r3
 800507c:	d10e      	bne.n	800509c <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	23f8      	movs	r3, #248	; 0xf8
 8005082:	039b      	lsls	r3, r3, #14
 8005084:	401a      	ands	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800508a:	429a      	cmp	r2, r3
 800508c:	d106      	bne.n	800509c <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	0f5b      	lsrs	r3, r3, #29
 8005092:	075a      	lsls	r2, r3, #29
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e000      	b.n	80050a2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	0018      	movs	r0, r3
 80050a4:	46bd      	mov	sp, r7
 80050a6:	b008      	add	sp, #32
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	46c0      	nop			; (mov r8, r8)
 80050ac:	40021000 	.word	0x40021000
 80050b0:	40007000 	.word	0x40007000
 80050b4:	00001388 	.word	0x00001388
 80050b8:	efffffff 	.word	0xefffffff
 80050bc:	feffffff 	.word	0xfeffffff
 80050c0:	1fc1808c 	.word	0x1fc1808c
 80050c4:	effefffc 	.word	0xeffefffc

080050c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0e9      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	4b76      	ldr	r3, [pc, #472]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2207      	movs	r2, #7
 80050e2:	4013      	ands	r3, r2
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d91e      	bls.n	8005128 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b73      	ldr	r3, [pc, #460]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2207      	movs	r2, #7
 80050f0:	4393      	bics	r3, r2
 80050f2:	0019      	movs	r1, r3
 80050f4:	4b70      	ldr	r3, [pc, #448]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 80050f6:	683a      	ldr	r2, [r7, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80050fc:	f7fe ffe6 	bl	80040cc <HAL_GetTick>
 8005100:	0003      	movs	r3, r0
 8005102:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005104:	e009      	b.n	800511a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005106:	f7fe ffe1 	bl	80040cc <HAL_GetTick>
 800510a:	0002      	movs	r2, r0
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	4a6a      	ldr	r2, [pc, #424]	; (80052bc <HAL_RCC_ClockConfig+0x1f4>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e0ca      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800511a:	4b67      	ldr	r3, [pc, #412]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2207      	movs	r2, #7
 8005120:	4013      	ands	r3, r2
 8005122:	683a      	ldr	r2, [r7, #0]
 8005124:	429a      	cmp	r2, r3
 8005126:	d1ee      	bne.n	8005106 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2202      	movs	r2, #2
 800512e:	4013      	ands	r3, r2
 8005130:	d015      	beq.n	800515e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	2204      	movs	r2, #4
 8005138:	4013      	ands	r3, r2
 800513a:	d006      	beq.n	800514a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800513c:	4b60      	ldr	r3, [pc, #384]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	4b5f      	ldr	r3, [pc, #380]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005142:	21e0      	movs	r1, #224	; 0xe0
 8005144:	01c9      	lsls	r1, r1, #7
 8005146:	430a      	orrs	r2, r1
 8005148:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800514a:	4b5d      	ldr	r3, [pc, #372]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	4a5d      	ldr	r2, [pc, #372]	; (80052c4 <HAL_RCC_ClockConfig+0x1fc>)
 8005150:	4013      	ands	r3, r2
 8005152:	0019      	movs	r1, r3
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689a      	ldr	r2, [r3, #8]
 8005158:	4b59      	ldr	r3, [pc, #356]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 800515a:	430a      	orrs	r2, r1
 800515c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2201      	movs	r2, #1
 8005164:	4013      	ands	r3, r2
 8005166:	d057      	beq.n	8005218 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005170:	4b53      	ldr	r3, [pc, #332]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	4013      	ands	r3, r2
 800517a:	d12b      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e097      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b02      	cmp	r3, #2
 8005186:	d107      	bne.n	8005198 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005188:	4b4d      	ldr	r3, [pc, #308]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	2380      	movs	r3, #128	; 0x80
 800518e:	049b      	lsls	r3, r3, #18
 8005190:	4013      	ands	r3, r2
 8005192:	d11f      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e08b      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b00      	cmp	r3, #0
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051a0:	4b47      	ldr	r3, [pc, #284]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	2380      	movs	r3, #128	; 0x80
 80051a6:	00db      	lsls	r3, r3, #3
 80051a8:	4013      	ands	r3, r2
 80051aa:	d113      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e07f      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b03      	cmp	r3, #3
 80051b6:	d106      	bne.n	80051c6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b8:	4b41      	ldr	r3, [pc, #260]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 80051ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051bc:	2202      	movs	r2, #2
 80051be:	4013      	ands	r3, r2
 80051c0:	d108      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e074      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c6:	4b3e      	ldr	r3, [pc, #248]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 80051c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ca:	2202      	movs	r2, #2
 80051cc:	4013      	ands	r3, r2
 80051ce:	d101      	bne.n	80051d4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e06d      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051d4:	4b3a      	ldr	r3, [pc, #232]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2207      	movs	r2, #7
 80051da:	4393      	bics	r3, r2
 80051dc:	0019      	movs	r1, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	4b37      	ldr	r3, [pc, #220]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 80051e4:	430a      	orrs	r2, r1
 80051e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e8:	f7fe ff70 	bl	80040cc <HAL_GetTick>
 80051ec:	0003      	movs	r3, r0
 80051ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051f0:	e009      	b.n	8005206 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051f2:	f7fe ff6b 	bl	80040cc <HAL_GetTick>
 80051f6:	0002      	movs	r2, r0
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	4a2f      	ldr	r2, [pc, #188]	; (80052bc <HAL_RCC_ClockConfig+0x1f4>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e054      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005206:	4b2e      	ldr	r3, [pc, #184]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	2238      	movs	r2, #56	; 0x38
 800520c:	401a      	ands	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	429a      	cmp	r2, r3
 8005216:	d1ec      	bne.n	80051f2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005218:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2207      	movs	r2, #7
 800521e:	4013      	ands	r3, r2
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d21e      	bcs.n	8005264 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005226:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2207      	movs	r2, #7
 800522c:	4393      	bics	r3, r2
 800522e:	0019      	movs	r1, r3
 8005230:	4b21      	ldr	r3, [pc, #132]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005238:	f7fe ff48 	bl	80040cc <HAL_GetTick>
 800523c:	0003      	movs	r3, r0
 800523e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005240:	e009      	b.n	8005256 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005242:	f7fe ff43 	bl	80040cc <HAL_GetTick>
 8005246:	0002      	movs	r2, r0
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	4a1b      	ldr	r2, [pc, #108]	; (80052bc <HAL_RCC_ClockConfig+0x1f4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e02c      	b.n	80052b0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005256:	4b18      	ldr	r3, [pc, #96]	; (80052b8 <HAL_RCC_ClockConfig+0x1f0>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2207      	movs	r2, #7
 800525c:	4013      	ands	r3, r2
 800525e:	683a      	ldr	r2, [r7, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	d1ee      	bne.n	8005242 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	2204      	movs	r2, #4
 800526a:	4013      	ands	r3, r2
 800526c:	d009      	beq.n	8005282 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800526e:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <HAL_RCC_ClockConfig+0x200>)
 8005274:	4013      	ands	r3, r2
 8005276:	0019      	movs	r1, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 800527e:	430a      	orrs	r2, r1
 8005280:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005282:	f000 f829 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 8005286:	0001      	movs	r1, r0
 8005288:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_RCC_ClockConfig+0x1f8>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	0a1b      	lsrs	r3, r3, #8
 800528e:	220f      	movs	r2, #15
 8005290:	401a      	ands	r2, r3
 8005292:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <HAL_RCC_ClockConfig+0x204>)
 8005294:	0092      	lsls	r2, r2, #2
 8005296:	58d3      	ldr	r3, [r2, r3]
 8005298:	221f      	movs	r2, #31
 800529a:	4013      	ands	r3, r2
 800529c:	000a      	movs	r2, r1
 800529e:	40da      	lsrs	r2, r3
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_ClockConfig+0x208>)
 80052a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80052a4:	4b0b      	ldr	r3, [pc, #44]	; (80052d4 <HAL_RCC_ClockConfig+0x20c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	0018      	movs	r0, r3
 80052aa:	f7fe feb3 	bl	8004014 <HAL_InitTick>
 80052ae:	0003      	movs	r3, r0
}
 80052b0:	0018      	movs	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b004      	add	sp, #16
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40022000 	.word	0x40022000
 80052bc:	00001388 	.word	0x00001388
 80052c0:	40021000 	.word	0x40021000
 80052c4:	fffff0ff 	.word	0xfffff0ff
 80052c8:	ffff8fff 	.word	0xffff8fff
 80052cc:	0800e8a4 	.word	0x0800e8a4
 80052d0:	20000000 	.word	0x20000000
 80052d4:	20000034 	.word	0x20000034

080052d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052de:	4b3c      	ldr	r3, [pc, #240]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	2238      	movs	r2, #56	; 0x38
 80052e4:	4013      	ands	r3, r2
 80052e6:	d10f      	bne.n	8005308 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80052e8:	4b39      	ldr	r3, [pc, #228]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	0adb      	lsrs	r3, r3, #11
 80052ee:	2207      	movs	r2, #7
 80052f0:	4013      	ands	r3, r2
 80052f2:	2201      	movs	r2, #1
 80052f4:	409a      	lsls	r2, r3
 80052f6:	0013      	movs	r3, r2
 80052f8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80052fa:	6839      	ldr	r1, [r7, #0]
 80052fc:	4835      	ldr	r0, [pc, #212]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80052fe:	f7fa ff1f 	bl	8000140 <__udivsi3>
 8005302:	0003      	movs	r3, r0
 8005304:	613b      	str	r3, [r7, #16]
 8005306:	e05d      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005308:	4b31      	ldr	r3, [pc, #196]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2238      	movs	r2, #56	; 0x38
 800530e:	4013      	ands	r3, r2
 8005310:	2b08      	cmp	r3, #8
 8005312:	d102      	bne.n	800531a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005314:	4b2f      	ldr	r3, [pc, #188]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005316:	613b      	str	r3, [r7, #16]
 8005318:	e054      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800531a:	4b2d      	ldr	r3, [pc, #180]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	2238      	movs	r2, #56	; 0x38
 8005320:	4013      	ands	r3, r2
 8005322:	2b10      	cmp	r3, #16
 8005324:	d138      	bne.n	8005398 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005326:	4b2a      	ldr	r3, [pc, #168]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2203      	movs	r2, #3
 800532c:	4013      	ands	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	091b      	lsrs	r3, r3, #4
 8005336:	2207      	movs	r2, #7
 8005338:	4013      	ands	r3, r2
 800533a:	3301      	adds	r3, #1
 800533c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b03      	cmp	r3, #3
 8005342:	d10d      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005344:	68b9      	ldr	r1, [r7, #8]
 8005346:	4823      	ldr	r0, [pc, #140]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005348:	f7fa fefa 	bl	8000140 <__udivsi3>
 800534c:	0003      	movs	r3, r0
 800534e:	0019      	movs	r1, r3
 8005350:	4b1f      	ldr	r3, [pc, #124]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	0a1b      	lsrs	r3, r3, #8
 8005356:	227f      	movs	r2, #127	; 0x7f
 8005358:	4013      	ands	r3, r2
 800535a:	434b      	muls	r3, r1
 800535c:	617b      	str	r3, [r7, #20]
        break;
 800535e:	e00d      	b.n	800537c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	481c      	ldr	r0, [pc, #112]	; (80053d4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005364:	f7fa feec 	bl	8000140 <__udivsi3>
 8005368:	0003      	movs	r3, r0
 800536a:	0019      	movs	r1, r3
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	0a1b      	lsrs	r3, r3, #8
 8005372:	227f      	movs	r2, #127	; 0x7f
 8005374:	4013      	ands	r3, r2
 8005376:	434b      	muls	r3, r1
 8005378:	617b      	str	r3, [r7, #20]
        break;
 800537a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800537c:	4b14      	ldr	r3, [pc, #80]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800537e:	68db      	ldr	r3, [r3, #12]
 8005380:	0f5b      	lsrs	r3, r3, #29
 8005382:	2207      	movs	r2, #7
 8005384:	4013      	ands	r3, r2
 8005386:	3301      	adds	r3, #1
 8005388:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	6978      	ldr	r0, [r7, #20]
 800538e:	f7fa fed7 	bl	8000140 <__udivsi3>
 8005392:	0003      	movs	r3, r0
 8005394:	613b      	str	r3, [r7, #16]
 8005396:	e015      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005398:	4b0d      	ldr	r3, [pc, #52]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2238      	movs	r2, #56	; 0x38
 800539e:	4013      	ands	r3, r2
 80053a0:	2b20      	cmp	r3, #32
 80053a2:	d103      	bne.n	80053ac <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80053a4:	2380      	movs	r3, #128	; 0x80
 80053a6:	021b      	lsls	r3, r3, #8
 80053a8:	613b      	str	r3, [r7, #16]
 80053aa:	e00b      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80053ae:	689b      	ldr	r3, [r3, #8]
 80053b0:	2238      	movs	r2, #56	; 0x38
 80053b2:	4013      	ands	r3, r2
 80053b4:	2b18      	cmp	r3, #24
 80053b6:	d103      	bne.n	80053c0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80053b8:	23fa      	movs	r3, #250	; 0xfa
 80053ba:	01db      	lsls	r3, r3, #7
 80053bc:	613b      	str	r3, [r7, #16]
 80053be:	e001      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80053c4:	693b      	ldr	r3, [r7, #16]
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b006      	add	sp, #24
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	40021000 	.word	0x40021000
 80053d4:	00f42400 	.word	0x00f42400

080053d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053dc:	4b02      	ldr	r3, [pc, #8]	; (80053e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80053de:	681b      	ldr	r3, [r3, #0]
}
 80053e0:	0018      	movs	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	20000000 	.word	0x20000000

080053ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053ec:	b5b0      	push	{r4, r5, r7, lr}
 80053ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80053f0:	f7ff fff2 	bl	80053d8 <HAL_RCC_GetHCLKFreq>
 80053f4:	0004      	movs	r4, r0
 80053f6:	f7ff fb4b 	bl	8004a90 <LL_RCC_GetAPB1Prescaler>
 80053fa:	0003      	movs	r3, r0
 80053fc:	0b1a      	lsrs	r2, r3, #12
 80053fe:	4b05      	ldr	r3, [pc, #20]	; (8005414 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005400:	0092      	lsls	r2, r2, #2
 8005402:	58d3      	ldr	r3, [r2, r3]
 8005404:	221f      	movs	r2, #31
 8005406:	4013      	ands	r3, r2
 8005408:	40dc      	lsrs	r4, r3
 800540a:	0023      	movs	r3, r4
}
 800540c:	0018      	movs	r0, r3
 800540e:	46bd      	mov	sp, r7
 8005410:	bdb0      	pop	{r4, r5, r7, pc}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	0800e8e4 	.word	0x0800e8e4

08005418 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005420:	2313      	movs	r3, #19
 8005422:	18fb      	adds	r3, r7, r3
 8005424:	2200      	movs	r2, #0
 8005426:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005428:	2312      	movs	r3, #18
 800542a:	18fb      	adds	r3, r7, r3
 800542c:	2200      	movs	r2, #0
 800542e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	2380      	movs	r3, #128	; 0x80
 8005436:	029b      	lsls	r3, r3, #10
 8005438:	4013      	ands	r3, r2
 800543a:	d100      	bne.n	800543e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800543c:	e0a3      	b.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800543e:	2011      	movs	r0, #17
 8005440:	183b      	adds	r3, r7, r0
 8005442:	2200      	movs	r2, #0
 8005444:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005446:	4b86      	ldr	r3, [pc, #536]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005448:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800544a:	2380      	movs	r3, #128	; 0x80
 800544c:	055b      	lsls	r3, r3, #21
 800544e:	4013      	ands	r3, r2
 8005450:	d110      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005452:	4b83      	ldr	r3, [pc, #524]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005456:	4b82      	ldr	r3, [pc, #520]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005458:	2180      	movs	r1, #128	; 0x80
 800545a:	0549      	lsls	r1, r1, #21
 800545c:	430a      	orrs	r2, r1
 800545e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005460:	4b7f      	ldr	r3, [pc, #508]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005464:	2380      	movs	r3, #128	; 0x80
 8005466:	055b      	lsls	r3, r3, #21
 8005468:	4013      	ands	r3, r2
 800546a:	60bb      	str	r3, [r7, #8]
 800546c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800546e:	183b      	adds	r3, r7, r0
 8005470:	2201      	movs	r2, #1
 8005472:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005474:	4b7b      	ldr	r3, [pc, #492]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	4b7a      	ldr	r3, [pc, #488]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800547a:	2180      	movs	r1, #128	; 0x80
 800547c:	0049      	lsls	r1, r1, #1
 800547e:	430a      	orrs	r2, r1
 8005480:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005482:	f7fe fe23 	bl	80040cc <HAL_GetTick>
 8005486:	0003      	movs	r3, r0
 8005488:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800548a:	e00b      	b.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800548c:	f7fe fe1e 	bl	80040cc <HAL_GetTick>
 8005490:	0002      	movs	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d904      	bls.n	80054a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800549a:	2313      	movs	r3, #19
 800549c:	18fb      	adds	r3, r7, r3
 800549e:	2203      	movs	r2, #3
 80054a0:	701a      	strb	r2, [r3, #0]
        break;
 80054a2:	e005      	b.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80054a4:	4b6f      	ldr	r3, [pc, #444]	; (8005664 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	2380      	movs	r3, #128	; 0x80
 80054aa:	005b      	lsls	r3, r3, #1
 80054ac:	4013      	ands	r3, r2
 80054ae:	d0ed      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80054b0:	2313      	movs	r3, #19
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d154      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80054ba:	4b69      	ldr	r3, [pc, #420]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054be:	23c0      	movs	r3, #192	; 0xc0
 80054c0:	009b      	lsls	r3, r3, #2
 80054c2:	4013      	ands	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d019      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d014      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80054d6:	4b62      	ldr	r3, [pc, #392]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054da:	4a63      	ldr	r2, [pc, #396]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80054dc:	4013      	ands	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80054e0:	4b5f      	ldr	r3, [pc, #380]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054e4:	4b5e      	ldr	r3, [pc, #376]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054e6:	2180      	movs	r1, #128	; 0x80
 80054e8:	0249      	lsls	r1, r1, #9
 80054ea:	430a      	orrs	r2, r1
 80054ec:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80054ee:	4b5c      	ldr	r3, [pc, #368]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80054f2:	4b5b      	ldr	r3, [pc, #364]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054f4:	495d      	ldr	r1, [pc, #372]	; (800566c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80054f6:	400a      	ands	r2, r1
 80054f8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054fa:	4b59      	ldr	r3, [pc, #356]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	2201      	movs	r2, #1
 8005504:	4013      	ands	r3, r2
 8005506:	d016      	beq.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fe fde0 	bl	80040cc <HAL_GetTick>
 800550c:	0003      	movs	r3, r0
 800550e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005510:	e00c      	b.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005512:	f7fe fddb 	bl	80040cc <HAL_GetTick>
 8005516:	0002      	movs	r2, r0
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	4a54      	ldr	r2, [pc, #336]	; (8005670 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d904      	bls.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005522:	2313      	movs	r3, #19
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	2203      	movs	r2, #3
 8005528:	701a      	strb	r2, [r3, #0]
            break;
 800552a:	e004      	b.n	8005536 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800552c:	4b4c      	ldr	r3, [pc, #304]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	2202      	movs	r2, #2
 8005532:	4013      	ands	r3, r2
 8005534:	d0ed      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005536:	2313      	movs	r3, #19
 8005538:	18fb      	adds	r3, r7, r3
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d10a      	bne.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005540:	4b47      	ldr	r3, [pc, #284]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005544:	4a48      	ldr	r2, [pc, #288]	; (8005668 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005546:	4013      	ands	r3, r2
 8005548:	0019      	movs	r1, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	4b44      	ldr	r3, [pc, #272]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005550:	430a      	orrs	r2, r1
 8005552:	65da      	str	r2, [r3, #92]	; 0x5c
 8005554:	e00c      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005556:	2312      	movs	r3, #18
 8005558:	18fb      	adds	r3, r7, r3
 800555a:	2213      	movs	r2, #19
 800555c:	18ba      	adds	r2, r7, r2
 800555e:	7812      	ldrb	r2, [r2, #0]
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	e005      	b.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005564:	2312      	movs	r3, #18
 8005566:	18fb      	adds	r3, r7, r3
 8005568:	2213      	movs	r2, #19
 800556a:	18ba      	adds	r2, r7, r2
 800556c:	7812      	ldrb	r2, [r2, #0]
 800556e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005570:	2311      	movs	r3, #17
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d105      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800557a:	4b39      	ldr	r3, [pc, #228]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800557c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800557e:	4b38      	ldr	r3, [pc, #224]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005580:	493c      	ldr	r1, [pc, #240]	; (8005674 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005582:	400a      	ands	r2, r1
 8005584:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	2201      	movs	r2, #1
 800558c:	4013      	ands	r3, r2
 800558e:	d009      	beq.n	80055a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005590:	4b33      	ldr	r3, [pc, #204]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005594:	2203      	movs	r2, #3
 8005596:	4393      	bics	r3, r2
 8005598:	0019      	movs	r1, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	4b30      	ldr	r3, [pc, #192]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055a0:	430a      	orrs	r2, r1
 80055a2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2202      	movs	r2, #2
 80055aa:	4013      	ands	r3, r2
 80055ac:	d009      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80055ae:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b2:	220c      	movs	r2, #12
 80055b4:	4393      	bics	r3, r2
 80055b6:	0019      	movs	r1, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	4b28      	ldr	r3, [pc, #160]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055be:	430a      	orrs	r2, r1
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	2220      	movs	r2, #32
 80055c8:	4013      	ands	r3, r2
 80055ca:	d009      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80055cc:	4b24      	ldr	r3, [pc, #144]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	4a29      	ldr	r2, [pc, #164]	; (8005678 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055d2:	4013      	ands	r3, r2
 80055d4:	0019      	movs	r1, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	4b21      	ldr	r3, [pc, #132]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055dc:	430a      	orrs	r2, r1
 80055de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	2380      	movs	r3, #128	; 0x80
 80055e6:	01db      	lsls	r3, r3, #7
 80055e8:	4013      	ands	r3, r2
 80055ea:	d015      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ec:	4b1c      	ldr	r3, [pc, #112]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	0899      	lsrs	r1, r3, #2
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	4b19      	ldr	r3, [pc, #100]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80055fa:	430a      	orrs	r2, r1
 80055fc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	695a      	ldr	r2, [r3, #20]
 8005602:	2380      	movs	r3, #128	; 0x80
 8005604:	05db      	lsls	r3, r3, #23
 8005606:	429a      	cmp	r2, r3
 8005608:	d106      	bne.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800560a:	4b15      	ldr	r3, [pc, #84]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800560c:	68da      	ldr	r2, [r3, #12]
 800560e:	4b14      	ldr	r3, [pc, #80]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005610:	2180      	movs	r1, #128	; 0x80
 8005612:	0249      	lsls	r1, r1, #9
 8005614:	430a      	orrs	r2, r1
 8005616:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	2380      	movs	r3, #128	; 0x80
 800561e:	011b      	lsls	r3, r3, #4
 8005620:	4013      	ands	r3, r2
 8005622:	d016      	beq.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005624:	4b0e      	ldr	r3, [pc, #56]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005628:	4a14      	ldr	r2, [pc, #80]	; (800567c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800562a:	4013      	ands	r3, r2
 800562c:	0019      	movs	r1, r3
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	4b0b      	ldr	r3, [pc, #44]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005634:	430a      	orrs	r2, r1
 8005636:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	2380      	movs	r3, #128	; 0x80
 800563e:	01db      	lsls	r3, r3, #7
 8005640:	429a      	cmp	r2, r3
 8005642:	d106      	bne.n	8005652 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8005644:	4b06      	ldr	r3, [pc, #24]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005646:	68da      	ldr	r2, [r3, #12]
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800564a:	2180      	movs	r1, #128	; 0x80
 800564c:	0249      	lsls	r1, r1, #9
 800564e:	430a      	orrs	r2, r1
 8005650:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8005652:	2312      	movs	r3, #18
 8005654:	18fb      	adds	r3, r7, r3
 8005656:	781b      	ldrb	r3, [r3, #0]
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b006      	add	sp, #24
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40021000 	.word	0x40021000
 8005664:	40007000 	.word	0x40007000
 8005668:	fffffcff 	.word	0xfffffcff
 800566c:	fffeffff 	.word	0xfffeffff
 8005670:	00001388 	.word	0x00001388
 8005674:	efffffff 	.word	0xefffffff
 8005678:	ffffcfff 	.word	0xffffcfff
 800567c:	ffff3fff 	.word	0xffff3fff

08005680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e04a      	b.n	8005728 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	223d      	movs	r2, #61	; 0x3d
 8005696:	5c9b      	ldrb	r3, [r3, r2]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d107      	bne.n	80056ae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	223c      	movs	r2, #60	; 0x3c
 80056a2:	2100      	movs	r1, #0
 80056a4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	0018      	movs	r0, r3
 80056aa:	f7fd fda9 	bl	8003200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	223d      	movs	r2, #61	; 0x3d
 80056b2:	2102      	movs	r1, #2
 80056b4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	3304      	adds	r3, #4
 80056be:	0019      	movs	r1, r3
 80056c0:	0010      	movs	r0, r2
 80056c2:	f000 fb19 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2248      	movs	r2, #72	; 0x48
 80056ca:	2101      	movs	r1, #1
 80056cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	223e      	movs	r2, #62	; 0x3e
 80056d2:	2101      	movs	r1, #1
 80056d4:	5499      	strb	r1, [r3, r2]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	223f      	movs	r2, #63	; 0x3f
 80056da:	2101      	movs	r1, #1
 80056dc:	5499      	strb	r1, [r3, r2]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2240      	movs	r2, #64	; 0x40
 80056e2:	2101      	movs	r1, #1
 80056e4:	5499      	strb	r1, [r3, r2]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2241      	movs	r2, #65	; 0x41
 80056ea:	2101      	movs	r1, #1
 80056ec:	5499      	strb	r1, [r3, r2]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2242      	movs	r2, #66	; 0x42
 80056f2:	2101      	movs	r1, #1
 80056f4:	5499      	strb	r1, [r3, r2]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2243      	movs	r2, #67	; 0x43
 80056fa:	2101      	movs	r1, #1
 80056fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2244      	movs	r2, #68	; 0x44
 8005702:	2101      	movs	r1, #1
 8005704:	5499      	strb	r1, [r3, r2]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2245      	movs	r2, #69	; 0x45
 800570a:	2101      	movs	r1, #1
 800570c:	5499      	strb	r1, [r3, r2]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2246      	movs	r2, #70	; 0x46
 8005712:	2101      	movs	r1, #1
 8005714:	5499      	strb	r1, [r3, r2]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2247      	movs	r2, #71	; 0x47
 800571a:	2101      	movs	r1, #1
 800571c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	223d      	movs	r2, #61	; 0x3d
 8005722:	2101      	movs	r1, #1
 8005724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	0018      	movs	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	b002      	add	sp, #8
 800572e:	bd80      	pop	{r7, pc}

08005730 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d101      	bne.n	8005742 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800573e:	2301      	movs	r3, #1
 8005740:	e04a      	b.n	80057d8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	223d      	movs	r2, #61	; 0x3d
 8005746:	5c9b      	ldrb	r3, [r3, r2]
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d107      	bne.n	800575e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	223c      	movs	r2, #60	; 0x3c
 8005752:	2100      	movs	r1, #0
 8005754:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	0018      	movs	r0, r3
 800575a:	f7fd fdc5 	bl	80032e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	223d      	movs	r2, #61	; 0x3d
 8005762:	2102      	movs	r1, #2
 8005764:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	3304      	adds	r3, #4
 800576e:	0019      	movs	r1, r3
 8005770:	0010      	movs	r0, r2
 8005772:	f000 fac1 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2248      	movs	r2, #72	; 0x48
 800577a:	2101      	movs	r1, #1
 800577c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	223e      	movs	r2, #62	; 0x3e
 8005782:	2101      	movs	r1, #1
 8005784:	5499      	strb	r1, [r3, r2]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	223f      	movs	r2, #63	; 0x3f
 800578a:	2101      	movs	r1, #1
 800578c:	5499      	strb	r1, [r3, r2]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2240      	movs	r2, #64	; 0x40
 8005792:	2101      	movs	r1, #1
 8005794:	5499      	strb	r1, [r3, r2]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2241      	movs	r2, #65	; 0x41
 800579a:	2101      	movs	r1, #1
 800579c:	5499      	strb	r1, [r3, r2]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2242      	movs	r2, #66	; 0x42
 80057a2:	2101      	movs	r1, #1
 80057a4:	5499      	strb	r1, [r3, r2]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2243      	movs	r2, #67	; 0x43
 80057aa:	2101      	movs	r1, #1
 80057ac:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2244      	movs	r2, #68	; 0x44
 80057b2:	2101      	movs	r1, #1
 80057b4:	5499      	strb	r1, [r3, r2]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2245      	movs	r2, #69	; 0x45
 80057ba:	2101      	movs	r1, #1
 80057bc:	5499      	strb	r1, [r3, r2]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2246      	movs	r2, #70	; 0x46
 80057c2:	2101      	movs	r1, #1
 80057c4:	5499      	strb	r1, [r3, r2]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2247      	movs	r2, #71	; 0x47
 80057ca:	2101      	movs	r1, #1
 80057cc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	223d      	movs	r2, #61	; 0x3d
 80057d2:	2101      	movs	r1, #1
 80057d4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	0018      	movs	r0, r3
 80057da:	46bd      	mov	sp, r7
 80057dc:	b002      	add	sp, #8
 80057de:	bd80      	pop	{r7, pc}

080057e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d108      	bne.n	8005802 <HAL_TIM_PWM_Start+0x22>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	223e      	movs	r2, #62	; 0x3e
 80057f4:	5c9b      	ldrb	r3, [r3, r2]
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	1e5a      	subs	r2, r3, #1
 80057fc:	4193      	sbcs	r3, r2
 80057fe:	b2db      	uxtb	r3, r3
 8005800:	e037      	b.n	8005872 <HAL_TIM_PWM_Start+0x92>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b04      	cmp	r3, #4
 8005806:	d108      	bne.n	800581a <HAL_TIM_PWM_Start+0x3a>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	223f      	movs	r2, #63	; 0x3f
 800580c:	5c9b      	ldrb	r3, [r3, r2]
 800580e:	b2db      	uxtb	r3, r3
 8005810:	3b01      	subs	r3, #1
 8005812:	1e5a      	subs	r2, r3, #1
 8005814:	4193      	sbcs	r3, r2
 8005816:	b2db      	uxtb	r3, r3
 8005818:	e02b      	b.n	8005872 <HAL_TIM_PWM_Start+0x92>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d108      	bne.n	8005832 <HAL_TIM_PWM_Start+0x52>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2240      	movs	r2, #64	; 0x40
 8005824:	5c9b      	ldrb	r3, [r3, r2]
 8005826:	b2db      	uxtb	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	1e5a      	subs	r2, r3, #1
 800582c:	4193      	sbcs	r3, r2
 800582e:	b2db      	uxtb	r3, r3
 8005830:	e01f      	b.n	8005872 <HAL_TIM_PWM_Start+0x92>
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	2b0c      	cmp	r3, #12
 8005836:	d108      	bne.n	800584a <HAL_TIM_PWM_Start+0x6a>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2241      	movs	r2, #65	; 0x41
 800583c:	5c9b      	ldrb	r3, [r3, r2]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	3b01      	subs	r3, #1
 8005842:	1e5a      	subs	r2, r3, #1
 8005844:	4193      	sbcs	r3, r2
 8005846:	b2db      	uxtb	r3, r3
 8005848:	e013      	b.n	8005872 <HAL_TIM_PWM_Start+0x92>
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	2b10      	cmp	r3, #16
 800584e:	d108      	bne.n	8005862 <HAL_TIM_PWM_Start+0x82>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2242      	movs	r2, #66	; 0x42
 8005854:	5c9b      	ldrb	r3, [r3, r2]
 8005856:	b2db      	uxtb	r3, r3
 8005858:	3b01      	subs	r3, #1
 800585a:	1e5a      	subs	r2, r3, #1
 800585c:	4193      	sbcs	r3, r2
 800585e:	b2db      	uxtb	r3, r3
 8005860:	e007      	b.n	8005872 <HAL_TIM_PWM_Start+0x92>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2243      	movs	r2, #67	; 0x43
 8005866:	5c9b      	ldrb	r3, [r3, r2]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	3b01      	subs	r3, #1
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	4193      	sbcs	r3, r2
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d001      	beq.n	800587a <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e085      	b.n	8005986 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <HAL_TIM_PWM_Start+0xaa>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	223e      	movs	r2, #62	; 0x3e
 8005884:	2102      	movs	r1, #2
 8005886:	5499      	strb	r1, [r3, r2]
 8005888:	e023      	b.n	80058d2 <HAL_TIM_PWM_Start+0xf2>
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	2b04      	cmp	r3, #4
 800588e:	d104      	bne.n	800589a <HAL_TIM_PWM_Start+0xba>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	223f      	movs	r2, #63	; 0x3f
 8005894:	2102      	movs	r1, #2
 8005896:	5499      	strb	r1, [r3, r2]
 8005898:	e01b      	b.n	80058d2 <HAL_TIM_PWM_Start+0xf2>
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b08      	cmp	r3, #8
 800589e:	d104      	bne.n	80058aa <HAL_TIM_PWM_Start+0xca>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2240      	movs	r2, #64	; 0x40
 80058a4:	2102      	movs	r1, #2
 80058a6:	5499      	strb	r1, [r3, r2]
 80058a8:	e013      	b.n	80058d2 <HAL_TIM_PWM_Start+0xf2>
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b0c      	cmp	r3, #12
 80058ae:	d104      	bne.n	80058ba <HAL_TIM_PWM_Start+0xda>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2241      	movs	r2, #65	; 0x41
 80058b4:	2102      	movs	r1, #2
 80058b6:	5499      	strb	r1, [r3, r2]
 80058b8:	e00b      	b.n	80058d2 <HAL_TIM_PWM_Start+0xf2>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b10      	cmp	r3, #16
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0xea>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2242      	movs	r2, #66	; 0x42
 80058c4:	2102      	movs	r1, #2
 80058c6:	5499      	strb	r1, [r3, r2]
 80058c8:	e003      	b.n	80058d2 <HAL_TIM_PWM_Start+0xf2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2243      	movs	r2, #67	; 0x43
 80058ce:	2102      	movs	r1, #2
 80058d0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	2201      	movs	r2, #1
 80058da:	0018      	movs	r0, r3
 80058dc:	f000 fd46 	bl	800636c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <HAL_TIM_PWM_Start+0x1b0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d00e      	beq.n	8005908 <HAL_TIM_PWM_Start+0x128>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a29      	ldr	r2, [pc, #164]	; (8005994 <HAL_TIM_PWM_Start+0x1b4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d009      	beq.n	8005908 <HAL_TIM_PWM_Start+0x128>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a27      	ldr	r2, [pc, #156]	; (8005998 <HAL_TIM_PWM_Start+0x1b8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d004      	beq.n	8005908 <HAL_TIM_PWM_Start+0x128>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a26      	ldr	r2, [pc, #152]	; (800599c <HAL_TIM_PWM_Start+0x1bc>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d101      	bne.n	800590c <HAL_TIM_PWM_Start+0x12c>
 8005908:	2301      	movs	r3, #1
 800590a:	e000      	b.n	800590e <HAL_TIM_PWM_Start+0x12e>
 800590c:	2300      	movs	r3, #0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d008      	beq.n	8005924 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2180      	movs	r1, #128	; 0x80
 800591e:	0209      	lsls	r1, r1, #8
 8005920:	430a      	orrs	r2, r1
 8005922:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a19      	ldr	r2, [pc, #100]	; (8005990 <HAL_TIM_PWM_Start+0x1b0>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d009      	beq.n	8005942 <HAL_TIM_PWM_Start+0x162>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a1b      	ldr	r2, [pc, #108]	; (80059a0 <HAL_TIM_PWM_Start+0x1c0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d004      	beq.n	8005942 <HAL_TIM_PWM_Start+0x162>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a15      	ldr	r2, [pc, #84]	; (8005994 <HAL_TIM_PWM_Start+0x1b4>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d116      	bne.n	8005970 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	4a16      	ldr	r2, [pc, #88]	; (80059a4 <HAL_TIM_PWM_Start+0x1c4>)
 800594a:	4013      	ands	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b06      	cmp	r3, #6
 8005952:	d016      	beq.n	8005982 <HAL_TIM_PWM_Start+0x1a2>
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	2380      	movs	r3, #128	; 0x80
 8005958:	025b      	lsls	r3, r3, #9
 800595a:	429a      	cmp	r2, r3
 800595c:	d011      	beq.n	8005982 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	681a      	ldr	r2, [r3, #0]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2101      	movs	r1, #1
 800596a:	430a      	orrs	r2, r1
 800596c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800596e:	e008      	b.n	8005982 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2101      	movs	r1, #1
 800597c:	430a      	orrs	r2, r1
 800597e:	601a      	str	r2, [r3, #0]
 8005980:	e000      	b.n	8005984 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005982:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	0018      	movs	r0, r3
 8005988:	46bd      	mov	sp, r7
 800598a:	b004      	add	sp, #16
 800598c:	bd80      	pop	{r7, pc}
 800598e:	46c0      	nop			; (mov r8, r8)
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40014000 	.word	0x40014000
 8005998:	40014400 	.word	0x40014400
 800599c:	40014800 	.word	0x40014800
 80059a0:	40000400 	.word	0x40000400
 80059a4:	00010007 	.word	0x00010007

080059a8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b086      	sub	sp, #24
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e090      	b.n	8005ade <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	223d      	movs	r2, #61	; 0x3d
 80059c0:	5c9b      	ldrb	r3, [r3, r2]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d107      	bne.n	80059d8 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	223c      	movs	r2, #60	; 0x3c
 80059cc:	2100      	movs	r1, #0
 80059ce:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7fd fb92 	bl	80030fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	223d      	movs	r2, #61	; 0x3d
 80059dc:	2102      	movs	r1, #2
 80059de:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	493f      	ldr	r1, [pc, #252]	; (8005ae8 <HAL_TIM_Encoder_Init+0x140>)
 80059ec:	400a      	ands	r2, r1
 80059ee:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3304      	adds	r3, #4
 80059f8:	0019      	movs	r1, r3
 80059fa:	0010      	movs	r0, r2
 80059fc:	f000 f97c 	bl	8005cf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6a1b      	ldr	r3, [r3, #32]
 8005a16:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	4a31      	ldr	r2, [pc, #196]	; (8005aec <HAL_TIM_Encoder_Init+0x144>)
 8005a26:	4013      	ands	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	699b      	ldr	r3, [r3, #24]
 8005a32:	021b      	lsls	r3, r3, #8
 8005a34:	4313      	orrs	r3, r2
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	4a2c      	ldr	r2, [pc, #176]	; (8005af0 <HAL_TIM_Encoder_Init+0x148>)
 8005a40:	4013      	ands	r3, r2
 8005a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	4a2b      	ldr	r2, [pc, #172]	; (8005af4 <HAL_TIM_Encoder_Init+0x14c>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68da      	ldr	r2, [r3, #12]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	69db      	ldr	r3, [r3, #28]
 8005a54:	021b      	lsls	r3, r3, #8
 8005a56:	4313      	orrs	r3, r2
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	011a      	lsls	r2, r3, #4
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	6a1b      	ldr	r3, [r3, #32]
 8005a68:	031b      	lsls	r3, r3, #12
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2222      	movs	r2, #34	; 0x22
 8005a76:	4393      	bics	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2288      	movs	r2, #136	; 0x88
 8005a7e:	4393      	bics	r3, r2
 8005a80:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	695b      	ldr	r3, [r3, #20]
 8005a8a:	011b      	lsls	r3, r3, #4
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	68fa      	ldr	r2, [r7, #12]
 8005a90:	4313      	orrs	r3, r2
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2248      	movs	r2, #72	; 0x48
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	223e      	movs	r2, #62	; 0x3e
 8005ab8:	2101      	movs	r1, #1
 8005aba:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	223f      	movs	r2, #63	; 0x3f
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2244      	movs	r2, #68	; 0x44
 8005ac8:	2101      	movs	r1, #1
 8005aca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2245      	movs	r2, #69	; 0x45
 8005ad0:	2101      	movs	r1, #1
 8005ad2:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	223d      	movs	r2, #61	; 0x3d
 8005ad8:	2101      	movs	r1, #1
 8005ada:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	0018      	movs	r0, r3
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	b006      	add	sp, #24
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	46c0      	nop			; (mov r8, r8)
 8005ae8:	fffebff8 	.word	0xfffebff8
 8005aec:	fffffcfc 	.word	0xfffffcfc
 8005af0:	fffff3f3 	.word	0xfffff3f3
 8005af4:	ffff0f0f 	.word	0xffff0f0f

08005af8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b086      	sub	sp, #24
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	60f8      	str	r0, [r7, #12]
 8005b00:	60b9      	str	r1, [r7, #8]
 8005b02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b04:	2317      	movs	r3, #23
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	2200      	movs	r2, #0
 8005b0a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	223c      	movs	r2, #60	; 0x3c
 8005b10:	5c9b      	ldrb	r3, [r3, r2]
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_TIM_PWM_ConfigChannel+0x22>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e0e5      	b.n	8005ce6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	223c      	movs	r2, #60	; 0x3c
 8005b1e:	2101      	movs	r1, #1
 8005b20:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b14      	cmp	r3, #20
 8005b26:	d900      	bls.n	8005b2a <HAL_TIM_PWM_ConfigChannel+0x32>
 8005b28:	e0d1      	b.n	8005cce <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	009a      	lsls	r2, r3, #2
 8005b2e:	4b70      	ldr	r3, [pc, #448]	; (8005cf0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005b30:	18d3      	adds	r3, r2, r3
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	0011      	movs	r1, r2
 8005b3e:	0018      	movs	r0, r3
 8005b40:	f000 f950 	bl	8005de4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	699a      	ldr	r2, [r3, #24]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2108      	movs	r1, #8
 8005b50:	430a      	orrs	r2, r1
 8005b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	699a      	ldr	r2, [r3, #24]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2104      	movs	r1, #4
 8005b60:	438a      	bics	r2, r1
 8005b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	6999      	ldr	r1, [r3, #24]
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	691a      	ldr	r2, [r3, #16]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	619a      	str	r2, [r3, #24]
      break;
 8005b76:	e0af      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	0011      	movs	r1, r2
 8005b80:	0018      	movs	r0, r3
 8005b82:	f000 f9b9 	bl	8005ef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	699a      	ldr	r2, [r3, #24]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2180      	movs	r1, #128	; 0x80
 8005b92:	0109      	lsls	r1, r1, #4
 8005b94:	430a      	orrs	r2, r1
 8005b96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	699a      	ldr	r2, [r3, #24]
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4954      	ldr	r1, [pc, #336]	; (8005cf4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005ba4:	400a      	ands	r2, r1
 8005ba6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6999      	ldr	r1, [r3, #24]
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	021a      	lsls	r2, r3, #8
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]
      break;
 8005bbc:	e08c      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	0011      	movs	r1, r2
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f000 fa1a 	bl	8006000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	69da      	ldr	r2, [r3, #28]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2108      	movs	r1, #8
 8005bd8:	430a      	orrs	r2, r1
 8005bda:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	69da      	ldr	r2, [r3, #28]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2104      	movs	r1, #4
 8005be8:	438a      	bics	r2, r1
 8005bea:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	69d9      	ldr	r1, [r3, #28]
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	691a      	ldr	r2, [r3, #16]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	430a      	orrs	r2, r1
 8005bfc:	61da      	str	r2, [r3, #28]
      break;
 8005bfe:	e06b      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68ba      	ldr	r2, [r7, #8]
 8005c06:	0011      	movs	r1, r2
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 fa81 	bl	8006110 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	69da      	ldr	r2, [r3, #28]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2180      	movs	r1, #128	; 0x80
 8005c1a:	0109      	lsls	r1, r1, #4
 8005c1c:	430a      	orrs	r2, r1
 8005c1e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4932      	ldr	r1, [pc, #200]	; (8005cf4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005c2c:	400a      	ands	r2, r1
 8005c2e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	69d9      	ldr	r1, [r3, #28]
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	021a      	lsls	r2, r3, #8
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	61da      	str	r2, [r3, #28]
      break;
 8005c44:	e048      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	68ba      	ldr	r2, [r7, #8]
 8005c4c:	0011      	movs	r1, r2
 8005c4e:	0018      	movs	r0, r3
 8005c50:	f000 fac8 	bl	80061e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2108      	movs	r1, #8
 8005c60:	430a      	orrs	r2, r1
 8005c62:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	2104      	movs	r1, #4
 8005c70:	438a      	bics	r2, r1
 8005c72:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	691a      	ldr	r2, [r3, #16]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005c86:	e027      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	0011      	movs	r1, r2
 8005c90:	0018      	movs	r0, r3
 8005c92:	f000 fb07 	bl	80062a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	0109      	lsls	r1, r1, #4
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4910      	ldr	r1, [pc, #64]	; (8005cf4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005cb4:	400a      	ands	r2, r1
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	021a      	lsls	r2, r3, #8
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005ccc:	e004      	b.n	8005cd8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005cce:	2317      	movs	r3, #23
 8005cd0:	18fb      	adds	r3, r7, r3
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	701a      	strb	r2, [r3, #0]
      break;
 8005cd6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	223c      	movs	r2, #60	; 0x3c
 8005cdc:	2100      	movs	r1, #0
 8005cde:	5499      	strb	r1, [r3, r2]

  return status;
 8005ce0:	2317      	movs	r3, #23
 8005ce2:	18fb      	adds	r3, r7, r3
 8005ce4:	781b      	ldrb	r3, [r3, #0]
}
 8005ce6:	0018      	movs	r0, r3
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	b006      	add	sp, #24
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	46c0      	nop			; (mov r8, r8)
 8005cf0:	0800e904 	.word	0x0800e904
 8005cf4:	fffffbff 	.word	0xfffffbff

08005cf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4a2f      	ldr	r2, [pc, #188]	; (8005dc8 <TIM_Base_SetConfig+0xd0>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d003      	beq.n	8005d18 <TIM_Base_SetConfig+0x20>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	4a2e      	ldr	r2, [pc, #184]	; (8005dcc <TIM_Base_SetConfig+0xd4>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d108      	bne.n	8005d2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2270      	movs	r2, #112	; 0x70
 8005d1c:	4393      	bics	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	4313      	orrs	r3, r2
 8005d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	4a26      	ldr	r2, [pc, #152]	; (8005dc8 <TIM_Base_SetConfig+0xd0>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d013      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4a25      	ldr	r2, [pc, #148]	; (8005dcc <TIM_Base_SetConfig+0xd4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00f      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	4a24      	ldr	r2, [pc, #144]	; (8005dd0 <TIM_Base_SetConfig+0xd8>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d00b      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a23      	ldr	r2, [pc, #140]	; (8005dd4 <TIM_Base_SetConfig+0xdc>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d007      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a22      	ldr	r2, [pc, #136]	; (8005dd8 <TIM_Base_SetConfig+0xe0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d003      	beq.n	8005d5a <TIM_Base_SetConfig+0x62>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	4a21      	ldr	r2, [pc, #132]	; (8005ddc <TIM_Base_SetConfig+0xe4>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d108      	bne.n	8005d6c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	4a20      	ldr	r2, [pc, #128]	; (8005de0 <TIM_Base_SetConfig+0xe8>)
 8005d5e:	4013      	ands	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	68db      	ldr	r3, [r3, #12]
 8005d66:	68fa      	ldr	r2, [r7, #12]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2280      	movs	r2, #128	; 0x80
 8005d70:	4393      	bics	r3, r2
 8005d72:	001a      	movs	r2, r3
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	695b      	ldr	r3, [r3, #20]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	689a      	ldr	r2, [r3, #8]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a0c      	ldr	r2, [pc, #48]	; (8005dc8 <TIM_Base_SetConfig+0xd0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00b      	beq.n	8005db2 <TIM_Base_SetConfig+0xba>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <TIM_Base_SetConfig+0xdc>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d007      	beq.n	8005db2 <TIM_Base_SetConfig+0xba>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a0c      	ldr	r2, [pc, #48]	; (8005dd8 <TIM_Base_SetConfig+0xe0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d003      	beq.n	8005db2 <TIM_Base_SetConfig+0xba>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a0b      	ldr	r2, [pc, #44]	; (8005ddc <TIM_Base_SetConfig+0xe4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d103      	bne.n	8005dba <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691a      	ldr	r2, [r3, #16]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	615a      	str	r2, [r3, #20]
}
 8005dc0:	46c0      	nop			; (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b004      	add	sp, #16
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40012c00 	.word	0x40012c00
 8005dcc:	40000400 	.word	0x40000400
 8005dd0:	40002000 	.word	0x40002000
 8005dd4:	40014000 	.word	0x40014000
 8005dd8:	40014400 	.word	0x40014400
 8005ddc:	40014800 	.word	0x40014800
 8005de0:	fffffcff 	.word	0xfffffcff

08005de4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b086      	sub	sp, #24
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	2201      	movs	r2, #1
 8005df4:	4393      	bics	r3, r2
 8005df6:	001a      	movs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a32      	ldr	r2, [pc, #200]	; (8005edc <TIM_OC1_SetConfig+0xf8>)
 8005e12:	4013      	ands	r3, r2
 8005e14:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2203      	movs	r2, #3
 8005e1a:	4393      	bics	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	2202      	movs	r2, #2
 8005e2c:	4393      	bics	r3, r2
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a28      	ldr	r2, [pc, #160]	; (8005ee0 <TIM_OC1_SetConfig+0xfc>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00b      	beq.n	8005e5a <TIM_OC1_SetConfig+0x76>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	4a27      	ldr	r2, [pc, #156]	; (8005ee4 <TIM_OC1_SetConfig+0x100>)
 8005e46:	4293      	cmp	r3, r2
 8005e48:	d007      	beq.n	8005e5a <TIM_OC1_SetConfig+0x76>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a26      	ldr	r2, [pc, #152]	; (8005ee8 <TIM_OC1_SetConfig+0x104>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d003      	beq.n	8005e5a <TIM_OC1_SetConfig+0x76>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a25      	ldr	r2, [pc, #148]	; (8005eec <TIM_OC1_SetConfig+0x108>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d10c      	bne.n	8005e74 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	4393      	bics	r3, r2
 8005e60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	2204      	movs	r2, #4
 8005e70:	4393      	bics	r3, r2
 8005e72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a1a      	ldr	r2, [pc, #104]	; (8005ee0 <TIM_OC1_SetConfig+0xfc>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_OC1_SetConfig+0xb0>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a19      	ldr	r2, [pc, #100]	; (8005ee4 <TIM_OC1_SetConfig+0x100>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_OC1_SetConfig+0xb0>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a18      	ldr	r2, [pc, #96]	; (8005ee8 <TIM_OC1_SetConfig+0x104>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_OC1_SetConfig+0xb0>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a17      	ldr	r2, [pc, #92]	; (8005eec <TIM_OC1_SetConfig+0x108>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d111      	bne.n	8005eb8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e94:	693b      	ldr	r3, [r7, #16]
 8005e96:	4a16      	ldr	r2, [pc, #88]	; (8005ef0 <TIM_OC1_SetConfig+0x10c>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <TIM_OC1_SetConfig+0x110>)
 8005ea0:	4013      	ands	r3, r2
 8005ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	695b      	ldr	r3, [r3, #20]
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	699b      	ldr	r3, [r3, #24]
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	621a      	str	r2, [r3, #32]
}
 8005ed2:	46c0      	nop			; (mov r8, r8)
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	b006      	add	sp, #24
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	fffeff8f 	.word	0xfffeff8f
 8005ee0:	40012c00 	.word	0x40012c00
 8005ee4:	40014000 	.word	0x40014000
 8005ee8:	40014400 	.word	0x40014400
 8005eec:	40014800 	.word	0x40014800
 8005ef0:	fffffeff 	.word	0xfffffeff
 8005ef4:	fffffdff 	.word	0xfffffdff

08005ef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b086      	sub	sp, #24
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	2210      	movs	r2, #16
 8005f08:	4393      	bics	r3, r2
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6a1b      	ldr	r3, [r3, #32]
 8005f14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	699b      	ldr	r3, [r3, #24]
 8005f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	4a2e      	ldr	r2, [pc, #184]	; (8005fe0 <TIM_OC2_SetConfig+0xe8>)
 8005f26:	4013      	ands	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	4a2d      	ldr	r2, [pc, #180]	; (8005fe4 <TIM_OC2_SetConfig+0xec>)
 8005f2e:	4013      	ands	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	021b      	lsls	r3, r3, #8
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f3e:	697b      	ldr	r3, [r7, #20]
 8005f40:	2220      	movs	r2, #32
 8005f42:	4393      	bics	r3, r2
 8005f44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	689b      	ldr	r3, [r3, #8]
 8005f4a:	011b      	lsls	r3, r3, #4
 8005f4c:	697a      	ldr	r2, [r7, #20]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	4a24      	ldr	r2, [pc, #144]	; (8005fe8 <TIM_OC2_SetConfig+0xf0>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d10d      	bne.n	8005f76 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2280      	movs	r2, #128	; 0x80
 8005f5e:	4393      	bics	r3, r2
 8005f60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	011b      	lsls	r3, r3, #4
 8005f68:	697a      	ldr	r2, [r7, #20]
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	2240      	movs	r2, #64	; 0x40
 8005f72:	4393      	bics	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a1b      	ldr	r2, [pc, #108]	; (8005fe8 <TIM_OC2_SetConfig+0xf0>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d00b      	beq.n	8005f96 <TIM_OC2_SetConfig+0x9e>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <TIM_OC2_SetConfig+0xf4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d007      	beq.n	8005f96 <TIM_OC2_SetConfig+0x9e>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a19      	ldr	r2, [pc, #100]	; (8005ff0 <TIM_OC2_SetConfig+0xf8>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d003      	beq.n	8005f96 <TIM_OC2_SetConfig+0x9e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a18      	ldr	r2, [pc, #96]	; (8005ff4 <TIM_OC2_SetConfig+0xfc>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d113      	bne.n	8005fbe <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4a17      	ldr	r2, [pc, #92]	; (8005ff8 <TIM_OC2_SetConfig+0x100>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	4a16      	ldr	r2, [pc, #88]	; (8005ffc <TIM_OC2_SetConfig+0x104>)
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	693a      	ldr	r2, [r7, #16]
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	685a      	ldr	r2, [r3, #4]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	621a      	str	r2, [r3, #32]
}
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	b006      	add	sp, #24
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	feff8fff 	.word	0xfeff8fff
 8005fe4:	fffffcff 	.word	0xfffffcff
 8005fe8:	40012c00 	.word	0x40012c00
 8005fec:	40014000 	.word	0x40014000
 8005ff0:	40014400 	.word	0x40014400
 8005ff4:	40014800 	.word	0x40014800
 8005ff8:	fffffbff 	.word	0xfffffbff
 8005ffc:	fffff7ff 	.word	0xfffff7ff

08006000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b086      	sub	sp, #24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a1b      	ldr	r3, [r3, #32]
 800600e:	4a35      	ldr	r2, [pc, #212]	; (80060e4 <TIM_OC3_SetConfig+0xe4>)
 8006010:	401a      	ands	r2, r3
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a2f      	ldr	r2, [pc, #188]	; (80060e8 <TIM_OC3_SetConfig+0xe8>)
 800602c:	4013      	ands	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2203      	movs	r2, #3
 8006034:	4393      	bics	r3, r2
 8006036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	4313      	orrs	r3, r2
 8006040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	4a29      	ldr	r2, [pc, #164]	; (80060ec <TIM_OC3_SetConfig+0xec>)
 8006046:	4013      	ands	r3, r2
 8006048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	021b      	lsls	r3, r3, #8
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4a25      	ldr	r2, [pc, #148]	; (80060f0 <TIM_OC3_SetConfig+0xf0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d10d      	bne.n	800607a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	4a24      	ldr	r2, [pc, #144]	; (80060f4 <TIM_OC3_SetConfig+0xf4>)
 8006062:	4013      	ands	r3, r2
 8006064:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	021b      	lsls	r3, r3, #8
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	4313      	orrs	r3, r2
 8006070:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	4a20      	ldr	r2, [pc, #128]	; (80060f8 <TIM_OC3_SetConfig+0xf8>)
 8006076:	4013      	ands	r3, r2
 8006078:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1c      	ldr	r2, [pc, #112]	; (80060f0 <TIM_OC3_SetConfig+0xf0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00b      	beq.n	800609a <TIM_OC3_SetConfig+0x9a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a1d      	ldr	r2, [pc, #116]	; (80060fc <TIM_OC3_SetConfig+0xfc>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d007      	beq.n	800609a <TIM_OC3_SetConfig+0x9a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <TIM_OC3_SetConfig+0x100>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d003      	beq.n	800609a <TIM_OC3_SetConfig+0x9a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <TIM_OC3_SetConfig+0x104>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d113      	bne.n	80060c2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	4a1a      	ldr	r2, [pc, #104]	; (8006108 <TIM_OC3_SetConfig+0x108>)
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	4a19      	ldr	r2, [pc, #100]	; (800610c <TIM_OC3_SetConfig+0x10c>)
 80060a6:	4013      	ands	r3, r2
 80060a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	011b      	lsls	r3, r3, #4
 80060b0:	693a      	ldr	r2, [r7, #16]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	621a      	str	r2, [r3, #32]
}
 80060dc:	46c0      	nop			; (mov r8, r8)
 80060de:	46bd      	mov	sp, r7
 80060e0:	b006      	add	sp, #24
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	fffffeff 	.word	0xfffffeff
 80060e8:	fffeff8f 	.word	0xfffeff8f
 80060ec:	fffffdff 	.word	0xfffffdff
 80060f0:	40012c00 	.word	0x40012c00
 80060f4:	fffff7ff 	.word	0xfffff7ff
 80060f8:	fffffbff 	.word	0xfffffbff
 80060fc:	40014000 	.word	0x40014000
 8006100:	40014400 	.word	0x40014400
 8006104:	40014800 	.word	0x40014800
 8006108:	ffffefff 	.word	0xffffefff
 800610c:	ffffdfff 	.word	0xffffdfff

08006110 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	4a28      	ldr	r2, [pc, #160]	; (80061c0 <TIM_OC4_SetConfig+0xb0>)
 8006120:	401a      	ands	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <TIM_OC4_SetConfig+0xb4>)
 800613c:	4013      	ands	r3, r2
 800613e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <TIM_OC4_SetConfig+0xb8>)
 8006144:	4013      	ands	r3, r2
 8006146:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	021b      	lsls	r3, r3, #8
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	4313      	orrs	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	4a1d      	ldr	r2, [pc, #116]	; (80061cc <TIM_OC4_SetConfig+0xbc>)
 8006158:	4013      	ands	r3, r2
 800615a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	031b      	lsls	r3, r3, #12
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a19      	ldr	r2, [pc, #100]	; (80061d0 <TIM_OC4_SetConfig+0xc0>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d00b      	beq.n	8006188 <TIM_OC4_SetConfig+0x78>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <TIM_OC4_SetConfig+0xc4>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d007      	beq.n	8006188 <TIM_OC4_SetConfig+0x78>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <TIM_OC4_SetConfig+0xc8>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d003      	beq.n	8006188 <TIM_OC4_SetConfig+0x78>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a16      	ldr	r2, [pc, #88]	; (80061dc <TIM_OC4_SetConfig+0xcc>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d109      	bne.n	800619c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	4a15      	ldr	r2, [pc, #84]	; (80061e0 <TIM_OC4_SetConfig+0xd0>)
 800618c:	4013      	ands	r3, r2
 800618e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	019b      	lsls	r3, r3, #6
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	685a      	ldr	r2, [r3, #4]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	693a      	ldr	r2, [r7, #16]
 80061b4:	621a      	str	r2, [r3, #32]
}
 80061b6:	46c0      	nop			; (mov r8, r8)
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b006      	add	sp, #24
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	46c0      	nop			; (mov r8, r8)
 80061c0:	ffffefff 	.word	0xffffefff
 80061c4:	feff8fff 	.word	0xfeff8fff
 80061c8:	fffffcff 	.word	0xfffffcff
 80061cc:	ffffdfff 	.word	0xffffdfff
 80061d0:	40012c00 	.word	0x40012c00
 80061d4:	40014000 	.word	0x40014000
 80061d8:	40014400 	.word	0x40014400
 80061dc:	40014800 	.word	0x40014800
 80061e0:	ffffbfff 	.word	0xffffbfff

080061e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	4a25      	ldr	r2, [pc, #148]	; (8006288 <TIM_OC5_SetConfig+0xa4>)
 80061f4:	401a      	ands	r2, r3
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4a1f      	ldr	r2, [pc, #124]	; (800628c <TIM_OC5_SetConfig+0xa8>)
 8006210:	4013      	ands	r3, r2
 8006212:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	4313      	orrs	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800621e:	693b      	ldr	r3, [r7, #16]
 8006220:	4a1b      	ldr	r2, [pc, #108]	; (8006290 <TIM_OC5_SetConfig+0xac>)
 8006222:	4013      	ands	r3, r2
 8006224:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	041b      	lsls	r3, r3, #16
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <TIM_OC5_SetConfig+0xb0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d00b      	beq.n	8006252 <TIM_OC5_SetConfig+0x6e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a16      	ldr	r2, [pc, #88]	; (8006298 <TIM_OC5_SetConfig+0xb4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d007      	beq.n	8006252 <TIM_OC5_SetConfig+0x6e>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a15      	ldr	r2, [pc, #84]	; (800629c <TIM_OC5_SetConfig+0xb8>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d003      	beq.n	8006252 <TIM_OC5_SetConfig+0x6e>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a14      	ldr	r2, [pc, #80]	; (80062a0 <TIM_OC5_SetConfig+0xbc>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d109      	bne.n	8006266 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	4a0c      	ldr	r2, [pc, #48]	; (8006288 <TIM_OC5_SetConfig+0xa4>)
 8006256:	4013      	ands	r3, r2
 8006258:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	695b      	ldr	r3, [r3, #20]
 800625e:	021b      	lsls	r3, r3, #8
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	4313      	orrs	r3, r2
 8006264:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	693a      	ldr	r2, [r7, #16]
 800627e:	621a      	str	r2, [r3, #32]
}
 8006280:	46c0      	nop			; (mov r8, r8)
 8006282:	46bd      	mov	sp, r7
 8006284:	b006      	add	sp, #24
 8006286:	bd80      	pop	{r7, pc}
 8006288:	fffeffff 	.word	0xfffeffff
 800628c:	fffeff8f 	.word	0xfffeff8f
 8006290:	fffdffff 	.word	0xfffdffff
 8006294:	40012c00 	.word	0x40012c00
 8006298:	40014000 	.word	0x40014000
 800629c:	40014400 	.word	0x40014400
 80062a0:	40014800 	.word	0x40014800

080062a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a1b      	ldr	r3, [r3, #32]
 80062b2:	4a26      	ldr	r2, [pc, #152]	; (800634c <TIM_OC6_SetConfig+0xa8>)
 80062b4:	401a      	ands	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6a1b      	ldr	r3, [r3, #32]
 80062be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	685b      	ldr	r3, [r3, #4]
 80062c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4a20      	ldr	r2, [pc, #128]	; (8006350 <TIM_OC6_SetConfig+0xac>)
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	021b      	lsls	r3, r3, #8
 80062da:	68fa      	ldr	r2, [r7, #12]
 80062dc:	4313      	orrs	r3, r2
 80062de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	4a1c      	ldr	r2, [pc, #112]	; (8006354 <TIM_OC6_SetConfig+0xb0>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	689b      	ldr	r3, [r3, #8]
 80062ec:	051b      	lsls	r3, r3, #20
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a18      	ldr	r2, [pc, #96]	; (8006358 <TIM_OC6_SetConfig+0xb4>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d00b      	beq.n	8006314 <TIM_OC6_SetConfig+0x70>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a17      	ldr	r2, [pc, #92]	; (800635c <TIM_OC6_SetConfig+0xb8>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d007      	beq.n	8006314 <TIM_OC6_SetConfig+0x70>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a16      	ldr	r2, [pc, #88]	; (8006360 <TIM_OC6_SetConfig+0xbc>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d003      	beq.n	8006314 <TIM_OC6_SetConfig+0x70>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <TIM_OC6_SetConfig+0xc0>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d109      	bne.n	8006328 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	4a14      	ldr	r2, [pc, #80]	; (8006368 <TIM_OC6_SetConfig+0xc4>)
 8006318:	4013      	ands	r3, r2
 800631a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	029b      	lsls	r3, r3, #10
 8006322:	697a      	ldr	r2, [r7, #20]
 8006324:	4313      	orrs	r3, r2
 8006326:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	68fa      	ldr	r2, [r7, #12]
 8006332:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	685a      	ldr	r2, [r3, #4]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	621a      	str	r2, [r3, #32]
}
 8006342:	46c0      	nop			; (mov r8, r8)
 8006344:	46bd      	mov	sp, r7
 8006346:	b006      	add	sp, #24
 8006348:	bd80      	pop	{r7, pc}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	ffefffff 	.word	0xffefffff
 8006350:	feff8fff 	.word	0xfeff8fff
 8006354:	ffdfffff 	.word	0xffdfffff
 8006358:	40012c00 	.word	0x40012c00
 800635c:	40014000 	.word	0x40014000
 8006360:	40014400 	.word	0x40014400
 8006364:	40014800 	.word	0x40014800
 8006368:	fffbffff 	.word	0xfffbffff

0800636c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	221f      	movs	r2, #31
 800637c:	4013      	ands	r3, r2
 800637e:	2201      	movs	r2, #1
 8006380:	409a      	lsls	r2, r3
 8006382:	0013      	movs	r3, r2
 8006384:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	43d2      	mvns	r2, r2
 800638e:	401a      	ands	r2, r3
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6a1a      	ldr	r2, [r3, #32]
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	211f      	movs	r1, #31
 800639c:	400b      	ands	r3, r1
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4099      	lsls	r1, r3
 80063a2:	000b      	movs	r3, r1
 80063a4:	431a      	orrs	r2, r3
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	621a      	str	r2, [r3, #32]
}
 80063aa:	46c0      	nop			; (mov r8, r8)
 80063ac:	46bd      	mov	sp, r7
 80063ae:	b006      	add	sp, #24
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	223c      	movs	r2, #60	; 0x3c
 80063c2:	5c9b      	ldrb	r3, [r3, r2]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063c8:	2302      	movs	r3, #2
 80063ca:	e04f      	b.n	800646c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	223c      	movs	r2, #60	; 0x3c
 80063d0:	2101      	movs	r1, #1
 80063d2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	223d      	movs	r2, #61	; 0x3d
 80063d8:	2102      	movs	r1, #2
 80063da:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a20      	ldr	r2, [pc, #128]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d108      	bne.n	8006408 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a1f      	ldr	r2, [pc, #124]	; (8006478 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80063fa:	4013      	ands	r3, r2
 80063fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2270      	movs	r2, #112	; 0x70
 800640c:	4393      	bics	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68fa      	ldr	r2, [r7, #12]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	68fa      	ldr	r2, [r7, #12]
 8006420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a13      	ldr	r2, [pc, #76]	; (8006474 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d009      	beq.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a12      	ldr	r2, [pc, #72]	; (800647c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d004      	beq.n	8006440 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a11      	ldr	r2, [pc, #68]	; (8006480 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d10c      	bne.n	800645a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	2280      	movs	r2, #128	; 0x80
 8006444:	4393      	bics	r3, r2
 8006446:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	68ba      	ldr	r2, [r7, #8]
 800644e:	4313      	orrs	r3, r2
 8006450:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	223d      	movs	r2, #61	; 0x3d
 800645e:	2101      	movs	r1, #1
 8006460:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	223c      	movs	r2, #60	; 0x3c
 8006466:	2100      	movs	r1, #0
 8006468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800646a:	2300      	movs	r3, #0
}
 800646c:	0018      	movs	r0, r3
 800646e:	46bd      	mov	sp, r7
 8006470:	b004      	add	sp, #16
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40012c00 	.word	0x40012c00
 8006478:	ff0fffff 	.word	0xff0fffff
 800647c:	40000400 	.word	0x40000400
 8006480:	40014000 	.word	0x40014000

08006484 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	223c      	movs	r2, #60	; 0x3c
 8006496:	5c9b      	ldrb	r3, [r3, r2]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800649c:	2302      	movs	r3, #2
 800649e:	e079      	b.n	8006594 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	223c      	movs	r2, #60	; 0x3c
 80064a4:	2101      	movs	r1, #1
 80064a6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	22ff      	movs	r2, #255	; 0xff
 80064ac:	4393      	bics	r3, r2
 80064ae:	001a      	movs	r2, r3
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	4a38      	ldr	r2, [pc, #224]	; (800659c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80064bc:	401a      	ands	r2, r3
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	4a35      	ldr	r2, [pc, #212]	; (80065a0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80064ca:	401a      	ands	r2, r3
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	4a33      	ldr	r2, [pc, #204]	; (80065a4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80064d8:	401a      	ands	r2, r3
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	4a30      	ldr	r2, [pc, #192]	; (80065a8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80064e6:	401a      	ands	r2, r3
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	4313      	orrs	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4a2e      	ldr	r2, [pc, #184]	; (80065ac <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80064f4:	401a      	ands	r2, r3
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	4313      	orrs	r3, r2
 80064fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4a2b      	ldr	r2, [pc, #172]	; (80065b0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8006502:	401a      	ands	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8006510:	401a      	ands	r2, r3
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	041b      	lsls	r3, r3, #16
 8006518:	4313      	orrs	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a25      	ldr	r2, [pc, #148]	; (80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d106      	bne.n	8006534 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4a24      	ldr	r2, [pc, #144]	; (80065bc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800652a:	401a      	ands	r2, r3
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	69db      	ldr	r3, [r3, #28]
 8006530:	4313      	orrs	r3, r2
 8006532:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a1f      	ldr	r2, [pc, #124]	; (80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d121      	bne.n	8006582 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	4a1f      	ldr	r2, [pc, #124]	; (80065c0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8006542:	401a      	ands	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006548:	051b      	lsls	r3, r3, #20
 800654a:	4313      	orrs	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a1c      	ldr	r2, [pc, #112]	; (80065c4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8006552:	401a      	ands	r2, r3
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	6a1b      	ldr	r3, [r3, #32]
 8006558:	4313      	orrs	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4a1a      	ldr	r2, [pc, #104]	; (80065c8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8006560:	401a      	ands	r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	4313      	orrs	r3, r2
 8006568:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a12      	ldr	r2, [pc, #72]	; (80065b8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d106      	bne.n	8006582 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a15      	ldr	r2, [pc, #84]	; (80065cc <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006578:	401a      	ands	r2, r3
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	223c      	movs	r2, #60	; 0x3c
 800658e:	2100      	movs	r1, #0
 8006590:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	0018      	movs	r0, r3
 8006596:	46bd      	mov	sp, r7
 8006598:	b004      	add	sp, #16
 800659a:	bd80      	pop	{r7, pc}
 800659c:	fffffcff 	.word	0xfffffcff
 80065a0:	fffffbff 	.word	0xfffffbff
 80065a4:	fffff7ff 	.word	0xfffff7ff
 80065a8:	ffffefff 	.word	0xffffefff
 80065ac:	ffffdfff 	.word	0xffffdfff
 80065b0:	ffffbfff 	.word	0xffffbfff
 80065b4:	fff0ffff 	.word	0xfff0ffff
 80065b8:	40012c00 	.word	0x40012c00
 80065bc:	efffffff 	.word	0xefffffff
 80065c0:	ff0fffff 	.word	0xff0fffff
 80065c4:	feffffff 	.word	0xfeffffff
 80065c8:	fdffffff 	.word	0xfdffffff
 80065cc:	dfffffff 	.word	0xdfffffff

080065d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e046      	b.n	8006670 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2288      	movs	r2, #136	; 0x88
 80065e6:	589b      	ldr	r3, [r3, r2]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d107      	bne.n	80065fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2284      	movs	r2, #132	; 0x84
 80065f0:	2100      	movs	r1, #0
 80065f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	0018      	movs	r0, r3
 80065f8:	f7fd f826 	bl	8003648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2288      	movs	r2, #136	; 0x88
 8006600:	2124      	movs	r1, #36	; 0x24
 8006602:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2101      	movs	r1, #1
 8006610:	438a      	bics	r2, r1
 8006612:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	0018      	movs	r0, r3
 8006618:	f000 fc6e 	bl	8006ef8 <UART_SetConfig>
 800661c:	0003      	movs	r3, r0
 800661e:	2b01      	cmp	r3, #1
 8006620:	d101      	bne.n	8006626 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e024      	b.n	8006670 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	0018      	movs	r0, r3
 8006632:	f000 fe05 	bl	8007240 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	685a      	ldr	r2, [r3, #4]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	490d      	ldr	r1, [pc, #52]	; (8006678 <HAL_UART_Init+0xa8>)
 8006642:	400a      	ands	r2, r1
 8006644:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689a      	ldr	r2, [r3, #8]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	212a      	movs	r1, #42	; 0x2a
 8006652:	438a      	bics	r2, r1
 8006654:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2101      	movs	r1, #1
 8006662:	430a      	orrs	r2, r1
 8006664:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	0018      	movs	r0, r3
 800666a:	f000 fe9d 	bl	80073a8 <UART_CheckIdleState>
 800666e:	0003      	movs	r3, r0
}
 8006670:	0018      	movs	r0, r3
 8006672:	46bd      	mov	sp, r7
 8006674:	b002      	add	sp, #8
 8006676:	bd80      	pop	{r7, pc}
 8006678:	ffffb7ff 	.word	0xffffb7ff

0800667c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08a      	sub	sp, #40	; 0x28
 8006680:	af02      	add	r7, sp, #8
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	1dbb      	adds	r3, r7, #6
 800668a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2288      	movs	r2, #136	; 0x88
 8006690:	589b      	ldr	r3, [r3, r2]
 8006692:	2b20      	cmp	r3, #32
 8006694:	d000      	beq.n	8006698 <HAL_UART_Transmit+0x1c>
 8006696:	e088      	b.n	80067aa <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_Transmit+0x2a>
 800669e:	1dbb      	adds	r3, r7, #6
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e080      	b.n	80067ac <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	015b      	lsls	r3, r3, #5
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d109      	bne.n	80066ca <HAL_UART_Transmit+0x4e>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2201      	movs	r2, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	d001      	beq.n	80066ca <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e070      	b.n	80067ac <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2290      	movs	r2, #144	; 0x90
 80066ce:	2100      	movs	r1, #0
 80066d0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2288      	movs	r2, #136	; 0x88
 80066d6:	2121      	movs	r1, #33	; 0x21
 80066d8:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066da:	f7fd fcf7 	bl	80040cc <HAL_GetTick>
 80066de:	0003      	movs	r3, r0
 80066e0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1dba      	adds	r2, r7, #6
 80066e6:	2154      	movs	r1, #84	; 0x54
 80066e8:	8812      	ldrh	r2, [r2, #0]
 80066ea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	1dba      	adds	r2, r7, #6
 80066f0:	2156      	movs	r1, #86	; 0x56
 80066f2:	8812      	ldrh	r2, [r2, #0]
 80066f4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689a      	ldr	r2, [r3, #8]
 80066fa:	2380      	movs	r3, #128	; 0x80
 80066fc:	015b      	lsls	r3, r3, #5
 80066fe:	429a      	cmp	r2, r3
 8006700:	d108      	bne.n	8006714 <HAL_UART_Transmit+0x98>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d104      	bne.n	8006714 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	61bb      	str	r3, [r7, #24]
 8006712:	e003      	b.n	800671c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800671c:	e02c      	b.n	8006778 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	68f8      	ldr	r0, [r7, #12]
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	0013      	movs	r3, r2
 8006728:	2200      	movs	r2, #0
 800672a:	2180      	movs	r1, #128	; 0x80
 800672c:	f000 fe8a 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8006730:	1e03      	subs	r3, r0, #0
 8006732:	d001      	beq.n	8006738 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e039      	b.n	80067ac <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d10b      	bne.n	8006756 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	001a      	movs	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	05d2      	lsls	r2, r2, #23
 800674a:	0dd2      	lsrs	r2, r2, #23
 800674c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	3302      	adds	r3, #2
 8006752:	61bb      	str	r3, [r7, #24]
 8006754:	e007      	b.n	8006766 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	781a      	ldrb	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	3301      	adds	r3, #1
 8006764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	2256      	movs	r2, #86	; 0x56
 800676a:	5a9b      	ldrh	r3, [r3, r2]
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b01      	subs	r3, #1
 8006770:	b299      	uxth	r1, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2256      	movs	r2, #86	; 0x56
 8006776:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2256      	movs	r2, #86	; 0x56
 800677c:	5a9b      	ldrh	r3, [r3, r2]
 800677e:	b29b      	uxth	r3, r3
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1cc      	bne.n	800671e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	0013      	movs	r3, r2
 800678e:	2200      	movs	r2, #0
 8006790:	2140      	movs	r1, #64	; 0x40
 8006792:	f000 fe57 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8006796:	1e03      	subs	r3, r0, #0
 8006798:	d001      	beq.n	800679e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e006      	b.n	80067ac <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2288      	movs	r2, #136	; 0x88
 80067a2:	2120      	movs	r1, #32
 80067a4:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80067a6:	2300      	movs	r3, #0
 80067a8:	e000      	b.n	80067ac <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80067aa:	2302      	movs	r3, #2
  }
}
 80067ac:	0018      	movs	r0, r3
 80067ae:	46bd      	mov	sp, r7
 80067b0:	b008      	add	sp, #32
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	1dbb      	adds	r3, r7, #6
 80067c0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	228c      	movs	r2, #140	; 0x8c
 80067c6:	589b      	ldr	r3, [r3, r2]
 80067c8:	2b20      	cmp	r3, #32
 80067ca:	d145      	bne.n	8006858 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_UART_Receive_IT+0x26>
 80067d2:	1dbb      	adds	r3, r7, #6
 80067d4:	881b      	ldrh	r3, [r3, #0]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067da:	2301      	movs	r3, #1
 80067dc:	e03d      	b.n	800685a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	2380      	movs	r3, #128	; 0x80
 80067e4:	015b      	lsls	r3, r3, #5
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d109      	bne.n	80067fe <HAL_UART_Receive_IT+0x4a>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d105      	bne.n	80067fe <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	2201      	movs	r2, #1
 80067f6:	4013      	ands	r3, r2
 80067f8:	d001      	beq.n	80067fe <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	e02d      	b.n	800685a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685a      	ldr	r2, [r3, #4]
 800680a:	2380      	movs	r3, #128	; 0x80
 800680c:	041b      	lsls	r3, r3, #16
 800680e:	4013      	ands	r3, r2
 8006810:	d019      	beq.n	8006846 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006812:	f3ef 8310 	mrs	r3, PRIMASK
 8006816:	613b      	str	r3, [r7, #16]
  return(result);
 8006818:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800681a:	61fb      	str	r3, [r7, #28]
 800681c:	2301      	movs	r3, #1
 800681e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f383 8810 	msr	PRIMASK, r3
}
 8006826:	46c0      	nop			; (mov r8, r8)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2180      	movs	r1, #128	; 0x80
 8006834:	04c9      	lsls	r1, r1, #19
 8006836:	430a      	orrs	r2, r1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f383 8810 	msr	PRIMASK, r3
}
 8006844:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006846:	1dbb      	adds	r3, r7, #6
 8006848:	881a      	ldrh	r2, [r3, #0]
 800684a:	68b9      	ldr	r1, [r7, #8]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	0018      	movs	r0, r3
 8006850:	f000 fec0 	bl	80075d4 <UART_Start_Receive_IT>
 8006854:	0003      	movs	r3, r0
 8006856:	e000      	b.n	800685a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006858:	2302      	movs	r3, #2
  }
}
 800685a:	0018      	movs	r0, r3
 800685c:	46bd      	mov	sp, r7
 800685e:	b008      	add	sp, #32
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006864:	b5b0      	push	{r4, r5, r7, lr}
 8006866:	b0aa      	sub	sp, #168	; 0xa8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	22a4      	movs	r2, #164	; 0xa4
 8006874:	18b9      	adds	r1, r7, r2
 8006876:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	20a0      	movs	r0, #160	; 0xa0
 8006880:	1839      	adds	r1, r7, r0
 8006882:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	249c      	movs	r4, #156	; 0x9c
 800688c:	1939      	adds	r1, r7, r4
 800688e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006890:	0011      	movs	r1, r2
 8006892:	18bb      	adds	r3, r7, r2
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	4aa2      	ldr	r2, [pc, #648]	; (8006b20 <HAL_UART_IRQHandler+0x2bc>)
 8006898:	4013      	ands	r3, r2
 800689a:	2298      	movs	r2, #152	; 0x98
 800689c:	18bd      	adds	r5, r7, r2
 800689e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80068a0:	18bb      	adds	r3, r7, r2
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d11a      	bne.n	80068de <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80068a8:	187b      	adds	r3, r7, r1
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2220      	movs	r2, #32
 80068ae:	4013      	ands	r3, r2
 80068b0:	d015      	beq.n	80068de <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80068b2:	183b      	adds	r3, r7, r0
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	2220      	movs	r2, #32
 80068b8:	4013      	ands	r3, r2
 80068ba:	d105      	bne.n	80068c8 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80068bc:	193b      	adds	r3, r7, r4
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	055b      	lsls	r3, r3, #21
 80068c4:	4013      	ands	r3, r2
 80068c6:	d00a      	beq.n	80068de <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d100      	bne.n	80068d2 <HAL_UART_IRQHandler+0x6e>
 80068d0:	e2dc      	b.n	8006e8c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	0010      	movs	r0, r2
 80068da:	4798      	blx	r3
      }
      return;
 80068dc:	e2d6      	b.n	8006e8c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80068de:	2398      	movs	r3, #152	; 0x98
 80068e0:	18fb      	adds	r3, r7, r3
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d100      	bne.n	80068ea <HAL_UART_IRQHandler+0x86>
 80068e8:	e122      	b.n	8006b30 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80068ea:	239c      	movs	r3, #156	; 0x9c
 80068ec:	18fb      	adds	r3, r7, r3
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a8c      	ldr	r2, [pc, #560]	; (8006b24 <HAL_UART_IRQHandler+0x2c0>)
 80068f2:	4013      	ands	r3, r2
 80068f4:	d106      	bne.n	8006904 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80068f6:	23a0      	movs	r3, #160	; 0xa0
 80068f8:	18fb      	adds	r3, r7, r3
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a8a      	ldr	r2, [pc, #552]	; (8006b28 <HAL_UART_IRQHandler+0x2c4>)
 80068fe:	4013      	ands	r3, r2
 8006900:	d100      	bne.n	8006904 <HAL_UART_IRQHandler+0xa0>
 8006902:	e115      	b.n	8006b30 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006904:	23a4      	movs	r3, #164	; 0xa4
 8006906:	18fb      	adds	r3, r7, r3
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2201      	movs	r2, #1
 800690c:	4013      	ands	r3, r2
 800690e:	d012      	beq.n	8006936 <HAL_UART_IRQHandler+0xd2>
 8006910:	23a0      	movs	r3, #160	; 0xa0
 8006912:	18fb      	adds	r3, r7, r3
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	2380      	movs	r3, #128	; 0x80
 8006918:	005b      	lsls	r3, r3, #1
 800691a:	4013      	ands	r3, r2
 800691c:	d00b      	beq.n	8006936 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	2201      	movs	r2, #1
 8006924:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2290      	movs	r2, #144	; 0x90
 800692a:	589b      	ldr	r3, [r3, r2]
 800692c:	2201      	movs	r2, #1
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2190      	movs	r1, #144	; 0x90
 8006934:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006936:	23a4      	movs	r3, #164	; 0xa4
 8006938:	18fb      	adds	r3, r7, r3
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2202      	movs	r2, #2
 800693e:	4013      	ands	r3, r2
 8006940:	d011      	beq.n	8006966 <HAL_UART_IRQHandler+0x102>
 8006942:	239c      	movs	r3, #156	; 0x9c
 8006944:	18fb      	adds	r3, r7, r3
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2201      	movs	r2, #1
 800694a:	4013      	ands	r3, r2
 800694c:	d00b      	beq.n	8006966 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2202      	movs	r2, #2
 8006954:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2290      	movs	r2, #144	; 0x90
 800695a:	589b      	ldr	r3, [r3, r2]
 800695c:	2204      	movs	r2, #4
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2190      	movs	r1, #144	; 0x90
 8006964:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006966:	23a4      	movs	r3, #164	; 0xa4
 8006968:	18fb      	adds	r3, r7, r3
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2204      	movs	r2, #4
 800696e:	4013      	ands	r3, r2
 8006970:	d011      	beq.n	8006996 <HAL_UART_IRQHandler+0x132>
 8006972:	239c      	movs	r3, #156	; 0x9c
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2201      	movs	r2, #1
 800697a:	4013      	ands	r3, r2
 800697c:	d00b      	beq.n	8006996 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2204      	movs	r2, #4
 8006984:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2290      	movs	r2, #144	; 0x90
 800698a:	589b      	ldr	r3, [r3, r2]
 800698c:	2202      	movs	r2, #2
 800698e:	431a      	orrs	r2, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2190      	movs	r1, #144	; 0x90
 8006994:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006996:	23a4      	movs	r3, #164	; 0xa4
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2208      	movs	r2, #8
 800699e:	4013      	ands	r3, r2
 80069a0:	d017      	beq.n	80069d2 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069a2:	23a0      	movs	r3, #160	; 0xa0
 80069a4:	18fb      	adds	r3, r7, r3
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2220      	movs	r2, #32
 80069aa:	4013      	ands	r3, r2
 80069ac:	d105      	bne.n	80069ba <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80069ae:	239c      	movs	r3, #156	; 0x9c
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a5b      	ldr	r2, [pc, #364]	; (8006b24 <HAL_UART_IRQHandler+0x2c0>)
 80069b6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80069b8:	d00b      	beq.n	80069d2 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	2208      	movs	r2, #8
 80069c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2290      	movs	r2, #144	; 0x90
 80069c6:	589b      	ldr	r3, [r3, r2]
 80069c8:	2208      	movs	r2, #8
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2190      	movs	r1, #144	; 0x90
 80069d0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80069d2:	23a4      	movs	r3, #164	; 0xa4
 80069d4:	18fb      	adds	r3, r7, r3
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	2380      	movs	r3, #128	; 0x80
 80069da:	011b      	lsls	r3, r3, #4
 80069dc:	4013      	ands	r3, r2
 80069de:	d013      	beq.n	8006a08 <HAL_UART_IRQHandler+0x1a4>
 80069e0:	23a0      	movs	r3, #160	; 0xa0
 80069e2:	18fb      	adds	r3, r7, r3
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	2380      	movs	r3, #128	; 0x80
 80069e8:	04db      	lsls	r3, r3, #19
 80069ea:	4013      	ands	r3, r2
 80069ec:	d00c      	beq.n	8006a08 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2280      	movs	r2, #128	; 0x80
 80069f4:	0112      	lsls	r2, r2, #4
 80069f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2290      	movs	r2, #144	; 0x90
 80069fc:	589b      	ldr	r3, [r3, r2]
 80069fe:	2220      	movs	r2, #32
 8006a00:	431a      	orrs	r2, r3
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2190      	movs	r1, #144	; 0x90
 8006a06:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2290      	movs	r2, #144	; 0x90
 8006a0c:	589b      	ldr	r3, [r3, r2]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d100      	bne.n	8006a14 <HAL_UART_IRQHandler+0x1b0>
 8006a12:	e23d      	b.n	8006e90 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006a14:	23a4      	movs	r3, #164	; 0xa4
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	2220      	movs	r2, #32
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	d015      	beq.n	8006a4c <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006a20:	23a0      	movs	r3, #160	; 0xa0
 8006a22:	18fb      	adds	r3, r7, r3
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	2220      	movs	r2, #32
 8006a28:	4013      	ands	r3, r2
 8006a2a:	d106      	bne.n	8006a3a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006a2c:	239c      	movs	r3, #156	; 0x9c
 8006a2e:	18fb      	adds	r3, r7, r3
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	2380      	movs	r3, #128	; 0x80
 8006a34:	055b      	lsls	r3, r3, #21
 8006a36:	4013      	ands	r3, r2
 8006a38:	d008      	beq.n	8006a4c <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d004      	beq.n	8006a4c <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	0010      	movs	r0, r2
 8006a4a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2290      	movs	r2, #144	; 0x90
 8006a50:	589b      	ldr	r3, [r3, r2]
 8006a52:	2194      	movs	r1, #148	; 0x94
 8006a54:	187a      	adds	r2, r7, r1
 8006a56:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2240      	movs	r2, #64	; 0x40
 8006a60:	4013      	ands	r3, r2
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d004      	beq.n	8006a70 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006a66:	187b      	adds	r3, r7, r1
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2228      	movs	r2, #40	; 0x28
 8006a6c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006a6e:	d04c      	beq.n	8006b0a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	0018      	movs	r0, r3
 8006a74:	f000 fed2 	bl	800781c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	2240      	movs	r2, #64	; 0x40
 8006a80:	4013      	ands	r3, r2
 8006a82:	2b40      	cmp	r3, #64	; 0x40
 8006a84:	d13c      	bne.n	8006b00 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a86:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006a8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a8e:	2090      	movs	r0, #144	; 0x90
 8006a90:	183a      	adds	r2, r7, r0
 8006a92:	6013      	str	r3, [r2, #0]
 8006a94:	2301      	movs	r3, #1
 8006a96:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a9a:	f383 8810 	msr	PRIMASK, r3
}
 8006a9e:	46c0      	nop			; (mov r8, r8)
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689a      	ldr	r2, [r3, #8]
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2140      	movs	r1, #64	; 0x40
 8006aac:	438a      	bics	r2, r1
 8006aae:	609a      	str	r2, [r3, #8]
 8006ab0:	183b      	adds	r3, r7, r0
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006ab8:	f383 8810 	msr	PRIMASK, r3
}
 8006abc:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2280      	movs	r2, #128	; 0x80
 8006ac2:	589b      	ldr	r3, [r3, r2]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d016      	beq.n	8006af6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2280      	movs	r2, #128	; 0x80
 8006acc:	589b      	ldr	r3, [r3, r2]
 8006ace:	4a17      	ldr	r2, [pc, #92]	; (8006b2c <HAL_UART_IRQHandler+0x2c8>)
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2280      	movs	r2, #128	; 0x80
 8006ad6:	589b      	ldr	r3, [r3, r2]
 8006ad8:	0018      	movs	r0, r3
 8006ada:	f7fd fc41 	bl	8004360 <HAL_DMA_Abort_IT>
 8006ade:	1e03      	subs	r3, r0, #0
 8006ae0:	d01c      	beq.n	8006b1c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2280      	movs	r2, #128	; 0x80
 8006ae6:	589b      	ldr	r3, [r3, r2]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	687a      	ldr	r2, [r7, #4]
 8006aec:	2180      	movs	r1, #128	; 0x80
 8006aee:	5852      	ldr	r2, [r2, r1]
 8006af0:	0010      	movs	r0, r2
 8006af2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af4:	e012      	b.n	8006b1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f000 f9e9 	bl	8006ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006afe:	e00d      	b.n	8006b1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	0018      	movs	r0, r3
 8006b04:	f000 f9e4 	bl	8006ed0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b08:	e008      	b.n	8006b1c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	0018      	movs	r0, r3
 8006b0e:	f000 f9df 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2290      	movs	r2, #144	; 0x90
 8006b16:	2100      	movs	r1, #0
 8006b18:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006b1a:	e1b9      	b.n	8006e90 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b1c:	46c0      	nop			; (mov r8, r8)
    return;
 8006b1e:	e1b7      	b.n	8006e90 <HAL_UART_IRQHandler+0x62c>
 8006b20:	0000080f 	.word	0x0000080f
 8006b24:	10000001 	.word	0x10000001
 8006b28:	04000120 	.word	0x04000120
 8006b2c:	080078e9 	.word	0x080078e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b34:	2b01      	cmp	r3, #1
 8006b36:	d000      	beq.n	8006b3a <HAL_UART_IRQHandler+0x2d6>
 8006b38:	e13e      	b.n	8006db8 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006b3a:	23a4      	movs	r3, #164	; 0xa4
 8006b3c:	18fb      	adds	r3, r7, r3
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2210      	movs	r2, #16
 8006b42:	4013      	ands	r3, r2
 8006b44:	d100      	bne.n	8006b48 <HAL_UART_IRQHandler+0x2e4>
 8006b46:	e137      	b.n	8006db8 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006b48:	23a0      	movs	r3, #160	; 0xa0
 8006b4a:	18fb      	adds	r3, r7, r3
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2210      	movs	r2, #16
 8006b50:	4013      	ands	r3, r2
 8006b52:	d100      	bne.n	8006b56 <HAL_UART_IRQHandler+0x2f2>
 8006b54:	e130      	b.n	8006db8 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2240      	movs	r2, #64	; 0x40
 8006b66:	4013      	ands	r3, r2
 8006b68:	2b40      	cmp	r3, #64	; 0x40
 8006b6a:	d000      	beq.n	8006b6e <HAL_UART_IRQHandler+0x30a>
 8006b6c:	e0a4      	b.n	8006cb8 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	589b      	ldr	r3, [r3, r2]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	685a      	ldr	r2, [r3, #4]
 8006b78:	217e      	movs	r1, #126	; 0x7e
 8006b7a:	187b      	adds	r3, r7, r1
 8006b7c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006b7e:	187b      	adds	r3, r7, r1
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d100      	bne.n	8006b88 <HAL_UART_IRQHandler+0x324>
 8006b86:	e185      	b.n	8006e94 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	225c      	movs	r2, #92	; 0x5c
 8006b8c:	5a9b      	ldrh	r3, [r3, r2]
 8006b8e:	187a      	adds	r2, r7, r1
 8006b90:	8812      	ldrh	r2, [r2, #0]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d300      	bcc.n	8006b98 <HAL_UART_IRQHandler+0x334>
 8006b96:	e17d      	b.n	8006e94 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	187a      	adds	r2, r7, r1
 8006b9c:	215e      	movs	r1, #94	; 0x5e
 8006b9e:	8812      	ldrh	r2, [r2, #0]
 8006ba0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2280      	movs	r2, #128	; 0x80
 8006ba6:	589b      	ldr	r3, [r3, r2]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2220      	movs	r2, #32
 8006bae:	4013      	ands	r3, r2
 8006bb0:	d170      	bne.n	8006c94 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8006bb6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bba:	67bb      	str	r3, [r7, #120]	; 0x78
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bc2:	f383 8810 	msr	PRIMASK, r3
}
 8006bc6:	46c0      	nop			; (mov r8, r8)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	49b4      	ldr	r1, [pc, #720]	; (8006ea4 <HAL_UART_IRQHandler+0x640>)
 8006bd4:	400a      	ands	r2, r1
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bda:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f383 8810 	msr	PRIMASK, r3
}
 8006be2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006be4:	f3ef 8310 	mrs	r3, PRIMASK
 8006be8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bec:	677b      	str	r3, [r7, #116]	; 0x74
 8006bee:	2301      	movs	r3, #1
 8006bf0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bf4:	f383 8810 	msr	PRIMASK, r3
}
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	689a      	ldr	r2, [r3, #8]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	2101      	movs	r1, #1
 8006c06:	438a      	bics	r2, r1
 8006c08:	609a      	str	r2, [r3, #8]
 8006c0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c0c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c10:	f383 8810 	msr	PRIMASK, r3
}
 8006c14:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c16:	f3ef 8310 	mrs	r3, PRIMASK
 8006c1a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c1e:	673b      	str	r3, [r7, #112]	; 0x70
 8006c20:	2301      	movs	r3, #1
 8006c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c26:	f383 8810 	msr	PRIMASK, r3
}
 8006c2a:	46c0      	nop			; (mov r8, r8)
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	689a      	ldr	r2, [r3, #8]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2140      	movs	r1, #64	; 0x40
 8006c38:	438a      	bics	r2, r1
 8006c3a:	609a      	str	r2, [r3, #8]
 8006c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006c3e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c42:	f383 8810 	msr	PRIMASK, r3
}
 8006c46:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	228c      	movs	r2, #140	; 0x8c
 8006c4c:	2120      	movs	r1, #32
 8006c4e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c56:	f3ef 8310 	mrs	r3, PRIMASK
 8006c5a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c5e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c60:	2301      	movs	r3, #1
 8006c62:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c66:	f383 8810 	msr	PRIMASK, r3
}
 8006c6a:	46c0      	nop			; (mov r8, r8)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2110      	movs	r1, #16
 8006c78:	438a      	bics	r2, r1
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c82:	f383 8810 	msr	PRIMASK, r3
}
 8006c86:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2280      	movs	r2, #128	; 0x80
 8006c8c:	589b      	ldr	r3, [r3, r2]
 8006c8e:	0018      	movs	r0, r3
 8006c90:	f7fd fb04 	bl	800429c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2202      	movs	r2, #2
 8006c98:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	225c      	movs	r2, #92	; 0x5c
 8006c9e:	5a9a      	ldrh	r2, [r3, r2]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	215e      	movs	r1, #94	; 0x5e
 8006ca4:	5a5b      	ldrh	r3, [r3, r1]
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	1ad3      	subs	r3, r2, r3
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	0011      	movs	r1, r2
 8006cb0:	0018      	movs	r0, r3
 8006cb2:	f000 f915 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006cb6:	e0ed      	b.n	8006e94 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	225c      	movs	r2, #92	; 0x5c
 8006cbc:	5a99      	ldrh	r1, [r3, r2]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	225e      	movs	r2, #94	; 0x5e
 8006cc2:	5a9b      	ldrh	r3, [r3, r2]
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	208e      	movs	r0, #142	; 0x8e
 8006cc8:	183b      	adds	r3, r7, r0
 8006cca:	1a8a      	subs	r2, r1, r2
 8006ccc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	225e      	movs	r2, #94	; 0x5e
 8006cd2:	5a9b      	ldrh	r3, [r3, r2]
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d100      	bne.n	8006cdc <HAL_UART_IRQHandler+0x478>
 8006cda:	e0dd      	b.n	8006e98 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006cdc:	183b      	adds	r3, r7, r0
 8006cde:	881b      	ldrh	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d100      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x482>
 8006ce4:	e0d8      	b.n	8006e98 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce6:	f3ef 8310 	mrs	r3, PRIMASK
 8006cea:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cee:	2488      	movs	r4, #136	; 0x88
 8006cf0:	193a      	adds	r2, r7, r4
 8006cf2:	6013      	str	r3, [r2, #0]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f383 8810 	msr	PRIMASK, r3
}
 8006cfe:	46c0      	nop			; (mov r8, r8)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4967      	ldr	r1, [pc, #412]	; (8006ea8 <HAL_UART_IRQHandler+0x644>)
 8006d0c:	400a      	ands	r2, r1
 8006d0e:	601a      	str	r2, [r3, #0]
 8006d10:	193b      	adds	r3, r7, r4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f383 8810 	msr	PRIMASK, r3
}
 8006d1c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006d22:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d24:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006d26:	2484      	movs	r4, #132	; 0x84
 8006d28:	193a      	adds	r2, r7, r4
 8006d2a:	6013      	str	r3, [r2, #0]
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f383 8810 	msr	PRIMASK, r3
}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	495a      	ldr	r1, [pc, #360]	; (8006eac <HAL_UART_IRQHandler+0x648>)
 8006d44:	400a      	ands	r2, r1
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	193b      	adds	r3, r7, r4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4e:	6a3b      	ldr	r3, [r7, #32]
 8006d50:	f383 8810 	msr	PRIMASK, r3
}
 8006d54:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	228c      	movs	r2, #140	; 0x8c
 8006d5a:	2120      	movs	r1, #32
 8006d5c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2200      	movs	r2, #0
 8006d62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d6e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d72:	2480      	movs	r4, #128	; 0x80
 8006d74:	193a      	adds	r2, r7, r4
 8006d76:	6013      	str	r3, [r2, #0]
 8006d78:	2301      	movs	r3, #1
 8006d7a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7e:	f383 8810 	msr	PRIMASK, r3
}
 8006d82:	46c0      	nop			; (mov r8, r8)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2110      	movs	r1, #16
 8006d90:	438a      	bics	r2, r1
 8006d92:	601a      	str	r2, [r3, #0]
 8006d94:	193b      	adds	r3, r7, r4
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9c:	f383 8810 	msr	PRIMASK, r3
}
 8006da0:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2202      	movs	r2, #2
 8006da6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006da8:	183b      	adds	r3, r7, r0
 8006daa:	881a      	ldrh	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	0011      	movs	r1, r2
 8006db0:	0018      	movs	r0, r3
 8006db2:	f000 f895 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006db6:	e06f      	b.n	8006e98 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006db8:	23a4      	movs	r3, #164	; 0xa4
 8006dba:	18fb      	adds	r3, r7, r3
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	2380      	movs	r3, #128	; 0x80
 8006dc0:	035b      	lsls	r3, r3, #13
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	d010      	beq.n	8006de8 <HAL_UART_IRQHandler+0x584>
 8006dc6:	239c      	movs	r3, #156	; 0x9c
 8006dc8:	18fb      	adds	r3, r7, r3
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2380      	movs	r3, #128	; 0x80
 8006dce:	03db      	lsls	r3, r3, #15
 8006dd0:	4013      	ands	r3, r2
 8006dd2:	d009      	beq.n	8006de8 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2280      	movs	r2, #128	; 0x80
 8006dda:	0352      	lsls	r2, r2, #13
 8006ddc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	0018      	movs	r0, r3
 8006de2:	f001 fa25 	bl	8008230 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006de6:	e05a      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006de8:	23a4      	movs	r3, #164	; 0xa4
 8006dea:	18fb      	adds	r3, r7, r3
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	2280      	movs	r2, #128	; 0x80
 8006df0:	4013      	ands	r3, r2
 8006df2:	d016      	beq.n	8006e22 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006df4:	23a0      	movs	r3, #160	; 0xa0
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2280      	movs	r2, #128	; 0x80
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d106      	bne.n	8006e0e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006e00:	239c      	movs	r3, #156	; 0x9c
 8006e02:	18fb      	adds	r3, r7, r3
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	2380      	movs	r3, #128	; 0x80
 8006e08:	041b      	lsls	r3, r3, #16
 8006e0a:	4013      	ands	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d042      	beq.n	8006e9c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	0010      	movs	r0, r2
 8006e1e:	4798      	blx	r3
    }
    return;
 8006e20:	e03c      	b.n	8006e9c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006e22:	23a4      	movs	r3, #164	; 0xa4
 8006e24:	18fb      	adds	r3, r7, r3
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2240      	movs	r2, #64	; 0x40
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	d00a      	beq.n	8006e44 <HAL_UART_IRQHandler+0x5e0>
 8006e2e:	23a0      	movs	r3, #160	; 0xa0
 8006e30:	18fb      	adds	r3, r7, r3
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	2240      	movs	r2, #64	; 0x40
 8006e36:	4013      	ands	r3, r2
 8006e38:	d004      	beq.n	8006e44 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0018      	movs	r0, r3
 8006e3e:	f000 fd6a 	bl	8007916 <UART_EndTransmit_IT>
    return;
 8006e42:	e02c      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006e44:	23a4      	movs	r3, #164	; 0xa4
 8006e46:	18fb      	adds	r3, r7, r3
 8006e48:	681a      	ldr	r2, [r3, #0]
 8006e4a:	2380      	movs	r3, #128	; 0x80
 8006e4c:	041b      	lsls	r3, r3, #16
 8006e4e:	4013      	ands	r3, r2
 8006e50:	d00b      	beq.n	8006e6a <HAL_UART_IRQHandler+0x606>
 8006e52:	23a0      	movs	r3, #160	; 0xa0
 8006e54:	18fb      	adds	r3, r7, r3
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	2380      	movs	r3, #128	; 0x80
 8006e5a:	05db      	lsls	r3, r3, #23
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0018      	movs	r0, r3
 8006e64:	f001 f9f4 	bl	8008250 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e68:	e019      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006e6a:	23a4      	movs	r3, #164	; 0xa4
 8006e6c:	18fb      	adds	r3, r7, r3
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	2380      	movs	r3, #128	; 0x80
 8006e72:	045b      	lsls	r3, r3, #17
 8006e74:	4013      	ands	r3, r2
 8006e76:	d012      	beq.n	8006e9e <HAL_UART_IRQHandler+0x63a>
 8006e78:	23a0      	movs	r3, #160	; 0xa0
 8006e7a:	18fb      	adds	r3, r7, r3
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	da0d      	bge.n	8006e9e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	0018      	movs	r0, r3
 8006e86:	f001 f9db 	bl	8008240 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e8a:	e008      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
      return;
 8006e8c:	46c0      	nop			; (mov r8, r8)
 8006e8e:	e006      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
    return;
 8006e90:	46c0      	nop			; (mov r8, r8)
 8006e92:	e004      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
      return;
 8006e94:	46c0      	nop			; (mov r8, r8)
 8006e96:	e002      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
      return;
 8006e98:	46c0      	nop			; (mov r8, r8)
 8006e9a:	e000      	b.n	8006e9e <HAL_UART_IRQHandler+0x63a>
    return;
 8006e9c:	46c0      	nop			; (mov r8, r8)
  }
}
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b02a      	add	sp, #168	; 0xa8
 8006ea2:	bdb0      	pop	{r4, r5, r7, pc}
 8006ea4:	fffffeff 	.word	0xfffffeff
 8006ea8:	fffffedf 	.word	0xfffffedf
 8006eac:	effffffe 	.word	0xeffffffe

08006eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006eb8:	46c0      	nop			; (mov r8, r8)
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	b002      	add	sp, #8
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006ec8:	46c0      	nop			; (mov r8, r8)
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	b002      	add	sp, #8
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ed8:	46c0      	nop			; (mov r8, r8)
 8006eda:	46bd      	mov	sp, r7
 8006edc:	b002      	add	sp, #8
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b082      	sub	sp, #8
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	000a      	movs	r2, r1
 8006eea:	1cbb      	adds	r3, r7, #2
 8006eec:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006eee:	46c0      	nop			; (mov r8, r8)
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	b002      	add	sp, #8
 8006ef4:	bd80      	pop	{r7, pc}
	...

08006ef8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b088      	sub	sp, #32
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f00:	231a      	movs	r3, #26
 8006f02:	18fb      	adds	r3, r7, r3
 8006f04:	2200      	movs	r2, #0
 8006f06:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689a      	ldr	r2, [r3, #8]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	431a      	orrs	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69db      	ldr	r3, [r3, #28]
 8006f1c:	4313      	orrs	r3, r2
 8006f1e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4abc      	ldr	r2, [pc, #752]	; (8007218 <UART_SetConfig+0x320>)
 8006f28:	4013      	ands	r3, r2
 8006f2a:	0019      	movs	r1, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	4ab7      	ldr	r2, [pc, #732]	; (800721c <UART_SetConfig+0x324>)
 8006f3e:	4013      	ands	r3, r2
 8006f40:	0019      	movs	r1, r3
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68da      	ldr	r2, [r3, #12]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	430a      	orrs	r2, r1
 8006f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	699b      	ldr	r3, [r3, #24]
 8006f52:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	6a1b      	ldr	r3, [r3, #32]
 8006f58:	69fa      	ldr	r2, [r7, #28]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	4aae      	ldr	r2, [pc, #696]	; (8007220 <UART_SetConfig+0x328>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	0019      	movs	r1, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	69fa      	ldr	r2, [r7, #28]
 8006f70:	430a      	orrs	r2, r1
 8006f72:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	220f      	movs	r2, #15
 8006f7c:	4393      	bics	r3, r2
 8006f7e:	0019      	movs	r1, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	430a      	orrs	r2, r1
 8006f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4aa4      	ldr	r2, [pc, #656]	; (8007224 <UART_SetConfig+0x32c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d127      	bne.n	8006fe6 <UART_SetConfig+0xee>
 8006f96:	4ba4      	ldr	r3, [pc, #656]	; (8007228 <UART_SetConfig+0x330>)
 8006f98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f9a:	2203      	movs	r2, #3
 8006f9c:	4013      	ands	r3, r2
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d017      	beq.n	8006fd2 <UART_SetConfig+0xda>
 8006fa2:	d81b      	bhi.n	8006fdc <UART_SetConfig+0xe4>
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	d00a      	beq.n	8006fbe <UART_SetConfig+0xc6>
 8006fa8:	d818      	bhi.n	8006fdc <UART_SetConfig+0xe4>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d002      	beq.n	8006fb4 <UART_SetConfig+0xbc>
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d00a      	beq.n	8006fc8 <UART_SetConfig+0xd0>
 8006fb2:	e013      	b.n	8006fdc <UART_SetConfig+0xe4>
 8006fb4:	231b      	movs	r3, #27
 8006fb6:	18fb      	adds	r3, r7, r3
 8006fb8:	2200      	movs	r2, #0
 8006fba:	701a      	strb	r2, [r3, #0]
 8006fbc:	e058      	b.n	8007070 <UART_SetConfig+0x178>
 8006fbe:	231b      	movs	r3, #27
 8006fc0:	18fb      	adds	r3, r7, r3
 8006fc2:	2202      	movs	r2, #2
 8006fc4:	701a      	strb	r2, [r3, #0]
 8006fc6:	e053      	b.n	8007070 <UART_SetConfig+0x178>
 8006fc8:	231b      	movs	r3, #27
 8006fca:	18fb      	adds	r3, r7, r3
 8006fcc:	2204      	movs	r2, #4
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	e04e      	b.n	8007070 <UART_SetConfig+0x178>
 8006fd2:	231b      	movs	r3, #27
 8006fd4:	18fb      	adds	r3, r7, r3
 8006fd6:	2208      	movs	r2, #8
 8006fd8:	701a      	strb	r2, [r3, #0]
 8006fda:	e049      	b.n	8007070 <UART_SetConfig+0x178>
 8006fdc:	231b      	movs	r3, #27
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	2210      	movs	r2, #16
 8006fe2:	701a      	strb	r2, [r3, #0]
 8006fe4:	e044      	b.n	8007070 <UART_SetConfig+0x178>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a90      	ldr	r2, [pc, #576]	; (800722c <UART_SetConfig+0x334>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d127      	bne.n	8007040 <UART_SetConfig+0x148>
 8006ff0:	4b8d      	ldr	r3, [pc, #564]	; (8007228 <UART_SetConfig+0x330>)
 8006ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff4:	220c      	movs	r2, #12
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	2b0c      	cmp	r3, #12
 8006ffa:	d017      	beq.n	800702c <UART_SetConfig+0x134>
 8006ffc:	d81b      	bhi.n	8007036 <UART_SetConfig+0x13e>
 8006ffe:	2b08      	cmp	r3, #8
 8007000:	d00a      	beq.n	8007018 <UART_SetConfig+0x120>
 8007002:	d818      	bhi.n	8007036 <UART_SetConfig+0x13e>
 8007004:	2b00      	cmp	r3, #0
 8007006:	d002      	beq.n	800700e <UART_SetConfig+0x116>
 8007008:	2b04      	cmp	r3, #4
 800700a:	d00a      	beq.n	8007022 <UART_SetConfig+0x12a>
 800700c:	e013      	b.n	8007036 <UART_SetConfig+0x13e>
 800700e:	231b      	movs	r3, #27
 8007010:	18fb      	adds	r3, r7, r3
 8007012:	2200      	movs	r2, #0
 8007014:	701a      	strb	r2, [r3, #0]
 8007016:	e02b      	b.n	8007070 <UART_SetConfig+0x178>
 8007018:	231b      	movs	r3, #27
 800701a:	18fb      	adds	r3, r7, r3
 800701c:	2202      	movs	r2, #2
 800701e:	701a      	strb	r2, [r3, #0]
 8007020:	e026      	b.n	8007070 <UART_SetConfig+0x178>
 8007022:	231b      	movs	r3, #27
 8007024:	18fb      	adds	r3, r7, r3
 8007026:	2204      	movs	r2, #4
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	e021      	b.n	8007070 <UART_SetConfig+0x178>
 800702c:	231b      	movs	r3, #27
 800702e:	18fb      	adds	r3, r7, r3
 8007030:	2208      	movs	r2, #8
 8007032:	701a      	strb	r2, [r3, #0]
 8007034:	e01c      	b.n	8007070 <UART_SetConfig+0x178>
 8007036:	231b      	movs	r3, #27
 8007038:	18fb      	adds	r3, r7, r3
 800703a:	2210      	movs	r2, #16
 800703c:	701a      	strb	r2, [r3, #0]
 800703e:	e017      	b.n	8007070 <UART_SetConfig+0x178>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	4a7a      	ldr	r2, [pc, #488]	; (8007230 <UART_SetConfig+0x338>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d104      	bne.n	8007054 <UART_SetConfig+0x15c>
 800704a:	231b      	movs	r3, #27
 800704c:	18fb      	adds	r3, r7, r3
 800704e:	2200      	movs	r2, #0
 8007050:	701a      	strb	r2, [r3, #0]
 8007052:	e00d      	b.n	8007070 <UART_SetConfig+0x178>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a76      	ldr	r2, [pc, #472]	; (8007234 <UART_SetConfig+0x33c>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d104      	bne.n	8007068 <UART_SetConfig+0x170>
 800705e:	231b      	movs	r3, #27
 8007060:	18fb      	adds	r3, r7, r3
 8007062:	2200      	movs	r2, #0
 8007064:	701a      	strb	r2, [r3, #0]
 8007066:	e003      	b.n	8007070 <UART_SetConfig+0x178>
 8007068:	231b      	movs	r3, #27
 800706a:	18fb      	adds	r3, r7, r3
 800706c:	2210      	movs	r2, #16
 800706e:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	69da      	ldr	r2, [r3, #28]
 8007074:	2380      	movs	r3, #128	; 0x80
 8007076:	021b      	lsls	r3, r3, #8
 8007078:	429a      	cmp	r2, r3
 800707a:	d000      	beq.n	800707e <UART_SetConfig+0x186>
 800707c:	e065      	b.n	800714a <UART_SetConfig+0x252>
  {
    switch (clocksource)
 800707e:	231b      	movs	r3, #27
 8007080:	18fb      	adds	r3, r7, r3
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b08      	cmp	r3, #8
 8007086:	d015      	beq.n	80070b4 <UART_SetConfig+0x1bc>
 8007088:	dc18      	bgt.n	80070bc <UART_SetConfig+0x1c4>
 800708a:	2b04      	cmp	r3, #4
 800708c:	d00d      	beq.n	80070aa <UART_SetConfig+0x1b2>
 800708e:	dc15      	bgt.n	80070bc <UART_SetConfig+0x1c4>
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <UART_SetConfig+0x1a2>
 8007094:	2b02      	cmp	r3, #2
 8007096:	d005      	beq.n	80070a4 <UART_SetConfig+0x1ac>
 8007098:	e010      	b.n	80070bc <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800709a:	f7fe f9a7 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 800709e:	0003      	movs	r3, r0
 80070a0:	617b      	str	r3, [r7, #20]
        break;
 80070a2:	e012      	b.n	80070ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070a4:	4b64      	ldr	r3, [pc, #400]	; (8007238 <UART_SetConfig+0x340>)
 80070a6:	617b      	str	r3, [r7, #20]
        break;
 80070a8:	e00f      	b.n	80070ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070aa:	f7fe f915 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 80070ae:	0003      	movs	r3, r0
 80070b0:	617b      	str	r3, [r7, #20]
        break;
 80070b2:	e00a      	b.n	80070ca <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070b4:	2380      	movs	r3, #128	; 0x80
 80070b6:	021b      	lsls	r3, r3, #8
 80070b8:	617b      	str	r3, [r7, #20]
        break;
 80070ba:	e006      	b.n	80070ca <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80070c0:	231a      	movs	r3, #26
 80070c2:	18fb      	adds	r3, r7, r3
 80070c4:	2201      	movs	r2, #1
 80070c6:	701a      	strb	r2, [r3, #0]
        break;
 80070c8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d100      	bne.n	80070d2 <UART_SetConfig+0x1da>
 80070d0:	e08d      	b.n	80071ee <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070d6:	4b59      	ldr	r3, [pc, #356]	; (800723c <UART_SetConfig+0x344>)
 80070d8:	0052      	lsls	r2, r2, #1
 80070da:	5ad3      	ldrh	r3, [r2, r3]
 80070dc:	0019      	movs	r1, r3
 80070de:	6978      	ldr	r0, [r7, #20]
 80070e0:	f7f9 f82e 	bl	8000140 <__udivsi3>
 80070e4:	0003      	movs	r3, r0
 80070e6:	005a      	lsls	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	18d2      	adds	r2, r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	0019      	movs	r1, r3
 80070f6:	0010      	movs	r0, r2
 80070f8:	f7f9 f822 	bl	8000140 <__udivsi3>
 80070fc:	0003      	movs	r3, r0
 80070fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007100:	693b      	ldr	r3, [r7, #16]
 8007102:	2b0f      	cmp	r3, #15
 8007104:	d91c      	bls.n	8007140 <UART_SetConfig+0x248>
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	2380      	movs	r3, #128	; 0x80
 800710a:	025b      	lsls	r3, r3, #9
 800710c:	429a      	cmp	r2, r3
 800710e:	d217      	bcs.n	8007140 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	b29a      	uxth	r2, r3
 8007114:	200e      	movs	r0, #14
 8007116:	183b      	adds	r3, r7, r0
 8007118:	210f      	movs	r1, #15
 800711a:	438a      	bics	r2, r1
 800711c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800711e:	693b      	ldr	r3, [r7, #16]
 8007120:	085b      	lsrs	r3, r3, #1
 8007122:	b29b      	uxth	r3, r3
 8007124:	2207      	movs	r2, #7
 8007126:	4013      	ands	r3, r2
 8007128:	b299      	uxth	r1, r3
 800712a:	183b      	adds	r3, r7, r0
 800712c:	183a      	adds	r2, r7, r0
 800712e:	8812      	ldrh	r2, [r2, #0]
 8007130:	430a      	orrs	r2, r1
 8007132:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	183a      	adds	r2, r7, r0
 800713a:	8812      	ldrh	r2, [r2, #0]
 800713c:	60da      	str	r2, [r3, #12]
 800713e:	e056      	b.n	80071ee <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007140:	231a      	movs	r3, #26
 8007142:	18fb      	adds	r3, r7, r3
 8007144:	2201      	movs	r2, #1
 8007146:	701a      	strb	r2, [r3, #0]
 8007148:	e051      	b.n	80071ee <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800714a:	231b      	movs	r3, #27
 800714c:	18fb      	adds	r3, r7, r3
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d015      	beq.n	8007180 <UART_SetConfig+0x288>
 8007154:	dc18      	bgt.n	8007188 <UART_SetConfig+0x290>
 8007156:	2b04      	cmp	r3, #4
 8007158:	d00d      	beq.n	8007176 <UART_SetConfig+0x27e>
 800715a:	dc15      	bgt.n	8007188 <UART_SetConfig+0x290>
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <UART_SetConfig+0x26e>
 8007160:	2b02      	cmp	r3, #2
 8007162:	d005      	beq.n	8007170 <UART_SetConfig+0x278>
 8007164:	e010      	b.n	8007188 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007166:	f7fe f941 	bl	80053ec <HAL_RCC_GetPCLK1Freq>
 800716a:	0003      	movs	r3, r0
 800716c:	617b      	str	r3, [r7, #20]
        break;
 800716e:	e012      	b.n	8007196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007170:	4b31      	ldr	r3, [pc, #196]	; (8007238 <UART_SetConfig+0x340>)
 8007172:	617b      	str	r3, [r7, #20]
        break;
 8007174:	e00f      	b.n	8007196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007176:	f7fe f8af 	bl	80052d8 <HAL_RCC_GetSysClockFreq>
 800717a:	0003      	movs	r3, r0
 800717c:	617b      	str	r3, [r7, #20]
        break;
 800717e:	e00a      	b.n	8007196 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007180:	2380      	movs	r3, #128	; 0x80
 8007182:	021b      	lsls	r3, r3, #8
 8007184:	617b      	str	r3, [r7, #20]
        break;
 8007186:	e006      	b.n	8007196 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8007188:	2300      	movs	r3, #0
 800718a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800718c:	231a      	movs	r3, #26
 800718e:	18fb      	adds	r3, r7, r3
 8007190:	2201      	movs	r2, #1
 8007192:	701a      	strb	r2, [r3, #0]
        break;
 8007194:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d028      	beq.n	80071ee <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80071a0:	4b26      	ldr	r3, [pc, #152]	; (800723c <UART_SetConfig+0x344>)
 80071a2:	0052      	lsls	r2, r2, #1
 80071a4:	5ad3      	ldrh	r3, [r2, r3]
 80071a6:	0019      	movs	r1, r3
 80071a8:	6978      	ldr	r0, [r7, #20]
 80071aa:	f7f8 ffc9 	bl	8000140 <__udivsi3>
 80071ae:	0003      	movs	r3, r0
 80071b0:	001a      	movs	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	085b      	lsrs	r3, r3, #1
 80071b8:	18d2      	adds	r2, r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	0019      	movs	r1, r3
 80071c0:	0010      	movs	r0, r2
 80071c2:	f7f8 ffbd 	bl	8000140 <__udivsi3>
 80071c6:	0003      	movs	r3, r0
 80071c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b0f      	cmp	r3, #15
 80071ce:	d90a      	bls.n	80071e6 <UART_SetConfig+0x2ee>
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	2380      	movs	r3, #128	; 0x80
 80071d4:	025b      	lsls	r3, r3, #9
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d205      	bcs.n	80071e6 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60da      	str	r2, [r3, #12]
 80071e4:	e003      	b.n	80071ee <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80071e6:	231a      	movs	r3, #26
 80071e8:	18fb      	adds	r3, r7, r3
 80071ea:	2201      	movs	r2, #1
 80071ec:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	226a      	movs	r2, #106	; 0x6a
 80071f2:	2101      	movs	r1, #1
 80071f4:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2268      	movs	r2, #104	; 0x68
 80071fa:	2101      	movs	r1, #1
 80071fc:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	2200      	movs	r2, #0
 8007202:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800720a:	231a      	movs	r3, #26
 800720c:	18fb      	adds	r3, r7, r3
 800720e:	781b      	ldrb	r3, [r3, #0]
}
 8007210:	0018      	movs	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	b008      	add	sp, #32
 8007216:	bd80      	pop	{r7, pc}
 8007218:	cfff69f3 	.word	0xcfff69f3
 800721c:	ffffcfff 	.word	0xffffcfff
 8007220:	11fff4ff 	.word	0x11fff4ff
 8007224:	40013800 	.word	0x40013800
 8007228:	40021000 	.word	0x40021000
 800722c:	40004400 	.word	0x40004400
 8007230:	40004800 	.word	0x40004800
 8007234:	40004c00 	.word	0x40004c00
 8007238:	00f42400 	.word	0x00f42400
 800723c:	0800e958 	.word	0x0800e958

08007240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	2201      	movs	r2, #1
 800724e:	4013      	ands	r3, r2
 8007250:	d00b      	beq.n	800726a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	4a4a      	ldr	r2, [pc, #296]	; (8007384 <UART_AdvFeatureConfig+0x144>)
 800725a:	4013      	ands	r3, r2
 800725c:	0019      	movs	r1, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	430a      	orrs	r2, r1
 8007268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800726e:	2202      	movs	r2, #2
 8007270:	4013      	ands	r3, r2
 8007272:	d00b      	beq.n	800728c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	4a43      	ldr	r2, [pc, #268]	; (8007388 <UART_AdvFeatureConfig+0x148>)
 800727c:	4013      	ands	r3, r2
 800727e:	0019      	movs	r1, r3
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	430a      	orrs	r2, r1
 800728a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007290:	2204      	movs	r2, #4
 8007292:	4013      	ands	r3, r2
 8007294:	d00b      	beq.n	80072ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	4a3b      	ldr	r2, [pc, #236]	; (800738c <UART_AdvFeatureConfig+0x14c>)
 800729e:	4013      	ands	r3, r2
 80072a0:	0019      	movs	r1, r3
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	430a      	orrs	r2, r1
 80072ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b2:	2208      	movs	r2, #8
 80072b4:	4013      	ands	r3, r2
 80072b6:	d00b      	beq.n	80072d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	685b      	ldr	r3, [r3, #4]
 80072be:	4a34      	ldr	r2, [pc, #208]	; (8007390 <UART_AdvFeatureConfig+0x150>)
 80072c0:	4013      	ands	r3, r2
 80072c2:	0019      	movs	r1, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	430a      	orrs	r2, r1
 80072ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d4:	2210      	movs	r2, #16
 80072d6:	4013      	ands	r3, r2
 80072d8:	d00b      	beq.n	80072f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	4a2c      	ldr	r2, [pc, #176]	; (8007394 <UART_AdvFeatureConfig+0x154>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	0019      	movs	r1, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	430a      	orrs	r2, r1
 80072f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072f6:	2220      	movs	r2, #32
 80072f8:	4013      	ands	r3, r2
 80072fa:	d00b      	beq.n	8007314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	4a25      	ldr	r2, [pc, #148]	; (8007398 <UART_AdvFeatureConfig+0x158>)
 8007304:	4013      	ands	r3, r2
 8007306:	0019      	movs	r1, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	430a      	orrs	r2, r1
 8007312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007318:	2240      	movs	r2, #64	; 0x40
 800731a:	4013      	ands	r3, r2
 800731c:	d01d      	beq.n	800735a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	4a1d      	ldr	r2, [pc, #116]	; (800739c <UART_AdvFeatureConfig+0x15c>)
 8007326:	4013      	ands	r3, r2
 8007328:	0019      	movs	r1, r3
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	430a      	orrs	r2, r1
 8007334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800733a:	2380      	movs	r3, #128	; 0x80
 800733c:	035b      	lsls	r3, r3, #13
 800733e:	429a      	cmp	r2, r3
 8007340:	d10b      	bne.n	800735a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	685b      	ldr	r3, [r3, #4]
 8007348:	4a15      	ldr	r2, [pc, #84]	; (80073a0 <UART_AdvFeatureConfig+0x160>)
 800734a:	4013      	ands	r3, r2
 800734c:	0019      	movs	r1, r3
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	2280      	movs	r2, #128	; 0x80
 8007360:	4013      	ands	r3, r2
 8007362:	d00b      	beq.n	800737c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	4a0e      	ldr	r2, [pc, #56]	; (80073a4 <UART_AdvFeatureConfig+0x164>)
 800736c:	4013      	ands	r3, r2
 800736e:	0019      	movs	r1, r3
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }
}
 800737c:	46c0      	nop			; (mov r8, r8)
 800737e:	46bd      	mov	sp, r7
 8007380:	b002      	add	sp, #8
 8007382:	bd80      	pop	{r7, pc}
 8007384:	fffdffff 	.word	0xfffdffff
 8007388:	fffeffff 	.word	0xfffeffff
 800738c:	fffbffff 	.word	0xfffbffff
 8007390:	ffff7fff 	.word	0xffff7fff
 8007394:	ffffefff 	.word	0xffffefff
 8007398:	ffffdfff 	.word	0xffffdfff
 800739c:	ffefffff 	.word	0xffefffff
 80073a0:	ff9fffff 	.word	0xff9fffff
 80073a4:	fff7ffff 	.word	0xfff7ffff

080073a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b086      	sub	sp, #24
 80073ac:	af02      	add	r7, sp, #8
 80073ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2290      	movs	r2, #144	; 0x90
 80073b4:	2100      	movs	r1, #0
 80073b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80073b8:	f7fc fe88 	bl	80040cc <HAL_GetTick>
 80073bc:	0003      	movs	r3, r0
 80073be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2208      	movs	r2, #8
 80073c8:	4013      	ands	r3, r2
 80073ca:	2b08      	cmp	r3, #8
 80073cc:	d10c      	bne.n	80073e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2280      	movs	r2, #128	; 0x80
 80073d2:	0391      	lsls	r1, r2, #14
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	4a1a      	ldr	r2, [pc, #104]	; (8007440 <UART_CheckIdleState+0x98>)
 80073d8:	9200      	str	r2, [sp, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	f000 f832 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 80073e0:	1e03      	subs	r3, r0, #0
 80073e2:	d001      	beq.n	80073e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e026      	b.n	8007436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2204      	movs	r2, #4
 80073f0:	4013      	ands	r3, r2
 80073f2:	2b04      	cmp	r3, #4
 80073f4:	d10c      	bne.n	8007410 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2280      	movs	r2, #128	; 0x80
 80073fa:	03d1      	lsls	r1, r2, #15
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <UART_CheckIdleState+0x98>)
 8007400:	9200      	str	r2, [sp, #0]
 8007402:	2200      	movs	r2, #0
 8007404:	f000 f81e 	bl	8007444 <UART_WaitOnFlagUntilTimeout>
 8007408:	1e03      	subs	r3, r0, #0
 800740a:	d001      	beq.n	8007410 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e012      	b.n	8007436 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2288      	movs	r2, #136	; 0x88
 8007414:	2120      	movs	r1, #32
 8007416:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	228c      	movs	r2, #140	; 0x8c
 800741c:	2120      	movs	r1, #32
 800741e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2284      	movs	r2, #132	; 0x84
 8007430:	2100      	movs	r1, #0
 8007432:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	0018      	movs	r0, r3
 8007438:	46bd      	mov	sp, r7
 800743a:	b004      	add	sp, #16
 800743c:	bd80      	pop	{r7, pc}
 800743e:	46c0      	nop			; (mov r8, r8)
 8007440:	01ffffff 	.word	0x01ffffff

08007444 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b094      	sub	sp, #80	; 0x50
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	603b      	str	r3, [r7, #0]
 8007450:	1dfb      	adds	r3, r7, #7
 8007452:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007454:	e0a7      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007456:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007458:	3301      	adds	r3, #1
 800745a:	d100      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0x1a>
 800745c:	e0a3      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800745e:	f7fc fe35 	bl	80040cc <HAL_GetTick>
 8007462:	0002      	movs	r2, r0
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800746a:	429a      	cmp	r2, r3
 800746c:	d302      	bcc.n	8007474 <UART_WaitOnFlagUntilTimeout+0x30>
 800746e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007470:	2b00      	cmp	r3, #0
 8007472:	d13f      	bne.n	80074f4 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007474:	f3ef 8310 	mrs	r3, PRIMASK
 8007478:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800747c:	647b      	str	r3, [r7, #68]	; 0x44
 800747e:	2301      	movs	r3, #1
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007484:	f383 8810 	msr	PRIMASK, r3
}
 8007488:	46c0      	nop			; (mov r8, r8)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	494e      	ldr	r1, [pc, #312]	; (80075d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007496:	400a      	ands	r2, r1
 8007498:	601a      	str	r2, [r3, #0]
 800749a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800749c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	f383 8810 	msr	PRIMASK, r3
}
 80074a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074a6:	f3ef 8310 	mrs	r3, PRIMASK
 80074aa:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80074ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ae:	643b      	str	r3, [r7, #64]	; 0x40
 80074b0:	2301      	movs	r3, #1
 80074b2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b6:	f383 8810 	msr	PRIMASK, r3
}
 80074ba:	46c0      	nop			; (mov r8, r8)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689a      	ldr	r2, [r3, #8]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2101      	movs	r1, #1
 80074c8:	438a      	bics	r2, r1
 80074ca:	609a      	str	r2, [r3, #8]
 80074cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2288      	movs	r2, #136	; 0x88
 80074dc:	2120      	movs	r1, #32
 80074de:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	228c      	movs	r2, #140	; 0x8c
 80074e4:	2120      	movs	r1, #32
 80074e6:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2284      	movs	r2, #132	; 0x84
 80074ec:	2100      	movs	r1, #0
 80074ee:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e069      	b.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2204      	movs	r2, #4
 80074fc:	4013      	ands	r3, r2
 80074fe:	d052      	beq.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	69da      	ldr	r2, [r3, #28]
 8007506:	2380      	movs	r3, #128	; 0x80
 8007508:	011b      	lsls	r3, r3, #4
 800750a:	401a      	ands	r2, r3
 800750c:	2380      	movs	r3, #128	; 0x80
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	429a      	cmp	r2, r3
 8007512:	d148      	bne.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2280      	movs	r2, #128	; 0x80
 800751a:	0112      	lsls	r2, r2, #4
 800751c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751e:	f3ef 8310 	mrs	r3, PRIMASK
 8007522:	613b      	str	r3, [r7, #16]
  return(result);
 8007524:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007526:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007528:	2301      	movs	r3, #1
 800752a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	697b      	ldr	r3, [r7, #20]
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4924      	ldr	r1, [pc, #144]	; (80075d0 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8007540:	400a      	ands	r2, r1
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007546:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	f383 8810 	msr	PRIMASK, r3
}
 800754e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007550:	f3ef 8310 	mrs	r3, PRIMASK
 8007554:	61fb      	str	r3, [r7, #28]
  return(result);
 8007556:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007558:	64bb      	str	r3, [r7, #72]	; 0x48
 800755a:	2301      	movs	r3, #1
 800755c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755e:	6a3b      	ldr	r3, [r7, #32]
 8007560:	f383 8810 	msr	PRIMASK, r3
}
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	2101      	movs	r1, #1
 8007572:	438a      	bics	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
 8007576:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007578:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2288      	movs	r2, #136	; 0x88
 8007586:	2120      	movs	r1, #32
 8007588:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	228c      	movs	r2, #140	; 0x8c
 800758e:	2120      	movs	r1, #32
 8007590:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2290      	movs	r2, #144	; 0x90
 8007596:	2120      	movs	r1, #32
 8007598:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2284      	movs	r2, #132	; 0x84
 800759e:	2100      	movs	r1, #0
 80075a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e010      	b.n	80075c8 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	69db      	ldr	r3, [r3, #28]
 80075ac:	68ba      	ldr	r2, [r7, #8]
 80075ae:	4013      	ands	r3, r2
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	1ad3      	subs	r3, r2, r3
 80075b4:	425a      	negs	r2, r3
 80075b6:	4153      	adcs	r3, r2
 80075b8:	b2db      	uxtb	r3, r3
 80075ba:	001a      	movs	r2, r3
 80075bc:	1dfb      	adds	r3, r7, #7
 80075be:	781b      	ldrb	r3, [r3, #0]
 80075c0:	429a      	cmp	r2, r3
 80075c2:	d100      	bne.n	80075c6 <UART_WaitOnFlagUntilTimeout+0x182>
 80075c4:	e747      	b.n	8007456 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	0018      	movs	r0, r3
 80075ca:	46bd      	mov	sp, r7
 80075cc:	b014      	add	sp, #80	; 0x50
 80075ce:	bd80      	pop	{r7, pc}
 80075d0:	fffffe5f 	.word	0xfffffe5f

080075d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b098      	sub	sp, #96	; 0x60
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	1dbb      	adds	r3, r7, #6
 80075e0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	68ba      	ldr	r2, [r7, #8]
 80075e6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	1dba      	adds	r2, r7, #6
 80075ec:	215c      	movs	r1, #92	; 0x5c
 80075ee:	8812      	ldrh	r2, [r2, #0]
 80075f0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1dba      	adds	r2, r7, #6
 80075f6:	215e      	movs	r1, #94	; 0x5e
 80075f8:	8812      	ldrh	r2, [r2, #0]
 80075fa:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689a      	ldr	r2, [r3, #8]
 8007606:	2380      	movs	r3, #128	; 0x80
 8007608:	015b      	lsls	r3, r3, #5
 800760a:	429a      	cmp	r2, r3
 800760c:	d10d      	bne.n	800762a <UART_Start_Receive_IT+0x56>
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	691b      	ldr	r3, [r3, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d104      	bne.n	8007620 <UART_Start_Receive_IT+0x4c>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2260      	movs	r2, #96	; 0x60
 800761a:	497b      	ldr	r1, [pc, #492]	; (8007808 <UART_Start_Receive_IT+0x234>)
 800761c:	5299      	strh	r1, [r3, r2]
 800761e:	e02e      	b.n	800767e <UART_Start_Receive_IT+0xaa>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2260      	movs	r2, #96	; 0x60
 8007624:	21ff      	movs	r1, #255	; 0xff
 8007626:	5299      	strh	r1, [r3, r2]
 8007628:	e029      	b.n	800767e <UART_Start_Receive_IT+0xaa>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10d      	bne.n	800764e <UART_Start_Receive_IT+0x7a>
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <UART_Start_Receive_IT+0x70>
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2260      	movs	r2, #96	; 0x60
 800763e:	21ff      	movs	r1, #255	; 0xff
 8007640:	5299      	strh	r1, [r3, r2]
 8007642:	e01c      	b.n	800767e <UART_Start_Receive_IT+0xaa>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2260      	movs	r2, #96	; 0x60
 8007648:	217f      	movs	r1, #127	; 0x7f
 800764a:	5299      	strh	r1, [r3, r2]
 800764c:	e017      	b.n	800767e <UART_Start_Receive_IT+0xaa>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	689a      	ldr	r2, [r3, #8]
 8007652:	2380      	movs	r3, #128	; 0x80
 8007654:	055b      	lsls	r3, r3, #21
 8007656:	429a      	cmp	r2, r3
 8007658:	d10d      	bne.n	8007676 <UART_Start_Receive_IT+0xa2>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	691b      	ldr	r3, [r3, #16]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d104      	bne.n	800766c <UART_Start_Receive_IT+0x98>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2260      	movs	r2, #96	; 0x60
 8007666:	217f      	movs	r1, #127	; 0x7f
 8007668:	5299      	strh	r1, [r3, r2]
 800766a:	e008      	b.n	800767e <UART_Start_Receive_IT+0xaa>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2260      	movs	r2, #96	; 0x60
 8007670:	213f      	movs	r1, #63	; 0x3f
 8007672:	5299      	strh	r1, [r3, r2]
 8007674:	e003      	b.n	800767e <UART_Start_Receive_IT+0xaa>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2260      	movs	r2, #96	; 0x60
 800767a:	2100      	movs	r1, #0
 800767c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2290      	movs	r2, #144	; 0x90
 8007682:	2100      	movs	r1, #0
 8007684:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	228c      	movs	r2, #140	; 0x8c
 800768a:	2122      	movs	r1, #34	; 0x22
 800768c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800768e:	f3ef 8310 	mrs	r3, PRIMASK
 8007692:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007694:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007696:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007698:	2301      	movs	r3, #1
 800769a:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800769c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769e:	f383 8810 	msr	PRIMASK, r3
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	689a      	ldr	r2, [r3, #8]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	2101      	movs	r1, #1
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
 80076b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80076b6:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80076c4:	2380      	movs	r3, #128	; 0x80
 80076c6:	059b      	lsls	r3, r3, #22
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d150      	bne.n	800776e <UART_Start_Receive_IT+0x19a>
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2268      	movs	r2, #104	; 0x68
 80076d0:	5a9b      	ldrh	r3, [r3, r2]
 80076d2:	1dba      	adds	r2, r7, #6
 80076d4:	8812      	ldrh	r2, [r2, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d349      	bcc.n	800776e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	689a      	ldr	r2, [r3, #8]
 80076de:	2380      	movs	r3, #128	; 0x80
 80076e0:	015b      	lsls	r3, r3, #5
 80076e2:	429a      	cmp	r2, r3
 80076e4:	d107      	bne.n	80076f6 <UART_Start_Receive_IT+0x122>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	691b      	ldr	r3, [r3, #16]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d103      	bne.n	80076f6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	4a46      	ldr	r2, [pc, #280]	; (800780c <UART_Start_Receive_IT+0x238>)
 80076f2:	675a      	str	r2, [r3, #116]	; 0x74
 80076f4:	e002      	b.n	80076fc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	4a45      	ldr	r2, [pc, #276]	; (8007810 <UART_Start_Receive_IT+0x23c>)
 80076fa:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d019      	beq.n	8007738 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007704:	f3ef 8310 	mrs	r3, PRIMASK
 8007708:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800770a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800770c:	65bb      	str	r3, [r7, #88]	; 0x58
 800770e:	2301      	movs	r3, #1
 8007710:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007714:	f383 8810 	msr	PRIMASK, r3
}
 8007718:	46c0      	nop			; (mov r8, r8)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	2180      	movs	r1, #128	; 0x80
 8007726:	0049      	lsls	r1, r1, #1
 8007728:	430a      	orrs	r2, r1
 800772a:	601a      	str	r2, [r3, #0]
 800772c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800772e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007732:	f383 8810 	msr	PRIMASK, r3
}
 8007736:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007738:	f3ef 8310 	mrs	r3, PRIMASK
 800773c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007740:	657b      	str	r3, [r7, #84]	; 0x54
 8007742:	2301      	movs	r3, #1
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	f383 8810 	msr	PRIMASK, r3
}
 800774c:	46c0      	nop			; (mov r8, r8)
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689a      	ldr	r2, [r3, #8]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	2180      	movs	r1, #128	; 0x80
 800775a:	0549      	lsls	r1, r1, #21
 800775c:	430a      	orrs	r2, r1
 800775e:	609a      	str	r2, [r3, #8]
 8007760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007762:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	f383 8810 	msr	PRIMASK, r3
}
 800776a:	46c0      	nop			; (mov r8, r8)
 800776c:	e047      	b.n	80077fe <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	2380      	movs	r3, #128	; 0x80
 8007774:	015b      	lsls	r3, r3, #5
 8007776:	429a      	cmp	r2, r3
 8007778:	d107      	bne.n	800778a <UART_Start_Receive_IT+0x1b6>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d103      	bne.n	800778a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	4a23      	ldr	r2, [pc, #140]	; (8007814 <UART_Start_Receive_IT+0x240>)
 8007786:	675a      	str	r2, [r3, #116]	; 0x74
 8007788:	e002      	b.n	8007790 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	4a22      	ldr	r2, [pc, #136]	; (8007818 <UART_Start_Receive_IT+0x244>)
 800778e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	691b      	ldr	r3, [r3, #16]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d019      	beq.n	80077cc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007798:	f3ef 8310 	mrs	r3, PRIMASK
 800779c:	61fb      	str	r3, [r7, #28]
  return(result);
 800779e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80077a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077a2:	2301      	movs	r3, #1
 80077a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f383 8810 	msr	PRIMASK, r3
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2190      	movs	r1, #144	; 0x90
 80077ba:	0049      	lsls	r1, r1, #1
 80077bc:	430a      	orrs	r2, r1
 80077be:	601a      	str	r2, [r3, #0]
 80077c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c6:	f383 8810 	msr	PRIMASK, r3
}
 80077ca:	e018      	b.n	80077fe <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077cc:	f3ef 8310 	mrs	r3, PRIMASK
 80077d0:	613b      	str	r3, [r7, #16]
  return(result);
 80077d2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077d4:	653b      	str	r3, [r7, #80]	; 0x50
 80077d6:	2301      	movs	r3, #1
 80077d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	f383 8810 	msr	PRIMASK, r3
}
 80077e0:	46c0      	nop			; (mov r8, r8)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2120      	movs	r1, #32
 80077ee:	430a      	orrs	r2, r1
 80077f0:	601a      	str	r2, [r3, #0]
 80077f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	f383 8810 	msr	PRIMASK, r3
}
 80077fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	0018      	movs	r0, r3
 8007802:	46bd      	mov	sp, r7
 8007804:	b018      	add	sp, #96	; 0x60
 8007806:	bd80      	pop	{r7, pc}
 8007808:	000001ff 	.word	0x000001ff
 800780c:	08007f45 	.word	0x08007f45
 8007810:	08007c59 	.word	0x08007c59
 8007814:	08007ae5 	.word	0x08007ae5
 8007818:	08007971 	.word	0x08007971

0800781c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b08e      	sub	sp, #56	; 0x38
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007824:	f3ef 8310 	mrs	r3, PRIMASK
 8007828:	617b      	str	r3, [r7, #20]
  return(result);
 800782a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800782c:	637b      	str	r3, [r7, #52]	; 0x34
 800782e:	2301      	movs	r3, #1
 8007830:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	f383 8810 	msr	PRIMASK, r3
}
 8007838:	46c0      	nop			; (mov r8, r8)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4926      	ldr	r1, [pc, #152]	; (80078e0 <UART_EndRxTransfer+0xc4>)
 8007846:	400a      	ands	r2, r1
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800784c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	f383 8810 	msr	PRIMASK, r3
}
 8007854:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007856:	f3ef 8310 	mrs	r3, PRIMASK
 800785a:	623b      	str	r3, [r7, #32]
  return(result);
 800785c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800785e:	633b      	str	r3, [r7, #48]	; 0x30
 8007860:	2301      	movs	r3, #1
 8007862:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007866:	f383 8810 	msr	PRIMASK, r3
}
 800786a:	46c0      	nop			; (mov r8, r8)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	491b      	ldr	r1, [pc, #108]	; (80078e4 <UART_EndRxTransfer+0xc8>)
 8007878:	400a      	ands	r2, r1
 800787a:	609a      	str	r2, [r3, #8]
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007882:	f383 8810 	msr	PRIMASK, r3
}
 8007886:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d118      	bne.n	80078c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007890:	f3ef 8310 	mrs	r3, PRIMASK
 8007894:	60bb      	str	r3, [r7, #8]
  return(result);
 8007896:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007898:	62fb      	str	r3, [r7, #44]	; 0x2c
 800789a:	2301      	movs	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f383 8810 	msr	PRIMASK, r3
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2110      	movs	r1, #16
 80078b2:	438a      	bics	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ba:	693b      	ldr	r3, [r7, #16]
 80078bc:	f383 8810 	msr	PRIMASK, r3
}
 80078c0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	228c      	movs	r2, #140	; 0x8c
 80078c6:	2120      	movs	r1, #32
 80078c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80078d6:	46c0      	nop			; (mov r8, r8)
 80078d8:	46bd      	mov	sp, r7
 80078da:	b00e      	add	sp, #56	; 0x38
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	46c0      	nop			; (mov r8, r8)
 80078e0:	fffffedf 	.word	0xfffffedf
 80078e4:	effffffe 	.word	0xeffffffe

080078e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b084      	sub	sp, #16
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	225e      	movs	r2, #94	; 0x5e
 80078fa:	2100      	movs	r1, #0
 80078fc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2256      	movs	r2, #86	; 0x56
 8007902:	2100      	movs	r1, #0
 8007904:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	0018      	movs	r0, r3
 800790a:	f7ff fae1 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800790e:	46c0      	nop			; (mov r8, r8)
 8007910:	46bd      	mov	sp, r7
 8007912:	b004      	add	sp, #16
 8007914:	bd80      	pop	{r7, pc}

08007916 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b086      	sub	sp, #24
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800791e:	f3ef 8310 	mrs	r3, PRIMASK
 8007922:	60bb      	str	r3, [r7, #8]
  return(result);
 8007924:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007926:	617b      	str	r3, [r7, #20]
 8007928:	2301      	movs	r3, #1
 800792a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f383 8810 	msr	PRIMASK, r3
}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2140      	movs	r1, #64	; 0x40
 8007940:	438a      	bics	r2, r1
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f383 8810 	msr	PRIMASK, r3
}
 800794e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2288      	movs	r2, #136	; 0x88
 8007954:	2120      	movs	r1, #32
 8007956:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0018      	movs	r0, r3
 8007962:	f7ff faa5 	bl	8006eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007966:	46c0      	nop			; (mov r8, r8)
 8007968:	46bd      	mov	sp, r7
 800796a:	b006      	add	sp, #24
 800796c:	bd80      	pop	{r7, pc}
	...

08007970 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b090      	sub	sp, #64	; 0x40
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007978:	203e      	movs	r0, #62	; 0x3e
 800797a:	183b      	adds	r3, r7, r0
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	2160      	movs	r1, #96	; 0x60
 8007980:	5a52      	ldrh	r2, [r2, r1]
 8007982:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	228c      	movs	r2, #140	; 0x8c
 8007988:	589b      	ldr	r3, [r3, r2]
 800798a:	2b22      	cmp	r3, #34	; 0x22
 800798c:	d000      	beq.n	8007990 <UART_RxISR_8BIT+0x20>
 800798e:	e09a      	b.n	8007ac6 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007996:	213c      	movs	r1, #60	; 0x3c
 8007998:	187b      	adds	r3, r7, r1
 800799a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800799c:	187b      	adds	r3, r7, r1
 800799e:	881b      	ldrh	r3, [r3, #0]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	183b      	adds	r3, r7, r0
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b2d9      	uxtb	r1, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ac:	400a      	ands	r2, r1
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	1c5a      	adds	r2, r3, #1
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	225e      	movs	r2, #94	; 0x5e
 80079c0:	5a9b      	ldrh	r3, [r3, r2]
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	3b01      	subs	r3, #1
 80079c6:	b299      	uxth	r1, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	225e      	movs	r2, #94	; 0x5e
 80079cc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	225e      	movs	r2, #94	; 0x5e
 80079d2:	5a9b      	ldrh	r3, [r3, r2]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d000      	beq.n	80079dc <UART_RxISR_8BIT+0x6c>
 80079da:	e07c      	b.n	8007ad6 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079dc:	f3ef 8310 	mrs	r3, PRIMASK
 80079e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80079e2:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80079e6:	2301      	movs	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	f383 8810 	msr	PRIMASK, r3
}
 80079f0:	46c0      	nop			; (mov r8, r8)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681a      	ldr	r2, [r3, #0]
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4938      	ldr	r1, [pc, #224]	; (8007ae0 <UART_RxISR_8BIT+0x170>)
 80079fe:	400a      	ands	r2, r1
 8007a00:	601a      	str	r2, [r3, #0]
 8007a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a06:	6a3b      	ldr	r3, [r7, #32]
 8007a08:	f383 8810 	msr	PRIMASK, r3
}
 8007a0c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a0e:	f3ef 8310 	mrs	r3, PRIMASK
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a16:	637b      	str	r3, [r7, #52]	; 0x34
 8007a18:	2301      	movs	r3, #1
 8007a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	f383 8810 	msr	PRIMASK, r3
}
 8007a22:	46c0      	nop			; (mov r8, r8)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	689a      	ldr	r2, [r3, #8]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2101      	movs	r1, #1
 8007a30:	438a      	bics	r2, r1
 8007a32:	609a      	str	r2, [r3, #8]
 8007a34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a36:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	f383 8810 	msr	PRIMASK, r3
}
 8007a3e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	228c      	movs	r2, #140	; 0x8c
 8007a44:	2120      	movs	r1, #32
 8007a46:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2200      	movs	r2, #0
 8007a52:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	d12f      	bne.n	8007abc <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2200      	movs	r2, #0
 8007a60:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a62:	f3ef 8310 	mrs	r3, PRIMASK
 8007a66:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a68:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a6a:	633b      	str	r3, [r7, #48]	; 0x30
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a70:	693b      	ldr	r3, [r7, #16]
 8007a72:	f383 8810 	msr	PRIMASK, r3
}
 8007a76:	46c0      	nop			; (mov r8, r8)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681a      	ldr	r2, [r3, #0]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	2110      	movs	r1, #16
 8007a84:	438a      	bics	r2, r1
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a8c:	697b      	ldr	r3, [r7, #20]
 8007a8e:	f383 8810 	msr	PRIMASK, r3
}
 8007a92:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	69db      	ldr	r3, [r3, #28]
 8007a9a:	2210      	movs	r2, #16
 8007a9c:	4013      	ands	r3, r2
 8007a9e:	2b10      	cmp	r3, #16
 8007aa0:	d103      	bne.n	8007aaa <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2210      	movs	r2, #16
 8007aa8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	225c      	movs	r2, #92	; 0x5c
 8007aae:	5a9a      	ldrh	r2, [r3, r2]
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	0011      	movs	r1, r2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7ff fa13 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007aba:	e00c      	b.n	8007ad6 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	0018      	movs	r0, r3
 8007ac0:	f7ff f9fe 	bl	8006ec0 <HAL_UART_RxCpltCallback>
}
 8007ac4:	e007      	b.n	8007ad6 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	699a      	ldr	r2, [r3, #24]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2108      	movs	r1, #8
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	619a      	str	r2, [r3, #24]
}
 8007ad6:	46c0      	nop			; (mov r8, r8)
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	b010      	add	sp, #64	; 0x40
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	fffffedf 	.word	0xfffffedf

08007ae4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b090      	sub	sp, #64	; 0x40
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007aec:	203e      	movs	r0, #62	; 0x3e
 8007aee:	183b      	adds	r3, r7, r0
 8007af0:	687a      	ldr	r2, [r7, #4]
 8007af2:	2160      	movs	r1, #96	; 0x60
 8007af4:	5a52      	ldrh	r2, [r2, r1]
 8007af6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	228c      	movs	r2, #140	; 0x8c
 8007afc:	589b      	ldr	r3, [r3, r2]
 8007afe:	2b22      	cmp	r3, #34	; 0x22
 8007b00:	d000      	beq.n	8007b04 <UART_RxISR_16BIT+0x20>
 8007b02:	e09a      	b.n	8007c3a <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b0a:	213c      	movs	r1, #60	; 0x3c
 8007b0c:	187b      	adds	r3, r7, r1
 8007b0e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007b16:	187b      	adds	r3, r7, r1
 8007b18:	183a      	adds	r2, r7, r0
 8007b1a:	881b      	ldrh	r3, [r3, #0]
 8007b1c:	8812      	ldrh	r2, [r2, #0]
 8007b1e:	4013      	ands	r3, r2
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b2a:	1c9a      	adds	r2, r3, #2
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	225e      	movs	r2, #94	; 0x5e
 8007b34:	5a9b      	ldrh	r3, [r3, r2]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	3b01      	subs	r3, #1
 8007b3a:	b299      	uxth	r1, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	225e      	movs	r2, #94	; 0x5e
 8007b40:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	225e      	movs	r2, #94	; 0x5e
 8007b46:	5a9b      	ldrh	r3, [r3, r2]
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d000      	beq.n	8007b50 <UART_RxISR_16BIT+0x6c>
 8007b4e:	e07c      	b.n	8007c4a <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b50:	f3ef 8310 	mrs	r3, PRIMASK
 8007b54:	617b      	str	r3, [r7, #20]
  return(result);
 8007b56:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	f383 8810 	msr	PRIMASK, r3
}
 8007b64:	46c0      	nop			; (mov r8, r8)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4938      	ldr	r1, [pc, #224]	; (8007c54 <UART_RxISR_16BIT+0x170>)
 8007b72:	400a      	ands	r2, r1
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	f383 8810 	msr	PRIMASK, r3
}
 8007b80:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b82:	f3ef 8310 	mrs	r3, PRIMASK
 8007b86:	623b      	str	r3, [r7, #32]
  return(result);
 8007b88:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b92:	f383 8810 	msr	PRIMASK, r3
}
 8007b96:	46c0      	nop			; (mov r8, r8)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2101      	movs	r1, #1
 8007ba4:	438a      	bics	r2, r1
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007baa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bae:	f383 8810 	msr	PRIMASK, r3
}
 8007bb2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	228c      	movs	r2, #140	; 0x8c
 8007bb8:	2120      	movs	r1, #32
 8007bba:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d12f      	bne.n	8007c30 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8007bda:	60bb      	str	r3, [r7, #8]
  return(result);
 8007bdc:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bde:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007be0:	2301      	movs	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	f383 8810 	msr	PRIMASK, r3
}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2110      	movs	r1, #16
 8007bf8:	438a      	bics	r2, r1
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	f383 8810 	msr	PRIMASK, r3
}
 8007c06:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	69db      	ldr	r3, [r3, #28]
 8007c0e:	2210      	movs	r2, #16
 8007c10:	4013      	ands	r3, r2
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d103      	bne.n	8007c1e <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	2210      	movs	r2, #16
 8007c1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	225c      	movs	r2, #92	; 0x5c
 8007c22:	5a9a      	ldrh	r2, [r3, r2]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	0011      	movs	r1, r2
 8007c28:	0018      	movs	r0, r3
 8007c2a:	f7ff f959 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007c2e:	e00c      	b.n	8007c4a <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	0018      	movs	r0, r3
 8007c34:	f7ff f944 	bl	8006ec0 <HAL_UART_RxCpltCallback>
}
 8007c38:	e007      	b.n	8007c4a <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	699a      	ldr	r2, [r3, #24]
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2108      	movs	r1, #8
 8007c46:	430a      	orrs	r2, r1
 8007c48:	619a      	str	r2, [r3, #24]
}
 8007c4a:	46c0      	nop			; (mov r8, r8)
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b010      	add	sp, #64	; 0x40
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	fffffedf 	.word	0xfffffedf

08007c58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b09c      	sub	sp, #112	; 0x70
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007c60:	236a      	movs	r3, #106	; 0x6a
 8007c62:	18fb      	adds	r3, r7, r3
 8007c64:	687a      	ldr	r2, [r7, #4]
 8007c66:	2160      	movs	r1, #96	; 0x60
 8007c68:	5a52      	ldrh	r2, [r2, r1]
 8007c6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	228c      	movs	r2, #140	; 0x8c
 8007c88:	589b      	ldr	r3, [r3, r2]
 8007c8a:	2b22      	cmp	r3, #34	; 0x22
 8007c8c:	d000      	beq.n	8007c90 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007c8e:	e144      	b.n	8007f1a <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c90:	235e      	movs	r3, #94	; 0x5e
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	687a      	ldr	r2, [r7, #4]
 8007c96:	2168      	movs	r1, #104	; 0x68
 8007c98:	5a52      	ldrh	r2, [r2, r1]
 8007c9a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c9c:	e0eb      	b.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ca4:	215c      	movs	r1, #92	; 0x5c
 8007ca6:	187b      	adds	r3, r7, r1
 8007ca8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007caa:	187b      	adds	r3, r7, r1
 8007cac:	881b      	ldrh	r3, [r3, #0]
 8007cae:	b2da      	uxtb	r2, r3
 8007cb0:	236a      	movs	r3, #106	; 0x6a
 8007cb2:	18fb      	adds	r3, r7, r3
 8007cb4:	881b      	ldrh	r3, [r3, #0]
 8007cb6:	b2d9      	uxtb	r1, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cbc:	400a      	ands	r2, r1
 8007cbe:	b2d2      	uxtb	r2, r2
 8007cc0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc6:	1c5a      	adds	r2, r3, #1
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	225e      	movs	r2, #94	; 0x5e
 8007cd0:	5a9b      	ldrh	r3, [r3, r2]
 8007cd2:	b29b      	uxth	r3, r3
 8007cd4:	3b01      	subs	r3, #1
 8007cd6:	b299      	uxth	r1, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	225e      	movs	r2, #94	; 0x5e
 8007cdc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ce8:	2207      	movs	r2, #7
 8007cea:	4013      	ands	r3, r2
 8007cec:	d049      	beq.n	8007d82 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	d010      	beq.n	8007d18 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007cf6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cf8:	2380      	movs	r3, #128	; 0x80
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2201      	movs	r2, #1
 8007d06:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2290      	movs	r2, #144	; 0x90
 8007d0c:	589b      	ldr	r3, [r3, r2]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	431a      	orrs	r2, r3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2190      	movs	r1, #144	; 0x90
 8007d16:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	4013      	ands	r3, r2
 8007d1e:	d00f      	beq.n	8007d40 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007d20:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d22:	2201      	movs	r2, #1
 8007d24:	4013      	ands	r3, r2
 8007d26:	d00b      	beq.n	8007d40 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2202      	movs	r2, #2
 8007d2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2290      	movs	r2, #144	; 0x90
 8007d34:	589b      	ldr	r3, [r3, r2]
 8007d36:	2204      	movs	r2, #4
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2190      	movs	r1, #144	; 0x90
 8007d3e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d42:	2204      	movs	r2, #4
 8007d44:	4013      	ands	r3, r2
 8007d46:	d00f      	beq.n	8007d68 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007d48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	4013      	ands	r3, r2
 8007d4e:	d00b      	beq.n	8007d68 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2204      	movs	r2, #4
 8007d56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2290      	movs	r2, #144	; 0x90
 8007d5c:	589b      	ldr	r3, [r3, r2]
 8007d5e:	2202      	movs	r2, #2
 8007d60:	431a      	orrs	r2, r3
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2190      	movs	r1, #144	; 0x90
 8007d66:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2290      	movs	r2, #144	; 0x90
 8007d6c:	589b      	ldr	r3, [r3, r2]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d007      	beq.n	8007d82 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	0018      	movs	r0, r3
 8007d76:	f7ff f8ab 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2290      	movs	r2, #144	; 0x90
 8007d7e:	2100      	movs	r1, #0
 8007d80:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	225e      	movs	r2, #94	; 0x5e
 8007d86:	5a9b      	ldrh	r3, [r3, r2]
 8007d88:	b29b      	uxth	r3, r3
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d173      	bne.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d8e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d96:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d98:	2301      	movs	r3, #1
 8007d9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9e:	f383 8810 	msr	PRIMASK, r3
}
 8007da2:	46c0      	nop			; (mov r8, r8)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4961      	ldr	r1, [pc, #388]	; (8007f34 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007db0:	400a      	ands	r2, r1
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007db6:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dba:	f383 8810 	msr	PRIMASK, r3
}
 8007dbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dc0:	f3ef 8310 	mrs	r3, PRIMASK
 8007dc4:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dc8:	657b      	str	r3, [r7, #84]	; 0x54
 8007dca:	2301      	movs	r3, #1
 8007dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd0:	f383 8810 	msr	PRIMASK, r3
}
 8007dd4:	46c0      	nop			; (mov r8, r8)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	689a      	ldr	r2, [r3, #8]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4955      	ldr	r1, [pc, #340]	; (8007f38 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007de2:	400a      	ands	r2, r1
 8007de4:	609a      	str	r2, [r3, #8]
 8007de6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007de8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dec:	f383 8810 	msr	PRIMASK, r3
}
 8007df0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	228c      	movs	r2, #140	; 0x8c
 8007df6:	2120      	movs	r1, #32
 8007df8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d12f      	bne.n	8007e6e <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e14:	f3ef 8310 	mrs	r3, PRIMASK
 8007e18:	623b      	str	r3, [r7, #32]
  return(result);
 8007e1a:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e1c:	653b      	str	r3, [r7, #80]	; 0x50
 8007e1e:	2301      	movs	r3, #1
 8007e20:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	f383 8810 	msr	PRIMASK, r3
}
 8007e28:	46c0      	nop			; (mov r8, r8)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2110      	movs	r1, #16
 8007e36:	438a      	bics	r2, r1
 8007e38:	601a      	str	r2, [r3, #0]
 8007e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e40:	f383 8810 	msr	PRIMASK, r3
}
 8007e44:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	2210      	movs	r2, #16
 8007e4e:	4013      	ands	r3, r2
 8007e50:	2b10      	cmp	r3, #16
 8007e52:	d103      	bne.n	8007e5c <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	2210      	movs	r2, #16
 8007e5a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	225c      	movs	r2, #92	; 0x5c
 8007e60:	5a9a      	ldrh	r2, [r3, r2]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	0011      	movs	r1, r2
 8007e66:	0018      	movs	r0, r3
 8007e68:	f7ff f83a 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 8007e6c:	e003      	b.n	8007e76 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	0018      	movs	r0, r3
 8007e72:	f7ff f825 	bl	8006ec0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e76:	235e      	movs	r3, #94	; 0x5e
 8007e78:	18fb      	adds	r3, r7, r3
 8007e7a:	881b      	ldrh	r3, [r3, #0]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d004      	beq.n	8007e8a <UART_RxISR_8BIT_FIFOEN+0x232>
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	2220      	movs	r2, #32
 8007e84:	4013      	ands	r3, r2
 8007e86:	d000      	beq.n	8007e8a <UART_RxISR_8BIT_FIFOEN+0x232>
 8007e88:	e709      	b.n	8007c9e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e8a:	204e      	movs	r0, #78	; 0x4e
 8007e8c:	183b      	adds	r3, r7, r0
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	215e      	movs	r1, #94	; 0x5e
 8007e92:	5a52      	ldrh	r2, [r2, r1]
 8007e94:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e96:	0001      	movs	r1, r0
 8007e98:	187b      	adds	r3, r7, r1
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d044      	beq.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2268      	movs	r2, #104	; 0x68
 8007ea4:	5a9b      	ldrh	r3, [r3, r2]
 8007ea6:	187a      	adds	r2, r7, r1
 8007ea8:	8812      	ldrh	r2, [r2, #0]
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d23d      	bcs.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eae:	f3ef 8310 	mrs	r3, PRIMASK
 8007eb2:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eb4:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007eb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007eb8:	2301      	movs	r3, #1
 8007eba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f383 8810 	msr	PRIMASK, r3
}
 8007ec2:	46c0      	nop			; (mov r8, r8)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	689a      	ldr	r2, [r3, #8]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	491b      	ldr	r1, [pc, #108]	; (8007f3c <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007ed0:	400a      	ands	r2, r1
 8007ed2:	609a      	str	r2, [r3, #8]
 8007ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ed6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	f383 8810 	msr	PRIMASK, r3
}
 8007ede:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	4a17      	ldr	r2, [pc, #92]	; (8007f40 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007ee4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ee6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eea:	617b      	str	r3, [r7, #20]
  return(result);
 8007eec:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007eee:	647b      	str	r3, [r7, #68]	; 0x44
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	f383 8810 	msr	PRIMASK, r3
}
 8007efa:	46c0      	nop			; (mov r8, r8)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2120      	movs	r1, #32
 8007f08:	430a      	orrs	r2, r1
 8007f0a:	601a      	str	r2, [r3, #0]
 8007f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f383 8810 	msr	PRIMASK, r3
}
 8007f16:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f18:	e007      	b.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	699a      	ldr	r2, [r3, #24]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2108      	movs	r1, #8
 8007f26:	430a      	orrs	r2, r1
 8007f28:	619a      	str	r2, [r3, #24]
}
 8007f2a:	46c0      	nop			; (mov r8, r8)
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	b01c      	add	sp, #112	; 0x70
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	46c0      	nop			; (mov r8, r8)
 8007f34:	fffffeff 	.word	0xfffffeff
 8007f38:	effffffe 	.word	0xeffffffe
 8007f3c:	efffffff 	.word	0xefffffff
 8007f40:	08007971 	.word	0x08007971

08007f44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b09e      	sub	sp, #120	; 0x78
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007f4c:	2372      	movs	r3, #114	; 0x72
 8007f4e:	18fb      	adds	r3, r7, r3
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	2160      	movs	r1, #96	; 0x60
 8007f54:	5a52      	ldrh	r2, [r2, r1]
 8007f56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	689b      	ldr	r3, [r3, #8]
 8007f6e:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	228c      	movs	r2, #140	; 0x8c
 8007f74:	589b      	ldr	r3, [r3, r2]
 8007f76:	2b22      	cmp	r3, #34	; 0x22
 8007f78:	d000      	beq.n	8007f7c <UART_RxISR_16BIT_FIFOEN+0x38>
 8007f7a:	e144      	b.n	8008206 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f7c:	2366      	movs	r3, #102	; 0x66
 8007f7e:	18fb      	adds	r3, r7, r3
 8007f80:	687a      	ldr	r2, [r7, #4]
 8007f82:	2168      	movs	r1, #104	; 0x68
 8007f84:	5a52      	ldrh	r2, [r2, r1]
 8007f86:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f88:	e0eb      	b.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f90:	2164      	movs	r1, #100	; 0x64
 8007f92:	187b      	adds	r3, r7, r1
 8007f94:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f9a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f9c:	187b      	adds	r3, r7, r1
 8007f9e:	2272      	movs	r2, #114	; 0x72
 8007fa0:	18ba      	adds	r2, r7, r2
 8007fa2:	881b      	ldrh	r3, [r3, #0]
 8007fa4:	8812      	ldrh	r2, [r2, #0]
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	b29a      	uxth	r2, r3
 8007faa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fb2:	1c9a      	adds	r2, r3, #2
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	225e      	movs	r2, #94	; 0x5e
 8007fbc:	5a9b      	ldrh	r3, [r3, r2]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	b299      	uxth	r1, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	225e      	movs	r2, #94	; 0x5e
 8007fc8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	d049      	beq.n	800806e <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fdc:	2201      	movs	r2, #1
 8007fde:	4013      	ands	r3, r2
 8007fe0:	d010      	beq.n	8008004 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007fe2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fe4:	2380      	movs	r3, #128	; 0x80
 8007fe6:	005b      	lsls	r3, r3, #1
 8007fe8:	4013      	ands	r3, r2
 8007fea:	d00b      	beq.n	8008004 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2290      	movs	r2, #144	; 0x90
 8007ff8:	589b      	ldr	r3, [r3, r2]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2190      	movs	r1, #144	; 0x90
 8008002:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008006:	2202      	movs	r2, #2
 8008008:	4013      	ands	r3, r2
 800800a:	d00f      	beq.n	800802c <UART_RxISR_16BIT_FIFOEN+0xe8>
 800800c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800800e:	2201      	movs	r2, #1
 8008010:	4013      	ands	r3, r2
 8008012:	d00b      	beq.n	800802c <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	2202      	movs	r2, #2
 800801a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2290      	movs	r2, #144	; 0x90
 8008020:	589b      	ldr	r3, [r3, r2]
 8008022:	2204      	movs	r2, #4
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2190      	movs	r1, #144	; 0x90
 800802a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800802c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800802e:	2204      	movs	r2, #4
 8008030:	4013      	ands	r3, r2
 8008032:	d00f      	beq.n	8008054 <UART_RxISR_16BIT_FIFOEN+0x110>
 8008034:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008036:	2201      	movs	r2, #1
 8008038:	4013      	ands	r3, r2
 800803a:	d00b      	beq.n	8008054 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2204      	movs	r2, #4
 8008042:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2290      	movs	r2, #144	; 0x90
 8008048:	589b      	ldr	r3, [r3, r2]
 800804a:	2202      	movs	r2, #2
 800804c:	431a      	orrs	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2190      	movs	r1, #144	; 0x90
 8008052:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2290      	movs	r2, #144	; 0x90
 8008058:	589b      	ldr	r3, [r3, r2]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	0018      	movs	r0, r3
 8008062:	f7fe ff35 	bl	8006ed0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2290      	movs	r2, #144	; 0x90
 800806a:	2100      	movs	r1, #0
 800806c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	225e      	movs	r2, #94	; 0x5e
 8008072:	5a9b      	ldrh	r3, [r3, r2]
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d173      	bne.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800807a:	f3ef 8310 	mrs	r3, PRIMASK
 800807e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008082:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008084:	2301      	movs	r3, #1
 8008086:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800808a:	f383 8810 	msr	PRIMASK, r3
}
 800808e:	46c0      	nop			; (mov r8, r8)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4961      	ldr	r1, [pc, #388]	; (8008220 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800809c:	400a      	ands	r2, r1
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80080a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	f383 8810 	msr	PRIMASK, r3
}
 80080aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ac:	f3ef 8310 	mrs	r3, PRIMASK
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80080b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80080b6:	2301      	movs	r3, #1
 80080b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080bc:	f383 8810 	msr	PRIMASK, r3
}
 80080c0:	46c0      	nop			; (mov r8, r8)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	689a      	ldr	r2, [r3, #8]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4955      	ldr	r1, [pc, #340]	; (8008224 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80080ce:	400a      	ands	r2, r1
 80080d0:	609a      	str	r2, [r3, #8]
 80080d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80080d4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080d8:	f383 8810 	msr	PRIMASK, r3
}
 80080dc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	228c      	movs	r2, #140	; 0x8c
 80080e2:	2120      	movs	r1, #32
 80080e4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f6:	2b01      	cmp	r3, #1
 80080f8:	d12f      	bne.n	800815a <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008100:	f3ef 8310 	mrs	r3, PRIMASK
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008106:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008108:	657b      	str	r3, [r7, #84]	; 0x54
 800810a:	2301      	movs	r3, #1
 800810c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800810e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008110:	f383 8810 	msr	PRIMASK, r3
}
 8008114:	46c0      	nop			; (mov r8, r8)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	2110      	movs	r1, #16
 8008122:	438a      	bics	r2, r1
 8008124:	601a      	str	r2, [r3, #0]
 8008126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008128:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	f383 8810 	msr	PRIMASK, r3
}
 8008130:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	2210      	movs	r2, #16
 800813a:	4013      	ands	r3, r2
 800813c:	2b10      	cmp	r3, #16
 800813e:	d103      	bne.n	8008148 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2210      	movs	r2, #16
 8008146:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	225c      	movs	r2, #92	; 0x5c
 800814c:	5a9a      	ldrh	r2, [r3, r2]
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	0011      	movs	r1, r2
 8008152:	0018      	movs	r0, r3
 8008154:	f7fe fec4 	bl	8006ee0 <HAL_UARTEx_RxEventCallback>
 8008158:	e003      	b.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	0018      	movs	r0, r3
 800815e:	f7fe feaf 	bl	8006ec0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008162:	2366      	movs	r3, #102	; 0x66
 8008164:	18fb      	adds	r3, r7, r3
 8008166:	881b      	ldrh	r3, [r3, #0]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x232>
 800816c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800816e:	2220      	movs	r2, #32
 8008170:	4013      	ands	r3, r2
 8008172:	d000      	beq.n	8008176 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008174:	e709      	b.n	8007f8a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008176:	2052      	movs	r0, #82	; 0x52
 8008178:	183b      	adds	r3, r7, r0
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	215e      	movs	r1, #94	; 0x5e
 800817e:	5a52      	ldrh	r2, [r2, r1]
 8008180:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008182:	0001      	movs	r1, r0
 8008184:	187b      	adds	r3, r7, r1
 8008186:	881b      	ldrh	r3, [r3, #0]
 8008188:	2b00      	cmp	r3, #0
 800818a:	d044      	beq.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2268      	movs	r2, #104	; 0x68
 8008190:	5a9b      	ldrh	r3, [r3, r2]
 8008192:	187a      	adds	r2, r7, r1
 8008194:	8812      	ldrh	r2, [r2, #0]
 8008196:	429a      	cmp	r2, r3
 8008198:	d23d      	bcs.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800819a:	f3ef 8310 	mrs	r3, PRIMASK
 800819e:	60fb      	str	r3, [r7, #12]
  return(result);
 80081a0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081a4:	2301      	movs	r3, #1
 80081a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	f383 8810 	msr	PRIMASK, r3
}
 80081ae:	46c0      	nop			; (mov r8, r8)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	491b      	ldr	r1, [pc, #108]	; (8008228 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80081bc:	400a      	ands	r2, r1
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	f383 8810 	msr	PRIMASK, r3
}
 80081ca:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a17      	ldr	r2, [pc, #92]	; (800822c <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80081d0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081d2:	f3ef 8310 	mrs	r3, PRIMASK
 80081d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80081d8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081da:	64bb      	str	r3, [r7, #72]	; 0x48
 80081dc:	2301      	movs	r3, #1
 80081de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f383 8810 	msr	PRIMASK, r3
}
 80081e6:	46c0      	nop			; (mov r8, r8)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	681a      	ldr	r2, [r3, #0]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2120      	movs	r1, #32
 80081f4:	430a      	orrs	r2, r1
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081fa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081fc:	6a3b      	ldr	r3, [r7, #32]
 80081fe:	f383 8810 	msr	PRIMASK, r3
}
 8008202:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008204:	e007      	b.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	699a      	ldr	r2, [r3, #24]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	2108      	movs	r1, #8
 8008212:	430a      	orrs	r2, r1
 8008214:	619a      	str	r2, [r3, #24]
}
 8008216:	46c0      	nop			; (mov r8, r8)
 8008218:	46bd      	mov	sp, r7
 800821a:	b01e      	add	sp, #120	; 0x78
 800821c:	bd80      	pop	{r7, pc}
 800821e:	46c0      	nop			; (mov r8, r8)
 8008220:	fffffeff 	.word	0xfffffeff
 8008224:	effffffe 	.word	0xeffffffe
 8008228:	efffffff 	.word	0xefffffff
 800822c:	08007ae5 	.word	0x08007ae5

08008230 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008230:	b580      	push	{r7, lr}
 8008232:	b082      	sub	sp, #8
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008238:	46c0      	nop			; (mov r8, r8)
 800823a:	46bd      	mov	sp, r7
 800823c:	b002      	add	sp, #8
 800823e:	bd80      	pop	{r7, pc}

08008240 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	b082      	sub	sp, #8
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008248:	46c0      	nop			; (mov r8, r8)
 800824a:	46bd      	mov	sp, r7
 800824c:	b002      	add	sp, #8
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b082      	sub	sp, #8
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008258:	46c0      	nop			; (mov r8, r8)
 800825a:	46bd      	mov	sp, r7
 800825c:	b002      	add	sp, #8
 800825e:	bd80      	pop	{r7, pc}

08008260 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b084      	sub	sp, #16
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2284      	movs	r2, #132	; 0x84
 800826c:	5c9b      	ldrb	r3, [r3, r2]
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_UARTEx_DisableFifoMode+0x16>
 8008272:	2302      	movs	r3, #2
 8008274:	e027      	b.n	80082c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2284      	movs	r2, #132	; 0x84
 800827a:	2101      	movs	r1, #1
 800827c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2288      	movs	r2, #136	; 0x88
 8008282:	2124      	movs	r1, #36	; 0x24
 8008284:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2101      	movs	r1, #1
 800829a:	438a      	bics	r2, r1
 800829c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a0b      	ldr	r2, [pc, #44]	; (80082d0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80082a2:	4013      	ands	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2288      	movs	r2, #136	; 0x88
 80082b8:	2120      	movs	r1, #32
 80082ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2284      	movs	r2, #132	; 0x84
 80082c0:	2100      	movs	r1, #0
 80082c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	0018      	movs	r0, r3
 80082c8:	46bd      	mov	sp, r7
 80082ca:	b004      	add	sp, #16
 80082cc:	bd80      	pop	{r7, pc}
 80082ce:	46c0      	nop			; (mov r8, r8)
 80082d0:	dfffffff 	.word	0xdfffffff

080082d4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2284      	movs	r2, #132	; 0x84
 80082e2:	5c9b      	ldrb	r3, [r3, r2]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d101      	bne.n	80082ec <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082e8:	2302      	movs	r3, #2
 80082ea:	e02e      	b.n	800834a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2284      	movs	r2, #132	; 0x84
 80082f0:	2101      	movs	r1, #1
 80082f2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2288      	movs	r2, #136	; 0x88
 80082f8:	2124      	movs	r1, #36	; 0x24
 80082fa:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	2101      	movs	r1, #1
 8008310:	438a      	bics	r2, r1
 8008312:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	08d9      	lsrs	r1, r3, #3
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	0018      	movs	r0, r3
 800832c:	f000 f854 	bl	80083d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68fa      	ldr	r2, [r7, #12]
 8008336:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2288      	movs	r2, #136	; 0x88
 800833c:	2120      	movs	r1, #32
 800833e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2284      	movs	r2, #132	; 0x84
 8008344:	2100      	movs	r1, #0
 8008346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	0018      	movs	r0, r3
 800834c:	46bd      	mov	sp, r7
 800834e:	b004      	add	sp, #16
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2284      	movs	r2, #132	; 0x84
 8008362:	5c9b      	ldrb	r3, [r3, r2]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d101      	bne.n	800836c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008368:	2302      	movs	r3, #2
 800836a:	e02f      	b.n	80083cc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2284      	movs	r2, #132	; 0x84
 8008370:	2101      	movs	r1, #1
 8008372:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2288      	movs	r2, #136	; 0x88
 8008378:	2124      	movs	r1, #36	; 0x24
 800837a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2101      	movs	r1, #1
 8008390:	438a      	bics	r2, r1
 8008392:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	4a0e      	ldr	r2, [pc, #56]	; (80083d4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800839c:	4013      	ands	r3, r2
 800839e:	0019      	movs	r1, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	683a      	ldr	r2, [r7, #0]
 80083a6:	430a      	orrs	r2, r1
 80083a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	0018      	movs	r0, r3
 80083ae:	f000 f813 	bl	80083d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	68fa      	ldr	r2, [r7, #12]
 80083b8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2288      	movs	r2, #136	; 0x88
 80083be:	2120      	movs	r1, #32
 80083c0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2284      	movs	r2, #132	; 0x84
 80083c6:	2100      	movs	r1, #0
 80083c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	0018      	movs	r0, r3
 80083ce:	46bd      	mov	sp, r7
 80083d0:	b004      	add	sp, #16
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	f1ffffff 	.word	0xf1ffffff

080083d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d108      	bne.n	80083fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	226a      	movs	r2, #106	; 0x6a
 80083ec:	2101      	movs	r1, #1
 80083ee:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2268      	movs	r2, #104	; 0x68
 80083f4:	2101      	movs	r1, #1
 80083f6:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083f8:	e043      	b.n	8008482 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083fa:	260f      	movs	r6, #15
 80083fc:	19bb      	adds	r3, r7, r6
 80083fe:	2208      	movs	r2, #8
 8008400:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008402:	200e      	movs	r0, #14
 8008404:	183b      	adds	r3, r7, r0
 8008406:	2208      	movs	r2, #8
 8008408:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	0e5b      	lsrs	r3, r3, #25
 8008412:	b2da      	uxtb	r2, r3
 8008414:	240d      	movs	r4, #13
 8008416:	193b      	adds	r3, r7, r4
 8008418:	2107      	movs	r1, #7
 800841a:	400a      	ands	r2, r1
 800841c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	0f5b      	lsrs	r3, r3, #29
 8008426:	b2da      	uxtb	r2, r3
 8008428:	250c      	movs	r5, #12
 800842a:	197b      	adds	r3, r7, r5
 800842c:	2107      	movs	r1, #7
 800842e:	400a      	ands	r2, r1
 8008430:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008432:	183b      	adds	r3, r7, r0
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	197a      	adds	r2, r7, r5
 8008438:	7812      	ldrb	r2, [r2, #0]
 800843a:	4914      	ldr	r1, [pc, #80]	; (800848c <UARTEx_SetNbDataToProcess+0xb4>)
 800843c:	5c8a      	ldrb	r2, [r1, r2]
 800843e:	435a      	muls	r2, r3
 8008440:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008442:	197b      	adds	r3, r7, r5
 8008444:	781b      	ldrb	r3, [r3, #0]
 8008446:	4a12      	ldr	r2, [pc, #72]	; (8008490 <UARTEx_SetNbDataToProcess+0xb8>)
 8008448:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800844a:	0019      	movs	r1, r3
 800844c:	f7f7 ff02 	bl	8000254 <__divsi3>
 8008450:	0003      	movs	r3, r0
 8008452:	b299      	uxth	r1, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	226a      	movs	r2, #106	; 0x6a
 8008458:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800845a:	19bb      	adds	r3, r7, r6
 800845c:	781b      	ldrb	r3, [r3, #0]
 800845e:	193a      	adds	r2, r7, r4
 8008460:	7812      	ldrb	r2, [r2, #0]
 8008462:	490a      	ldr	r1, [pc, #40]	; (800848c <UARTEx_SetNbDataToProcess+0xb4>)
 8008464:	5c8a      	ldrb	r2, [r1, r2]
 8008466:	435a      	muls	r2, r3
 8008468:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800846a:	193b      	adds	r3, r7, r4
 800846c:	781b      	ldrb	r3, [r3, #0]
 800846e:	4a08      	ldr	r2, [pc, #32]	; (8008490 <UARTEx_SetNbDataToProcess+0xb8>)
 8008470:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008472:	0019      	movs	r1, r3
 8008474:	f7f7 feee 	bl	8000254 <__divsi3>
 8008478:	0003      	movs	r3, r0
 800847a:	b299      	uxth	r1, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2268      	movs	r2, #104	; 0x68
 8008480:	5299      	strh	r1, [r3, r2]
}
 8008482:	46c0      	nop			; (mov r8, r8)
 8008484:	46bd      	mov	sp, r7
 8008486:	b005      	add	sp, #20
 8008488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800848a:	46c0      	nop			; (mov r8, r8)
 800848c:	0800e970 	.word	0x0800e970
 8008490:	0800e978 	.word	0x0800e978

08008494 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	0002      	movs	r2, r0
 800849c:	1dbb      	adds	r3, r7, #6
 800849e:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80084a0:	2300      	movs	r3, #0
 80084a2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80084a4:	1dbb      	adds	r3, r7, #6
 80084a6:	2200      	movs	r2, #0
 80084a8:	5e9b      	ldrsh	r3, [r3, r2]
 80084aa:	2b84      	cmp	r3, #132	; 0x84
 80084ac:	d006      	beq.n	80084bc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80084ae:	1dbb      	adds	r3, r7, #6
 80084b0:	2200      	movs	r2, #0
 80084b2:	5e9a      	ldrsh	r2, [r3, r2]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	18d3      	adds	r3, r2, r3
 80084b8:	3303      	adds	r3, #3
 80084ba:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80084bc:	68fb      	ldr	r3, [r7, #12]
}
 80084be:	0018      	movs	r0, r3
 80084c0:	46bd      	mov	sp, r7
 80084c2:	b004      	add	sp, #16
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80084c6:	b580      	push	{r7, lr}
 80084c8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80084ca:	f000 fdeb 	bl	80090a4 <vTaskStartScheduler>
  
  return osOK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80084d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084d8:	b087      	sub	sp, #28
 80084da:	af02      	add	r7, sp, #8
 80084dc:	6078      	str	r0, [r7, #4]
 80084de:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	685c      	ldr	r4, [r3, #4]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084ec:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2208      	movs	r2, #8
 80084f2:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084f4:	0018      	movs	r0, r3
 80084f6:	f7ff ffcd 	bl	8008494 <makeFreeRtosPriority>
 80084fa:	0001      	movs	r1, r0
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	230c      	movs	r3, #12
 8008500:	18fb      	adds	r3, r7, r3
 8008502:	9301      	str	r3, [sp, #4]
 8008504:	9100      	str	r1, [sp, #0]
 8008506:	0013      	movs	r3, r2
 8008508:	0032      	movs	r2, r6
 800850a:	0029      	movs	r1, r5
 800850c:	0020      	movs	r0, r4
 800850e:	f000 fc75 	bl	8008dfc <xTaskCreate>
 8008512:	0003      	movs	r3, r0
 8008514:	2b01      	cmp	r3, #1
 8008516:	d001      	beq.n	800851c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8008518:	2300      	movs	r3, #0
 800851a:	e000      	b.n	800851e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 800851c:	68fb      	ldr	r3, [r7, #12]
}
 800851e:	0018      	movs	r0, r3
 8008520:	46bd      	mov	sp, r7
 8008522:	b005      	add	sp, #20
 8008524:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008526 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008526:	b580      	push	{r7, lr}
 8008528:	b084      	sub	sp, #16
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <osDelay+0x16>
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	e000      	b.n	800853e <osDelay+0x18>
 800853c:	2301      	movs	r3, #1
 800853e:	0018      	movs	r0, r3
 8008540:	f000 fd8a 	bl	8009058 <vTaskDelay>
  
  return osOK;
 8008544:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008546:	0018      	movs	r0, r3
 8008548:	46bd      	mov	sp, r7
 800854a:	b004      	add	sp, #16
 800854c:	bd80      	pop	{r7, pc}

0800854e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	3308      	adds	r3, #8
 800855a:	001a      	movs	r2, r3
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	4252      	negs	r2, r2
 8008566:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	3308      	adds	r3, #8
 800856c:	001a      	movs	r2, r3
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	3308      	adds	r3, #8
 8008576:	001a      	movs	r2, r3
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2200      	movs	r2, #0
 8008580:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	46bd      	mov	sp, r7
 8008586:	b002      	add	sp, #8
 8008588:	bd80      	pop	{r7, pc}

0800858a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008598:	46c0      	nop			; (mov r8, r8)
 800859a:	46bd      	mov	sp, r7
 800859c:	b002      	add	sp, #8
 800859e:	bd80      	pop	{r7, pc}

080085a0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b084      	sub	sp, #16
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	685b      	ldr	r3, [r3, #4]
 80085ae:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	689a      	ldr	r2, [r3, #8]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	689b      	ldr	r3, [r3, #8]
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
}
 80085dc:	46c0      	nop			; (mov r8, r8)
 80085de:	46bd      	mov	sp, r7
 80085e0:	b004      	add	sp, #16
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
 80085ec:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	3301      	adds	r3, #1
 80085f8:	d103      	bne.n	8008602 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	e00c      	b.n	800861c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	3308      	adds	r3, #8
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	e002      	b.n	8008610 <vListInsert+0x2c>
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	60fb      	str	r3, [r7, #12]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68ba      	ldr	r2, [r7, #8]
 8008618:	429a      	cmp	r2, r3
 800861a:	d2f6      	bcs.n	800860a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	683a      	ldr	r2, [r7, #0]
 800862a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	683a      	ldr	r2, [r7, #0]
 8008636:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	1c5a      	adds	r2, r3, #1
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	601a      	str	r2, [r3, #0]
}
 8008648:	46c0      	nop			; (mov r8, r8)
 800864a:	46bd      	mov	sp, r7
 800864c:	b004      	add	sp, #16
 800864e:	bd80      	pop	{r7, pc}

08008650 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	691b      	ldr	r3, [r3, #16]
 800865c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	6892      	ldr	r2, [r2, #8]
 8008666:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6852      	ldr	r2, [r2, #4]
 8008670:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	685b      	ldr	r3, [r3, #4]
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	429a      	cmp	r2, r3
 800867a:	d103      	bne.n	8008684 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	689a      	ldr	r2, [r3, #8]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2200      	movs	r2, #0
 8008688:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	1e5a      	subs	r2, r3, #1
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
}
 8008698:	0018      	movs	r0, r3
 800869a:	46bd      	mov	sp, r7
 800869c:	b004      	add	sp, #16
 800869e:	bd80      	pop	{r7, pc}

080086a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <xQueueGenericReset+0x18>
 80086b4:	b672      	cpsid	i
 80086b6:	e7fe      	b.n	80086b6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80086b8:	f001 f9c2 	bl	8009a40 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	434b      	muls	r3, r1
 80086ca:	18d2      	adds	r2, r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e6:	1e59      	subs	r1, r3, #1
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ec:	434b      	muls	r3, r1
 80086ee:	18d2      	adds	r2, r2, r3
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2244      	movs	r2, #68	; 0x44
 80086f8:	21ff      	movs	r1, #255	; 0xff
 80086fa:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2245      	movs	r2, #69	; 0x45
 8008700:	21ff      	movs	r1, #255	; 0xff
 8008702:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10d      	bne.n	8008726 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d013      	beq.n	800873a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	3310      	adds	r3, #16
 8008716:	0018      	movs	r0, r3
 8008718:	f000 feb2 	bl	8009480 <xTaskRemoveFromEventList>
 800871c:	1e03      	subs	r3, r0, #0
 800871e:	d00c      	beq.n	800873a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008720:	f001 f97e 	bl	8009a20 <vPortYield>
 8008724:	e009      	b.n	800873a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	3310      	adds	r3, #16
 800872a:	0018      	movs	r0, r3
 800872c:	f7ff ff0f 	bl	800854e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	3324      	adds	r3, #36	; 0x24
 8008734:	0018      	movs	r0, r3
 8008736:	f7ff ff0a 	bl	800854e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800873a:	f001 f993 	bl	8009a64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800873e:	2301      	movs	r3, #1
}
 8008740:	0018      	movs	r0, r3
 8008742:	46bd      	mov	sp, r7
 8008744:	b004      	add	sp, #16
 8008746:	bd80      	pop	{r7, pc}

08008748 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008748:	b590      	push	{r4, r7, lr}
 800874a:	b08b      	sub	sp, #44	; 0x2c
 800874c:	af02      	add	r7, sp, #8
 800874e:	60f8      	str	r0, [r7, #12]
 8008750:	60b9      	str	r1, [r7, #8]
 8008752:	1dfb      	adds	r3, r7, #7
 8008754:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d101      	bne.n	8008760 <xQueueGenericCreate+0x18>
 800875c:	b672      	cpsid	i
 800875e:	e7fe      	b.n	800875e <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	68ba      	ldr	r2, [r7, #8]
 8008764:	4353      	muls	r3, r2
 8008766:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	3348      	adds	r3, #72	; 0x48
 800876c:	0018      	movs	r0, r3
 800876e:	f001 f9ff 	bl	8009b70 <pvPortMalloc>
 8008772:	0003      	movs	r3, r0
 8008774:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00e      	beq.n	800879a <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008780:	697b      	ldr	r3, [r7, #20]
 8008782:	3348      	adds	r3, #72	; 0x48
 8008784:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008786:	1dfb      	adds	r3, r7, #7
 8008788:	781c      	ldrb	r4, [r3, #0]
 800878a:	697a      	ldr	r2, [r7, #20]
 800878c:	68b9      	ldr	r1, [r7, #8]
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	69bb      	ldr	r3, [r7, #24]
 8008792:	9300      	str	r3, [sp, #0]
 8008794:	0023      	movs	r3, r4
 8008796:	f000 f805 	bl	80087a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800879a:	69bb      	ldr	r3, [r7, #24]
	}
 800879c:	0018      	movs	r0, r3
 800879e:	46bd      	mov	sp, r7
 80087a0:	b009      	add	sp, #36	; 0x24
 80087a2:	bd90      	pop	{r4, r7, pc}

080087a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	60f8      	str	r0, [r7, #12]
 80087ac:	60b9      	str	r1, [r7, #8]
 80087ae:	607a      	str	r2, [r7, #4]
 80087b0:	001a      	movs	r2, r3
 80087b2:	1cfb      	adds	r3, r7, #3
 80087b4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d103      	bne.n	80087c4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	69ba      	ldr	r2, [r7, #24]
 80087c0:	601a      	str	r2, [r3, #0]
 80087c2:	e002      	b.n	80087ca <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80087d0:	69bb      	ldr	r3, [r7, #24]
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2101      	movs	r1, #1
 80087da:	0018      	movs	r0, r3
 80087dc:	f7ff ff60 	bl	80086a0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80087e0:	46c0      	nop			; (mov r8, r8)
 80087e2:	46bd      	mov	sp, r7
 80087e4:	b004      	add	sp, #16
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b08a      	sub	sp, #40	; 0x28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	60f8      	str	r0, [r7, #12]
 80087f0:	60b9      	str	r1, [r7, #8]
 80087f2:	607a      	str	r2, [r7, #4]
 80087f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80087f6:	2300      	movs	r3, #0
 80087f8:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80087fe:	6a3b      	ldr	r3, [r7, #32]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d101      	bne.n	8008808 <xQueueGenericSend+0x20>
 8008804:	b672      	cpsid	i
 8008806:	e7fe      	b.n	8008806 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d103      	bne.n	8008816 <xQueueGenericSend+0x2e>
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d101      	bne.n	800881a <xQueueGenericSend+0x32>
 8008816:	2301      	movs	r3, #1
 8008818:	e000      	b.n	800881c <xQueueGenericSend+0x34>
 800881a:	2300      	movs	r3, #0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d101      	bne.n	8008824 <xQueueGenericSend+0x3c>
 8008820:	b672      	cpsid	i
 8008822:	e7fe      	b.n	8008822 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d103      	bne.n	8008832 <xQueueGenericSend+0x4a>
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800882e:	2b01      	cmp	r3, #1
 8008830:	d101      	bne.n	8008836 <xQueueGenericSend+0x4e>
 8008832:	2301      	movs	r3, #1
 8008834:	e000      	b.n	8008838 <xQueueGenericSend+0x50>
 8008836:	2300      	movs	r3, #0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d101      	bne.n	8008840 <xQueueGenericSend+0x58>
 800883c:	b672      	cpsid	i
 800883e:	e7fe      	b.n	800883e <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008840:	f000 ff9a 	bl	8009778 <xTaskGetSchedulerState>
 8008844:	1e03      	subs	r3, r0, #0
 8008846:	d102      	bne.n	800884e <xQueueGenericSend+0x66>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d101      	bne.n	8008852 <xQueueGenericSend+0x6a>
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <xQueueGenericSend+0x6c>
 8008852:	2300      	movs	r3, #0
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <xQueueGenericSend+0x74>
 8008858:	b672      	cpsid	i
 800885a:	e7fe      	b.n	800885a <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800885c:	f001 f8f0 	bl	8009a40 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008868:	429a      	cmp	r2, r3
 800886a:	d302      	bcc.n	8008872 <xQueueGenericSend+0x8a>
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	2b02      	cmp	r3, #2
 8008870:	d11e      	bne.n	80088b0 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	68b9      	ldr	r1, [r7, #8]
 8008876:	6a3b      	ldr	r3, [r7, #32]
 8008878:	0018      	movs	r0, r3
 800887a:	f000 f9a2 	bl	8008bc2 <prvCopyDataToQueue>
 800887e:	0003      	movs	r3, r0
 8008880:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008886:	2b00      	cmp	r3, #0
 8008888:	d009      	beq.n	800889e <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800888a:	6a3b      	ldr	r3, [r7, #32]
 800888c:	3324      	adds	r3, #36	; 0x24
 800888e:	0018      	movs	r0, r3
 8008890:	f000 fdf6 	bl	8009480 <xTaskRemoveFromEventList>
 8008894:	1e03      	subs	r3, r0, #0
 8008896:	d007      	beq.n	80088a8 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008898:	f001 f8c2 	bl	8009a20 <vPortYield>
 800889c:	e004      	b.n	80088a8 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800889e:	69fb      	ldr	r3, [r7, #28]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80088a4:	f001 f8bc 	bl	8009a20 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80088a8:	f001 f8dc 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e05b      	b.n	8008968 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d103      	bne.n	80088be <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088b6:	f001 f8d5 	bl	8009a64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088ba:	2300      	movs	r3, #0
 80088bc:	e054      	b.n	8008968 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d106      	bne.n	80088d2 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088c4:	2314      	movs	r3, #20
 80088c6:	18fb      	adds	r3, r7, r3
 80088c8:	0018      	movs	r0, r3
 80088ca:	f000 fe35 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088ce:	2301      	movs	r3, #1
 80088d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088d2:	f001 f8c7 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088d6:	f000 fc1b 	bl	8009110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088da:	f001 f8b1 	bl	8009a40 <vPortEnterCritical>
 80088de:	6a3b      	ldr	r3, [r7, #32]
 80088e0:	2244      	movs	r2, #68	; 0x44
 80088e2:	5c9b      	ldrb	r3, [r3, r2]
 80088e4:	b25b      	sxtb	r3, r3
 80088e6:	3301      	adds	r3, #1
 80088e8:	d103      	bne.n	80088f2 <xQueueGenericSend+0x10a>
 80088ea:	6a3b      	ldr	r3, [r7, #32]
 80088ec:	2244      	movs	r2, #68	; 0x44
 80088ee:	2100      	movs	r1, #0
 80088f0:	5499      	strb	r1, [r3, r2]
 80088f2:	6a3b      	ldr	r3, [r7, #32]
 80088f4:	2245      	movs	r2, #69	; 0x45
 80088f6:	5c9b      	ldrb	r3, [r3, r2]
 80088f8:	b25b      	sxtb	r3, r3
 80088fa:	3301      	adds	r3, #1
 80088fc:	d103      	bne.n	8008906 <xQueueGenericSend+0x11e>
 80088fe:	6a3b      	ldr	r3, [r7, #32]
 8008900:	2245      	movs	r2, #69	; 0x45
 8008902:	2100      	movs	r1, #0
 8008904:	5499      	strb	r1, [r3, r2]
 8008906:	f001 f8ad 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800890a:	1d3a      	adds	r2, r7, #4
 800890c:	2314      	movs	r3, #20
 800890e:	18fb      	adds	r3, r7, r3
 8008910:	0011      	movs	r1, r2
 8008912:	0018      	movs	r0, r3
 8008914:	f000 fe24 	bl	8009560 <xTaskCheckForTimeOut>
 8008918:	1e03      	subs	r3, r0, #0
 800891a:	d11e      	bne.n	800895a <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800891c:	6a3b      	ldr	r3, [r7, #32]
 800891e:	0018      	movs	r0, r3
 8008920:	f000 fa54 	bl	8008dcc <prvIsQueueFull>
 8008924:	1e03      	subs	r3, r0, #0
 8008926:	d011      	beq.n	800894c <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	3310      	adds	r3, #16
 800892c:	687a      	ldr	r2, [r7, #4]
 800892e:	0011      	movs	r1, r2
 8008930:	0018      	movs	r0, r3
 8008932:	f000 fd87 	bl	8009444 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	0018      	movs	r0, r3
 800893a:	f000 f9d3 	bl	8008ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800893e:	f000 fbf3 	bl	8009128 <xTaskResumeAll>
 8008942:	1e03      	subs	r3, r0, #0
 8008944:	d18a      	bne.n	800885c <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8008946:	f001 f86b 	bl	8009a20 <vPortYield>
 800894a:	e787      	b.n	800885c <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	0018      	movs	r0, r3
 8008950:	f000 f9c8 	bl	8008ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008954:	f000 fbe8 	bl	8009128 <xTaskResumeAll>
 8008958:	e780      	b.n	800885c <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800895a:	6a3b      	ldr	r3, [r7, #32]
 800895c:	0018      	movs	r0, r3
 800895e:	f000 f9c1 	bl	8008ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008962:	f000 fbe1 	bl	8009128 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008966:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008968:	0018      	movs	r0, r3
 800896a:	46bd      	mov	sp, r7
 800896c:	b00a      	add	sp, #40	; 0x28
 800896e:	bd80      	pop	{r7, pc}

08008970 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008970:	b590      	push	{r4, r7, lr}
 8008972:	b08b      	sub	sp, #44	; 0x2c
 8008974:	af00      	add	r7, sp, #0
 8008976:	60f8      	str	r0, [r7, #12]
 8008978:	60b9      	str	r1, [r7, #8]
 800897a:	607a      	str	r2, [r7, #4]
 800897c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <xQueueGenericSendFromISR+0x1c>
 8008988:	b672      	cpsid	i
 800898a:	e7fe      	b.n	800898a <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <xQueueGenericSendFromISR+0x2a>
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <xQueueGenericSendFromISR+0x2e>
 800899a:	2301      	movs	r3, #1
 800899c:	e000      	b.n	80089a0 <xQueueGenericSendFromISR+0x30>
 800899e:	2300      	movs	r3, #0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d101      	bne.n	80089a8 <xQueueGenericSendFromISR+0x38>
 80089a4:	b672      	cpsid	i
 80089a6:	e7fe      	b.n	80089a6 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d103      	bne.n	80089b6 <xQueueGenericSendFromISR+0x46>
 80089ae:	6a3b      	ldr	r3, [r7, #32]
 80089b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d101      	bne.n	80089ba <xQueueGenericSendFromISR+0x4a>
 80089b6:	2301      	movs	r3, #1
 80089b8:	e000      	b.n	80089bc <xQueueGenericSendFromISR+0x4c>
 80089ba:	2300      	movs	r3, #0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <xQueueGenericSendFromISR+0x54>
 80089c0:	b672      	cpsid	i
 80089c2:	e7fe      	b.n	80089c2 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80089c4:	f001 f866 	bl	8009a94 <ulSetInterruptMaskFromISR>
 80089c8:	0003      	movs	r3, r0
 80089ca:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80089cc:	6a3b      	ldr	r3, [r7, #32]
 80089ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089d0:	6a3b      	ldr	r3, [r7, #32]
 80089d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d302      	bcc.n	80089de <xQueueGenericSendFromISR+0x6e>
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	2b02      	cmp	r3, #2
 80089dc:	d131      	bne.n	8008a42 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80089de:	241b      	movs	r4, #27
 80089e0:	193b      	adds	r3, r7, r4
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	2145      	movs	r1, #69	; 0x45
 80089e6:	5c52      	ldrb	r2, [r2, r1]
 80089e8:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089ea:	6a3b      	ldr	r3, [r7, #32]
 80089ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ee:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80089f0:	683a      	ldr	r2, [r7, #0]
 80089f2:	68b9      	ldr	r1, [r7, #8]
 80089f4:	6a3b      	ldr	r3, [r7, #32]
 80089f6:	0018      	movs	r0, r3
 80089f8:	f000 f8e3 	bl	8008bc2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80089fc:	193b      	adds	r3, r7, r4
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	b25b      	sxtb	r3, r3
 8008a02:	3301      	adds	r3, #1
 8008a04:	d111      	bne.n	8008a2a <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a06:	6a3b      	ldr	r3, [r7, #32]
 8008a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d016      	beq.n	8008a3c <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a0e:	6a3b      	ldr	r3, [r7, #32]
 8008a10:	3324      	adds	r3, #36	; 0x24
 8008a12:	0018      	movs	r0, r3
 8008a14:	f000 fd34 	bl	8009480 <xTaskRemoveFromEventList>
 8008a18:	1e03      	subs	r3, r0, #0
 8008a1a:	d00f      	beq.n	8008a3c <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00c      	beq.n	8008a3c <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	601a      	str	r2, [r3, #0]
 8008a28:	e008      	b.n	8008a3c <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a2a:	231b      	movs	r3, #27
 8008a2c:	18fb      	adds	r3, r7, r3
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	b259      	sxtb	r1, r3
 8008a36:	6a3b      	ldr	r3, [r7, #32]
 8008a38:	2245      	movs	r2, #69	; 0x45
 8008a3a:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8008a40:	e001      	b.n	8008a46 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	0018      	movs	r0, r3
 8008a4a:	f001 f829 	bl	8009aa0 <vClearInterruptMaskFromISR>

	return xReturn;
 8008a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008a50:	0018      	movs	r0, r3
 8008a52:	46bd      	mov	sp, r7
 8008a54:	b00b      	add	sp, #44	; 0x2c
 8008a56:	bd90      	pop	{r4, r7, pc}

08008a58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b08a      	sub	sp, #40	; 0x28
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	60f8      	str	r0, [r7, #12]
 8008a60:	60b9      	str	r1, [r7, #8]
 8008a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a64:	2300      	movs	r3, #0
 8008a66:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a6c:	6a3b      	ldr	r3, [r7, #32]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d101      	bne.n	8008a76 <xQueueReceive+0x1e>
 8008a72:	b672      	cpsid	i
 8008a74:	e7fe      	b.n	8008a74 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d103      	bne.n	8008a84 <xQueueReceive+0x2c>
 8008a7c:	6a3b      	ldr	r3, [r7, #32]
 8008a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <xQueueReceive+0x30>
 8008a84:	2301      	movs	r3, #1
 8008a86:	e000      	b.n	8008a8a <xQueueReceive+0x32>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d101      	bne.n	8008a92 <xQueueReceive+0x3a>
 8008a8e:	b672      	cpsid	i
 8008a90:	e7fe      	b.n	8008a90 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a92:	f000 fe71 	bl	8009778 <xTaskGetSchedulerState>
 8008a96:	1e03      	subs	r3, r0, #0
 8008a98:	d102      	bne.n	8008aa0 <xQueueReceive+0x48>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d101      	bne.n	8008aa4 <xQueueReceive+0x4c>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e000      	b.n	8008aa6 <xQueueReceive+0x4e>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d101      	bne.n	8008aae <xQueueReceive+0x56>
 8008aaa:	b672      	cpsid	i
 8008aac:	e7fe      	b.n	8008aac <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008aae:	f000 ffc7 	bl	8009a40 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab6:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d01a      	beq.n	8008af4 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008abe:	68ba      	ldr	r2, [r7, #8]
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	0011      	movs	r1, r2
 8008ac4:	0018      	movs	r0, r3
 8008ac6:	f000 f8e7 	bl	8008c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	1e5a      	subs	r2, r3, #1
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008ad2:	6a3b      	ldr	r3, [r7, #32]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008ada:	6a3b      	ldr	r3, [r7, #32]
 8008adc:	3310      	adds	r3, #16
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f000 fcce 	bl	8009480 <xTaskRemoveFromEventList>
 8008ae4:	1e03      	subs	r3, r0, #0
 8008ae6:	d001      	beq.n	8008aec <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008ae8:	f000 ff9a 	bl	8009a20 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008aec:	f000 ffba 	bl	8009a64 <vPortExitCritical>
				return pdPASS;
 8008af0:	2301      	movs	r3, #1
 8008af2:	e062      	b.n	8008bba <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d103      	bne.n	8008b02 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008afa:	f000 ffb3 	bl	8009a64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008afe:	2300      	movs	r3, #0
 8008b00:	e05b      	b.n	8008bba <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d106      	bne.n	8008b16 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b08:	2314      	movs	r3, #20
 8008b0a:	18fb      	adds	r3, r7, r3
 8008b0c:	0018      	movs	r0, r3
 8008b0e:	f000 fd13 	bl	8009538 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b12:	2301      	movs	r3, #1
 8008b14:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b16:	f000 ffa5 	bl	8009a64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b1a:	f000 faf9 	bl	8009110 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b1e:	f000 ff8f 	bl	8009a40 <vPortEnterCritical>
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	2244      	movs	r2, #68	; 0x44
 8008b26:	5c9b      	ldrb	r3, [r3, r2]
 8008b28:	b25b      	sxtb	r3, r3
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	d103      	bne.n	8008b36 <xQueueReceive+0xde>
 8008b2e:	6a3b      	ldr	r3, [r7, #32]
 8008b30:	2244      	movs	r2, #68	; 0x44
 8008b32:	2100      	movs	r1, #0
 8008b34:	5499      	strb	r1, [r3, r2]
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	2245      	movs	r2, #69	; 0x45
 8008b3a:	5c9b      	ldrb	r3, [r3, r2]
 8008b3c:	b25b      	sxtb	r3, r3
 8008b3e:	3301      	adds	r3, #1
 8008b40:	d103      	bne.n	8008b4a <xQueueReceive+0xf2>
 8008b42:	6a3b      	ldr	r3, [r7, #32]
 8008b44:	2245      	movs	r2, #69	; 0x45
 8008b46:	2100      	movs	r1, #0
 8008b48:	5499      	strb	r1, [r3, r2]
 8008b4a:	f000 ff8b 	bl	8009a64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b4e:	1d3a      	adds	r2, r7, #4
 8008b50:	2314      	movs	r3, #20
 8008b52:	18fb      	adds	r3, r7, r3
 8008b54:	0011      	movs	r1, r2
 8008b56:	0018      	movs	r0, r3
 8008b58:	f000 fd02 	bl	8009560 <xTaskCheckForTimeOut>
 8008b5c:	1e03      	subs	r3, r0, #0
 8008b5e:	d11e      	bne.n	8008b9e <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	0018      	movs	r0, r3
 8008b64:	f000 f91c 	bl	8008da0 <prvIsQueueEmpty>
 8008b68:	1e03      	subs	r3, r0, #0
 8008b6a:	d011      	beq.n	8008b90 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008b6c:	6a3b      	ldr	r3, [r7, #32]
 8008b6e:	3324      	adds	r3, #36	; 0x24
 8008b70:	687a      	ldr	r2, [r7, #4]
 8008b72:	0011      	movs	r1, r2
 8008b74:	0018      	movs	r0, r3
 8008b76:	f000 fc65 	bl	8009444 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	0018      	movs	r0, r3
 8008b7e:	f000 f8b1 	bl	8008ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008b82:	f000 fad1 	bl	8009128 <xTaskResumeAll>
 8008b86:	1e03      	subs	r3, r0, #0
 8008b88:	d191      	bne.n	8008aae <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8008b8a:	f000 ff49 	bl	8009a20 <vPortYield>
 8008b8e:	e78e      	b.n	8008aae <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	0018      	movs	r0, r3
 8008b94:	f000 f8a6 	bl	8008ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008b98:	f000 fac6 	bl	8009128 <xTaskResumeAll>
 8008b9c:	e787      	b.n	8008aae <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	0018      	movs	r0, r3
 8008ba2:	f000 f89f 	bl	8008ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008ba6:	f000 fabf 	bl	8009128 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008baa:	6a3b      	ldr	r3, [r7, #32]
 8008bac:	0018      	movs	r0, r3
 8008bae:	f000 f8f7 	bl	8008da0 <prvIsQueueEmpty>
 8008bb2:	1e03      	subs	r3, r0, #0
 8008bb4:	d100      	bne.n	8008bb8 <xQueueReceive+0x160>
 8008bb6:	e77a      	b.n	8008aae <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008bb8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008bba:	0018      	movs	r0, r3
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	b00a      	add	sp, #40	; 0x28
 8008bc0:	bd80      	pop	{r7, pc}

08008bc2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008bc2:	b580      	push	{r7, lr}
 8008bc4:	b086      	sub	sp, #24
 8008bc6:	af00      	add	r7, sp, #0
 8008bc8:	60f8      	str	r0, [r7, #12]
 8008bca:	60b9      	str	r1, [r7, #8]
 8008bcc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bd6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d10e      	bne.n	8008bfe <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d14e      	bne.n	8008c86 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689b      	ldr	r3, [r3, #8]
 8008bec:	0018      	movs	r0, r3
 8008bee:	f000 fddf 	bl	80097b0 <xTaskPriorityDisinherit>
 8008bf2:	0003      	movs	r3, r0
 8008bf4:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	609a      	str	r2, [r3, #8]
 8008bfc:	e043      	b.n	8008c86 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d119      	bne.n	8008c38 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6858      	ldr	r0, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	0019      	movs	r1, r3
 8008c10:	f002 f9a8 	bl	800af64 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	685a      	ldr	r2, [r3, #4]
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1c:	18d2      	adds	r2, r2, r3
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	685a      	ldr	r2, [r3, #4]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d32b      	bcc.n	8008c86 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	605a      	str	r2, [r3, #4]
 8008c36:	e026      	b.n	8008c86 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	68d8      	ldr	r0, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	0019      	movs	r1, r3
 8008c44:	f002 f98e 	bl	800af64 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	68da      	ldr	r2, [r3, #12]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	425b      	negs	r3, r3
 8008c52:	18d2      	adds	r2, r2, r3
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	68da      	ldr	r2, [r3, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d207      	bcs.n	8008c74 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	689a      	ldr	r2, [r3, #8]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6c:	425b      	negs	r3, r3
 8008c6e:	18d2      	adds	r2, r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d105      	bne.n	8008c86 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d002      	beq.n	8008c86 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	3b01      	subs	r3, #1
 8008c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1c5a      	adds	r2, r3, #1
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008c8e:	697b      	ldr	r3, [r7, #20]
}
 8008c90:	0018      	movs	r0, r3
 8008c92:	46bd      	mov	sp, r7
 8008c94:	b006      	add	sp, #24
 8008c96:	bd80      	pop	{r7, pc}

08008c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b082      	sub	sp, #8
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d018      	beq.n	8008cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb2:	18d2      	adds	r2, r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	689b      	ldr	r3, [r3, #8]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d303      	bcc.n	8008ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	68d9      	ldr	r1, [r3, #12]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	0018      	movs	r0, r3
 8008cd8:	f002 f944 	bl	800af64 <memcpy>
	}
}
 8008cdc:	46c0      	nop			; (mov r8, r8)
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	b002      	add	sp, #8
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008cec:	f000 fea8 	bl	8009a40 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008cf0:	230f      	movs	r3, #15
 8008cf2:	18fb      	adds	r3, r7, r3
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	2145      	movs	r1, #69	; 0x45
 8008cf8:	5c52      	ldrb	r2, [r2, r1]
 8008cfa:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008cfc:	e013      	b.n	8008d26 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d016      	beq.n	8008d34 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	3324      	adds	r3, #36	; 0x24
 8008d0a:	0018      	movs	r0, r3
 8008d0c:	f000 fbb8 	bl	8009480 <xTaskRemoveFromEventList>
 8008d10:	1e03      	subs	r3, r0, #0
 8008d12:	d001      	beq.n	8008d18 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008d14:	f000 fc74 	bl	8009600 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008d18:	210f      	movs	r1, #15
 8008d1a:	187b      	adds	r3, r7, r1
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	3b01      	subs	r3, #1
 8008d20:	b2da      	uxtb	r2, r3
 8008d22:	187b      	adds	r3, r7, r1
 8008d24:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008d26:	230f      	movs	r3, #15
 8008d28:	18fb      	adds	r3, r7, r3
 8008d2a:	781b      	ldrb	r3, [r3, #0]
 8008d2c:	b25b      	sxtb	r3, r3
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	dce5      	bgt.n	8008cfe <prvUnlockQueue+0x1a>
 8008d32:	e000      	b.n	8008d36 <prvUnlockQueue+0x52>
					break;
 8008d34:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2245      	movs	r2, #69	; 0x45
 8008d3a:	21ff      	movs	r1, #255	; 0xff
 8008d3c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008d3e:	f000 fe91 	bl	8009a64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008d42:	f000 fe7d 	bl	8009a40 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008d46:	230e      	movs	r3, #14
 8008d48:	18fb      	adds	r3, r7, r3
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	2144      	movs	r1, #68	; 0x44
 8008d4e:	5c52      	ldrb	r2, [r2, r1]
 8008d50:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d52:	e013      	b.n	8008d7c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d016      	beq.n	8008d8a <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	3310      	adds	r3, #16
 8008d60:	0018      	movs	r0, r3
 8008d62:	f000 fb8d 	bl	8009480 <xTaskRemoveFromEventList>
 8008d66:	1e03      	subs	r3, r0, #0
 8008d68:	d001      	beq.n	8008d6e <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008d6a:	f000 fc49 	bl	8009600 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008d6e:	210e      	movs	r1, #14
 8008d70:	187b      	adds	r3, r7, r1
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	3b01      	subs	r3, #1
 8008d76:	b2da      	uxtb	r2, r3
 8008d78:	187b      	adds	r3, r7, r1
 8008d7a:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008d7c:	230e      	movs	r3, #14
 8008d7e:	18fb      	adds	r3, r7, r3
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	b25b      	sxtb	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	dce5      	bgt.n	8008d54 <prvUnlockQueue+0x70>
 8008d88:	e000      	b.n	8008d8c <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008d8a:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2244      	movs	r2, #68	; 0x44
 8008d90:	21ff      	movs	r1, #255	; 0xff
 8008d92:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008d94:	f000 fe66 	bl	8009a64 <vPortExitCritical>
}
 8008d98:	46c0      	nop			; (mov r8, r8)
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	b004      	add	sp, #16
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b084      	sub	sp, #16
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008da8:	f000 fe4a 	bl	8009a40 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d102      	bne.n	8008dba <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008db4:	2301      	movs	r3, #1
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e001      	b.n	8008dbe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dbe:	f000 fe51 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
}
 8008dc4:	0018      	movs	r0, r3
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	b004      	add	sp, #16
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008dd4:	f000 fe34 	bl	8009a40 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d102      	bne.n	8008dea <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008de4:	2301      	movs	r3, #1
 8008de6:	60fb      	str	r3, [r7, #12]
 8008de8:	e001      	b.n	8008dee <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008dea:	2300      	movs	r3, #0
 8008dec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008dee:	f000 fe39 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 8008df2:	68fb      	ldr	r3, [r7, #12]
}
 8008df4:	0018      	movs	r0, r3
 8008df6:	46bd      	mov	sp, r7
 8008df8:	b004      	add	sp, #16
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008dfc:	b590      	push	{r4, r7, lr}
 8008dfe:	b08d      	sub	sp, #52	; 0x34
 8008e00:	af04      	add	r7, sp, #16
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	603b      	str	r3, [r7, #0]
 8008e08:	1dbb      	adds	r3, r7, #6
 8008e0a:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008e0c:	1dbb      	adds	r3, r7, #6
 8008e0e:	881b      	ldrh	r3, [r3, #0]
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	0018      	movs	r0, r3
 8008e14:	f000 feac 	bl	8009b70 <pvPortMalloc>
 8008e18:	0003      	movs	r3, r0
 8008e1a:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d010      	beq.n	8008e44 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008e22:	2054      	movs	r0, #84	; 0x54
 8008e24:	f000 fea4 	bl	8009b70 <pvPortMalloc>
 8008e28:	0003      	movs	r3, r0
 8008e2a:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d003      	beq.n	8008e3a <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008e32:	69fb      	ldr	r3, [r7, #28]
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
 8008e38:	e006      	b.n	8008e48 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	0018      	movs	r0, r3
 8008e3e:	f000 ff43 	bl	8009cc8 <vPortFree>
 8008e42:	e001      	b.n	8008e48 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008e44:	2300      	movs	r3, #0
 8008e46:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d016      	beq.n	8008e7c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e4e:	1dbb      	adds	r3, r7, #6
 8008e50:	881a      	ldrh	r2, [r3, #0]
 8008e52:	683c      	ldr	r4, [r7, #0]
 8008e54:	68b9      	ldr	r1, [r7, #8]
 8008e56:	68f8      	ldr	r0, [r7, #12]
 8008e58:	2300      	movs	r3, #0
 8008e5a:	9303      	str	r3, [sp, #12]
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	9302      	str	r3, [sp, #8]
 8008e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e62:	9301      	str	r3, [sp, #4]
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	9300      	str	r3, [sp, #0]
 8008e68:	0023      	movs	r3, r4
 8008e6a:	f000 f80f 	bl	8008e8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e6e:	69fb      	ldr	r3, [r7, #28]
 8008e70:	0018      	movs	r0, r3
 8008e72:	f000 f88d 	bl	8008f90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e76:	2301      	movs	r3, #1
 8008e78:	61bb      	str	r3, [r7, #24]
 8008e7a:	e002      	b.n	8008e82 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	425b      	negs	r3, r3
 8008e80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e82:	69bb      	ldr	r3, [r7, #24]
	}
 8008e84:	0018      	movs	r0, r3
 8008e86:	46bd      	mov	sp, r7
 8008e88:	b009      	add	sp, #36	; 0x24
 8008e8a:	bd90      	pop	{r4, r7, pc}

08008e8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b086      	sub	sp, #24
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
 8008e98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	493a      	ldr	r1, [pc, #232]	; (8008f8c <prvInitialiseNewTask+0x100>)
 8008ea2:	468c      	mov	ip, r1
 8008ea4:	4463      	add	r3, ip
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	18d3      	adds	r3, r2, r3
 8008eaa:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	2207      	movs	r2, #7
 8008eb0:	4393      	bics	r3, r2
 8008eb2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	2207      	movs	r2, #7
 8008eb8:	4013      	ands	r3, r2
 8008eba:	d001      	beq.n	8008ec0 <prvInitialiseNewTask+0x34>
 8008ebc:	b672      	cpsid	i
 8008ebe:	e7fe      	b.n	8008ebe <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d020      	beq.n	8008f08 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e013      	b.n	8008ef4 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008ecc:	68ba      	ldr	r2, [r7, #8]
 8008ece:	697b      	ldr	r3, [r7, #20]
 8008ed0:	18d3      	adds	r3, r2, r3
 8008ed2:	7818      	ldrb	r0, [r3, #0]
 8008ed4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ed6:	2134      	movs	r1, #52	; 0x34
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	18d3      	adds	r3, r2, r3
 8008edc:	185b      	adds	r3, r3, r1
 8008ede:	1c02      	adds	r2, r0, #0
 8008ee0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008ee2:	68ba      	ldr	r2, [r7, #8]
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	18d3      	adds	r3, r2, r3
 8008ee8:	781b      	ldrb	r3, [r3, #0]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d006      	beq.n	8008efc <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	617b      	str	r3, [r7, #20]
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	2b0f      	cmp	r3, #15
 8008ef8:	d9e8      	bls.n	8008ecc <prvInitialiseNewTask+0x40>
 8008efa:	e000      	b.n	8008efe <prvInitialiseNewTask+0x72>
			{
				break;
 8008efc:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f00:	2243      	movs	r2, #67	; 0x43
 8008f02:	2100      	movs	r1, #0
 8008f04:	5499      	strb	r1, [r3, r2]
 8008f06:	e003      	b.n	8008f10 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0a:	2234      	movs	r2, #52	; 0x34
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	2b06      	cmp	r3, #6
 8008f14:	d901      	bls.n	8008f1a <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008f16:	2306      	movs	r3, #6
 8008f18:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1c:	6a3a      	ldr	r2, [r7, #32]
 8008f1e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f22:	6a3a      	ldr	r2, [r7, #32]
 8008f24:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	2200      	movs	r2, #0
 8008f2a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	3304      	adds	r3, #4
 8008f30:	0018      	movs	r0, r3
 8008f32:	f7ff fb2a 	bl	800858a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f38:	3318      	adds	r3, #24
 8008f3a:	0018      	movs	r0, r3
 8008f3c:	f7ff fb25 	bl	800858a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f44:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f46:	6a3b      	ldr	r3, [r7, #32]
 8008f48:	2207      	movs	r2, #7
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f4e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f54:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f58:	2200      	movs	r2, #0
 8008f5a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f5e:	2250      	movs	r2, #80	; 0x50
 8008f60:	2100      	movs	r1, #0
 8008f62:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	68f9      	ldr	r1, [r7, #12]
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	0018      	movs	r0, r3
 8008f6c:	f000 fcd0 	bl	8009910 <pxPortInitialiseStack>
 8008f70:	0002      	movs	r2, r0
 8008f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d002      	beq.n	8008f82 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	46bd      	mov	sp, r7
 8008f86:	b006      	add	sp, #24
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			; (mov r8, r8)
 8008f8c:	3fffffff 	.word	0x3fffffff

08008f90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b082      	sub	sp, #8
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f98:	f000 fd52 	bl	8009a40 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f9c:	4b28      	ldr	r3, [pc, #160]	; (8009040 <prvAddNewTaskToReadyList+0xb0>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	1c5a      	adds	r2, r3, #1
 8008fa2:	4b27      	ldr	r3, [pc, #156]	; (8009040 <prvAddNewTaskToReadyList+0xb0>)
 8008fa4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008fa6:	4b27      	ldr	r3, [pc, #156]	; (8009044 <prvAddNewTaskToReadyList+0xb4>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d109      	bne.n	8008fc2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008fae:	4b25      	ldr	r3, [pc, #148]	; (8009044 <prvAddNewTaskToReadyList+0xb4>)
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008fb4:	4b22      	ldr	r3, [pc, #136]	; (8009040 <prvAddNewTaskToReadyList+0xb0>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d110      	bne.n	8008fde <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008fbc:	f000 fb3a 	bl	8009634 <prvInitialiseTaskLists>
 8008fc0:	e00d      	b.n	8008fde <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008fc2:	4b21      	ldr	r3, [pc, #132]	; (8009048 <prvAddNewTaskToReadyList+0xb8>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008fca:	4b1e      	ldr	r3, [pc, #120]	; (8009044 <prvAddNewTaskToReadyList+0xb4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d802      	bhi.n	8008fde <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008fd8:	4b1a      	ldr	r3, [pc, #104]	; (8009044 <prvAddNewTaskToReadyList+0xb4>)
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008fde:	4b1b      	ldr	r3, [pc, #108]	; (800904c <prvAddNewTaskToReadyList+0xbc>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	4b19      	ldr	r3, [pc, #100]	; (800904c <prvAddNewTaskToReadyList+0xbc>)
 8008fe6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fec:	4b18      	ldr	r3, [pc, #96]	; (8009050 <prvAddNewTaskToReadyList+0xc0>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	429a      	cmp	r2, r3
 8008ff2:	d903      	bls.n	8008ffc <prvAddNewTaskToReadyList+0x6c>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff8:	4b15      	ldr	r3, [pc, #84]	; (8009050 <prvAddNewTaskToReadyList+0xc0>)
 8008ffa:	601a      	str	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009000:	0013      	movs	r3, r2
 8009002:	009b      	lsls	r3, r3, #2
 8009004:	189b      	adds	r3, r3, r2
 8009006:	009b      	lsls	r3, r3, #2
 8009008:	4a12      	ldr	r2, [pc, #72]	; (8009054 <prvAddNewTaskToReadyList+0xc4>)
 800900a:	189a      	adds	r2, r3, r2
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	3304      	adds	r3, #4
 8009010:	0019      	movs	r1, r3
 8009012:	0010      	movs	r0, r2
 8009014:	f7ff fac4 	bl	80085a0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009018:	f000 fd24 	bl	8009a64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800901c:	4b0a      	ldr	r3, [pc, #40]	; (8009048 <prvAddNewTaskToReadyList+0xb8>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d008      	beq.n	8009036 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009024:	4b07      	ldr	r3, [pc, #28]	; (8009044 <prvAddNewTaskToReadyList+0xb4>)
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800902e:	429a      	cmp	r2, r3
 8009030:	d201      	bcs.n	8009036 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009032:	f000 fcf5 	bl	8009a20 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	46bd      	mov	sp, r7
 800903a:	b002      	add	sp, #8
 800903c:	bd80      	pop	{r7, pc}
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	200007ac 	.word	0x200007ac
 8009044:	200006ac 	.word	0x200006ac
 8009048:	200007b8 	.word	0x200007b8
 800904c:	200007c8 	.word	0x200007c8
 8009050:	200007b4 	.word	0x200007b4
 8009054:	200006b0 	.word	0x200006b0

08009058 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009060:	2300      	movs	r3, #0
 8009062:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d010      	beq.n	800908c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800906a:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <vTaskDelay+0x48>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <vTaskDelay+0x1e>
 8009072:	b672      	cpsid	i
 8009074:	e7fe      	b.n	8009074 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8009076:	f000 f84b 	bl	8009110 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2100      	movs	r1, #0
 800907e:	0018      	movs	r0, r3
 8009080:	f000 fbf2 	bl	8009868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009084:	f000 f850 	bl	8009128 <xTaskResumeAll>
 8009088:	0003      	movs	r3, r0
 800908a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d101      	bne.n	8009096 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8009092:	f000 fcc5 	bl	8009a20 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009096:	46c0      	nop			; (mov r8, r8)
 8009098:	46bd      	mov	sp, r7
 800909a:	b004      	add	sp, #16
 800909c:	bd80      	pop	{r7, pc}
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	200007d4 	.word	0x200007d4

080090a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80090aa:	4913      	ldr	r1, [pc, #76]	; (80090f8 <vTaskStartScheduler+0x54>)
 80090ac:	4813      	ldr	r0, [pc, #76]	; (80090fc <vTaskStartScheduler+0x58>)
 80090ae:	4b14      	ldr	r3, [pc, #80]	; (8009100 <vTaskStartScheduler+0x5c>)
 80090b0:	9301      	str	r3, [sp, #4]
 80090b2:	2300      	movs	r3, #0
 80090b4:	9300      	str	r3, [sp, #0]
 80090b6:	2300      	movs	r3, #0
 80090b8:	2280      	movs	r2, #128	; 0x80
 80090ba:	f7ff fe9f 	bl	8008dfc <xTaskCreate>
 80090be:	0003      	movs	r3, r0
 80090c0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2b01      	cmp	r3, #1
 80090c6:	d10d      	bne.n	80090e4 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80090c8:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090ca:	4b0e      	ldr	r3, [pc, #56]	; (8009104 <vTaskStartScheduler+0x60>)
 80090cc:	2201      	movs	r2, #1
 80090ce:	4252      	negs	r2, r2
 80090d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090d2:	4b0d      	ldr	r3, [pc, #52]	; (8009108 <vTaskStartScheduler+0x64>)
 80090d4:	2201      	movs	r2, #1
 80090d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <vTaskStartScheduler+0x68>)
 80090da:	2200      	movs	r2, #0
 80090dc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090de:	f000 fc7b 	bl	80099d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090e2:	e004      	b.n	80090ee <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	3301      	adds	r3, #1
 80090e8:	d101      	bne.n	80090ee <vTaskStartScheduler+0x4a>
 80090ea:	b672      	cpsid	i
 80090ec:	e7fe      	b.n	80090ec <vTaskStartScheduler+0x48>
}
 80090ee:	46c0      	nop			; (mov r8, r8)
 80090f0:	46bd      	mov	sp, r7
 80090f2:	b002      	add	sp, #8
 80090f4:	bd80      	pop	{r7, pc}
 80090f6:	46c0      	nop			; (mov r8, r8)
 80090f8:	0800e85c 	.word	0x0800e85c
 80090fc:	08009615 	.word	0x08009615
 8009100:	200007d0 	.word	0x200007d0
 8009104:	200007cc 	.word	0x200007cc
 8009108:	200007b8 	.word	0x200007b8
 800910c:	200007b0 	.word	0x200007b0

08009110 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009114:	4b03      	ldr	r3, [pc, #12]	; (8009124 <vTaskSuspendAll+0x14>)
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	4b02      	ldr	r3, [pc, #8]	; (8009124 <vTaskSuspendAll+0x14>)
 800911c:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	46bd      	mov	sp, r7
 8009122:	bd80      	pop	{r7, pc}
 8009124:	200007d4 	.word	0x200007d4

08009128 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b084      	sub	sp, #16
 800912c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009132:	2300      	movs	r3, #0
 8009134:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009136:	4b3a      	ldr	r3, [pc, #232]	; (8009220 <xTaskResumeAll+0xf8>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d101      	bne.n	8009142 <xTaskResumeAll+0x1a>
 800913e:	b672      	cpsid	i
 8009140:	e7fe      	b.n	8009140 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009142:	f000 fc7d 	bl	8009a40 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009146:	4b36      	ldr	r3, [pc, #216]	; (8009220 <xTaskResumeAll+0xf8>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	1e5a      	subs	r2, r3, #1
 800914c:	4b34      	ldr	r3, [pc, #208]	; (8009220 <xTaskResumeAll+0xf8>)
 800914e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009150:	4b33      	ldr	r3, [pc, #204]	; (8009220 <xTaskResumeAll+0xf8>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d15b      	bne.n	8009210 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009158:	4b32      	ldr	r3, [pc, #200]	; (8009224 <xTaskResumeAll+0xfc>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d057      	beq.n	8009210 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009160:	e02f      	b.n	80091c2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009162:	4b31      	ldr	r3, [pc, #196]	; (8009228 <xTaskResumeAll+0x100>)
 8009164:	68db      	ldr	r3, [r3, #12]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	3318      	adds	r3, #24
 800916e:	0018      	movs	r0, r3
 8009170:	f7ff fa6e 	bl	8008650 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	3304      	adds	r3, #4
 8009178:	0018      	movs	r0, r3
 800917a:	f7ff fa69 	bl	8008650 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009182:	4b2a      	ldr	r3, [pc, #168]	; (800922c <xTaskResumeAll+0x104>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d903      	bls.n	8009192 <xTaskResumeAll+0x6a>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800918e:	4b27      	ldr	r3, [pc, #156]	; (800922c <xTaskResumeAll+0x104>)
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009196:	0013      	movs	r3, r2
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	189b      	adds	r3, r3, r2
 800919c:	009b      	lsls	r3, r3, #2
 800919e:	4a24      	ldr	r2, [pc, #144]	; (8009230 <xTaskResumeAll+0x108>)
 80091a0:	189a      	adds	r2, r3, r2
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	3304      	adds	r3, #4
 80091a6:	0019      	movs	r1, r3
 80091a8:	0010      	movs	r0, r2
 80091aa:	f7ff f9f9 	bl	80085a0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091b2:	4b20      	ldr	r3, [pc, #128]	; (8009234 <xTaskResumeAll+0x10c>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d302      	bcc.n	80091c2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80091bc:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <xTaskResumeAll+0x110>)
 80091be:	2201      	movs	r2, #1
 80091c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091c2:	4b19      	ldr	r3, [pc, #100]	; (8009228 <xTaskResumeAll+0x100>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1cb      	bne.n	8009162 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d001      	beq.n	80091d4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80091d0:	f000 fab4 	bl	800973c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80091d4:	4b19      	ldr	r3, [pc, #100]	; (800923c <xTaskResumeAll+0x114>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d00f      	beq.n	8009200 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80091e0:	f000 f82e 	bl	8009240 <xTaskIncrementTick>
 80091e4:	1e03      	subs	r3, r0, #0
 80091e6:	d002      	beq.n	80091ee <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80091e8:	4b13      	ldr	r3, [pc, #76]	; (8009238 <xTaskResumeAll+0x110>)
 80091ea:	2201      	movs	r2, #1
 80091ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	3b01      	subs	r3, #1
 80091f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f2      	bne.n	80091e0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80091fa:	4b10      	ldr	r3, [pc, #64]	; (800923c <xTaskResumeAll+0x114>)
 80091fc:	2200      	movs	r2, #0
 80091fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009200:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <xTaskResumeAll+0x110>)
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b00      	cmp	r3, #0
 8009206:	d003      	beq.n	8009210 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009208:	2301      	movs	r3, #1
 800920a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800920c:	f000 fc08 	bl	8009a20 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009210:	f000 fc28 	bl	8009a64 <vPortExitCritical>

	return xAlreadyYielded;
 8009214:	68bb      	ldr	r3, [r7, #8]
}
 8009216:	0018      	movs	r0, r3
 8009218:	46bd      	mov	sp, r7
 800921a:	b004      	add	sp, #16
 800921c:	bd80      	pop	{r7, pc}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	200007d4 	.word	0x200007d4
 8009224:	200007ac 	.word	0x200007ac
 8009228:	2000076c 	.word	0x2000076c
 800922c:	200007b4 	.word	0x200007b4
 8009230:	200006b0 	.word	0x200006b0
 8009234:	200006ac 	.word	0x200006ac
 8009238:	200007c0 	.word	0x200007c0
 800923c:	200007bc 	.word	0x200007bc

08009240 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b086      	sub	sp, #24
 8009244:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009246:	2300      	movs	r3, #0
 8009248:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800924a:	4b4a      	ldr	r3, [pc, #296]	; (8009374 <xTaskIncrementTick+0x134>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d000      	beq.n	8009254 <xTaskIncrementTick+0x14>
 8009252:	e084      	b.n	800935e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009254:	4b48      	ldr	r3, [pc, #288]	; (8009378 <xTaskIncrementTick+0x138>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3301      	adds	r3, #1
 800925a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800925c:	4b46      	ldr	r3, [pc, #280]	; (8009378 <xTaskIncrementTick+0x138>)
 800925e:	693a      	ldr	r2, [r7, #16]
 8009260:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d117      	bne.n	8009298 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8009268:	4b44      	ldr	r3, [pc, #272]	; (800937c <xTaskIncrementTick+0x13c>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d001      	beq.n	8009276 <xTaskIncrementTick+0x36>
 8009272:	b672      	cpsid	i
 8009274:	e7fe      	b.n	8009274 <xTaskIncrementTick+0x34>
 8009276:	4b41      	ldr	r3, [pc, #260]	; (800937c <xTaskIncrementTick+0x13c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
 800927c:	4b40      	ldr	r3, [pc, #256]	; (8009380 <xTaskIncrementTick+0x140>)
 800927e:	681a      	ldr	r2, [r3, #0]
 8009280:	4b3e      	ldr	r3, [pc, #248]	; (800937c <xTaskIncrementTick+0x13c>)
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	4b3e      	ldr	r3, [pc, #248]	; (8009380 <xTaskIncrementTick+0x140>)
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	4b3e      	ldr	r3, [pc, #248]	; (8009384 <xTaskIncrementTick+0x144>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	1c5a      	adds	r2, r3, #1
 8009290:	4b3c      	ldr	r3, [pc, #240]	; (8009384 <xTaskIncrementTick+0x144>)
 8009292:	601a      	str	r2, [r3, #0]
 8009294:	f000 fa52 	bl	800973c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009298:	4b3b      	ldr	r3, [pc, #236]	; (8009388 <xTaskIncrementTick+0x148>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	693a      	ldr	r2, [r7, #16]
 800929e:	429a      	cmp	r2, r3
 80092a0:	d349      	bcc.n	8009336 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a2:	4b36      	ldr	r3, [pc, #216]	; (800937c <xTaskIncrementTick+0x13c>)
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d104      	bne.n	80092b6 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092ac:	4b36      	ldr	r3, [pc, #216]	; (8009388 <xTaskIncrementTick+0x148>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	4252      	negs	r2, r2
 80092b2:	601a      	str	r2, [r3, #0]
					break;
 80092b4:	e03f      	b.n	8009336 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092b6:	4b31      	ldr	r3, [pc, #196]	; (800937c <xTaskIncrementTick+0x13c>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	68db      	ldr	r3, [r3, #12]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80092c6:	693a      	ldr	r2, [r7, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d203      	bcs.n	80092d6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80092ce:	4b2e      	ldr	r3, [pc, #184]	; (8009388 <xTaskIncrementTick+0x148>)
 80092d0:	687a      	ldr	r2, [r7, #4]
 80092d2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80092d4:	e02f      	b.n	8009336 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	3304      	adds	r3, #4
 80092da:	0018      	movs	r0, r3
 80092dc:	f7ff f9b8 	bl	8008650 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d004      	beq.n	80092f2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	3318      	adds	r3, #24
 80092ec:	0018      	movs	r0, r3
 80092ee:	f7ff f9af 	bl	8008650 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092f2:	68bb      	ldr	r3, [r7, #8]
 80092f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f6:	4b25      	ldr	r3, [pc, #148]	; (800938c <xTaskIncrementTick+0x14c>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d903      	bls.n	8009306 <xTaskIncrementTick+0xc6>
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009302:	4b22      	ldr	r3, [pc, #136]	; (800938c <xTaskIncrementTick+0x14c>)
 8009304:	601a      	str	r2, [r3, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800930a:	0013      	movs	r3, r2
 800930c:	009b      	lsls	r3, r3, #2
 800930e:	189b      	adds	r3, r3, r2
 8009310:	009b      	lsls	r3, r3, #2
 8009312:	4a1f      	ldr	r2, [pc, #124]	; (8009390 <xTaskIncrementTick+0x150>)
 8009314:	189a      	adds	r2, r3, r2
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	3304      	adds	r3, #4
 800931a:	0019      	movs	r1, r3
 800931c:	0010      	movs	r0, r2
 800931e:	f7ff f93f 	bl	80085a0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009326:	4b1b      	ldr	r3, [pc, #108]	; (8009394 <xTaskIncrementTick+0x154>)
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800932c:	429a      	cmp	r2, r3
 800932e:	d3b8      	bcc.n	80092a2 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8009330:	2301      	movs	r3, #1
 8009332:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009334:	e7b5      	b.n	80092a2 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009336:	4b17      	ldr	r3, [pc, #92]	; (8009394 <xTaskIncrementTick+0x154>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800933c:	4914      	ldr	r1, [pc, #80]	; (8009390 <xTaskIncrementTick+0x150>)
 800933e:	0013      	movs	r3, r2
 8009340:	009b      	lsls	r3, r3, #2
 8009342:	189b      	adds	r3, r3, r2
 8009344:	009b      	lsls	r3, r3, #2
 8009346:	585b      	ldr	r3, [r3, r1]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d901      	bls.n	8009350 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800934c:	2301      	movs	r3, #1
 800934e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009350:	4b11      	ldr	r3, [pc, #68]	; (8009398 <xTaskIncrementTick+0x158>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d007      	beq.n	8009368 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8009358:	2301      	movs	r3, #1
 800935a:	617b      	str	r3, [r7, #20]
 800935c:	e004      	b.n	8009368 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <xTaskIncrementTick+0x15c>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	4b0d      	ldr	r3, [pc, #52]	; (800939c <xTaskIncrementTick+0x15c>)
 8009366:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009368:	697b      	ldr	r3, [r7, #20]
}
 800936a:	0018      	movs	r0, r3
 800936c:	46bd      	mov	sp, r7
 800936e:	b006      	add	sp, #24
 8009370:	bd80      	pop	{r7, pc}
 8009372:	46c0      	nop			; (mov r8, r8)
 8009374:	200007d4 	.word	0x200007d4
 8009378:	200007b0 	.word	0x200007b0
 800937c:	20000764 	.word	0x20000764
 8009380:	20000768 	.word	0x20000768
 8009384:	200007c4 	.word	0x200007c4
 8009388:	200007cc 	.word	0x200007cc
 800938c:	200007b4 	.word	0x200007b4
 8009390:	200006b0 	.word	0x200006b0
 8009394:	200006ac 	.word	0x200006ac
 8009398:	200007c0 	.word	0x200007c0
 800939c:	200007bc 	.word	0x200007bc

080093a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80093a6:	4b22      	ldr	r3, [pc, #136]	; (8009430 <vTaskSwitchContext+0x90>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d003      	beq.n	80093b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80093ae:	4b21      	ldr	r3, [pc, #132]	; (8009434 <vTaskSwitchContext+0x94>)
 80093b0:	2201      	movs	r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80093b4:	e037      	b.n	8009426 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80093b6:	4b1f      	ldr	r3, [pc, #124]	; (8009434 <vTaskSwitchContext+0x94>)
 80093b8:	2200      	movs	r2, #0
 80093ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093bc:	4b1e      	ldr	r3, [pc, #120]	; (8009438 <vTaskSwitchContext+0x98>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	607b      	str	r3, [r7, #4]
 80093c2:	e007      	b.n	80093d4 <vTaskSwitchContext+0x34>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d101      	bne.n	80093ce <vTaskSwitchContext+0x2e>
 80093ca:	b672      	cpsid	i
 80093cc:	e7fe      	b.n	80093cc <vTaskSwitchContext+0x2c>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	607b      	str	r3, [r7, #4]
 80093d4:	4919      	ldr	r1, [pc, #100]	; (800943c <vTaskSwitchContext+0x9c>)
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	0013      	movs	r3, r2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	189b      	adds	r3, r3, r2
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	585b      	ldr	r3, [r3, r1]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0ee      	beq.n	80093c4 <vTaskSwitchContext+0x24>
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	0013      	movs	r3, r2
 80093ea:	009b      	lsls	r3, r3, #2
 80093ec:	189b      	adds	r3, r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4a12      	ldr	r2, [pc, #72]	; (800943c <vTaskSwitchContext+0x9c>)
 80093f2:	189b      	adds	r3, r3, r2
 80093f4:	603b      	str	r3, [r7, #0]
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	685a      	ldr	r2, [r3, #4]
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	605a      	str	r2, [r3, #4]
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	685a      	ldr	r2, [r3, #4]
 8009404:	683b      	ldr	r3, [r7, #0]
 8009406:	3308      	adds	r3, #8
 8009408:	429a      	cmp	r2, r3
 800940a:	d104      	bne.n	8009416 <vTaskSwitchContext+0x76>
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	685b      	ldr	r3, [r3, #4]
 8009410:	685a      	ldr	r2, [r3, #4]
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	605a      	str	r2, [r3, #4]
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685b      	ldr	r3, [r3, #4]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	4b08      	ldr	r3, [pc, #32]	; (8009440 <vTaskSwitchContext+0xa0>)
 800941e:	601a      	str	r2, [r3, #0]
 8009420:	4b05      	ldr	r3, [pc, #20]	; (8009438 <vTaskSwitchContext+0x98>)
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	601a      	str	r2, [r3, #0]
}
 8009426:	46c0      	nop			; (mov r8, r8)
 8009428:	46bd      	mov	sp, r7
 800942a:	b002      	add	sp, #8
 800942c:	bd80      	pop	{r7, pc}
 800942e:	46c0      	nop			; (mov r8, r8)
 8009430:	200007d4 	.word	0x200007d4
 8009434:	200007c0 	.word	0x200007c0
 8009438:	200007b4 	.word	0x200007b4
 800943c:	200006b0 	.word	0x200006b0
 8009440:	200006ac 	.word	0x200006ac

08009444 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009444:	b580      	push	{r7, lr}
 8009446:	b082      	sub	sp, #8
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
 800944c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d101      	bne.n	8009458 <vTaskPlaceOnEventList+0x14>
 8009454:	b672      	cpsid	i
 8009456:	e7fe      	b.n	8009456 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009458:	4b08      	ldr	r3, [pc, #32]	; (800947c <vTaskPlaceOnEventList+0x38>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	3318      	adds	r3, #24
 800945e:	001a      	movs	r2, r3
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	0011      	movs	r1, r2
 8009464:	0018      	movs	r0, r3
 8009466:	f7ff f8bd 	bl	80085e4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	2101      	movs	r1, #1
 800946e:	0018      	movs	r0, r3
 8009470:	f000 f9fa 	bl	8009868 <prvAddCurrentTaskToDelayedList>
}
 8009474:	46c0      	nop			; (mov r8, r8)
 8009476:	46bd      	mov	sp, r7
 8009478:	b002      	add	sp, #8
 800947a:	bd80      	pop	{r7, pc}
 800947c:	200006ac 	.word	0x200006ac

08009480 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d101      	bne.n	800949a <xTaskRemoveFromEventList+0x1a>
 8009496:	b672      	cpsid	i
 8009498:	e7fe      	b.n	8009498 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3318      	adds	r3, #24
 800949e:	0018      	movs	r0, r3
 80094a0:	f7ff f8d6 	bl	8008650 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a4:	4b1e      	ldr	r3, [pc, #120]	; (8009520 <xTaskRemoveFromEventList+0xa0>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d11d      	bne.n	80094e8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	3304      	adds	r3, #4
 80094b0:	0018      	movs	r0, r3
 80094b2:	f7ff f8cd 	bl	8008650 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ba:	4b1a      	ldr	r3, [pc, #104]	; (8009524 <xTaskRemoveFromEventList+0xa4>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	429a      	cmp	r2, r3
 80094c0:	d903      	bls.n	80094ca <xTaskRemoveFromEventList+0x4a>
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094c6:	4b17      	ldr	r3, [pc, #92]	; (8009524 <xTaskRemoveFromEventList+0xa4>)
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094ce:	0013      	movs	r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	189b      	adds	r3, r3, r2
 80094d4:	009b      	lsls	r3, r3, #2
 80094d6:	4a14      	ldr	r2, [pc, #80]	; (8009528 <xTaskRemoveFromEventList+0xa8>)
 80094d8:	189a      	adds	r2, r3, r2
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	3304      	adds	r3, #4
 80094de:	0019      	movs	r1, r3
 80094e0:	0010      	movs	r0, r2
 80094e2:	f7ff f85d 	bl	80085a0 <vListInsertEnd>
 80094e6:	e007      	b.n	80094f8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	3318      	adds	r3, #24
 80094ec:	001a      	movs	r2, r3
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <xTaskRemoveFromEventList+0xac>)
 80094f0:	0011      	movs	r1, r2
 80094f2:	0018      	movs	r0, r3
 80094f4:	f7ff f854 	bl	80085a0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094fc:	4b0c      	ldr	r3, [pc, #48]	; (8009530 <xTaskRemoveFromEventList+0xb0>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009502:	429a      	cmp	r2, r3
 8009504:	d905      	bls.n	8009512 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009506:	2301      	movs	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <xTaskRemoveFromEventList+0xb4>)
 800950c:	2201      	movs	r2, #1
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e001      	b.n	8009516 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009512:	2300      	movs	r3, #0
 8009514:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009516:	68fb      	ldr	r3, [r7, #12]
}
 8009518:	0018      	movs	r0, r3
 800951a:	46bd      	mov	sp, r7
 800951c:	b004      	add	sp, #16
 800951e:	bd80      	pop	{r7, pc}
 8009520:	200007d4 	.word	0x200007d4
 8009524:	200007b4 	.word	0x200007b4
 8009528:	200006b0 	.word	0x200006b0
 800952c:	2000076c 	.word	0x2000076c
 8009530:	200006ac 	.word	0x200006ac
 8009534:	200007c0 	.word	0x200007c0

08009538 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b082      	sub	sp, #8
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009540:	4b05      	ldr	r3, [pc, #20]	; (8009558 <vTaskInternalSetTimeOutState+0x20>)
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009548:	4b04      	ldr	r3, [pc, #16]	; (800955c <vTaskInternalSetTimeOutState+0x24>)
 800954a:	681a      	ldr	r2, [r3, #0]
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	605a      	str	r2, [r3, #4]
}
 8009550:	46c0      	nop			; (mov r8, r8)
 8009552:	46bd      	mov	sp, r7
 8009554:	b002      	add	sp, #8
 8009556:	bd80      	pop	{r7, pc}
 8009558:	200007c4 	.word	0x200007c4
 800955c:	200007b0 	.word	0x200007b0

08009560 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009560:	b580      	push	{r7, lr}
 8009562:	b086      	sub	sp, #24
 8009564:	af00      	add	r7, sp, #0
 8009566:	6078      	str	r0, [r7, #4]
 8009568:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <xTaskCheckForTimeOut+0x14>
 8009570:	b672      	cpsid	i
 8009572:	e7fe      	b.n	8009572 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009574:	683b      	ldr	r3, [r7, #0]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d101      	bne.n	800957e <xTaskCheckForTimeOut+0x1e>
 800957a:	b672      	cpsid	i
 800957c:	e7fe      	b.n	800957c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800957e:	f000 fa5f 	bl	8009a40 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009582:	4b1d      	ldr	r3, [pc, #116]	; (80095f8 <xTaskCheckForTimeOut+0x98>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	693a      	ldr	r2, [r7, #16]
 800958e:	1ad3      	subs	r3, r2, r3
 8009590:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	3301      	adds	r3, #1
 8009598:	d102      	bne.n	80095a0 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	e024      	b.n	80095ea <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	4b15      	ldr	r3, [pc, #84]	; (80095fc <xTaskCheckForTimeOut+0x9c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	429a      	cmp	r2, r3
 80095aa:	d007      	beq.n	80095bc <xTaskCheckForTimeOut+0x5c>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	693a      	ldr	r2, [r7, #16]
 80095b2:	429a      	cmp	r2, r3
 80095b4:	d302      	bcc.n	80095bc <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095b6:	2301      	movs	r3, #1
 80095b8:	617b      	str	r3, [r7, #20]
 80095ba:	e016      	b.n	80095ea <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	68fa      	ldr	r2, [r7, #12]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d20c      	bcs.n	80095e0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095c6:	683b      	ldr	r3, [r7, #0]
 80095c8:	681a      	ldr	r2, [r3, #0]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	1ad2      	subs	r2, r2, r3
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	0018      	movs	r0, r3
 80095d6:	f7ff ffaf 	bl	8009538 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095da:	2300      	movs	r3, #0
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e004      	b.n	80095ea <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	2200      	movs	r2, #0
 80095e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80095e6:	2301      	movs	r3, #1
 80095e8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80095ea:	f000 fa3b 	bl	8009a64 <vPortExitCritical>

	return xReturn;
 80095ee:	697b      	ldr	r3, [r7, #20]
}
 80095f0:	0018      	movs	r0, r3
 80095f2:	46bd      	mov	sp, r7
 80095f4:	b006      	add	sp, #24
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	200007b0 	.word	0x200007b0
 80095fc:	200007c4 	.word	0x200007c4

08009600 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009604:	4b02      	ldr	r3, [pc, #8]	; (8009610 <vTaskMissedYield+0x10>)
 8009606:	2201      	movs	r2, #1
 8009608:	601a      	str	r2, [r3, #0]
}
 800960a:	46c0      	nop			; (mov r8, r8)
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	200007c0 	.word	0x200007c0

08009614 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800961c:	f000 f84e 	bl	80096bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009620:	4b03      	ldr	r3, [pc, #12]	; (8009630 <prvIdleTask+0x1c>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2b01      	cmp	r3, #1
 8009626:	d9f9      	bls.n	800961c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009628:	f000 f9fa 	bl	8009a20 <vPortYield>
		prvCheckTasksWaitingTermination();
 800962c:	e7f6      	b.n	800961c <prvIdleTask+0x8>
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	200006b0 	.word	0x200006b0

08009634 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b082      	sub	sp, #8
 8009638:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800963a:	2300      	movs	r3, #0
 800963c:	607b      	str	r3, [r7, #4]
 800963e:	e00c      	b.n	800965a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	0013      	movs	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	189b      	adds	r3, r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4a14      	ldr	r2, [pc, #80]	; (800969c <prvInitialiseTaskLists+0x68>)
 800964c:	189b      	adds	r3, r3, r2
 800964e:	0018      	movs	r0, r3
 8009650:	f7fe ff7d 	bl	800854e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	3301      	adds	r3, #1
 8009658:	607b      	str	r3, [r7, #4]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2b06      	cmp	r3, #6
 800965e:	d9ef      	bls.n	8009640 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009660:	4b0f      	ldr	r3, [pc, #60]	; (80096a0 <prvInitialiseTaskLists+0x6c>)
 8009662:	0018      	movs	r0, r3
 8009664:	f7fe ff73 	bl	800854e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009668:	4b0e      	ldr	r3, [pc, #56]	; (80096a4 <prvInitialiseTaskLists+0x70>)
 800966a:	0018      	movs	r0, r3
 800966c:	f7fe ff6f 	bl	800854e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009670:	4b0d      	ldr	r3, [pc, #52]	; (80096a8 <prvInitialiseTaskLists+0x74>)
 8009672:	0018      	movs	r0, r3
 8009674:	f7fe ff6b 	bl	800854e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009678:	4b0c      	ldr	r3, [pc, #48]	; (80096ac <prvInitialiseTaskLists+0x78>)
 800967a:	0018      	movs	r0, r3
 800967c:	f7fe ff67 	bl	800854e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009680:	4b0b      	ldr	r3, [pc, #44]	; (80096b0 <prvInitialiseTaskLists+0x7c>)
 8009682:	0018      	movs	r0, r3
 8009684:	f7fe ff63 	bl	800854e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009688:	4b0a      	ldr	r3, [pc, #40]	; (80096b4 <prvInitialiseTaskLists+0x80>)
 800968a:	4a05      	ldr	r2, [pc, #20]	; (80096a0 <prvInitialiseTaskLists+0x6c>)
 800968c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800968e:	4b0a      	ldr	r3, [pc, #40]	; (80096b8 <prvInitialiseTaskLists+0x84>)
 8009690:	4a04      	ldr	r2, [pc, #16]	; (80096a4 <prvInitialiseTaskLists+0x70>)
 8009692:	601a      	str	r2, [r3, #0]
}
 8009694:	46c0      	nop			; (mov r8, r8)
 8009696:	46bd      	mov	sp, r7
 8009698:	b002      	add	sp, #8
 800969a:	bd80      	pop	{r7, pc}
 800969c:	200006b0 	.word	0x200006b0
 80096a0:	2000073c 	.word	0x2000073c
 80096a4:	20000750 	.word	0x20000750
 80096a8:	2000076c 	.word	0x2000076c
 80096ac:	20000780 	.word	0x20000780
 80096b0:	20000798 	.word	0x20000798
 80096b4:	20000764 	.word	0x20000764
 80096b8:	20000768 	.word	0x20000768

080096bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096c2:	e01a      	b.n	80096fa <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80096c4:	f000 f9bc 	bl	8009a40 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096c8:	4b10      	ldr	r3, [pc, #64]	; (800970c <prvCheckTasksWaitingTermination+0x50>)
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	3304      	adds	r3, #4
 80096d4:	0018      	movs	r0, r3
 80096d6:	f7fe ffbb 	bl	8008650 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80096da:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <prvCheckTasksWaitingTermination+0x54>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	1e5a      	subs	r2, r3, #1
 80096e0:	4b0b      	ldr	r3, [pc, #44]	; (8009710 <prvCheckTasksWaitingTermination+0x54>)
 80096e2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80096e4:	4b0b      	ldr	r3, [pc, #44]	; (8009714 <prvCheckTasksWaitingTermination+0x58>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	1e5a      	subs	r2, r3, #1
 80096ea:	4b0a      	ldr	r3, [pc, #40]	; (8009714 <prvCheckTasksWaitingTermination+0x58>)
 80096ec:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80096ee:	f000 f9b9 	bl	8009a64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	0018      	movs	r0, r3
 80096f6:	f000 f80f 	bl	8009718 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096fa:	4b06      	ldr	r3, [pc, #24]	; (8009714 <prvCheckTasksWaitingTermination+0x58>)
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e0      	bne.n	80096c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	46c0      	nop			; (mov r8, r8)
 8009706:	46bd      	mov	sp, r7
 8009708:	b002      	add	sp, #8
 800970a:	bd80      	pop	{r7, pc}
 800970c:	20000780 	.word	0x20000780
 8009710:	200007ac 	.word	0x200007ac
 8009714:	20000794 	.word	0x20000794

08009718 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009724:	0018      	movs	r0, r3
 8009726:	f000 facf 	bl	8009cc8 <vPortFree>
			vPortFree( pxTCB );
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	0018      	movs	r0, r3
 800972e:	f000 facb 	bl	8009cc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009732:	46c0      	nop			; (mov r8, r8)
 8009734:	46bd      	mov	sp, r7
 8009736:	b002      	add	sp, #8
 8009738:	bd80      	pop	{r7, pc}
	...

0800973c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b082      	sub	sp, #8
 8009740:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009742:	4b0b      	ldr	r3, [pc, #44]	; (8009770 <prvResetNextTaskUnblockTime+0x34>)
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d104      	bne.n	8009756 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800974c:	4b09      	ldr	r3, [pc, #36]	; (8009774 <prvResetNextTaskUnblockTime+0x38>)
 800974e:	2201      	movs	r2, #1
 8009750:	4252      	negs	r2, r2
 8009752:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009754:	e008      	b.n	8009768 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009756:	4b06      	ldr	r3, [pc, #24]	; (8009770 <prvResetNextTaskUnblockTime+0x34>)
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	68db      	ldr	r3, [r3, #12]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	4b03      	ldr	r3, [pc, #12]	; (8009774 <prvResetNextTaskUnblockTime+0x38>)
 8009766:	601a      	str	r2, [r3, #0]
}
 8009768:	46c0      	nop			; (mov r8, r8)
 800976a:	46bd      	mov	sp, r7
 800976c:	b002      	add	sp, #8
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000764 	.word	0x20000764
 8009774:	200007cc 	.word	0x200007cc

08009778 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009778:	b580      	push	{r7, lr}
 800977a:	b082      	sub	sp, #8
 800977c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800977e:	4b0a      	ldr	r3, [pc, #40]	; (80097a8 <xTaskGetSchedulerState+0x30>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d102      	bne.n	800978c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009786:	2301      	movs	r3, #1
 8009788:	607b      	str	r3, [r7, #4]
 800978a:	e008      	b.n	800979e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800978c:	4b07      	ldr	r3, [pc, #28]	; (80097ac <xTaskGetSchedulerState+0x34>)
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d102      	bne.n	800979a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009794:	2302      	movs	r3, #2
 8009796:	607b      	str	r3, [r7, #4]
 8009798:	e001      	b.n	800979e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800979a:	2300      	movs	r3, #0
 800979c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800979e:	687b      	ldr	r3, [r7, #4]
	}
 80097a0:	0018      	movs	r0, r3
 80097a2:	46bd      	mov	sp, r7
 80097a4:	b002      	add	sp, #8
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	200007b8 	.word	0x200007b8
 80097ac:	200007d4 	.word	0x200007d4

080097b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80097bc:	2300      	movs	r3, #0
 80097be:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d044      	beq.n	8009850 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80097c6:	4b25      	ldr	r3, [pc, #148]	; (800985c <xTaskPriorityDisinherit+0xac>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	68ba      	ldr	r2, [r7, #8]
 80097cc:	429a      	cmp	r2, r3
 80097ce:	d001      	beq.n	80097d4 <xTaskPriorityDisinherit+0x24>
 80097d0:	b672      	cpsid	i
 80097d2:	e7fe      	b.n	80097d2 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d101      	bne.n	80097e0 <xTaskPriorityDisinherit+0x30>
 80097dc:	b672      	cpsid	i
 80097de:	e7fe      	b.n	80097de <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097e4:	1e5a      	subs	r2, r3, #1
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80097ea:	68bb      	ldr	r3, [r7, #8]
 80097ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d02c      	beq.n	8009850 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d128      	bne.n	8009850 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	3304      	adds	r3, #4
 8009802:	0018      	movs	r0, r3
 8009804:	f7fe ff24 	bl	8008650 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009814:	2207      	movs	r2, #7
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009820:	4b0f      	ldr	r3, [pc, #60]	; (8009860 <xTaskPriorityDisinherit+0xb0>)
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	429a      	cmp	r2, r3
 8009826:	d903      	bls.n	8009830 <xTaskPriorityDisinherit+0x80>
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800982c:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <xTaskPriorityDisinherit+0xb0>)
 800982e:	601a      	str	r2, [r3, #0]
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009834:	0013      	movs	r3, r2
 8009836:	009b      	lsls	r3, r3, #2
 8009838:	189b      	adds	r3, r3, r2
 800983a:	009b      	lsls	r3, r3, #2
 800983c:	4a09      	ldr	r2, [pc, #36]	; (8009864 <xTaskPriorityDisinherit+0xb4>)
 800983e:	189a      	adds	r2, r3, r2
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	3304      	adds	r3, #4
 8009844:	0019      	movs	r1, r3
 8009846:	0010      	movs	r0, r2
 8009848:	f7fe feaa 	bl	80085a0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800984c:	2301      	movs	r3, #1
 800984e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009850:	68fb      	ldr	r3, [r7, #12]
	}
 8009852:	0018      	movs	r0, r3
 8009854:	46bd      	mov	sp, r7
 8009856:	b004      	add	sp, #16
 8009858:	bd80      	pop	{r7, pc}
 800985a:	46c0      	nop			; (mov r8, r8)
 800985c:	200006ac 	.word	0x200006ac
 8009860:	200007b4 	.word	0x200007b4
 8009864:	200006b0 	.word	0x200006b0

08009868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b084      	sub	sp, #16
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009872:	4b21      	ldr	r3, [pc, #132]	; (80098f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009878:	4b20      	ldr	r3, [pc, #128]	; (80098fc <prvAddCurrentTaskToDelayedList+0x94>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	3304      	adds	r3, #4
 800987e:	0018      	movs	r0, r3
 8009880:	f7fe fee6 	bl	8008650 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	3301      	adds	r3, #1
 8009888:	d10b      	bne.n	80098a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d008      	beq.n	80098a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009890:	4b1a      	ldr	r3, [pc, #104]	; (80098fc <prvAddCurrentTaskToDelayedList+0x94>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	1d1a      	adds	r2, r3, #4
 8009896:	4b1a      	ldr	r3, [pc, #104]	; (8009900 <prvAddCurrentTaskToDelayedList+0x98>)
 8009898:	0011      	movs	r1, r2
 800989a:	0018      	movs	r0, r3
 800989c:	f7fe fe80 	bl	80085a0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80098a0:	e026      	b.n	80098f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80098a2:	68fa      	ldr	r2, [r7, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	18d3      	adds	r3, r2, r3
 80098a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80098aa:	4b14      	ldr	r3, [pc, #80]	; (80098fc <prvAddCurrentTaskToDelayedList+0x94>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80098b2:	68ba      	ldr	r2, [r7, #8]
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d209      	bcs.n	80098ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ba:	4b12      	ldr	r3, [pc, #72]	; (8009904 <prvAddCurrentTaskToDelayedList+0x9c>)
 80098bc:	681a      	ldr	r2, [r3, #0]
 80098be:	4b0f      	ldr	r3, [pc, #60]	; (80098fc <prvAddCurrentTaskToDelayedList+0x94>)
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	3304      	adds	r3, #4
 80098c4:	0019      	movs	r1, r3
 80098c6:	0010      	movs	r0, r2
 80098c8:	f7fe fe8c 	bl	80085e4 <vListInsert>
}
 80098cc:	e010      	b.n	80098f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098ce:	4b0e      	ldr	r3, [pc, #56]	; (8009908 <prvAddCurrentTaskToDelayedList+0xa0>)
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <prvAddCurrentTaskToDelayedList+0x94>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	3304      	adds	r3, #4
 80098d8:	0019      	movs	r1, r3
 80098da:	0010      	movs	r0, r2
 80098dc:	f7fe fe82 	bl	80085e4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80098e0:	4b0a      	ldr	r3, [pc, #40]	; (800990c <prvAddCurrentTaskToDelayedList+0xa4>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68ba      	ldr	r2, [r7, #8]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d202      	bcs.n	80098f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80098ea:	4b08      	ldr	r3, [pc, #32]	; (800990c <prvAddCurrentTaskToDelayedList+0xa4>)
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	601a      	str	r2, [r3, #0]
}
 80098f0:	46c0      	nop			; (mov r8, r8)
 80098f2:	46bd      	mov	sp, r7
 80098f4:	b004      	add	sp, #16
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	200007b0 	.word	0x200007b0
 80098fc:	200006ac 	.word	0x200006ac
 8009900:	20000798 	.word	0x20000798
 8009904:	20000768 	.word	0x20000768
 8009908:	20000764 	.word	0x20000764
 800990c:	200007cc 	.word	0x200007cc

08009910 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b084      	sub	sp, #16
 8009914:	af00      	add	r7, sp, #0
 8009916:	60f8      	str	r0, [r7, #12]
 8009918:	60b9      	str	r1, [r7, #8]
 800991a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	3b04      	subs	r3, #4
 8009920:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2280      	movs	r2, #128	; 0x80
 8009926:	0452      	lsls	r2, r2, #17
 8009928:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b04      	subs	r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009930:	68ba      	ldr	r2, [r7, #8]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	3b04      	subs	r3, #4
 800993a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800993c:	4a08      	ldr	r2, [pc, #32]	; (8009960 <pxPortInitialiseStack+0x50>)
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3b14      	subs	r3, #20
 8009946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	3b20      	subs	r3, #32
 8009952:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009954:	68fb      	ldr	r3, [r7, #12]
}
 8009956:	0018      	movs	r0, r3
 8009958:	46bd      	mov	sp, r7
 800995a:	b004      	add	sp, #16
 800995c:	bd80      	pop	{r7, pc}
 800995e:	46c0      	nop			; (mov r8, r8)
 8009960:	08009965 	.word	0x08009965

08009964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800996a:	2300      	movs	r3, #0
 800996c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800996e:	4b08      	ldr	r3, [pc, #32]	; (8009990 <prvTaskExitError+0x2c>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	3301      	adds	r3, #1
 8009974:	d001      	beq.n	800997a <prvTaskExitError+0x16>
 8009976:	b672      	cpsid	i
 8009978:	e7fe      	b.n	8009978 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800997a:	b672      	cpsid	i
	while( ulDummy == 0 )
 800997c:	46c0      	nop			; (mov r8, r8)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d0fc      	beq.n	800997e <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009984:	46c0      	nop			; (mov r8, r8)
 8009986:	46c0      	nop			; (mov r8, r8)
 8009988:	46bd      	mov	sp, r7
 800998a:	b002      	add	sp, #8
 800998c:	bd80      	pop	{r7, pc}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	2000003c 	.word	0x2000003c

08009994 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009998:	46c0      	nop			; (mov r8, r8)
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
	...

080099a0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80099a0:	4a0b      	ldr	r2, [pc, #44]	; (80099d0 <pxCurrentTCBConst2>)
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	6818      	ldr	r0, [r3, #0]
 80099a6:	3020      	adds	r0, #32
 80099a8:	f380 8809 	msr	PSP, r0
 80099ac:	2002      	movs	r0, #2
 80099ae:	f380 8814 	msr	CONTROL, r0
 80099b2:	f3bf 8f6f 	isb	sy
 80099b6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80099b8:	46ae      	mov	lr, r5
 80099ba:	bc08      	pop	{r3}
 80099bc:	bc04      	pop	{r2}
 80099be:	b662      	cpsie	i
 80099c0:	4718      	bx	r3
 80099c2:	46c0      	nop			; (mov r8, r8)
 80099c4:	46c0      	nop			; (mov r8, r8)
 80099c6:	46c0      	nop			; (mov r8, r8)
 80099c8:	46c0      	nop			; (mov r8, r8)
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	46c0      	nop			; (mov r8, r8)
 80099ce:	46c0      	nop			; (mov r8, r8)

080099d0 <pxCurrentTCBConst2>:
 80099d0:	200006ac 	.word	0x200006ac
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80099d4:	46c0      	nop			; (mov r8, r8)
 80099d6:	46c0      	nop			; (mov r8, r8)

080099d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099dc:	4b0e      	ldr	r3, [pc, #56]	; (8009a18 <xPortStartScheduler+0x40>)
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <xPortStartScheduler+0x40>)
 80099e2:	21ff      	movs	r1, #255	; 0xff
 80099e4:	0409      	lsls	r1, r1, #16
 80099e6:	430a      	orrs	r2, r1
 80099e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099ea:	4b0b      	ldr	r3, [pc, #44]	; (8009a18 <xPortStartScheduler+0x40>)
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	4b0a      	ldr	r3, [pc, #40]	; (8009a18 <xPortStartScheduler+0x40>)
 80099f0:	21ff      	movs	r1, #255	; 0xff
 80099f2:	0609      	lsls	r1, r1, #24
 80099f4:	430a      	orrs	r2, r1
 80099f6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099f8:	f000 f898 	bl	8009b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099fc:	4b07      	ldr	r3, [pc, #28]	; (8009a1c <xPortStartScheduler+0x44>)
 80099fe:	2200      	movs	r2, #0
 8009a00:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009a02:	f7ff ffcd 	bl	80099a0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a06:	f7ff fccb 	bl	80093a0 <vTaskSwitchContext>
	prvTaskExitError();
 8009a0a:	f7ff ffab 	bl	8009964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	0018      	movs	r0, r3
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	46c0      	nop			; (mov r8, r8)
 8009a18:	e000ed20 	.word	0xe000ed20
 8009a1c:	2000003c 	.word	0x2000003c

08009a20 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <vPortYield+0x1c>)
 8009a26:	2280      	movs	r2, #128	; 0x80
 8009a28:	0552      	lsls	r2, r2, #21
 8009a2a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8009a2c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009a30:	f3bf 8f6f 	isb	sy
}
 8009a34:	46c0      	nop			; (mov r8, r8)
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	46c0      	nop			; (mov r8, r8)
 8009a3c:	e000ed04 	.word	0xe000ed04

08009a40 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8009a44:	b672      	cpsid	i
	uxCriticalNesting++;
 8009a46:	4b06      	ldr	r3, [pc, #24]	; (8009a60 <vPortEnterCritical+0x20>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	1c5a      	adds	r2, r3, #1
 8009a4c:	4b04      	ldr	r3, [pc, #16]	; (8009a60 <vPortEnterCritical+0x20>)
 8009a4e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009a50:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009a54:	f3bf 8f6f 	isb	sy
}
 8009a58:	46c0      	nop			; (mov r8, r8)
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	46c0      	nop			; (mov r8, r8)
 8009a60:	2000003c 	.word	0x2000003c

08009a64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a68:	4b09      	ldr	r3, [pc, #36]	; (8009a90 <vPortExitCritical+0x2c>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d101      	bne.n	8009a74 <vPortExitCritical+0x10>
 8009a70:	b672      	cpsid	i
 8009a72:	e7fe      	b.n	8009a72 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8009a74:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <vPortExitCritical+0x2c>)
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	1e5a      	subs	r2, r3, #1
 8009a7a:	4b05      	ldr	r3, [pc, #20]	; (8009a90 <vPortExitCritical+0x2c>)
 8009a7c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8009a7e:	4b04      	ldr	r3, [pc, #16]	; (8009a90 <vPortExitCritical+0x2c>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d100      	bne.n	8009a88 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8009a86:	b662      	cpsie	i
	}
}
 8009a88:	46c0      	nop			; (mov r8, r8)
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	46c0      	nop			; (mov r8, r8)
 8009a90:	2000003c 	.word	0x2000003c

08009a94 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009a94:	f3ef 8010 	mrs	r0, PRIMASK
 8009a98:	b672      	cpsid	i
 8009a9a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009a9c:	46c0      	nop			; (mov r8, r8)
 8009a9e:	0018      	movs	r0, r3

08009aa0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009aa0:	f380 8810 	msr	PRIMASK, r0
 8009aa4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009aa6:	46c0      	nop			; (mov r8, r8)
	...

08009ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ab0:	f3ef 8009 	mrs	r0, PSP
 8009ab4:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <pxCurrentTCBConst>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	3820      	subs	r0, #32
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009abe:	4644      	mov	r4, r8
 8009ac0:	464d      	mov	r5, r9
 8009ac2:	4656      	mov	r6, sl
 8009ac4:	465f      	mov	r7, fp
 8009ac6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009ac8:	b508      	push	{r3, lr}
 8009aca:	b672      	cpsid	i
 8009acc:	f7ff fc68 	bl	80093a0 <vTaskSwitchContext>
 8009ad0:	b662      	cpsie	i
 8009ad2:	bc0c      	pop	{r2, r3}
 8009ad4:	6811      	ldr	r1, [r2, #0]
 8009ad6:	6808      	ldr	r0, [r1, #0]
 8009ad8:	3010      	adds	r0, #16
 8009ada:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009adc:	46a0      	mov	r8, r4
 8009ade:	46a9      	mov	r9, r5
 8009ae0:	46b2      	mov	sl, r6
 8009ae2:	46bb      	mov	fp, r7
 8009ae4:	f380 8809 	msr	PSP, r0
 8009ae8:	3820      	subs	r0, #32
 8009aea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009aec:	4718      	bx	r3
 8009aee:	46c0      	nop			; (mov r8, r8)

08009af0 <pxCurrentTCBConst>:
 8009af0:	200006ac 	.word	0x200006ac
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009af4:	46c0      	nop			; (mov r8, r8)
 8009af6:	46c0      	nop			; (mov r8, r8)

08009af8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009afe:	f7ff ffc9 	bl	8009a94 <ulSetInterruptMaskFromISR>
 8009b02:	0003      	movs	r3, r0
 8009b04:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b06:	f7ff fb9b 	bl	8009240 <xTaskIncrementTick>
 8009b0a:	1e03      	subs	r3, r0, #0
 8009b0c:	d003      	beq.n	8009b16 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b0e:	4b06      	ldr	r3, [pc, #24]	; (8009b28 <xPortSysTickHandler+0x30>)
 8009b10:	2280      	movs	r2, #128	; 0x80
 8009b12:	0552      	lsls	r2, r2, #21
 8009b14:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	0018      	movs	r0, r3
 8009b1a:	f7ff ffc1 	bl	8009aa0 <vClearInterruptMaskFromISR>
}
 8009b1e:	46c0      	nop			; (mov r8, r8)
 8009b20:	46bd      	mov	sp, r7
 8009b22:	b002      	add	sp, #8
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	46c0      	nop			; (mov r8, r8)
 8009b28:	e000ed04 	.word	0xe000ed04

08009b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b30:	4b0b      	ldr	r3, [pc, #44]	; (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b32:	2200      	movs	r2, #0
 8009b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b36:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <vPortSetupTimerInterrupt+0x38>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b3c:	4b0a      	ldr	r3, [pc, #40]	; (8009b68 <vPortSetupTimerInterrupt+0x3c>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	22fa      	movs	r2, #250	; 0xfa
 8009b42:	0091      	lsls	r1, r2, #2
 8009b44:	0018      	movs	r0, r3
 8009b46:	f7f6 fafb 	bl	8000140 <__udivsi3>
 8009b4a:	0003      	movs	r3, r0
 8009b4c:	001a      	movs	r2, r3
 8009b4e:	4b07      	ldr	r3, [pc, #28]	; (8009b6c <vPortSetupTimerInterrupt+0x40>)
 8009b50:	3a01      	subs	r2, #1
 8009b52:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <vPortSetupTimerInterrupt+0x34>)
 8009b56:	2207      	movs	r2, #7
 8009b58:	601a      	str	r2, [r3, #0]
}
 8009b5a:	46c0      	nop			; (mov r8, r8)
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	e000e010 	.word	0xe000e010
 8009b64:	e000e018 	.word	0xe000e018
 8009b68:	20000000 	.word	0x20000000
 8009b6c:	e000e014 	.word	0xe000e014

08009b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b086      	sub	sp, #24
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009b7c:	f7ff fac8 	bl	8009110 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009b80:	4b4b      	ldr	r3, [pc, #300]	; (8009cb0 <pvPortMalloc+0x140>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d101      	bne.n	8009b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009b88:	f000 f8ec 	bl	8009d64 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009b8c:	4b49      	ldr	r3, [pc, #292]	; (8009cb4 <pvPortMalloc+0x144>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4013      	ands	r3, r2
 8009b94:	d000      	beq.n	8009b98 <pvPortMalloc+0x28>
 8009b96:	e07e      	b.n	8009c96 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d012      	beq.n	8009bc4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	189b      	adds	r3, r3, r2
 8009ba4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2207      	movs	r2, #7
 8009baa:	4013      	ands	r3, r2
 8009bac:	d00a      	beq.n	8009bc4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2207      	movs	r2, #7
 8009bb2:	4393      	bics	r3, r2
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2207      	movs	r2, #7
 8009bbc:	4013      	ands	r3, r2
 8009bbe:	d001      	beq.n	8009bc4 <pvPortMalloc+0x54>
 8009bc0:	b672      	cpsid	i
 8009bc2:	e7fe      	b.n	8009bc2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d065      	beq.n	8009c96 <pvPortMalloc+0x126>
 8009bca:	4b3b      	ldr	r3, [pc, #236]	; (8009cb8 <pvPortMalloc+0x148>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	429a      	cmp	r2, r3
 8009bd2:	d860      	bhi.n	8009c96 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009bd4:	4b39      	ldr	r3, [pc, #228]	; (8009cbc <pvPortMalloc+0x14c>)
 8009bd6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009bd8:	4b38      	ldr	r3, [pc, #224]	; (8009cbc <pvPortMalloc+0x14c>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bde:	e004      	b.n	8009bea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	685b      	ldr	r3, [r3, #4]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	429a      	cmp	r2, r3
 8009bf2:	d903      	bls.n	8009bfc <pvPortMalloc+0x8c>
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d1f1      	bne.n	8009be0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009bfc:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <pvPortMalloc+0x140>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	697a      	ldr	r2, [r7, #20]
 8009c02:	429a      	cmp	r2, r3
 8009c04:	d047      	beq.n	8009c96 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	2208      	movs	r2, #8
 8009c0c:	189b      	adds	r3, r3, r2
 8009c0e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009c18:	697b      	ldr	r3, [r7, #20]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	1ad2      	subs	r2, r2, r3
 8009c20:	2308      	movs	r3, #8
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d916      	bls.n	8009c56 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009c28:	697a      	ldr	r2, [r7, #20]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	18d3      	adds	r3, r2, r3
 8009c2e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	2207      	movs	r2, #7
 8009c34:	4013      	ands	r3, r2
 8009c36:	d001      	beq.n	8009c3c <pvPortMalloc+0xcc>
 8009c38:	b672      	cpsid	i
 8009c3a:	e7fe      	b.n	8009c3a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009c3c:	697b      	ldr	r3, [r7, #20]
 8009c3e:	685a      	ldr	r2, [r3, #4]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	1ad2      	subs	r2, r2, r3
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	0018      	movs	r0, r3
 8009c52:	f000 f8e7 	bl	8009e24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009c56:	4b18      	ldr	r3, [pc, #96]	; (8009cb8 <pvPortMalloc+0x148>)
 8009c58:	681a      	ldr	r2, [r3, #0]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	1ad2      	subs	r2, r2, r3
 8009c60:	4b15      	ldr	r3, [pc, #84]	; (8009cb8 <pvPortMalloc+0x148>)
 8009c62:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009c64:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <pvPortMalloc+0x148>)
 8009c66:	681a      	ldr	r2, [r3, #0]
 8009c68:	4b15      	ldr	r3, [pc, #84]	; (8009cc0 <pvPortMalloc+0x150>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	429a      	cmp	r2, r3
 8009c6e:	d203      	bcs.n	8009c78 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009c70:	4b11      	ldr	r3, [pc, #68]	; (8009cb8 <pvPortMalloc+0x148>)
 8009c72:	681a      	ldr	r2, [r3, #0]
 8009c74:	4b12      	ldr	r3, [pc, #72]	; (8009cc0 <pvPortMalloc+0x150>)
 8009c76:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009c78:	697b      	ldr	r3, [r7, #20]
 8009c7a:	685a      	ldr	r2, [r3, #4]
 8009c7c:	4b0d      	ldr	r3, [pc, #52]	; (8009cb4 <pvPortMalloc+0x144>)
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009c8c:	4b0d      	ldr	r3, [pc, #52]	; (8009cc4 <pvPortMalloc+0x154>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	4b0c      	ldr	r3, [pc, #48]	; (8009cc4 <pvPortMalloc+0x154>)
 8009c94:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009c96:	f7ff fa47 	bl	8009128 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2207      	movs	r2, #7
 8009c9e:	4013      	ands	r3, r2
 8009ca0:	d001      	beq.n	8009ca6 <pvPortMalloc+0x136>
 8009ca2:	b672      	cpsid	i
 8009ca4:	e7fe      	b.n	8009ca4 <pvPortMalloc+0x134>
	return pvReturn;
 8009ca6:	68fb      	ldr	r3, [r7, #12]
}
 8009ca8:	0018      	movs	r0, r3
 8009caa:	46bd      	mov	sp, r7
 8009cac:	b006      	add	sp, #24
 8009cae:	bd80      	pop	{r7, pc}
 8009cb0:	20007fe0 	.word	0x20007fe0
 8009cb4:	20007ff4 	.word	0x20007ff4
 8009cb8:	20007fe4 	.word	0x20007fe4
 8009cbc:	20007fd8 	.word	0x20007fd8
 8009cc0:	20007fe8 	.word	0x20007fe8
 8009cc4:	20007fec 	.word	0x20007fec

08009cc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b084      	sub	sp, #16
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d03a      	beq.n	8009d50 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009cda:	2308      	movs	r3, #8
 8009cdc:	425b      	negs	r3, r3
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	18d3      	adds	r3, r2, r3
 8009ce2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	685a      	ldr	r2, [r3, #4]
 8009cec:	4b1a      	ldr	r3, [pc, #104]	; (8009d58 <vPortFree+0x90>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	d101      	bne.n	8009cf8 <vPortFree+0x30>
 8009cf4:	b672      	cpsid	i
 8009cf6:	e7fe      	b.n	8009cf6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d001      	beq.n	8009d04 <vPortFree+0x3c>
 8009d00:	b672      	cpsid	i
 8009d02:	e7fe      	b.n	8009d02 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	685a      	ldr	r2, [r3, #4]
 8009d08:	4b13      	ldr	r3, [pc, #76]	; (8009d58 <vPortFree+0x90>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4013      	ands	r3, r2
 8009d0e:	d01f      	beq.n	8009d50 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d11b      	bne.n	8009d50 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	4b0e      	ldr	r3, [pc, #56]	; (8009d58 <vPortFree+0x90>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	43db      	mvns	r3, r3
 8009d22:	401a      	ands	r2, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009d28:	f7ff f9f2 	bl	8009110 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	685a      	ldr	r2, [r3, #4]
 8009d30:	4b0a      	ldr	r3, [pc, #40]	; (8009d5c <vPortFree+0x94>)
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	18d2      	adds	r2, r2, r3
 8009d36:	4b09      	ldr	r3, [pc, #36]	; (8009d5c <vPortFree+0x94>)
 8009d38:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009d3a:	68bb      	ldr	r3, [r7, #8]
 8009d3c:	0018      	movs	r0, r3
 8009d3e:	f000 f871 	bl	8009e24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009d42:	4b07      	ldr	r3, [pc, #28]	; (8009d60 <vPortFree+0x98>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <vPortFree+0x98>)
 8009d4a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8009d4c:	f7ff f9ec 	bl	8009128 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009d50:	46c0      	nop			; (mov r8, r8)
 8009d52:	46bd      	mov	sp, r7
 8009d54:	b004      	add	sp, #16
 8009d56:	bd80      	pop	{r7, pc}
 8009d58:	20007ff4 	.word	0x20007ff4
 8009d5c:	20007fe4 	.word	0x20007fe4
 8009d60:	20007ff0 	.word	0x20007ff0

08009d64 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009d6a:	23f0      	movs	r3, #240	; 0xf0
 8009d6c:	01db      	lsls	r3, r3, #7
 8009d6e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009d70:	4b26      	ldr	r3, [pc, #152]	; (8009e0c <prvHeapInit+0xa8>)
 8009d72:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	2207      	movs	r2, #7
 8009d78:	4013      	ands	r3, r2
 8009d7a:	d00c      	beq.n	8009d96 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	3307      	adds	r3, #7
 8009d80:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	2207      	movs	r2, #7
 8009d86:	4393      	bics	r3, r2
 8009d88:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009d8a:	68ba      	ldr	r2, [r7, #8]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	1ad2      	subs	r2, r2, r3
 8009d90:	4b1e      	ldr	r3, [pc, #120]	; (8009e0c <prvHeapInit+0xa8>)
 8009d92:	18d3      	adds	r3, r2, r3
 8009d94:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009d9a:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <prvHeapInit+0xac>)
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009da0:	4b1b      	ldr	r3, [pc, #108]	; (8009e10 <prvHeapInit+0xac>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	18d3      	adds	r3, r2, r3
 8009dac:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009dae:	2208      	movs	r2, #8
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2207      	movs	r2, #7
 8009dba:	4393      	bics	r3, r2
 8009dbc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4b14      	ldr	r3, [pc, #80]	; (8009e14 <prvHeapInit+0xb0>)
 8009dc2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009dc4:	4b13      	ldr	r3, [pc, #76]	; (8009e14 <prvHeapInit+0xb0>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009dcc:	4b11      	ldr	r3, [pc, #68]	; (8009e14 <prvHeapInit+0xb0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	1ad2      	subs	r2, r2, r3
 8009dde:	683b      	ldr	r3, [r7, #0]
 8009de0:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009de2:	4b0c      	ldr	r3, [pc, #48]	; (8009e14 <prvHeapInit+0xb0>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	685a      	ldr	r2, [r3, #4]
 8009dee:	4b0a      	ldr	r3, [pc, #40]	; (8009e18 <prvHeapInit+0xb4>)
 8009df0:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	685a      	ldr	r2, [r3, #4]
 8009df6:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <prvHeapInit+0xb8>)
 8009df8:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <prvHeapInit+0xbc>)
 8009dfc:	2280      	movs	r2, #128	; 0x80
 8009dfe:	0612      	lsls	r2, r2, #24
 8009e00:	601a      	str	r2, [r3, #0]
}
 8009e02:	46c0      	nop			; (mov r8, r8)
 8009e04:	46bd      	mov	sp, r7
 8009e06:	b004      	add	sp, #16
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	46c0      	nop			; (mov r8, r8)
 8009e0c:	200007d8 	.word	0x200007d8
 8009e10:	20007fd8 	.word	0x20007fd8
 8009e14:	20007fe0 	.word	0x20007fe0
 8009e18:	20007fe8 	.word	0x20007fe8
 8009e1c:	20007fe4 	.word	0x20007fe4
 8009e20:	20007ff4 	.word	0x20007ff4

08009e24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b084      	sub	sp, #16
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009e2c:	4b27      	ldr	r3, [pc, #156]	; (8009ecc <prvInsertBlockIntoFreeList+0xa8>)
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	e002      	b.n	8009e38 <prvInsertBlockIntoFreeList+0x14>
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	60fb      	str	r3, [r7, #12]
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	429a      	cmp	r2, r3
 8009e40:	d8f7      	bhi.n	8009e32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	685b      	ldr	r3, [r3, #4]
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	18d3      	adds	r3, r2, r3
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d108      	bne.n	8009e66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	18d2      	adds	r2, r2, r3
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	18d2      	adds	r2, r2, r3
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	d118      	bne.n	8009eac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	681a      	ldr	r2, [r3, #0]
 8009e7e:	4b14      	ldr	r3, [pc, #80]	; (8009ed0 <prvInsertBlockIntoFreeList+0xac>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d00d      	beq.n	8009ea2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	18d2      	adds	r2, r2, r3
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	e008      	b.n	8009eb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ea2:	4b0b      	ldr	r3, [pc, #44]	; (8009ed0 <prvInsertBlockIntoFreeList+0xac>)
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	601a      	str	r2, [r3, #0]
 8009eaa:	e003      	b.n	8009eb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681a      	ldr	r2, [r3, #0]
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009eb4:	68fa      	ldr	r2, [r7, #12]
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d002      	beq.n	8009ec2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ec2:	46c0      	nop			; (mov r8, r8)
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	b004      	add	sp, #16
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	46c0      	nop			; (mov r8, r8)
 8009ecc:	20007fd8 	.word	0x20007fd8
 8009ed0:	20007fe0 	.word	0x20007fe0

08009ed4 <__cvt>:
 8009ed4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ed6:	001e      	movs	r6, r3
 8009ed8:	2300      	movs	r3, #0
 8009eda:	0014      	movs	r4, r2
 8009edc:	b08b      	sub	sp, #44	; 0x2c
 8009ede:	429e      	cmp	r6, r3
 8009ee0:	da04      	bge.n	8009eec <__cvt+0x18>
 8009ee2:	2180      	movs	r1, #128	; 0x80
 8009ee4:	0609      	lsls	r1, r1, #24
 8009ee6:	1873      	adds	r3, r6, r1
 8009ee8:	001e      	movs	r6, r3
 8009eea:	232d      	movs	r3, #45	; 0x2d
 8009eec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009eee:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8009ef0:	7013      	strb	r3, [r2, #0]
 8009ef2:	2320      	movs	r3, #32
 8009ef4:	2203      	movs	r2, #3
 8009ef6:	439f      	bics	r7, r3
 8009ef8:	2f46      	cmp	r7, #70	; 0x46
 8009efa:	d007      	beq.n	8009f0c <__cvt+0x38>
 8009efc:	003b      	movs	r3, r7
 8009efe:	3b45      	subs	r3, #69	; 0x45
 8009f00:	4259      	negs	r1, r3
 8009f02:	414b      	adcs	r3, r1
 8009f04:	9910      	ldr	r1, [sp, #64]	; 0x40
 8009f06:	3a01      	subs	r2, #1
 8009f08:	18cb      	adds	r3, r1, r3
 8009f0a:	9310      	str	r3, [sp, #64]	; 0x40
 8009f0c:	ab09      	add	r3, sp, #36	; 0x24
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	ab08      	add	r3, sp, #32
 8009f12:	9303      	str	r3, [sp, #12]
 8009f14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f16:	9200      	str	r2, [sp, #0]
 8009f18:	9302      	str	r3, [sp, #8]
 8009f1a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f1c:	0022      	movs	r2, r4
 8009f1e:	9301      	str	r3, [sp, #4]
 8009f20:	0033      	movs	r3, r6
 8009f22:	f001 f8bd 	bl	800b0a0 <_dtoa_r>
 8009f26:	0005      	movs	r5, r0
 8009f28:	2f47      	cmp	r7, #71	; 0x47
 8009f2a:	d102      	bne.n	8009f32 <__cvt+0x5e>
 8009f2c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009f2e:	07db      	lsls	r3, r3, #31
 8009f30:	d528      	bpl.n	8009f84 <__cvt+0xb0>
 8009f32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009f34:	18eb      	adds	r3, r5, r3
 8009f36:	9307      	str	r3, [sp, #28]
 8009f38:	2f46      	cmp	r7, #70	; 0x46
 8009f3a:	d114      	bne.n	8009f66 <__cvt+0x92>
 8009f3c:	782b      	ldrb	r3, [r5, #0]
 8009f3e:	2b30      	cmp	r3, #48	; 0x30
 8009f40:	d10c      	bne.n	8009f5c <__cvt+0x88>
 8009f42:	2200      	movs	r2, #0
 8009f44:	2300      	movs	r3, #0
 8009f46:	0020      	movs	r0, r4
 8009f48:	0031      	movs	r1, r6
 8009f4a:	f7f6 fa7f 	bl	800044c <__aeabi_dcmpeq>
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d104      	bne.n	8009f5c <__cvt+0x88>
 8009f52:	2301      	movs	r3, #1
 8009f54:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009f56:	1a9b      	subs	r3, r3, r2
 8009f58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009f5e:	9a07      	ldr	r2, [sp, #28]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	18d3      	adds	r3, r2, r3
 8009f64:	9307      	str	r3, [sp, #28]
 8009f66:	2200      	movs	r2, #0
 8009f68:	2300      	movs	r3, #0
 8009f6a:	0020      	movs	r0, r4
 8009f6c:	0031      	movs	r1, r6
 8009f6e:	f7f6 fa6d 	bl	800044c <__aeabi_dcmpeq>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d001      	beq.n	8009f7a <__cvt+0xa6>
 8009f76:	9b07      	ldr	r3, [sp, #28]
 8009f78:	9309      	str	r3, [sp, #36]	; 0x24
 8009f7a:	2230      	movs	r2, #48	; 0x30
 8009f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f7e:	9907      	ldr	r1, [sp, #28]
 8009f80:	428b      	cmp	r3, r1
 8009f82:	d306      	bcc.n	8009f92 <__cvt+0xbe>
 8009f84:	0028      	movs	r0, r5
 8009f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f88:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009f8a:	1b5b      	subs	r3, r3, r5
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	b00b      	add	sp, #44	; 0x2c
 8009f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f92:	1c59      	adds	r1, r3, #1
 8009f94:	9109      	str	r1, [sp, #36]	; 0x24
 8009f96:	701a      	strb	r2, [r3, #0]
 8009f98:	e7f0      	b.n	8009f7c <__cvt+0xa8>

08009f9a <__exponent>:
 8009f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f9c:	1c83      	adds	r3, r0, #2
 8009f9e:	b087      	sub	sp, #28
 8009fa0:	9303      	str	r3, [sp, #12]
 8009fa2:	0005      	movs	r5, r0
 8009fa4:	000c      	movs	r4, r1
 8009fa6:	232b      	movs	r3, #43	; 0x2b
 8009fa8:	7002      	strb	r2, [r0, #0]
 8009faa:	2900      	cmp	r1, #0
 8009fac:	da01      	bge.n	8009fb2 <__exponent+0x18>
 8009fae:	424c      	negs	r4, r1
 8009fb0:	3302      	adds	r3, #2
 8009fb2:	706b      	strb	r3, [r5, #1]
 8009fb4:	2c09      	cmp	r4, #9
 8009fb6:	dd2f      	ble.n	800a018 <__exponent+0x7e>
 8009fb8:	270a      	movs	r7, #10
 8009fba:	ab04      	add	r3, sp, #16
 8009fbc:	1dde      	adds	r6, r3, #7
 8009fbe:	0020      	movs	r0, r4
 8009fc0:	0039      	movs	r1, r7
 8009fc2:	9601      	str	r6, [sp, #4]
 8009fc4:	f7f6 fa2c 	bl	8000420 <__aeabi_idivmod>
 8009fc8:	3e01      	subs	r6, #1
 8009fca:	3130      	adds	r1, #48	; 0x30
 8009fcc:	0020      	movs	r0, r4
 8009fce:	7031      	strb	r1, [r6, #0]
 8009fd0:	0039      	movs	r1, r7
 8009fd2:	9402      	str	r4, [sp, #8]
 8009fd4:	f7f6 f93e 	bl	8000254 <__divsi3>
 8009fd8:	9b02      	ldr	r3, [sp, #8]
 8009fda:	0004      	movs	r4, r0
 8009fdc:	2b63      	cmp	r3, #99	; 0x63
 8009fde:	dcee      	bgt.n	8009fbe <__exponent+0x24>
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	3430      	adds	r4, #48	; 0x30
 8009fe4:	1e9a      	subs	r2, r3, #2
 8009fe6:	0013      	movs	r3, r2
 8009fe8:	9903      	ldr	r1, [sp, #12]
 8009fea:	7014      	strb	r4, [r2, #0]
 8009fec:	a804      	add	r0, sp, #16
 8009fee:	3007      	adds	r0, #7
 8009ff0:	4298      	cmp	r0, r3
 8009ff2:	d80c      	bhi.n	800a00e <__exponent+0x74>
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	4282      	cmp	r2, r0
 8009ff8:	d804      	bhi.n	800a004 <__exponent+0x6a>
 8009ffa:	aa04      	add	r2, sp, #16
 8009ffc:	3309      	adds	r3, #9
 8009ffe:	189b      	adds	r3, r3, r2
 800a000:	9a01      	ldr	r2, [sp, #4]
 800a002:	1a9b      	subs	r3, r3, r2
 800a004:	9a03      	ldr	r2, [sp, #12]
 800a006:	18d3      	adds	r3, r2, r3
 800a008:	1b58      	subs	r0, r3, r5
 800a00a:	b007      	add	sp, #28
 800a00c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00e:	7818      	ldrb	r0, [r3, #0]
 800a010:	3301      	adds	r3, #1
 800a012:	7008      	strb	r0, [r1, #0]
 800a014:	3101      	adds	r1, #1
 800a016:	e7e9      	b.n	8009fec <__exponent+0x52>
 800a018:	2330      	movs	r3, #48	; 0x30
 800a01a:	3430      	adds	r4, #48	; 0x30
 800a01c:	70ab      	strb	r3, [r5, #2]
 800a01e:	70ec      	strb	r4, [r5, #3]
 800a020:	1d2b      	adds	r3, r5, #4
 800a022:	e7f1      	b.n	800a008 <__exponent+0x6e>

0800a024 <_printf_float>:
 800a024:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a026:	b095      	sub	sp, #84	; 0x54
 800a028:	000c      	movs	r4, r1
 800a02a:	9208      	str	r2, [sp, #32]
 800a02c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800a02e:	9309      	str	r3, [sp, #36]	; 0x24
 800a030:	0007      	movs	r7, r0
 800a032:	f000 ff0d 	bl	800ae50 <_localeconv_r>
 800a036:	6803      	ldr	r3, [r0, #0]
 800a038:	0018      	movs	r0, r3
 800a03a:	930c      	str	r3, [sp, #48]	; 0x30
 800a03c:	f7f6 f864 	bl	8000108 <strlen>
 800a040:	2300      	movs	r3, #0
 800a042:	9312      	str	r3, [sp, #72]	; 0x48
 800a044:	7e23      	ldrb	r3, [r4, #24]
 800a046:	2207      	movs	r2, #7
 800a048:	930a      	str	r3, [sp, #40]	; 0x28
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	900d      	str	r0, [sp, #52]	; 0x34
 800a04e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a050:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a052:	682b      	ldr	r3, [r5, #0]
 800a054:	05c9      	lsls	r1, r1, #23
 800a056:	d547      	bpl.n	800a0e8 <_printf_float+0xc4>
 800a058:	189b      	adds	r3, r3, r2
 800a05a:	4393      	bics	r3, r2
 800a05c:	001a      	movs	r2, r3
 800a05e:	3208      	adds	r2, #8
 800a060:	602a      	str	r2, [r5, #0]
 800a062:	681e      	ldr	r6, [r3, #0]
 800a064:	685d      	ldr	r5, [r3, #4]
 800a066:	0032      	movs	r2, r6
 800a068:	002b      	movs	r3, r5
 800a06a:	64a2      	str	r2, [r4, #72]	; 0x48
 800a06c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800a06e:	2201      	movs	r2, #1
 800a070:	006b      	lsls	r3, r5, #1
 800a072:	085b      	lsrs	r3, r3, #1
 800a074:	930e      	str	r3, [sp, #56]	; 0x38
 800a076:	0030      	movs	r0, r6
 800a078:	4bab      	ldr	r3, [pc, #684]	; (800a328 <_printf_float+0x304>)
 800a07a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a07c:	4252      	negs	r2, r2
 800a07e:	f7f8 f821 	bl	80020c4 <__aeabi_dcmpun>
 800a082:	2800      	cmp	r0, #0
 800a084:	d132      	bne.n	800a0ec <_printf_float+0xc8>
 800a086:	2201      	movs	r2, #1
 800a088:	0030      	movs	r0, r6
 800a08a:	4ba7      	ldr	r3, [pc, #668]	; (800a328 <_printf_float+0x304>)
 800a08c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a08e:	4252      	negs	r2, r2
 800a090:	f7f6 f9ec 	bl	800046c <__aeabi_dcmple>
 800a094:	2800      	cmp	r0, #0
 800a096:	d129      	bne.n	800a0ec <_printf_float+0xc8>
 800a098:	2200      	movs	r2, #0
 800a09a:	2300      	movs	r3, #0
 800a09c:	0030      	movs	r0, r6
 800a09e:	0029      	movs	r1, r5
 800a0a0:	f7f6 f9da 	bl	8000458 <__aeabi_dcmplt>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d003      	beq.n	800a0b0 <_printf_float+0x8c>
 800a0a8:	0023      	movs	r3, r4
 800a0aa:	222d      	movs	r2, #45	; 0x2d
 800a0ac:	3343      	adds	r3, #67	; 0x43
 800a0ae:	701a      	strb	r2, [r3, #0]
 800a0b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0b2:	4d9e      	ldr	r5, [pc, #632]	; (800a32c <_printf_float+0x308>)
 800a0b4:	2b47      	cmp	r3, #71	; 0x47
 800a0b6:	d900      	bls.n	800a0ba <_printf_float+0x96>
 800a0b8:	4d9d      	ldr	r5, [pc, #628]	; (800a330 <_printf_float+0x30c>)
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a0be:	6123      	str	r3, [r4, #16]
 800a0c0:	3301      	adds	r3, #1
 800a0c2:	439a      	bics	r2, r3
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	6022      	str	r2, [r4, #0]
 800a0c8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0cc:	0021      	movs	r1, r4
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	0038      	movs	r0, r7
 800a0d2:	9b08      	ldr	r3, [sp, #32]
 800a0d4:	aa13      	add	r2, sp, #76	; 0x4c
 800a0d6:	f000 f9fb 	bl	800a4d0 <_printf_common>
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d000      	beq.n	800a0e0 <_printf_float+0xbc>
 800a0de:	e0a3      	b.n	800a228 <_printf_float+0x204>
 800a0e0:	2001      	movs	r0, #1
 800a0e2:	4240      	negs	r0, r0
 800a0e4:	b015      	add	sp, #84	; 0x54
 800a0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e8:	3307      	adds	r3, #7
 800a0ea:	e7b6      	b.n	800a05a <_printf_float+0x36>
 800a0ec:	0032      	movs	r2, r6
 800a0ee:	002b      	movs	r3, r5
 800a0f0:	0030      	movs	r0, r6
 800a0f2:	0029      	movs	r1, r5
 800a0f4:	f7f7 ffe6 	bl	80020c4 <__aeabi_dcmpun>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d00b      	beq.n	800a114 <_printf_float+0xf0>
 800a0fc:	2d00      	cmp	r5, #0
 800a0fe:	da03      	bge.n	800a108 <_printf_float+0xe4>
 800a100:	0023      	movs	r3, r4
 800a102:	222d      	movs	r2, #45	; 0x2d
 800a104:	3343      	adds	r3, #67	; 0x43
 800a106:	701a      	strb	r2, [r3, #0]
 800a108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a10a:	4d8a      	ldr	r5, [pc, #552]	; (800a334 <_printf_float+0x310>)
 800a10c:	2b47      	cmp	r3, #71	; 0x47
 800a10e:	d9d4      	bls.n	800a0ba <_printf_float+0x96>
 800a110:	4d89      	ldr	r5, [pc, #548]	; (800a338 <_printf_float+0x314>)
 800a112:	e7d2      	b.n	800a0ba <_printf_float+0x96>
 800a114:	2220      	movs	r2, #32
 800a116:	990a      	ldr	r1, [sp, #40]	; 0x28
 800a118:	6863      	ldr	r3, [r4, #4]
 800a11a:	4391      	bics	r1, r2
 800a11c:	910e      	str	r1, [sp, #56]	; 0x38
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	d14a      	bne.n	800a1b8 <_printf_float+0x194>
 800a122:	3307      	adds	r3, #7
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	2380      	movs	r3, #128	; 0x80
 800a128:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a12a:	00db      	lsls	r3, r3, #3
 800a12c:	4313      	orrs	r3, r2
 800a12e:	2200      	movs	r2, #0
 800a130:	9206      	str	r2, [sp, #24]
 800a132:	aa12      	add	r2, sp, #72	; 0x48
 800a134:	9205      	str	r2, [sp, #20]
 800a136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	9204      	str	r2, [sp, #16]
 800a13c:	aa11      	add	r2, sp, #68	; 0x44
 800a13e:	9203      	str	r2, [sp, #12]
 800a140:	2223      	movs	r2, #35	; 0x23
 800a142:	a908      	add	r1, sp, #32
 800a144:	9301      	str	r3, [sp, #4]
 800a146:	6863      	ldr	r3, [r4, #4]
 800a148:	1852      	adds	r2, r2, r1
 800a14a:	9202      	str	r2, [sp, #8]
 800a14c:	9300      	str	r3, [sp, #0]
 800a14e:	0032      	movs	r2, r6
 800a150:	002b      	movs	r3, r5
 800a152:	0038      	movs	r0, r7
 800a154:	f7ff febe 	bl	8009ed4 <__cvt>
 800a158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a15a:	0005      	movs	r5, r0
 800a15c:	2b47      	cmp	r3, #71	; 0x47
 800a15e:	d109      	bne.n	800a174 <_printf_float+0x150>
 800a160:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a162:	1cda      	adds	r2, r3, #3
 800a164:	db02      	blt.n	800a16c <_printf_float+0x148>
 800a166:	6862      	ldr	r2, [r4, #4]
 800a168:	4293      	cmp	r3, r2
 800a16a:	dd49      	ble.n	800a200 <_printf_float+0x1dc>
 800a16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16e:	3b02      	subs	r3, #2
 800a170:	b2db      	uxtb	r3, r3
 800a172:	930a      	str	r3, [sp, #40]	; 0x28
 800a174:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a176:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a178:	2b65      	cmp	r3, #101	; 0x65
 800a17a:	d824      	bhi.n	800a1c6 <_printf_float+0x1a2>
 800a17c:	0020      	movs	r0, r4
 800a17e:	001a      	movs	r2, r3
 800a180:	3901      	subs	r1, #1
 800a182:	3050      	adds	r0, #80	; 0x50
 800a184:	9111      	str	r1, [sp, #68]	; 0x44
 800a186:	f7ff ff08 	bl	8009f9a <__exponent>
 800a18a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a18c:	900b      	str	r0, [sp, #44]	; 0x2c
 800a18e:	1813      	adds	r3, r2, r0
 800a190:	6123      	str	r3, [r4, #16]
 800a192:	2a01      	cmp	r2, #1
 800a194:	dc02      	bgt.n	800a19c <_printf_float+0x178>
 800a196:	6822      	ldr	r2, [r4, #0]
 800a198:	07d2      	lsls	r2, r2, #31
 800a19a:	d501      	bpl.n	800a1a0 <_printf_float+0x17c>
 800a19c:	3301      	adds	r3, #1
 800a19e:	6123      	str	r3, [r4, #16]
 800a1a0:	2323      	movs	r3, #35	; 0x23
 800a1a2:	aa08      	add	r2, sp, #32
 800a1a4:	189b      	adds	r3, r3, r2
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d100      	bne.n	800a1ae <_printf_float+0x18a>
 800a1ac:	e78d      	b.n	800a0ca <_printf_float+0xa6>
 800a1ae:	0023      	movs	r3, r4
 800a1b0:	222d      	movs	r2, #45	; 0x2d
 800a1b2:	3343      	adds	r3, #67	; 0x43
 800a1b4:	701a      	strb	r2, [r3, #0]
 800a1b6:	e788      	b.n	800a0ca <_printf_float+0xa6>
 800a1b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1ba:	2a47      	cmp	r2, #71	; 0x47
 800a1bc:	d1b3      	bne.n	800a126 <_printf_float+0x102>
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d1b1      	bne.n	800a126 <_printf_float+0x102>
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	e7ae      	b.n	800a124 <_printf_float+0x100>
 800a1c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c8:	2b66      	cmp	r3, #102	; 0x66
 800a1ca:	d11b      	bne.n	800a204 <_printf_float+0x1e0>
 800a1cc:	6863      	ldr	r3, [r4, #4]
 800a1ce:	2900      	cmp	r1, #0
 800a1d0:	dd09      	ble.n	800a1e6 <_printf_float+0x1c2>
 800a1d2:	6121      	str	r1, [r4, #16]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d102      	bne.n	800a1de <_printf_float+0x1ba>
 800a1d8:	6822      	ldr	r2, [r4, #0]
 800a1da:	07d2      	lsls	r2, r2, #31
 800a1dc:	d50b      	bpl.n	800a1f6 <_printf_float+0x1d2>
 800a1de:	3301      	adds	r3, #1
 800a1e0:	185b      	adds	r3, r3, r1
 800a1e2:	6123      	str	r3, [r4, #16]
 800a1e4:	e007      	b.n	800a1f6 <_printf_float+0x1d2>
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d103      	bne.n	800a1f2 <_printf_float+0x1ce>
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	6821      	ldr	r1, [r4, #0]
 800a1ee:	4211      	tst	r1, r2
 800a1f0:	d000      	beq.n	800a1f4 <_printf_float+0x1d0>
 800a1f2:	1c9a      	adds	r2, r3, #2
 800a1f4:	6122      	str	r2, [r4, #16]
 800a1f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a1f8:	65a3      	str	r3, [r4, #88]	; 0x58
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1fe:	e7cf      	b.n	800a1a0 <_printf_float+0x17c>
 800a200:	2367      	movs	r3, #103	; 0x67
 800a202:	930a      	str	r3, [sp, #40]	; 0x28
 800a204:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a206:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a208:	4299      	cmp	r1, r3
 800a20a:	db06      	blt.n	800a21a <_printf_float+0x1f6>
 800a20c:	6823      	ldr	r3, [r4, #0]
 800a20e:	6121      	str	r1, [r4, #16]
 800a210:	07db      	lsls	r3, r3, #31
 800a212:	d5f0      	bpl.n	800a1f6 <_printf_float+0x1d2>
 800a214:	3101      	adds	r1, #1
 800a216:	6121      	str	r1, [r4, #16]
 800a218:	e7ed      	b.n	800a1f6 <_printf_float+0x1d2>
 800a21a:	2201      	movs	r2, #1
 800a21c:	2900      	cmp	r1, #0
 800a21e:	dc01      	bgt.n	800a224 <_printf_float+0x200>
 800a220:	1892      	adds	r2, r2, r2
 800a222:	1a52      	subs	r2, r2, r1
 800a224:	189b      	adds	r3, r3, r2
 800a226:	e7dc      	b.n	800a1e2 <_printf_float+0x1be>
 800a228:	6822      	ldr	r2, [r4, #0]
 800a22a:	0553      	lsls	r3, r2, #21
 800a22c:	d408      	bmi.n	800a240 <_printf_float+0x21c>
 800a22e:	6923      	ldr	r3, [r4, #16]
 800a230:	002a      	movs	r2, r5
 800a232:	0038      	movs	r0, r7
 800a234:	9908      	ldr	r1, [sp, #32]
 800a236:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a238:	47a8      	blx	r5
 800a23a:	3001      	adds	r0, #1
 800a23c:	d12a      	bne.n	800a294 <_printf_float+0x270>
 800a23e:	e74f      	b.n	800a0e0 <_printf_float+0xbc>
 800a240:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a242:	2b65      	cmp	r3, #101	; 0x65
 800a244:	d800      	bhi.n	800a248 <_printf_float+0x224>
 800a246:	e0ec      	b.n	800a422 <_printf_float+0x3fe>
 800a248:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a24a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a24c:	2200      	movs	r2, #0
 800a24e:	2300      	movs	r3, #0
 800a250:	f7f6 f8fc 	bl	800044c <__aeabi_dcmpeq>
 800a254:	2800      	cmp	r0, #0
 800a256:	d034      	beq.n	800a2c2 <_printf_float+0x29e>
 800a258:	2301      	movs	r3, #1
 800a25a:	0038      	movs	r0, r7
 800a25c:	4a37      	ldr	r2, [pc, #220]	; (800a33c <_printf_float+0x318>)
 800a25e:	9908      	ldr	r1, [sp, #32]
 800a260:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a262:	47a8      	blx	r5
 800a264:	3001      	adds	r0, #1
 800a266:	d100      	bne.n	800a26a <_printf_float+0x246>
 800a268:	e73a      	b.n	800a0e0 <_printf_float+0xbc>
 800a26a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a26c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a26e:	429a      	cmp	r2, r3
 800a270:	db02      	blt.n	800a278 <_printf_float+0x254>
 800a272:	6823      	ldr	r3, [r4, #0]
 800a274:	07db      	lsls	r3, r3, #31
 800a276:	d50d      	bpl.n	800a294 <_printf_float+0x270>
 800a278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a27a:	0038      	movs	r0, r7
 800a27c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a27e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a280:	9908      	ldr	r1, [sp, #32]
 800a282:	47a8      	blx	r5
 800a284:	2500      	movs	r5, #0
 800a286:	3001      	adds	r0, #1
 800a288:	d100      	bne.n	800a28c <_printf_float+0x268>
 800a28a:	e729      	b.n	800a0e0 <_printf_float+0xbc>
 800a28c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a28e:	3b01      	subs	r3, #1
 800a290:	42ab      	cmp	r3, r5
 800a292:	dc0a      	bgt.n	800a2aa <_printf_float+0x286>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	079b      	lsls	r3, r3, #30
 800a298:	d500      	bpl.n	800a29c <_printf_float+0x278>
 800a29a:	e116      	b.n	800a4ca <_printf_float+0x4a6>
 800a29c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a29e:	68e0      	ldr	r0, [r4, #12]
 800a2a0:	4298      	cmp	r0, r3
 800a2a2:	db00      	blt.n	800a2a6 <_printf_float+0x282>
 800a2a4:	e71e      	b.n	800a0e4 <_printf_float+0xc0>
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	e71c      	b.n	800a0e4 <_printf_float+0xc0>
 800a2aa:	0022      	movs	r2, r4
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	0038      	movs	r0, r7
 800a2b0:	9908      	ldr	r1, [sp, #32]
 800a2b2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2b4:	321a      	adds	r2, #26
 800a2b6:	47b0      	blx	r6
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d100      	bne.n	800a2be <_printf_float+0x29a>
 800a2bc:	e710      	b.n	800a0e0 <_printf_float+0xbc>
 800a2be:	3501      	adds	r5, #1
 800a2c0:	e7e4      	b.n	800a28c <_printf_float+0x268>
 800a2c2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	dc3b      	bgt.n	800a340 <_printf_float+0x31c>
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	0038      	movs	r0, r7
 800a2cc:	4a1b      	ldr	r2, [pc, #108]	; (800a33c <_printf_float+0x318>)
 800a2ce:	9908      	ldr	r1, [sp, #32]
 800a2d0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2d2:	47b0      	blx	r6
 800a2d4:	3001      	adds	r0, #1
 800a2d6:	d100      	bne.n	800a2da <_printf_float+0x2b6>
 800a2d8:	e702      	b.n	800a0e0 <_printf_float+0xbc>
 800a2da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a2dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	d102      	bne.n	800a2e8 <_printf_float+0x2c4>
 800a2e2:	6823      	ldr	r3, [r4, #0]
 800a2e4:	07db      	lsls	r3, r3, #31
 800a2e6:	d5d5      	bpl.n	800a294 <_printf_float+0x270>
 800a2e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ea:	0038      	movs	r0, r7
 800a2ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ee:	9908      	ldr	r1, [sp, #32]
 800a2f0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a2f2:	47b0      	blx	r6
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	3001      	adds	r0, #1
 800a2f8:	d100      	bne.n	800a2fc <_printf_float+0x2d8>
 800a2fa:	e6f1      	b.n	800a0e0 <_printf_float+0xbc>
 800a2fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a2fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a300:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a302:	425b      	negs	r3, r3
 800a304:	4293      	cmp	r3, r2
 800a306:	dc01      	bgt.n	800a30c <_printf_float+0x2e8>
 800a308:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a30a:	e791      	b.n	800a230 <_printf_float+0x20c>
 800a30c:	0022      	movs	r2, r4
 800a30e:	2301      	movs	r3, #1
 800a310:	0038      	movs	r0, r7
 800a312:	9908      	ldr	r1, [sp, #32]
 800a314:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a316:	321a      	adds	r2, #26
 800a318:	47b0      	blx	r6
 800a31a:	3001      	adds	r0, #1
 800a31c:	d100      	bne.n	800a320 <_printf_float+0x2fc>
 800a31e:	e6df      	b.n	800a0e0 <_printf_float+0xbc>
 800a320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a322:	3301      	adds	r3, #1
 800a324:	e7ea      	b.n	800a2fc <_printf_float+0x2d8>
 800a326:	46c0      	nop			; (mov r8, r8)
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	0800e980 	.word	0x0800e980
 800a330:	0800e984 	.word	0x0800e984
 800a334:	0800e988 	.word	0x0800e988
 800a338:	0800e98c 	.word	0x0800e98c
 800a33c:	0800e990 	.word	0x0800e990
 800a340:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a342:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a344:	920a      	str	r2, [sp, #40]	; 0x28
 800a346:	429a      	cmp	r2, r3
 800a348:	dd00      	ble.n	800a34c <_printf_float+0x328>
 800a34a:	930a      	str	r3, [sp, #40]	; 0x28
 800a34c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a34e:	2b00      	cmp	r3, #0
 800a350:	dc3d      	bgt.n	800a3ce <_printf_float+0x3aa>
 800a352:	2300      	movs	r3, #0
 800a354:	930e      	str	r3, [sp, #56]	; 0x38
 800a356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a358:	43db      	mvns	r3, r3
 800a35a:	17db      	asrs	r3, r3, #31
 800a35c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a35e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a360:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a362:	930b      	str	r3, [sp, #44]	; 0x2c
 800a364:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a366:	4013      	ands	r3, r2
 800a368:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a36e:	4293      	cmp	r3, r2
 800a370:	dc36      	bgt.n	800a3e0 <_printf_float+0x3bc>
 800a372:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a374:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a376:	429a      	cmp	r2, r3
 800a378:	db40      	blt.n	800a3fc <_printf_float+0x3d8>
 800a37a:	6823      	ldr	r3, [r4, #0]
 800a37c:	07db      	lsls	r3, r3, #31
 800a37e:	d43d      	bmi.n	800a3fc <_printf_float+0x3d8>
 800a380:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a382:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a386:	1af3      	subs	r3, r6, r3
 800a388:	1ab6      	subs	r6, r6, r2
 800a38a:	429e      	cmp	r6, r3
 800a38c:	dd00      	ble.n	800a390 <_printf_float+0x36c>
 800a38e:	001e      	movs	r6, r3
 800a390:	2e00      	cmp	r6, #0
 800a392:	dc3c      	bgt.n	800a40e <_printf_float+0x3ea>
 800a394:	2300      	movs	r3, #0
 800a396:	930a      	str	r3, [sp, #40]	; 0x28
 800a398:	43f3      	mvns	r3, r6
 800a39a:	17db      	asrs	r3, r3, #31
 800a39c:	930b      	str	r3, [sp, #44]	; 0x2c
 800a39e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a3a0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a3a2:	1a9b      	subs	r3, r3, r2
 800a3a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a3a6:	4032      	ands	r2, r6
 800a3a8:	1a9b      	subs	r3, r3, r2
 800a3aa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ac:	4293      	cmp	r3, r2
 800a3ae:	dc00      	bgt.n	800a3b2 <_printf_float+0x38e>
 800a3b0:	e770      	b.n	800a294 <_printf_float+0x270>
 800a3b2:	0022      	movs	r2, r4
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	0038      	movs	r0, r7
 800a3b8:	9908      	ldr	r1, [sp, #32]
 800a3ba:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a3bc:	321a      	adds	r2, #26
 800a3be:	47a8      	blx	r5
 800a3c0:	3001      	adds	r0, #1
 800a3c2:	d100      	bne.n	800a3c6 <_printf_float+0x3a2>
 800a3c4:	e68c      	b.n	800a0e0 <_printf_float+0xbc>
 800a3c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	930a      	str	r3, [sp, #40]	; 0x28
 800a3cc:	e7e7      	b.n	800a39e <_printf_float+0x37a>
 800a3ce:	002a      	movs	r2, r5
 800a3d0:	0038      	movs	r0, r7
 800a3d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3d4:	9908      	ldr	r1, [sp, #32]
 800a3d6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a3d8:	47b0      	blx	r6
 800a3da:	3001      	adds	r0, #1
 800a3dc:	d1b9      	bne.n	800a352 <_printf_float+0x32e>
 800a3de:	e67f      	b.n	800a0e0 <_printf_float+0xbc>
 800a3e0:	0022      	movs	r2, r4
 800a3e2:	2301      	movs	r3, #1
 800a3e4:	0038      	movs	r0, r7
 800a3e6:	9908      	ldr	r1, [sp, #32]
 800a3e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a3ea:	321a      	adds	r2, #26
 800a3ec:	47b0      	blx	r6
 800a3ee:	3001      	adds	r0, #1
 800a3f0:	d100      	bne.n	800a3f4 <_printf_float+0x3d0>
 800a3f2:	e675      	b.n	800a0e0 <_printf_float+0xbc>
 800a3f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	930e      	str	r3, [sp, #56]	; 0x38
 800a3fa:	e7b0      	b.n	800a35e <_printf_float+0x33a>
 800a3fc:	0038      	movs	r0, r7
 800a3fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a400:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a402:	9908      	ldr	r1, [sp, #32]
 800a404:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a406:	47b0      	blx	r6
 800a408:	3001      	adds	r0, #1
 800a40a:	d1b9      	bne.n	800a380 <_printf_float+0x35c>
 800a40c:	e668      	b.n	800a0e0 <_printf_float+0xbc>
 800a40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a410:	0038      	movs	r0, r7
 800a412:	18ea      	adds	r2, r5, r3
 800a414:	9908      	ldr	r1, [sp, #32]
 800a416:	0033      	movs	r3, r6
 800a418:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a41a:	47a8      	blx	r5
 800a41c:	3001      	adds	r0, #1
 800a41e:	d1b9      	bne.n	800a394 <_printf_float+0x370>
 800a420:	e65e      	b.n	800a0e0 <_printf_float+0xbc>
 800a422:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a424:	2b01      	cmp	r3, #1
 800a426:	dc02      	bgt.n	800a42e <_printf_float+0x40a>
 800a428:	2301      	movs	r3, #1
 800a42a:	421a      	tst	r2, r3
 800a42c:	d03a      	beq.n	800a4a4 <_printf_float+0x480>
 800a42e:	2301      	movs	r3, #1
 800a430:	002a      	movs	r2, r5
 800a432:	0038      	movs	r0, r7
 800a434:	9908      	ldr	r1, [sp, #32]
 800a436:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a438:	47b0      	blx	r6
 800a43a:	3001      	adds	r0, #1
 800a43c:	d100      	bne.n	800a440 <_printf_float+0x41c>
 800a43e:	e64f      	b.n	800a0e0 <_printf_float+0xbc>
 800a440:	0038      	movs	r0, r7
 800a442:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a444:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a446:	9908      	ldr	r1, [sp, #32]
 800a448:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a44a:	47b0      	blx	r6
 800a44c:	3001      	adds	r0, #1
 800a44e:	d100      	bne.n	800a452 <_printf_float+0x42e>
 800a450:	e646      	b.n	800a0e0 <_printf_float+0xbc>
 800a452:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800a454:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800a456:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a458:	2200      	movs	r2, #0
 800a45a:	001e      	movs	r6, r3
 800a45c:	2300      	movs	r3, #0
 800a45e:	f7f5 fff5 	bl	800044c <__aeabi_dcmpeq>
 800a462:	2800      	cmp	r0, #0
 800a464:	d11c      	bne.n	800a4a0 <_printf_float+0x47c>
 800a466:	0033      	movs	r3, r6
 800a468:	1c6a      	adds	r2, r5, #1
 800a46a:	3b01      	subs	r3, #1
 800a46c:	0038      	movs	r0, r7
 800a46e:	9908      	ldr	r1, [sp, #32]
 800a470:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a472:	47a8      	blx	r5
 800a474:	3001      	adds	r0, #1
 800a476:	d10f      	bne.n	800a498 <_printf_float+0x474>
 800a478:	e632      	b.n	800a0e0 <_printf_float+0xbc>
 800a47a:	0022      	movs	r2, r4
 800a47c:	2301      	movs	r3, #1
 800a47e:	0038      	movs	r0, r7
 800a480:	9908      	ldr	r1, [sp, #32]
 800a482:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a484:	321a      	adds	r2, #26
 800a486:	47b0      	blx	r6
 800a488:	3001      	adds	r0, #1
 800a48a:	d100      	bne.n	800a48e <_printf_float+0x46a>
 800a48c:	e628      	b.n	800a0e0 <_printf_float+0xbc>
 800a48e:	3501      	adds	r5, #1
 800a490:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a492:	3b01      	subs	r3, #1
 800a494:	42ab      	cmp	r3, r5
 800a496:	dcf0      	bgt.n	800a47a <_printf_float+0x456>
 800a498:	0022      	movs	r2, r4
 800a49a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a49c:	3250      	adds	r2, #80	; 0x50
 800a49e:	e6c8      	b.n	800a232 <_printf_float+0x20e>
 800a4a0:	2500      	movs	r5, #0
 800a4a2:	e7f5      	b.n	800a490 <_printf_float+0x46c>
 800a4a4:	002a      	movs	r2, r5
 800a4a6:	e7e1      	b.n	800a46c <_printf_float+0x448>
 800a4a8:	0022      	movs	r2, r4
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	0038      	movs	r0, r7
 800a4ae:	9908      	ldr	r1, [sp, #32]
 800a4b0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a4b2:	3219      	adds	r2, #25
 800a4b4:	47b0      	blx	r6
 800a4b6:	3001      	adds	r0, #1
 800a4b8:	d100      	bne.n	800a4bc <_printf_float+0x498>
 800a4ba:	e611      	b.n	800a0e0 <_printf_float+0xbc>
 800a4bc:	3501      	adds	r5, #1
 800a4be:	68e3      	ldr	r3, [r4, #12]
 800a4c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a4c2:	1a9b      	subs	r3, r3, r2
 800a4c4:	42ab      	cmp	r3, r5
 800a4c6:	dcef      	bgt.n	800a4a8 <_printf_float+0x484>
 800a4c8:	e6e8      	b.n	800a29c <_printf_float+0x278>
 800a4ca:	2500      	movs	r5, #0
 800a4cc:	e7f7      	b.n	800a4be <_printf_float+0x49a>
 800a4ce:	46c0      	nop			; (mov r8, r8)

0800a4d0 <_printf_common>:
 800a4d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4d2:	0016      	movs	r6, r2
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	688a      	ldr	r2, [r1, #8]
 800a4d8:	690b      	ldr	r3, [r1, #16]
 800a4da:	000c      	movs	r4, r1
 800a4dc:	9000      	str	r0, [sp, #0]
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	da00      	bge.n	800a4e4 <_printf_common+0x14>
 800a4e2:	0013      	movs	r3, r2
 800a4e4:	0022      	movs	r2, r4
 800a4e6:	6033      	str	r3, [r6, #0]
 800a4e8:	3243      	adds	r2, #67	; 0x43
 800a4ea:	7812      	ldrb	r2, [r2, #0]
 800a4ec:	2a00      	cmp	r2, #0
 800a4ee:	d001      	beq.n	800a4f4 <_printf_common+0x24>
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	6033      	str	r3, [r6, #0]
 800a4f4:	6823      	ldr	r3, [r4, #0]
 800a4f6:	069b      	lsls	r3, r3, #26
 800a4f8:	d502      	bpl.n	800a500 <_printf_common+0x30>
 800a4fa:	6833      	ldr	r3, [r6, #0]
 800a4fc:	3302      	adds	r3, #2
 800a4fe:	6033      	str	r3, [r6, #0]
 800a500:	6822      	ldr	r2, [r4, #0]
 800a502:	2306      	movs	r3, #6
 800a504:	0015      	movs	r5, r2
 800a506:	401d      	ands	r5, r3
 800a508:	421a      	tst	r2, r3
 800a50a:	d027      	beq.n	800a55c <_printf_common+0x8c>
 800a50c:	0023      	movs	r3, r4
 800a50e:	3343      	adds	r3, #67	; 0x43
 800a510:	781b      	ldrb	r3, [r3, #0]
 800a512:	1e5a      	subs	r2, r3, #1
 800a514:	4193      	sbcs	r3, r2
 800a516:	6822      	ldr	r2, [r4, #0]
 800a518:	0692      	lsls	r2, r2, #26
 800a51a:	d430      	bmi.n	800a57e <_printf_common+0xae>
 800a51c:	0022      	movs	r2, r4
 800a51e:	9901      	ldr	r1, [sp, #4]
 800a520:	9800      	ldr	r0, [sp, #0]
 800a522:	9d08      	ldr	r5, [sp, #32]
 800a524:	3243      	adds	r2, #67	; 0x43
 800a526:	47a8      	blx	r5
 800a528:	3001      	adds	r0, #1
 800a52a:	d025      	beq.n	800a578 <_printf_common+0xa8>
 800a52c:	2206      	movs	r2, #6
 800a52e:	6823      	ldr	r3, [r4, #0]
 800a530:	2500      	movs	r5, #0
 800a532:	4013      	ands	r3, r2
 800a534:	2b04      	cmp	r3, #4
 800a536:	d105      	bne.n	800a544 <_printf_common+0x74>
 800a538:	6833      	ldr	r3, [r6, #0]
 800a53a:	68e5      	ldr	r5, [r4, #12]
 800a53c:	1aed      	subs	r5, r5, r3
 800a53e:	43eb      	mvns	r3, r5
 800a540:	17db      	asrs	r3, r3, #31
 800a542:	401d      	ands	r5, r3
 800a544:	68a3      	ldr	r3, [r4, #8]
 800a546:	6922      	ldr	r2, [r4, #16]
 800a548:	4293      	cmp	r3, r2
 800a54a:	dd01      	ble.n	800a550 <_printf_common+0x80>
 800a54c:	1a9b      	subs	r3, r3, r2
 800a54e:	18ed      	adds	r5, r5, r3
 800a550:	2600      	movs	r6, #0
 800a552:	42b5      	cmp	r5, r6
 800a554:	d120      	bne.n	800a598 <_printf_common+0xc8>
 800a556:	2000      	movs	r0, #0
 800a558:	e010      	b.n	800a57c <_printf_common+0xac>
 800a55a:	3501      	adds	r5, #1
 800a55c:	68e3      	ldr	r3, [r4, #12]
 800a55e:	6832      	ldr	r2, [r6, #0]
 800a560:	1a9b      	subs	r3, r3, r2
 800a562:	42ab      	cmp	r3, r5
 800a564:	ddd2      	ble.n	800a50c <_printf_common+0x3c>
 800a566:	0022      	movs	r2, r4
 800a568:	2301      	movs	r3, #1
 800a56a:	9901      	ldr	r1, [sp, #4]
 800a56c:	9800      	ldr	r0, [sp, #0]
 800a56e:	9f08      	ldr	r7, [sp, #32]
 800a570:	3219      	adds	r2, #25
 800a572:	47b8      	blx	r7
 800a574:	3001      	adds	r0, #1
 800a576:	d1f0      	bne.n	800a55a <_printf_common+0x8a>
 800a578:	2001      	movs	r0, #1
 800a57a:	4240      	negs	r0, r0
 800a57c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a57e:	2030      	movs	r0, #48	; 0x30
 800a580:	18e1      	adds	r1, r4, r3
 800a582:	3143      	adds	r1, #67	; 0x43
 800a584:	7008      	strb	r0, [r1, #0]
 800a586:	0021      	movs	r1, r4
 800a588:	1c5a      	adds	r2, r3, #1
 800a58a:	3145      	adds	r1, #69	; 0x45
 800a58c:	7809      	ldrb	r1, [r1, #0]
 800a58e:	18a2      	adds	r2, r4, r2
 800a590:	3243      	adds	r2, #67	; 0x43
 800a592:	3302      	adds	r3, #2
 800a594:	7011      	strb	r1, [r2, #0]
 800a596:	e7c1      	b.n	800a51c <_printf_common+0x4c>
 800a598:	0022      	movs	r2, r4
 800a59a:	2301      	movs	r3, #1
 800a59c:	9901      	ldr	r1, [sp, #4]
 800a59e:	9800      	ldr	r0, [sp, #0]
 800a5a0:	9f08      	ldr	r7, [sp, #32]
 800a5a2:	321a      	adds	r2, #26
 800a5a4:	47b8      	blx	r7
 800a5a6:	3001      	adds	r0, #1
 800a5a8:	d0e6      	beq.n	800a578 <_printf_common+0xa8>
 800a5aa:	3601      	adds	r6, #1
 800a5ac:	e7d1      	b.n	800a552 <_printf_common+0x82>
	...

0800a5b0 <_printf_i>:
 800a5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5b2:	b08b      	sub	sp, #44	; 0x2c
 800a5b4:	9206      	str	r2, [sp, #24]
 800a5b6:	000a      	movs	r2, r1
 800a5b8:	3243      	adds	r2, #67	; 0x43
 800a5ba:	9307      	str	r3, [sp, #28]
 800a5bc:	9005      	str	r0, [sp, #20]
 800a5be:	9204      	str	r2, [sp, #16]
 800a5c0:	7e0a      	ldrb	r2, [r1, #24]
 800a5c2:	000c      	movs	r4, r1
 800a5c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a5c6:	2a78      	cmp	r2, #120	; 0x78
 800a5c8:	d809      	bhi.n	800a5de <_printf_i+0x2e>
 800a5ca:	2a62      	cmp	r2, #98	; 0x62
 800a5cc:	d80b      	bhi.n	800a5e6 <_printf_i+0x36>
 800a5ce:	2a00      	cmp	r2, #0
 800a5d0:	d100      	bne.n	800a5d4 <_printf_i+0x24>
 800a5d2:	e0be      	b.n	800a752 <_printf_i+0x1a2>
 800a5d4:	497c      	ldr	r1, [pc, #496]	; (800a7c8 <_printf_i+0x218>)
 800a5d6:	9103      	str	r1, [sp, #12]
 800a5d8:	2a58      	cmp	r2, #88	; 0x58
 800a5da:	d100      	bne.n	800a5de <_printf_i+0x2e>
 800a5dc:	e093      	b.n	800a706 <_printf_i+0x156>
 800a5de:	0026      	movs	r6, r4
 800a5e0:	3642      	adds	r6, #66	; 0x42
 800a5e2:	7032      	strb	r2, [r6, #0]
 800a5e4:	e022      	b.n	800a62c <_printf_i+0x7c>
 800a5e6:	0010      	movs	r0, r2
 800a5e8:	3863      	subs	r0, #99	; 0x63
 800a5ea:	2815      	cmp	r0, #21
 800a5ec:	d8f7      	bhi.n	800a5de <_printf_i+0x2e>
 800a5ee:	f7f5 fd9d 	bl	800012c <__gnu_thumb1_case_shi>
 800a5f2:	0016      	.short	0x0016
 800a5f4:	fff6001f 	.word	0xfff6001f
 800a5f8:	fff6fff6 	.word	0xfff6fff6
 800a5fc:	001ffff6 	.word	0x001ffff6
 800a600:	fff6fff6 	.word	0xfff6fff6
 800a604:	fff6fff6 	.word	0xfff6fff6
 800a608:	003600a3 	.word	0x003600a3
 800a60c:	fff60083 	.word	0xfff60083
 800a610:	00b4fff6 	.word	0x00b4fff6
 800a614:	0036fff6 	.word	0x0036fff6
 800a618:	fff6fff6 	.word	0xfff6fff6
 800a61c:	0087      	.short	0x0087
 800a61e:	0026      	movs	r6, r4
 800a620:	681a      	ldr	r2, [r3, #0]
 800a622:	3642      	adds	r6, #66	; 0x42
 800a624:	1d11      	adds	r1, r2, #4
 800a626:	6019      	str	r1, [r3, #0]
 800a628:	6813      	ldr	r3, [r2, #0]
 800a62a:	7033      	strb	r3, [r6, #0]
 800a62c:	2301      	movs	r3, #1
 800a62e:	e0a2      	b.n	800a776 <_printf_i+0x1c6>
 800a630:	6818      	ldr	r0, [r3, #0]
 800a632:	6809      	ldr	r1, [r1, #0]
 800a634:	1d02      	adds	r2, r0, #4
 800a636:	060d      	lsls	r5, r1, #24
 800a638:	d50b      	bpl.n	800a652 <_printf_i+0xa2>
 800a63a:	6805      	ldr	r5, [r0, #0]
 800a63c:	601a      	str	r2, [r3, #0]
 800a63e:	2d00      	cmp	r5, #0
 800a640:	da03      	bge.n	800a64a <_printf_i+0x9a>
 800a642:	232d      	movs	r3, #45	; 0x2d
 800a644:	9a04      	ldr	r2, [sp, #16]
 800a646:	426d      	negs	r5, r5
 800a648:	7013      	strb	r3, [r2, #0]
 800a64a:	4b5f      	ldr	r3, [pc, #380]	; (800a7c8 <_printf_i+0x218>)
 800a64c:	270a      	movs	r7, #10
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	e01b      	b.n	800a68a <_printf_i+0xda>
 800a652:	6805      	ldr	r5, [r0, #0]
 800a654:	601a      	str	r2, [r3, #0]
 800a656:	0649      	lsls	r1, r1, #25
 800a658:	d5f1      	bpl.n	800a63e <_printf_i+0x8e>
 800a65a:	b22d      	sxth	r5, r5
 800a65c:	e7ef      	b.n	800a63e <_printf_i+0x8e>
 800a65e:	680d      	ldr	r5, [r1, #0]
 800a660:	6819      	ldr	r1, [r3, #0]
 800a662:	1d08      	adds	r0, r1, #4
 800a664:	6018      	str	r0, [r3, #0]
 800a666:	062e      	lsls	r6, r5, #24
 800a668:	d501      	bpl.n	800a66e <_printf_i+0xbe>
 800a66a:	680d      	ldr	r5, [r1, #0]
 800a66c:	e003      	b.n	800a676 <_printf_i+0xc6>
 800a66e:	066d      	lsls	r5, r5, #25
 800a670:	d5fb      	bpl.n	800a66a <_printf_i+0xba>
 800a672:	680d      	ldr	r5, [r1, #0]
 800a674:	b2ad      	uxth	r5, r5
 800a676:	4b54      	ldr	r3, [pc, #336]	; (800a7c8 <_printf_i+0x218>)
 800a678:	2708      	movs	r7, #8
 800a67a:	9303      	str	r3, [sp, #12]
 800a67c:	2a6f      	cmp	r2, #111	; 0x6f
 800a67e:	d000      	beq.n	800a682 <_printf_i+0xd2>
 800a680:	3702      	adds	r7, #2
 800a682:	0023      	movs	r3, r4
 800a684:	2200      	movs	r2, #0
 800a686:	3343      	adds	r3, #67	; 0x43
 800a688:	701a      	strb	r2, [r3, #0]
 800a68a:	6863      	ldr	r3, [r4, #4]
 800a68c:	60a3      	str	r3, [r4, #8]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	db03      	blt.n	800a69a <_printf_i+0xea>
 800a692:	2104      	movs	r1, #4
 800a694:	6822      	ldr	r2, [r4, #0]
 800a696:	438a      	bics	r2, r1
 800a698:	6022      	str	r2, [r4, #0]
 800a69a:	2d00      	cmp	r5, #0
 800a69c:	d102      	bne.n	800a6a4 <_printf_i+0xf4>
 800a69e:	9e04      	ldr	r6, [sp, #16]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00c      	beq.n	800a6be <_printf_i+0x10e>
 800a6a4:	9e04      	ldr	r6, [sp, #16]
 800a6a6:	0028      	movs	r0, r5
 800a6a8:	0039      	movs	r1, r7
 800a6aa:	f7f5 fdcf 	bl	800024c <__aeabi_uidivmod>
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	3e01      	subs	r6, #1
 800a6b2:	5c5b      	ldrb	r3, [r3, r1]
 800a6b4:	7033      	strb	r3, [r6, #0]
 800a6b6:	002b      	movs	r3, r5
 800a6b8:	0005      	movs	r5, r0
 800a6ba:	429f      	cmp	r7, r3
 800a6bc:	d9f3      	bls.n	800a6a6 <_printf_i+0xf6>
 800a6be:	2f08      	cmp	r7, #8
 800a6c0:	d109      	bne.n	800a6d6 <_printf_i+0x126>
 800a6c2:	6823      	ldr	r3, [r4, #0]
 800a6c4:	07db      	lsls	r3, r3, #31
 800a6c6:	d506      	bpl.n	800a6d6 <_printf_i+0x126>
 800a6c8:	6862      	ldr	r2, [r4, #4]
 800a6ca:	6923      	ldr	r3, [r4, #16]
 800a6cc:	429a      	cmp	r2, r3
 800a6ce:	dc02      	bgt.n	800a6d6 <_printf_i+0x126>
 800a6d0:	2330      	movs	r3, #48	; 0x30
 800a6d2:	3e01      	subs	r6, #1
 800a6d4:	7033      	strb	r3, [r6, #0]
 800a6d6:	9b04      	ldr	r3, [sp, #16]
 800a6d8:	1b9b      	subs	r3, r3, r6
 800a6da:	6123      	str	r3, [r4, #16]
 800a6dc:	9b07      	ldr	r3, [sp, #28]
 800a6de:	0021      	movs	r1, r4
 800a6e0:	9300      	str	r3, [sp, #0]
 800a6e2:	9805      	ldr	r0, [sp, #20]
 800a6e4:	9b06      	ldr	r3, [sp, #24]
 800a6e6:	aa09      	add	r2, sp, #36	; 0x24
 800a6e8:	f7ff fef2 	bl	800a4d0 <_printf_common>
 800a6ec:	3001      	adds	r0, #1
 800a6ee:	d147      	bne.n	800a780 <_printf_i+0x1d0>
 800a6f0:	2001      	movs	r0, #1
 800a6f2:	4240      	negs	r0, r0
 800a6f4:	b00b      	add	sp, #44	; 0x2c
 800a6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6f8:	2220      	movs	r2, #32
 800a6fa:	6809      	ldr	r1, [r1, #0]
 800a6fc:	430a      	orrs	r2, r1
 800a6fe:	6022      	str	r2, [r4, #0]
 800a700:	2278      	movs	r2, #120	; 0x78
 800a702:	4932      	ldr	r1, [pc, #200]	; (800a7cc <_printf_i+0x21c>)
 800a704:	9103      	str	r1, [sp, #12]
 800a706:	0021      	movs	r1, r4
 800a708:	3145      	adds	r1, #69	; 0x45
 800a70a:	700a      	strb	r2, [r1, #0]
 800a70c:	6819      	ldr	r1, [r3, #0]
 800a70e:	6822      	ldr	r2, [r4, #0]
 800a710:	c920      	ldmia	r1!, {r5}
 800a712:	0610      	lsls	r0, r2, #24
 800a714:	d402      	bmi.n	800a71c <_printf_i+0x16c>
 800a716:	0650      	lsls	r0, r2, #25
 800a718:	d500      	bpl.n	800a71c <_printf_i+0x16c>
 800a71a:	b2ad      	uxth	r5, r5
 800a71c:	6019      	str	r1, [r3, #0]
 800a71e:	07d3      	lsls	r3, r2, #31
 800a720:	d502      	bpl.n	800a728 <_printf_i+0x178>
 800a722:	2320      	movs	r3, #32
 800a724:	4313      	orrs	r3, r2
 800a726:	6023      	str	r3, [r4, #0]
 800a728:	2710      	movs	r7, #16
 800a72a:	2d00      	cmp	r5, #0
 800a72c:	d1a9      	bne.n	800a682 <_printf_i+0xd2>
 800a72e:	2220      	movs	r2, #32
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	4393      	bics	r3, r2
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	e7a4      	b.n	800a682 <_printf_i+0xd2>
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	680d      	ldr	r5, [r1, #0]
 800a73c:	1d10      	adds	r0, r2, #4
 800a73e:	6949      	ldr	r1, [r1, #20]
 800a740:	6018      	str	r0, [r3, #0]
 800a742:	6813      	ldr	r3, [r2, #0]
 800a744:	062e      	lsls	r6, r5, #24
 800a746:	d501      	bpl.n	800a74c <_printf_i+0x19c>
 800a748:	6019      	str	r1, [r3, #0]
 800a74a:	e002      	b.n	800a752 <_printf_i+0x1a2>
 800a74c:	066d      	lsls	r5, r5, #25
 800a74e:	d5fb      	bpl.n	800a748 <_printf_i+0x198>
 800a750:	8019      	strh	r1, [r3, #0]
 800a752:	2300      	movs	r3, #0
 800a754:	9e04      	ldr	r6, [sp, #16]
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	e7c0      	b.n	800a6dc <_printf_i+0x12c>
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	1d11      	adds	r1, r2, #4
 800a75e:	6019      	str	r1, [r3, #0]
 800a760:	6816      	ldr	r6, [r2, #0]
 800a762:	2100      	movs	r1, #0
 800a764:	0030      	movs	r0, r6
 800a766:	6862      	ldr	r2, [r4, #4]
 800a768:	f000 fbf1 	bl	800af4e <memchr>
 800a76c:	2800      	cmp	r0, #0
 800a76e:	d001      	beq.n	800a774 <_printf_i+0x1c4>
 800a770:	1b80      	subs	r0, r0, r6
 800a772:	6060      	str	r0, [r4, #4]
 800a774:	6863      	ldr	r3, [r4, #4]
 800a776:	6123      	str	r3, [r4, #16]
 800a778:	2300      	movs	r3, #0
 800a77a:	9a04      	ldr	r2, [sp, #16]
 800a77c:	7013      	strb	r3, [r2, #0]
 800a77e:	e7ad      	b.n	800a6dc <_printf_i+0x12c>
 800a780:	0032      	movs	r2, r6
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	9906      	ldr	r1, [sp, #24]
 800a786:	9805      	ldr	r0, [sp, #20]
 800a788:	9d07      	ldr	r5, [sp, #28]
 800a78a:	47a8      	blx	r5
 800a78c:	3001      	adds	r0, #1
 800a78e:	d0af      	beq.n	800a6f0 <_printf_i+0x140>
 800a790:	6823      	ldr	r3, [r4, #0]
 800a792:	079b      	lsls	r3, r3, #30
 800a794:	d415      	bmi.n	800a7c2 <_printf_i+0x212>
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	68e0      	ldr	r0, [r4, #12]
 800a79a:	4298      	cmp	r0, r3
 800a79c:	daaa      	bge.n	800a6f4 <_printf_i+0x144>
 800a79e:	0018      	movs	r0, r3
 800a7a0:	e7a8      	b.n	800a6f4 <_printf_i+0x144>
 800a7a2:	0022      	movs	r2, r4
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	9906      	ldr	r1, [sp, #24]
 800a7a8:	9805      	ldr	r0, [sp, #20]
 800a7aa:	9e07      	ldr	r6, [sp, #28]
 800a7ac:	3219      	adds	r2, #25
 800a7ae:	47b0      	blx	r6
 800a7b0:	3001      	adds	r0, #1
 800a7b2:	d09d      	beq.n	800a6f0 <_printf_i+0x140>
 800a7b4:	3501      	adds	r5, #1
 800a7b6:	68e3      	ldr	r3, [r4, #12]
 800a7b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7ba:	1a9b      	subs	r3, r3, r2
 800a7bc:	42ab      	cmp	r3, r5
 800a7be:	dcf0      	bgt.n	800a7a2 <_printf_i+0x1f2>
 800a7c0:	e7e9      	b.n	800a796 <_printf_i+0x1e6>
 800a7c2:	2500      	movs	r5, #0
 800a7c4:	e7f7      	b.n	800a7b6 <_printf_i+0x206>
 800a7c6:	46c0      	nop			; (mov r8, r8)
 800a7c8:	0800e992 	.word	0x0800e992
 800a7cc:	0800e9a3 	.word	0x0800e9a3

0800a7d0 <_scanf_float>:
 800a7d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7d2:	b08b      	sub	sp, #44	; 0x2c
 800a7d4:	0016      	movs	r6, r2
 800a7d6:	9002      	str	r0, [sp, #8]
 800a7d8:	22ae      	movs	r2, #174	; 0xae
 800a7da:	2000      	movs	r0, #0
 800a7dc:	9307      	str	r3, [sp, #28]
 800a7de:	688b      	ldr	r3, [r1, #8]
 800a7e0:	000f      	movs	r7, r1
 800a7e2:	1e59      	subs	r1, r3, #1
 800a7e4:	0052      	lsls	r2, r2, #1
 800a7e6:	9006      	str	r0, [sp, #24]
 800a7e8:	4291      	cmp	r1, r2
 800a7ea:	d905      	bls.n	800a7f8 <_scanf_float+0x28>
 800a7ec:	3b5e      	subs	r3, #94	; 0x5e
 800a7ee:	3bff      	subs	r3, #255	; 0xff
 800a7f0:	9306      	str	r3, [sp, #24]
 800a7f2:	235e      	movs	r3, #94	; 0x5e
 800a7f4:	33ff      	adds	r3, #255	; 0xff
 800a7f6:	60bb      	str	r3, [r7, #8]
 800a7f8:	23f0      	movs	r3, #240	; 0xf0
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	00db      	lsls	r3, r3, #3
 800a7fe:	4313      	orrs	r3, r2
 800a800:	603b      	str	r3, [r7, #0]
 800a802:	003b      	movs	r3, r7
 800a804:	2400      	movs	r4, #0
 800a806:	331c      	adds	r3, #28
 800a808:	001d      	movs	r5, r3
 800a80a:	9304      	str	r3, [sp, #16]
 800a80c:	9403      	str	r4, [sp, #12]
 800a80e:	9409      	str	r4, [sp, #36]	; 0x24
 800a810:	9408      	str	r4, [sp, #32]
 800a812:	9401      	str	r4, [sp, #4]
 800a814:	9405      	str	r4, [sp, #20]
 800a816:	68ba      	ldr	r2, [r7, #8]
 800a818:	2a00      	cmp	r2, #0
 800a81a:	d00a      	beq.n	800a832 <_scanf_float+0x62>
 800a81c:	6833      	ldr	r3, [r6, #0]
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	2b4e      	cmp	r3, #78	; 0x4e
 800a822:	d844      	bhi.n	800a8ae <_scanf_float+0xde>
 800a824:	0018      	movs	r0, r3
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d82c      	bhi.n	800a884 <_scanf_float+0xb4>
 800a82a:	382b      	subs	r0, #43	; 0x2b
 800a82c:	b2c1      	uxtb	r1, r0
 800a82e:	290e      	cmp	r1, #14
 800a830:	d92a      	bls.n	800a888 <_scanf_float+0xb8>
 800a832:	9b01      	ldr	r3, [sp, #4]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d003      	beq.n	800a840 <_scanf_float+0x70>
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	4aa3      	ldr	r2, [pc, #652]	; (800aac8 <_scanf_float+0x2f8>)
 800a83c:	4013      	ands	r3, r2
 800a83e:	603b      	str	r3, [r7, #0]
 800a840:	9b03      	ldr	r3, [sp, #12]
 800a842:	3b01      	subs	r3, #1
 800a844:	2b01      	cmp	r3, #1
 800a846:	d900      	bls.n	800a84a <_scanf_float+0x7a>
 800a848:	e0f9      	b.n	800aa3e <_scanf_float+0x26e>
 800a84a:	24be      	movs	r4, #190	; 0xbe
 800a84c:	0064      	lsls	r4, r4, #1
 800a84e:	9b04      	ldr	r3, [sp, #16]
 800a850:	429d      	cmp	r5, r3
 800a852:	d900      	bls.n	800a856 <_scanf_float+0x86>
 800a854:	e0e9      	b.n	800aa2a <_scanf_float+0x25a>
 800a856:	2301      	movs	r3, #1
 800a858:	9303      	str	r3, [sp, #12]
 800a85a:	e183      	b.n	800ab64 <_scanf_float+0x394>
 800a85c:	0018      	movs	r0, r3
 800a85e:	3861      	subs	r0, #97	; 0x61
 800a860:	280d      	cmp	r0, #13
 800a862:	d8e6      	bhi.n	800a832 <_scanf_float+0x62>
 800a864:	f7f5 fc62 	bl	800012c <__gnu_thumb1_case_shi>
 800a868:	ffe50083 	.word	0xffe50083
 800a86c:	ffe5ffe5 	.word	0xffe5ffe5
 800a870:	00a200b6 	.word	0x00a200b6
 800a874:	ffe5ffe5 	.word	0xffe5ffe5
 800a878:	ffe50089 	.word	0xffe50089
 800a87c:	ffe5ffe5 	.word	0xffe5ffe5
 800a880:	0065ffe5 	.word	0x0065ffe5
 800a884:	3841      	subs	r0, #65	; 0x41
 800a886:	e7eb      	b.n	800a860 <_scanf_float+0x90>
 800a888:	280e      	cmp	r0, #14
 800a88a:	d8d2      	bhi.n	800a832 <_scanf_float+0x62>
 800a88c:	f7f5 fc4e 	bl	800012c <__gnu_thumb1_case_shi>
 800a890:	ffd1004b 	.word	0xffd1004b
 800a894:	0098004b 	.word	0x0098004b
 800a898:	0020ffd1 	.word	0x0020ffd1
 800a89c:	00400040 	.word	0x00400040
 800a8a0:	00400040 	.word	0x00400040
 800a8a4:	00400040 	.word	0x00400040
 800a8a8:	00400040 	.word	0x00400040
 800a8ac:	0040      	.short	0x0040
 800a8ae:	2b6e      	cmp	r3, #110	; 0x6e
 800a8b0:	d809      	bhi.n	800a8c6 <_scanf_float+0xf6>
 800a8b2:	2b60      	cmp	r3, #96	; 0x60
 800a8b4:	d8d2      	bhi.n	800a85c <_scanf_float+0x8c>
 800a8b6:	2b54      	cmp	r3, #84	; 0x54
 800a8b8:	d07d      	beq.n	800a9b6 <_scanf_float+0x1e6>
 800a8ba:	2b59      	cmp	r3, #89	; 0x59
 800a8bc:	d1b9      	bne.n	800a832 <_scanf_float+0x62>
 800a8be:	2c07      	cmp	r4, #7
 800a8c0:	d1b7      	bne.n	800a832 <_scanf_float+0x62>
 800a8c2:	2408      	movs	r4, #8
 800a8c4:	e02c      	b.n	800a920 <_scanf_float+0x150>
 800a8c6:	2b74      	cmp	r3, #116	; 0x74
 800a8c8:	d075      	beq.n	800a9b6 <_scanf_float+0x1e6>
 800a8ca:	2b79      	cmp	r3, #121	; 0x79
 800a8cc:	d0f7      	beq.n	800a8be <_scanf_float+0xee>
 800a8ce:	e7b0      	b.n	800a832 <_scanf_float+0x62>
 800a8d0:	6839      	ldr	r1, [r7, #0]
 800a8d2:	05c8      	lsls	r0, r1, #23
 800a8d4:	d51c      	bpl.n	800a910 <_scanf_float+0x140>
 800a8d6:	2380      	movs	r3, #128	; 0x80
 800a8d8:	4399      	bics	r1, r3
 800a8da:	9b01      	ldr	r3, [sp, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
 800a8de:	3301      	adds	r3, #1
 800a8e0:	9301      	str	r3, [sp, #4]
 800a8e2:	9b06      	ldr	r3, [sp, #24]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <_scanf_float+0x120>
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	3201      	adds	r2, #1
 800a8ec:	9306      	str	r3, [sp, #24]
 800a8ee:	60ba      	str	r2, [r7, #8]
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	60bb      	str	r3, [r7, #8]
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	3301      	adds	r3, #1
 800a8fa:	613b      	str	r3, [r7, #16]
 800a8fc:	6873      	ldr	r3, [r6, #4]
 800a8fe:	3b01      	subs	r3, #1
 800a900:	6073      	str	r3, [r6, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	dc00      	bgt.n	800a908 <_scanf_float+0x138>
 800a906:	e086      	b.n	800aa16 <_scanf_float+0x246>
 800a908:	6833      	ldr	r3, [r6, #0]
 800a90a:	3301      	adds	r3, #1
 800a90c:	6033      	str	r3, [r6, #0]
 800a90e:	e782      	b.n	800a816 <_scanf_float+0x46>
 800a910:	9a03      	ldr	r2, [sp, #12]
 800a912:	1912      	adds	r2, r2, r4
 800a914:	2a00      	cmp	r2, #0
 800a916:	d18c      	bne.n	800a832 <_scanf_float+0x62>
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	496c      	ldr	r1, [pc, #432]	; (800aacc <_scanf_float+0x2fc>)
 800a91c:	400a      	ands	r2, r1
 800a91e:	603a      	str	r2, [r7, #0]
 800a920:	702b      	strb	r3, [r5, #0]
 800a922:	3501      	adds	r5, #1
 800a924:	e7e4      	b.n	800a8f0 <_scanf_float+0x120>
 800a926:	2180      	movs	r1, #128	; 0x80
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	420a      	tst	r2, r1
 800a92c:	d081      	beq.n	800a832 <_scanf_float+0x62>
 800a92e:	438a      	bics	r2, r1
 800a930:	e7f5      	b.n	800a91e <_scanf_float+0x14e>
 800a932:	9a03      	ldr	r2, [sp, #12]
 800a934:	2a00      	cmp	r2, #0
 800a936:	d10f      	bne.n	800a958 <_scanf_float+0x188>
 800a938:	9a01      	ldr	r2, [sp, #4]
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	d10f      	bne.n	800a95e <_scanf_float+0x18e>
 800a93e:	683a      	ldr	r2, [r7, #0]
 800a940:	21e0      	movs	r1, #224	; 0xe0
 800a942:	0010      	movs	r0, r2
 800a944:	00c9      	lsls	r1, r1, #3
 800a946:	4008      	ands	r0, r1
 800a948:	4288      	cmp	r0, r1
 800a94a:	d108      	bne.n	800a95e <_scanf_float+0x18e>
 800a94c:	4960      	ldr	r1, [pc, #384]	; (800aad0 <_scanf_float+0x300>)
 800a94e:	400a      	ands	r2, r1
 800a950:	603a      	str	r2, [r7, #0]
 800a952:	2201      	movs	r2, #1
 800a954:	9203      	str	r2, [sp, #12]
 800a956:	e7e3      	b.n	800a920 <_scanf_float+0x150>
 800a958:	9a03      	ldr	r2, [sp, #12]
 800a95a:	2a02      	cmp	r2, #2
 800a95c:	d059      	beq.n	800aa12 <_scanf_float+0x242>
 800a95e:	2c01      	cmp	r4, #1
 800a960:	d002      	beq.n	800a968 <_scanf_float+0x198>
 800a962:	2c04      	cmp	r4, #4
 800a964:	d000      	beq.n	800a968 <_scanf_float+0x198>
 800a966:	e764      	b.n	800a832 <_scanf_float+0x62>
 800a968:	3401      	adds	r4, #1
 800a96a:	b2e4      	uxtb	r4, r4
 800a96c:	e7d8      	b.n	800a920 <_scanf_float+0x150>
 800a96e:	9a03      	ldr	r2, [sp, #12]
 800a970:	2a01      	cmp	r2, #1
 800a972:	d000      	beq.n	800a976 <_scanf_float+0x1a6>
 800a974:	e75d      	b.n	800a832 <_scanf_float+0x62>
 800a976:	2202      	movs	r2, #2
 800a978:	e7ec      	b.n	800a954 <_scanf_float+0x184>
 800a97a:	2c00      	cmp	r4, #0
 800a97c:	d110      	bne.n	800a9a0 <_scanf_float+0x1d0>
 800a97e:	9a01      	ldr	r2, [sp, #4]
 800a980:	2a00      	cmp	r2, #0
 800a982:	d000      	beq.n	800a986 <_scanf_float+0x1b6>
 800a984:	e758      	b.n	800a838 <_scanf_float+0x68>
 800a986:	683a      	ldr	r2, [r7, #0]
 800a988:	21e0      	movs	r1, #224	; 0xe0
 800a98a:	0010      	movs	r0, r2
 800a98c:	00c9      	lsls	r1, r1, #3
 800a98e:	4008      	ands	r0, r1
 800a990:	4288      	cmp	r0, r1
 800a992:	d000      	beq.n	800a996 <_scanf_float+0x1c6>
 800a994:	e754      	b.n	800a840 <_scanf_float+0x70>
 800a996:	494e      	ldr	r1, [pc, #312]	; (800aad0 <_scanf_float+0x300>)
 800a998:	3401      	adds	r4, #1
 800a99a:	400a      	ands	r2, r1
 800a99c:	603a      	str	r2, [r7, #0]
 800a99e:	e7bf      	b.n	800a920 <_scanf_float+0x150>
 800a9a0:	21fd      	movs	r1, #253	; 0xfd
 800a9a2:	1ee2      	subs	r2, r4, #3
 800a9a4:	420a      	tst	r2, r1
 800a9a6:	d000      	beq.n	800a9aa <_scanf_float+0x1da>
 800a9a8:	e743      	b.n	800a832 <_scanf_float+0x62>
 800a9aa:	e7dd      	b.n	800a968 <_scanf_float+0x198>
 800a9ac:	2c02      	cmp	r4, #2
 800a9ae:	d000      	beq.n	800a9b2 <_scanf_float+0x1e2>
 800a9b0:	e73f      	b.n	800a832 <_scanf_float+0x62>
 800a9b2:	2403      	movs	r4, #3
 800a9b4:	e7b4      	b.n	800a920 <_scanf_float+0x150>
 800a9b6:	2c06      	cmp	r4, #6
 800a9b8:	d000      	beq.n	800a9bc <_scanf_float+0x1ec>
 800a9ba:	e73a      	b.n	800a832 <_scanf_float+0x62>
 800a9bc:	2407      	movs	r4, #7
 800a9be:	e7af      	b.n	800a920 <_scanf_float+0x150>
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	0591      	lsls	r1, r2, #22
 800a9c4:	d400      	bmi.n	800a9c8 <_scanf_float+0x1f8>
 800a9c6:	e734      	b.n	800a832 <_scanf_float+0x62>
 800a9c8:	4942      	ldr	r1, [pc, #264]	; (800aad4 <_scanf_float+0x304>)
 800a9ca:	400a      	ands	r2, r1
 800a9cc:	603a      	str	r2, [r7, #0]
 800a9ce:	9a01      	ldr	r2, [sp, #4]
 800a9d0:	9205      	str	r2, [sp, #20]
 800a9d2:	e7a5      	b.n	800a920 <_scanf_float+0x150>
 800a9d4:	21a0      	movs	r1, #160	; 0xa0
 800a9d6:	2080      	movs	r0, #128	; 0x80
 800a9d8:	683a      	ldr	r2, [r7, #0]
 800a9da:	00c9      	lsls	r1, r1, #3
 800a9dc:	4011      	ands	r1, r2
 800a9de:	00c0      	lsls	r0, r0, #3
 800a9e0:	4281      	cmp	r1, r0
 800a9e2:	d006      	beq.n	800a9f2 <_scanf_float+0x222>
 800a9e4:	4202      	tst	r2, r0
 800a9e6:	d100      	bne.n	800a9ea <_scanf_float+0x21a>
 800a9e8:	e723      	b.n	800a832 <_scanf_float+0x62>
 800a9ea:	9901      	ldr	r1, [sp, #4]
 800a9ec:	2900      	cmp	r1, #0
 800a9ee:	d100      	bne.n	800a9f2 <_scanf_float+0x222>
 800a9f0:	e726      	b.n	800a840 <_scanf_float+0x70>
 800a9f2:	0591      	lsls	r1, r2, #22
 800a9f4:	d404      	bmi.n	800aa00 <_scanf_float+0x230>
 800a9f6:	9901      	ldr	r1, [sp, #4]
 800a9f8:	9805      	ldr	r0, [sp, #20]
 800a9fa:	9509      	str	r5, [sp, #36]	; 0x24
 800a9fc:	1a09      	subs	r1, r1, r0
 800a9fe:	9108      	str	r1, [sp, #32]
 800aa00:	4933      	ldr	r1, [pc, #204]	; (800aad0 <_scanf_float+0x300>)
 800aa02:	400a      	ands	r2, r1
 800aa04:	21c0      	movs	r1, #192	; 0xc0
 800aa06:	0049      	lsls	r1, r1, #1
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	603a      	str	r2, [r7, #0]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	9201      	str	r2, [sp, #4]
 800aa10:	e786      	b.n	800a920 <_scanf_float+0x150>
 800aa12:	2203      	movs	r2, #3
 800aa14:	e79e      	b.n	800a954 <_scanf_float+0x184>
 800aa16:	23c0      	movs	r3, #192	; 0xc0
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	0031      	movs	r1, r6
 800aa1c:	58fb      	ldr	r3, [r7, r3]
 800aa1e:	9802      	ldr	r0, [sp, #8]
 800aa20:	4798      	blx	r3
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d100      	bne.n	800aa28 <_scanf_float+0x258>
 800aa26:	e6f6      	b.n	800a816 <_scanf_float+0x46>
 800aa28:	e703      	b.n	800a832 <_scanf_float+0x62>
 800aa2a:	3d01      	subs	r5, #1
 800aa2c:	593b      	ldr	r3, [r7, r4]
 800aa2e:	0032      	movs	r2, r6
 800aa30:	7829      	ldrb	r1, [r5, #0]
 800aa32:	9802      	ldr	r0, [sp, #8]
 800aa34:	4798      	blx	r3
 800aa36:	693b      	ldr	r3, [r7, #16]
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	613b      	str	r3, [r7, #16]
 800aa3c:	e707      	b.n	800a84e <_scanf_float+0x7e>
 800aa3e:	1e63      	subs	r3, r4, #1
 800aa40:	2b06      	cmp	r3, #6
 800aa42:	d80e      	bhi.n	800aa62 <_scanf_float+0x292>
 800aa44:	9503      	str	r5, [sp, #12]
 800aa46:	2c02      	cmp	r4, #2
 800aa48:	d920      	bls.n	800aa8c <_scanf_float+0x2bc>
 800aa4a:	1b63      	subs	r3, r4, r5
 800aa4c:	b2db      	uxtb	r3, r3
 800aa4e:	9306      	str	r3, [sp, #24]
 800aa50:	9b03      	ldr	r3, [sp, #12]
 800aa52:	9a06      	ldr	r2, [sp, #24]
 800aa54:	189b      	adds	r3, r3, r2
 800aa56:	b2db      	uxtb	r3, r3
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d827      	bhi.n	800aaac <_scanf_float+0x2dc>
 800aa5c:	3c03      	subs	r4, #3
 800aa5e:	b2e4      	uxtb	r4, r4
 800aa60:	1b2d      	subs	r5, r5, r4
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	05da      	lsls	r2, r3, #23
 800aa66:	d552      	bpl.n	800ab0e <_scanf_float+0x33e>
 800aa68:	055b      	lsls	r3, r3, #21
 800aa6a:	d535      	bpl.n	800aad8 <_scanf_float+0x308>
 800aa6c:	24be      	movs	r4, #190	; 0xbe
 800aa6e:	0064      	lsls	r4, r4, #1
 800aa70:	9b04      	ldr	r3, [sp, #16]
 800aa72:	429d      	cmp	r5, r3
 800aa74:	d800      	bhi.n	800aa78 <_scanf_float+0x2a8>
 800aa76:	e6ee      	b.n	800a856 <_scanf_float+0x86>
 800aa78:	3d01      	subs	r5, #1
 800aa7a:	593b      	ldr	r3, [r7, r4]
 800aa7c:	0032      	movs	r2, r6
 800aa7e:	7829      	ldrb	r1, [r5, #0]
 800aa80:	9802      	ldr	r0, [sp, #8]
 800aa82:	4798      	blx	r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	613b      	str	r3, [r7, #16]
 800aa8a:	e7f1      	b.n	800aa70 <_scanf_float+0x2a0>
 800aa8c:	24be      	movs	r4, #190	; 0xbe
 800aa8e:	0064      	lsls	r4, r4, #1
 800aa90:	9b04      	ldr	r3, [sp, #16]
 800aa92:	429d      	cmp	r5, r3
 800aa94:	d800      	bhi.n	800aa98 <_scanf_float+0x2c8>
 800aa96:	e6de      	b.n	800a856 <_scanf_float+0x86>
 800aa98:	3d01      	subs	r5, #1
 800aa9a:	593b      	ldr	r3, [r7, r4]
 800aa9c:	0032      	movs	r2, r6
 800aa9e:	7829      	ldrb	r1, [r5, #0]
 800aaa0:	9802      	ldr	r0, [sp, #8]
 800aaa2:	4798      	blx	r3
 800aaa4:	693b      	ldr	r3, [r7, #16]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	613b      	str	r3, [r7, #16]
 800aaaa:	e7f1      	b.n	800aa90 <_scanf_float+0x2c0>
 800aaac:	9b03      	ldr	r3, [sp, #12]
 800aaae:	0032      	movs	r2, r6
 800aab0:	3b01      	subs	r3, #1
 800aab2:	7819      	ldrb	r1, [r3, #0]
 800aab4:	9303      	str	r3, [sp, #12]
 800aab6:	23be      	movs	r3, #190	; 0xbe
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	58fb      	ldr	r3, [r7, r3]
 800aabc:	9802      	ldr	r0, [sp, #8]
 800aabe:	4798      	blx	r3
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	613b      	str	r3, [r7, #16]
 800aac6:	e7c3      	b.n	800aa50 <_scanf_float+0x280>
 800aac8:	fffffeff 	.word	0xfffffeff
 800aacc:	fffffe7f 	.word	0xfffffe7f
 800aad0:	fffff87f 	.word	0xfffff87f
 800aad4:	fffffd7f 	.word	0xfffffd7f
 800aad8:	693b      	ldr	r3, [r7, #16]
 800aada:	1e6c      	subs	r4, r5, #1
 800aadc:	7821      	ldrb	r1, [r4, #0]
 800aade:	3b01      	subs	r3, #1
 800aae0:	613b      	str	r3, [r7, #16]
 800aae2:	2965      	cmp	r1, #101	; 0x65
 800aae4:	d00c      	beq.n	800ab00 <_scanf_float+0x330>
 800aae6:	2945      	cmp	r1, #69	; 0x45
 800aae8:	d00a      	beq.n	800ab00 <_scanf_float+0x330>
 800aaea:	23be      	movs	r3, #190	; 0xbe
 800aaec:	005b      	lsls	r3, r3, #1
 800aaee:	58fb      	ldr	r3, [r7, r3]
 800aaf0:	0032      	movs	r2, r6
 800aaf2:	9802      	ldr	r0, [sp, #8]
 800aaf4:	4798      	blx	r3
 800aaf6:	693b      	ldr	r3, [r7, #16]
 800aaf8:	1eac      	subs	r4, r5, #2
 800aafa:	3b01      	subs	r3, #1
 800aafc:	7821      	ldrb	r1, [r4, #0]
 800aafe:	613b      	str	r3, [r7, #16]
 800ab00:	23be      	movs	r3, #190	; 0xbe
 800ab02:	005b      	lsls	r3, r3, #1
 800ab04:	0032      	movs	r2, r6
 800ab06:	58fb      	ldr	r3, [r7, r3]
 800ab08:	9802      	ldr	r0, [sp, #8]
 800ab0a:	4798      	blx	r3
 800ab0c:	0025      	movs	r5, r4
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	2310      	movs	r3, #16
 800ab12:	0011      	movs	r1, r2
 800ab14:	4019      	ands	r1, r3
 800ab16:	9103      	str	r1, [sp, #12]
 800ab18:	421a      	tst	r2, r3
 800ab1a:	d15b      	bne.n	800abd4 <_scanf_float+0x404>
 800ab1c:	22c0      	movs	r2, #192	; 0xc0
 800ab1e:	7029      	strb	r1, [r5, #0]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	00d2      	lsls	r2, r2, #3
 800ab24:	4013      	ands	r3, r2
 800ab26:	2280      	movs	r2, #128	; 0x80
 800ab28:	00d2      	lsls	r2, r2, #3
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d11d      	bne.n	800ab6a <_scanf_float+0x39a>
 800ab2e:	9b05      	ldr	r3, [sp, #20]
 800ab30:	9a01      	ldr	r2, [sp, #4]
 800ab32:	9901      	ldr	r1, [sp, #4]
 800ab34:	1a9a      	subs	r2, r3, r2
 800ab36:	428b      	cmp	r3, r1
 800ab38:	d124      	bne.n	800ab84 <_scanf_float+0x3b4>
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	9904      	ldr	r1, [sp, #16]
 800ab3e:	9802      	ldr	r0, [sp, #8]
 800ab40:	f002 fca2 	bl	800d488 <_strtod_r>
 800ab44:	9b07      	ldr	r3, [sp, #28]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	0004      	movs	r4, r0
 800ab4a:	000d      	movs	r5, r1
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	0791      	lsls	r1, r2, #30
 800ab50:	d525      	bpl.n	800ab9e <_scanf_float+0x3ce>
 800ab52:	9907      	ldr	r1, [sp, #28]
 800ab54:	1d1a      	adds	r2, r3, #4
 800ab56:	600a      	str	r2, [r1, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	601c      	str	r4, [r3, #0]
 800ab5c:	605d      	str	r5, [r3, #4]
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3301      	adds	r3, #1
 800ab62:	60fb      	str	r3, [r7, #12]
 800ab64:	9803      	ldr	r0, [sp, #12]
 800ab66:	b00b      	add	sp, #44	; 0x2c
 800ab68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab6a:	9b08      	ldr	r3, [sp, #32]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d0e4      	beq.n	800ab3a <_scanf_float+0x36a>
 800ab70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab72:	9a03      	ldr	r2, [sp, #12]
 800ab74:	1c59      	adds	r1, r3, #1
 800ab76:	9802      	ldr	r0, [sp, #8]
 800ab78:	230a      	movs	r3, #10
 800ab7a:	f002 fd13 	bl	800d5a4 <_strtol_r>
 800ab7e:	9b08      	ldr	r3, [sp, #32]
 800ab80:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800ab82:	1ac2      	subs	r2, r0, r3
 800ab84:	003b      	movs	r3, r7
 800ab86:	3370      	adds	r3, #112	; 0x70
 800ab88:	33ff      	adds	r3, #255	; 0xff
 800ab8a:	429d      	cmp	r5, r3
 800ab8c:	d302      	bcc.n	800ab94 <_scanf_float+0x3c4>
 800ab8e:	003d      	movs	r5, r7
 800ab90:	356f      	adds	r5, #111	; 0x6f
 800ab92:	35ff      	adds	r5, #255	; 0xff
 800ab94:	0028      	movs	r0, r5
 800ab96:	4910      	ldr	r1, [pc, #64]	; (800abd8 <_scanf_float+0x408>)
 800ab98:	f000 f8e6 	bl	800ad68 <siprintf>
 800ab9c:	e7cd      	b.n	800ab3a <_scanf_float+0x36a>
 800ab9e:	1d19      	adds	r1, r3, #4
 800aba0:	0752      	lsls	r2, r2, #29
 800aba2:	d502      	bpl.n	800abaa <_scanf_float+0x3da>
 800aba4:	9a07      	ldr	r2, [sp, #28]
 800aba6:	6011      	str	r1, [r2, #0]
 800aba8:	e7d6      	b.n	800ab58 <_scanf_float+0x388>
 800abaa:	9a07      	ldr	r2, [sp, #28]
 800abac:	0020      	movs	r0, r4
 800abae:	6011      	str	r1, [r2, #0]
 800abb0:	681e      	ldr	r6, [r3, #0]
 800abb2:	0022      	movs	r2, r4
 800abb4:	002b      	movs	r3, r5
 800abb6:	0029      	movs	r1, r5
 800abb8:	f7f7 fa84 	bl	80020c4 <__aeabi_dcmpun>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	d004      	beq.n	800abca <_scanf_float+0x3fa>
 800abc0:	4806      	ldr	r0, [pc, #24]	; (800abdc <_scanf_float+0x40c>)
 800abc2:	f000 f9d9 	bl	800af78 <nanf>
 800abc6:	6030      	str	r0, [r6, #0]
 800abc8:	e7c9      	b.n	800ab5e <_scanf_float+0x38e>
 800abca:	0020      	movs	r0, r4
 800abcc:	0029      	movs	r1, r5
 800abce:	f7f7 fb23 	bl	8002218 <__aeabi_d2f>
 800abd2:	e7f8      	b.n	800abc6 <_scanf_float+0x3f6>
 800abd4:	2300      	movs	r3, #0
 800abd6:	e63f      	b.n	800a858 <_scanf_float+0x88>
 800abd8:	0800e9b4 	.word	0x0800e9b4
 800abdc:	0800ed45 	.word	0x0800ed45

0800abe0 <std>:
 800abe0:	2300      	movs	r3, #0
 800abe2:	b510      	push	{r4, lr}
 800abe4:	0004      	movs	r4, r0
 800abe6:	6003      	str	r3, [r0, #0]
 800abe8:	6043      	str	r3, [r0, #4]
 800abea:	6083      	str	r3, [r0, #8]
 800abec:	8181      	strh	r1, [r0, #12]
 800abee:	6643      	str	r3, [r0, #100]	; 0x64
 800abf0:	81c2      	strh	r2, [r0, #14]
 800abf2:	6103      	str	r3, [r0, #16]
 800abf4:	6143      	str	r3, [r0, #20]
 800abf6:	6183      	str	r3, [r0, #24]
 800abf8:	0019      	movs	r1, r3
 800abfa:	2208      	movs	r2, #8
 800abfc:	305c      	adds	r0, #92	; 0x5c
 800abfe:	f000 f91f 	bl	800ae40 <memset>
 800ac02:	4b0b      	ldr	r3, [pc, #44]	; (800ac30 <std+0x50>)
 800ac04:	6224      	str	r4, [r4, #32]
 800ac06:	6263      	str	r3, [r4, #36]	; 0x24
 800ac08:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <std+0x54>)
 800ac0a:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac0c:	4b0a      	ldr	r3, [pc, #40]	; (800ac38 <std+0x58>)
 800ac0e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac10:	4b0a      	ldr	r3, [pc, #40]	; (800ac3c <std+0x5c>)
 800ac12:	6323      	str	r3, [r4, #48]	; 0x30
 800ac14:	4b0a      	ldr	r3, [pc, #40]	; (800ac40 <std+0x60>)
 800ac16:	429c      	cmp	r4, r3
 800ac18:	d005      	beq.n	800ac26 <std+0x46>
 800ac1a:	4b0a      	ldr	r3, [pc, #40]	; (800ac44 <std+0x64>)
 800ac1c:	429c      	cmp	r4, r3
 800ac1e:	d002      	beq.n	800ac26 <std+0x46>
 800ac20:	4b09      	ldr	r3, [pc, #36]	; (800ac48 <std+0x68>)
 800ac22:	429c      	cmp	r4, r3
 800ac24:	d103      	bne.n	800ac2e <std+0x4e>
 800ac26:	0020      	movs	r0, r4
 800ac28:	3058      	adds	r0, #88	; 0x58
 800ac2a:	f000 f98d 	bl	800af48 <__retarget_lock_init_recursive>
 800ac2e:	bd10      	pop	{r4, pc}
 800ac30:	0800ada9 	.word	0x0800ada9
 800ac34:	0800add1 	.word	0x0800add1
 800ac38:	0800ae09 	.word	0x0800ae09
 800ac3c:	0800ae35 	.word	0x0800ae35
 800ac40:	20007ff8 	.word	0x20007ff8
 800ac44:	20008060 	.word	0x20008060
 800ac48:	200080c8 	.word	0x200080c8

0800ac4c <stdio_exit_handler>:
 800ac4c:	b510      	push	{r4, lr}
 800ac4e:	4a03      	ldr	r2, [pc, #12]	; (800ac5c <stdio_exit_handler+0x10>)
 800ac50:	4903      	ldr	r1, [pc, #12]	; (800ac60 <stdio_exit_handler+0x14>)
 800ac52:	4804      	ldr	r0, [pc, #16]	; (800ac64 <stdio_exit_handler+0x18>)
 800ac54:	f000 f86c 	bl	800ad30 <_fwalk_sglue>
 800ac58:	bd10      	pop	{r4, pc}
 800ac5a:	46c0      	nop			; (mov r8, r8)
 800ac5c:	20000040 	.word	0x20000040
 800ac60:	0800d985 	.word	0x0800d985
 800ac64:	2000004c 	.word	0x2000004c

0800ac68 <cleanup_stdio>:
 800ac68:	6841      	ldr	r1, [r0, #4]
 800ac6a:	4b0b      	ldr	r3, [pc, #44]	; (800ac98 <cleanup_stdio+0x30>)
 800ac6c:	b510      	push	{r4, lr}
 800ac6e:	0004      	movs	r4, r0
 800ac70:	4299      	cmp	r1, r3
 800ac72:	d001      	beq.n	800ac78 <cleanup_stdio+0x10>
 800ac74:	f002 fe86 	bl	800d984 <_fflush_r>
 800ac78:	68a1      	ldr	r1, [r4, #8]
 800ac7a:	4b08      	ldr	r3, [pc, #32]	; (800ac9c <cleanup_stdio+0x34>)
 800ac7c:	4299      	cmp	r1, r3
 800ac7e:	d002      	beq.n	800ac86 <cleanup_stdio+0x1e>
 800ac80:	0020      	movs	r0, r4
 800ac82:	f002 fe7f 	bl	800d984 <_fflush_r>
 800ac86:	68e1      	ldr	r1, [r4, #12]
 800ac88:	4b05      	ldr	r3, [pc, #20]	; (800aca0 <cleanup_stdio+0x38>)
 800ac8a:	4299      	cmp	r1, r3
 800ac8c:	d002      	beq.n	800ac94 <cleanup_stdio+0x2c>
 800ac8e:	0020      	movs	r0, r4
 800ac90:	f002 fe78 	bl	800d984 <_fflush_r>
 800ac94:	bd10      	pop	{r4, pc}
 800ac96:	46c0      	nop			; (mov r8, r8)
 800ac98:	20007ff8 	.word	0x20007ff8
 800ac9c:	20008060 	.word	0x20008060
 800aca0:	200080c8 	.word	0x200080c8

0800aca4 <global_stdio_init.part.0>:
 800aca4:	b510      	push	{r4, lr}
 800aca6:	4b09      	ldr	r3, [pc, #36]	; (800accc <global_stdio_init.part.0+0x28>)
 800aca8:	4a09      	ldr	r2, [pc, #36]	; (800acd0 <global_stdio_init.part.0+0x2c>)
 800acaa:	2104      	movs	r1, #4
 800acac:	601a      	str	r2, [r3, #0]
 800acae:	4809      	ldr	r0, [pc, #36]	; (800acd4 <global_stdio_init.part.0+0x30>)
 800acb0:	2200      	movs	r2, #0
 800acb2:	f7ff ff95 	bl	800abe0 <std>
 800acb6:	2201      	movs	r2, #1
 800acb8:	2109      	movs	r1, #9
 800acba:	4807      	ldr	r0, [pc, #28]	; (800acd8 <global_stdio_init.part.0+0x34>)
 800acbc:	f7ff ff90 	bl	800abe0 <std>
 800acc0:	2202      	movs	r2, #2
 800acc2:	2112      	movs	r1, #18
 800acc4:	4805      	ldr	r0, [pc, #20]	; (800acdc <global_stdio_init.part.0+0x38>)
 800acc6:	f7ff ff8b 	bl	800abe0 <std>
 800acca:	bd10      	pop	{r4, pc}
 800accc:	20008130 	.word	0x20008130
 800acd0:	0800ac4d 	.word	0x0800ac4d
 800acd4:	20007ff8 	.word	0x20007ff8
 800acd8:	20008060 	.word	0x20008060
 800acdc:	200080c8 	.word	0x200080c8

0800ace0 <__sfp_lock_acquire>:
 800ace0:	b510      	push	{r4, lr}
 800ace2:	4802      	ldr	r0, [pc, #8]	; (800acec <__sfp_lock_acquire+0xc>)
 800ace4:	f000 f931 	bl	800af4a <__retarget_lock_acquire_recursive>
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	46c0      	nop			; (mov r8, r8)
 800acec:	20008139 	.word	0x20008139

0800acf0 <__sfp_lock_release>:
 800acf0:	b510      	push	{r4, lr}
 800acf2:	4802      	ldr	r0, [pc, #8]	; (800acfc <__sfp_lock_release+0xc>)
 800acf4:	f000 f92a 	bl	800af4c <__retarget_lock_release_recursive>
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	46c0      	nop			; (mov r8, r8)
 800acfc:	20008139 	.word	0x20008139

0800ad00 <__sinit>:
 800ad00:	b510      	push	{r4, lr}
 800ad02:	0004      	movs	r4, r0
 800ad04:	f7ff ffec 	bl	800ace0 <__sfp_lock_acquire>
 800ad08:	6a23      	ldr	r3, [r4, #32]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <__sinit+0x14>
 800ad0e:	f7ff ffef 	bl	800acf0 <__sfp_lock_release>
 800ad12:	bd10      	pop	{r4, pc}
 800ad14:	4b04      	ldr	r3, [pc, #16]	; (800ad28 <__sinit+0x28>)
 800ad16:	6223      	str	r3, [r4, #32]
 800ad18:	4b04      	ldr	r3, [pc, #16]	; (800ad2c <__sinit+0x2c>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f6      	bne.n	800ad0e <__sinit+0xe>
 800ad20:	f7ff ffc0 	bl	800aca4 <global_stdio_init.part.0>
 800ad24:	e7f3      	b.n	800ad0e <__sinit+0xe>
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	0800ac69 	.word	0x0800ac69
 800ad2c:	20008130 	.word	0x20008130

0800ad30 <_fwalk_sglue>:
 800ad30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad32:	0014      	movs	r4, r2
 800ad34:	2600      	movs	r6, #0
 800ad36:	9000      	str	r0, [sp, #0]
 800ad38:	9101      	str	r1, [sp, #4]
 800ad3a:	68a5      	ldr	r5, [r4, #8]
 800ad3c:	6867      	ldr	r7, [r4, #4]
 800ad3e:	3f01      	subs	r7, #1
 800ad40:	d504      	bpl.n	800ad4c <_fwalk_sglue+0x1c>
 800ad42:	6824      	ldr	r4, [r4, #0]
 800ad44:	2c00      	cmp	r4, #0
 800ad46:	d1f8      	bne.n	800ad3a <_fwalk_sglue+0xa>
 800ad48:	0030      	movs	r0, r6
 800ad4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad4c:	89ab      	ldrh	r3, [r5, #12]
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d908      	bls.n	800ad64 <_fwalk_sglue+0x34>
 800ad52:	220e      	movs	r2, #14
 800ad54:	5eab      	ldrsh	r3, [r5, r2]
 800ad56:	3301      	adds	r3, #1
 800ad58:	d004      	beq.n	800ad64 <_fwalk_sglue+0x34>
 800ad5a:	0029      	movs	r1, r5
 800ad5c:	9800      	ldr	r0, [sp, #0]
 800ad5e:	9b01      	ldr	r3, [sp, #4]
 800ad60:	4798      	blx	r3
 800ad62:	4306      	orrs	r6, r0
 800ad64:	3568      	adds	r5, #104	; 0x68
 800ad66:	e7ea      	b.n	800ad3e <_fwalk_sglue+0xe>

0800ad68 <siprintf>:
 800ad68:	b40e      	push	{r1, r2, r3}
 800ad6a:	b500      	push	{lr}
 800ad6c:	490b      	ldr	r1, [pc, #44]	; (800ad9c <siprintf+0x34>)
 800ad6e:	b09c      	sub	sp, #112	; 0x70
 800ad70:	ab1d      	add	r3, sp, #116	; 0x74
 800ad72:	9002      	str	r0, [sp, #8]
 800ad74:	9006      	str	r0, [sp, #24]
 800ad76:	9107      	str	r1, [sp, #28]
 800ad78:	9104      	str	r1, [sp, #16]
 800ad7a:	4809      	ldr	r0, [pc, #36]	; (800ada0 <siprintf+0x38>)
 800ad7c:	4909      	ldr	r1, [pc, #36]	; (800ada4 <siprintf+0x3c>)
 800ad7e:	cb04      	ldmia	r3!, {r2}
 800ad80:	9105      	str	r1, [sp, #20]
 800ad82:	6800      	ldr	r0, [r0, #0]
 800ad84:	a902      	add	r1, sp, #8
 800ad86:	9301      	str	r3, [sp, #4]
 800ad88:	f002 fc72 	bl	800d670 <_svfiprintf_r>
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	9b02      	ldr	r3, [sp, #8]
 800ad90:	701a      	strb	r2, [r3, #0]
 800ad92:	b01c      	add	sp, #112	; 0x70
 800ad94:	bc08      	pop	{r3}
 800ad96:	b003      	add	sp, #12
 800ad98:	4718      	bx	r3
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	7fffffff 	.word	0x7fffffff
 800ada0:	20000098 	.word	0x20000098
 800ada4:	ffff0208 	.word	0xffff0208

0800ada8 <__sread>:
 800ada8:	b570      	push	{r4, r5, r6, lr}
 800adaa:	000c      	movs	r4, r1
 800adac:	250e      	movs	r5, #14
 800adae:	5f49      	ldrsh	r1, [r1, r5]
 800adb0:	f000 f878 	bl	800aea4 <_read_r>
 800adb4:	2800      	cmp	r0, #0
 800adb6:	db03      	blt.n	800adc0 <__sread+0x18>
 800adb8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800adba:	181b      	adds	r3, r3, r0
 800adbc:	6563      	str	r3, [r4, #84]	; 0x54
 800adbe:	bd70      	pop	{r4, r5, r6, pc}
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	4a02      	ldr	r2, [pc, #8]	; (800adcc <__sread+0x24>)
 800adc4:	4013      	ands	r3, r2
 800adc6:	81a3      	strh	r3, [r4, #12]
 800adc8:	e7f9      	b.n	800adbe <__sread+0x16>
 800adca:	46c0      	nop			; (mov r8, r8)
 800adcc:	ffffefff 	.word	0xffffefff

0800add0 <__swrite>:
 800add0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800add2:	001f      	movs	r7, r3
 800add4:	898b      	ldrh	r3, [r1, #12]
 800add6:	0005      	movs	r5, r0
 800add8:	000c      	movs	r4, r1
 800adda:	0016      	movs	r6, r2
 800addc:	05db      	lsls	r3, r3, #23
 800adde:	d505      	bpl.n	800adec <__swrite+0x1c>
 800ade0:	230e      	movs	r3, #14
 800ade2:	5ec9      	ldrsh	r1, [r1, r3]
 800ade4:	2200      	movs	r2, #0
 800ade6:	2302      	movs	r3, #2
 800ade8:	f000 f848 	bl	800ae7c <_lseek_r>
 800adec:	89a3      	ldrh	r3, [r4, #12]
 800adee:	4a05      	ldr	r2, [pc, #20]	; (800ae04 <__swrite+0x34>)
 800adf0:	0028      	movs	r0, r5
 800adf2:	4013      	ands	r3, r2
 800adf4:	81a3      	strh	r3, [r4, #12]
 800adf6:	0032      	movs	r2, r6
 800adf8:	230e      	movs	r3, #14
 800adfa:	5ee1      	ldrsh	r1, [r4, r3]
 800adfc:	003b      	movs	r3, r7
 800adfe:	f000 f865 	bl	800aecc <_write_r>
 800ae02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae04:	ffffefff 	.word	0xffffefff

0800ae08 <__sseek>:
 800ae08:	b570      	push	{r4, r5, r6, lr}
 800ae0a:	000c      	movs	r4, r1
 800ae0c:	250e      	movs	r5, #14
 800ae0e:	5f49      	ldrsh	r1, [r1, r5]
 800ae10:	f000 f834 	bl	800ae7c <_lseek_r>
 800ae14:	89a3      	ldrh	r3, [r4, #12]
 800ae16:	1c42      	adds	r2, r0, #1
 800ae18:	d103      	bne.n	800ae22 <__sseek+0x1a>
 800ae1a:	4a05      	ldr	r2, [pc, #20]	; (800ae30 <__sseek+0x28>)
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	81a3      	strh	r3, [r4, #12]
 800ae20:	bd70      	pop	{r4, r5, r6, pc}
 800ae22:	2280      	movs	r2, #128	; 0x80
 800ae24:	0152      	lsls	r2, r2, #5
 800ae26:	4313      	orrs	r3, r2
 800ae28:	81a3      	strh	r3, [r4, #12]
 800ae2a:	6560      	str	r0, [r4, #84]	; 0x54
 800ae2c:	e7f8      	b.n	800ae20 <__sseek+0x18>
 800ae2e:	46c0      	nop			; (mov r8, r8)
 800ae30:	ffffefff 	.word	0xffffefff

0800ae34 <__sclose>:
 800ae34:	b510      	push	{r4, lr}
 800ae36:	230e      	movs	r3, #14
 800ae38:	5ec9      	ldrsh	r1, [r1, r3]
 800ae3a:	f000 f80d 	bl	800ae58 <_close_r>
 800ae3e:	bd10      	pop	{r4, pc}

0800ae40 <memset>:
 800ae40:	0003      	movs	r3, r0
 800ae42:	1882      	adds	r2, r0, r2
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d100      	bne.n	800ae4a <memset+0xa>
 800ae48:	4770      	bx	lr
 800ae4a:	7019      	strb	r1, [r3, #0]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	e7f9      	b.n	800ae44 <memset+0x4>

0800ae50 <_localeconv_r>:
 800ae50:	4800      	ldr	r0, [pc, #0]	; (800ae54 <_localeconv_r+0x4>)
 800ae52:	4770      	bx	lr
 800ae54:	2000018c 	.word	0x2000018c

0800ae58 <_close_r>:
 800ae58:	2300      	movs	r3, #0
 800ae5a:	b570      	push	{r4, r5, r6, lr}
 800ae5c:	4d06      	ldr	r5, [pc, #24]	; (800ae78 <_close_r+0x20>)
 800ae5e:	0004      	movs	r4, r0
 800ae60:	0008      	movs	r0, r1
 800ae62:	602b      	str	r3, [r5, #0]
 800ae64:	f7f7 fd9d 	bl	80029a2 <_close>
 800ae68:	1c43      	adds	r3, r0, #1
 800ae6a:	d103      	bne.n	800ae74 <_close_r+0x1c>
 800ae6c:	682b      	ldr	r3, [r5, #0]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d000      	beq.n	800ae74 <_close_r+0x1c>
 800ae72:	6023      	str	r3, [r4, #0]
 800ae74:	bd70      	pop	{r4, r5, r6, pc}
 800ae76:	46c0      	nop			; (mov r8, r8)
 800ae78:	20008134 	.word	0x20008134

0800ae7c <_lseek_r>:
 800ae7c:	b570      	push	{r4, r5, r6, lr}
 800ae7e:	0004      	movs	r4, r0
 800ae80:	0008      	movs	r0, r1
 800ae82:	0011      	movs	r1, r2
 800ae84:	001a      	movs	r2, r3
 800ae86:	2300      	movs	r3, #0
 800ae88:	4d05      	ldr	r5, [pc, #20]	; (800aea0 <_lseek_r+0x24>)
 800ae8a:	602b      	str	r3, [r5, #0]
 800ae8c:	f7f7 fdaa 	bl	80029e4 <_lseek>
 800ae90:	1c43      	adds	r3, r0, #1
 800ae92:	d103      	bne.n	800ae9c <_lseek_r+0x20>
 800ae94:	682b      	ldr	r3, [r5, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d000      	beq.n	800ae9c <_lseek_r+0x20>
 800ae9a:	6023      	str	r3, [r4, #0]
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	20008134 	.word	0x20008134

0800aea4 <_read_r>:
 800aea4:	b570      	push	{r4, r5, r6, lr}
 800aea6:	0004      	movs	r4, r0
 800aea8:	0008      	movs	r0, r1
 800aeaa:	0011      	movs	r1, r2
 800aeac:	001a      	movs	r2, r3
 800aeae:	2300      	movs	r3, #0
 800aeb0:	4d05      	ldr	r5, [pc, #20]	; (800aec8 <_read_r+0x24>)
 800aeb2:	602b      	str	r3, [r5, #0]
 800aeb4:	f7f7 fd3c 	bl	8002930 <_read>
 800aeb8:	1c43      	adds	r3, r0, #1
 800aeba:	d103      	bne.n	800aec4 <_read_r+0x20>
 800aebc:	682b      	ldr	r3, [r5, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d000      	beq.n	800aec4 <_read_r+0x20>
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	bd70      	pop	{r4, r5, r6, pc}
 800aec6:	46c0      	nop			; (mov r8, r8)
 800aec8:	20008134 	.word	0x20008134

0800aecc <_write_r>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	0004      	movs	r4, r0
 800aed0:	0008      	movs	r0, r1
 800aed2:	0011      	movs	r1, r2
 800aed4:	001a      	movs	r2, r3
 800aed6:	2300      	movs	r3, #0
 800aed8:	4d05      	ldr	r5, [pc, #20]	; (800aef0 <_write_r+0x24>)
 800aeda:	602b      	str	r3, [r5, #0]
 800aedc:	f7f7 fd45 	bl	800296a <_write>
 800aee0:	1c43      	adds	r3, r0, #1
 800aee2:	d103      	bne.n	800aeec <_write_r+0x20>
 800aee4:	682b      	ldr	r3, [r5, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d000      	beq.n	800aeec <_write_r+0x20>
 800aeea:	6023      	str	r3, [r4, #0]
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	46c0      	nop			; (mov r8, r8)
 800aef0:	20008134 	.word	0x20008134

0800aef4 <__errno>:
 800aef4:	4b01      	ldr	r3, [pc, #4]	; (800aefc <__errno+0x8>)
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	4770      	bx	lr
 800aefa:	46c0      	nop			; (mov r8, r8)
 800aefc:	20000098 	.word	0x20000098

0800af00 <__libc_init_array>:
 800af00:	b570      	push	{r4, r5, r6, lr}
 800af02:	2600      	movs	r6, #0
 800af04:	4c0c      	ldr	r4, [pc, #48]	; (800af38 <__libc_init_array+0x38>)
 800af06:	4d0d      	ldr	r5, [pc, #52]	; (800af3c <__libc_init_array+0x3c>)
 800af08:	1b64      	subs	r4, r4, r5
 800af0a:	10a4      	asrs	r4, r4, #2
 800af0c:	42a6      	cmp	r6, r4
 800af0e:	d109      	bne.n	800af24 <__libc_init_array+0x24>
 800af10:	2600      	movs	r6, #0
 800af12:	f003 fc71 	bl	800e7f8 <_init>
 800af16:	4c0a      	ldr	r4, [pc, #40]	; (800af40 <__libc_init_array+0x40>)
 800af18:	4d0a      	ldr	r5, [pc, #40]	; (800af44 <__libc_init_array+0x44>)
 800af1a:	1b64      	subs	r4, r4, r5
 800af1c:	10a4      	asrs	r4, r4, #2
 800af1e:	42a6      	cmp	r6, r4
 800af20:	d105      	bne.n	800af2e <__libc_init_array+0x2e>
 800af22:	bd70      	pop	{r4, r5, r6, pc}
 800af24:	00b3      	lsls	r3, r6, #2
 800af26:	58eb      	ldr	r3, [r5, r3]
 800af28:	4798      	blx	r3
 800af2a:	3601      	adds	r6, #1
 800af2c:	e7ee      	b.n	800af0c <__libc_init_array+0xc>
 800af2e:	00b3      	lsls	r3, r6, #2
 800af30:	58eb      	ldr	r3, [r5, r3]
 800af32:	4798      	blx	r3
 800af34:	3601      	adds	r6, #1
 800af36:	e7f2      	b.n	800af1e <__libc_init_array+0x1e>
 800af38:	0800eda8 	.word	0x0800eda8
 800af3c:	0800eda8 	.word	0x0800eda8
 800af40:	0800edac 	.word	0x0800edac
 800af44:	0800eda8 	.word	0x0800eda8

0800af48 <__retarget_lock_init_recursive>:
 800af48:	4770      	bx	lr

0800af4a <__retarget_lock_acquire_recursive>:
 800af4a:	4770      	bx	lr

0800af4c <__retarget_lock_release_recursive>:
 800af4c:	4770      	bx	lr

0800af4e <memchr>:
 800af4e:	b2c9      	uxtb	r1, r1
 800af50:	1882      	adds	r2, r0, r2
 800af52:	4290      	cmp	r0, r2
 800af54:	d101      	bne.n	800af5a <memchr+0xc>
 800af56:	2000      	movs	r0, #0
 800af58:	4770      	bx	lr
 800af5a:	7803      	ldrb	r3, [r0, #0]
 800af5c:	428b      	cmp	r3, r1
 800af5e:	d0fb      	beq.n	800af58 <memchr+0xa>
 800af60:	3001      	adds	r0, #1
 800af62:	e7f6      	b.n	800af52 <memchr+0x4>

0800af64 <memcpy>:
 800af64:	2300      	movs	r3, #0
 800af66:	b510      	push	{r4, lr}
 800af68:	429a      	cmp	r2, r3
 800af6a:	d100      	bne.n	800af6e <memcpy+0xa>
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	5ccc      	ldrb	r4, [r1, r3]
 800af70:	54c4      	strb	r4, [r0, r3]
 800af72:	3301      	adds	r3, #1
 800af74:	e7f8      	b.n	800af68 <memcpy+0x4>
	...

0800af78 <nanf>:
 800af78:	4800      	ldr	r0, [pc, #0]	; (800af7c <nanf+0x4>)
 800af7a:	4770      	bx	lr
 800af7c:	7fc00000 	.word	0x7fc00000

0800af80 <quorem>:
 800af80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af82:	6902      	ldr	r2, [r0, #16]
 800af84:	690b      	ldr	r3, [r1, #16]
 800af86:	b089      	sub	sp, #36	; 0x24
 800af88:	0007      	movs	r7, r0
 800af8a:	9104      	str	r1, [sp, #16]
 800af8c:	2000      	movs	r0, #0
 800af8e:	429a      	cmp	r2, r3
 800af90:	db69      	blt.n	800b066 <quorem+0xe6>
 800af92:	3b01      	subs	r3, #1
 800af94:	009c      	lsls	r4, r3, #2
 800af96:	9301      	str	r3, [sp, #4]
 800af98:	000b      	movs	r3, r1
 800af9a:	3314      	adds	r3, #20
 800af9c:	9306      	str	r3, [sp, #24]
 800af9e:	191b      	adds	r3, r3, r4
 800afa0:	9305      	str	r3, [sp, #20]
 800afa2:	003b      	movs	r3, r7
 800afa4:	3314      	adds	r3, #20
 800afa6:	9303      	str	r3, [sp, #12]
 800afa8:	191c      	adds	r4, r3, r4
 800afaa:	9b05      	ldr	r3, [sp, #20]
 800afac:	6826      	ldr	r6, [r4, #0]
 800afae:	681d      	ldr	r5, [r3, #0]
 800afb0:	0030      	movs	r0, r6
 800afb2:	3501      	adds	r5, #1
 800afb4:	0029      	movs	r1, r5
 800afb6:	f7f5 f8c3 	bl	8000140 <__udivsi3>
 800afba:	9002      	str	r0, [sp, #8]
 800afbc:	42ae      	cmp	r6, r5
 800afbe:	d329      	bcc.n	800b014 <quorem+0x94>
 800afc0:	9b06      	ldr	r3, [sp, #24]
 800afc2:	2600      	movs	r6, #0
 800afc4:	469c      	mov	ip, r3
 800afc6:	9d03      	ldr	r5, [sp, #12]
 800afc8:	9606      	str	r6, [sp, #24]
 800afca:	4662      	mov	r2, ip
 800afcc:	ca08      	ldmia	r2!, {r3}
 800afce:	6828      	ldr	r0, [r5, #0]
 800afd0:	4694      	mov	ip, r2
 800afd2:	9a02      	ldr	r2, [sp, #8]
 800afd4:	b299      	uxth	r1, r3
 800afd6:	4351      	muls	r1, r2
 800afd8:	0c1b      	lsrs	r3, r3, #16
 800afda:	4353      	muls	r3, r2
 800afdc:	1989      	adds	r1, r1, r6
 800afde:	0c0a      	lsrs	r2, r1, #16
 800afe0:	189b      	adds	r3, r3, r2
 800afe2:	9307      	str	r3, [sp, #28]
 800afe4:	0c1e      	lsrs	r6, r3, #16
 800afe6:	9b06      	ldr	r3, [sp, #24]
 800afe8:	b282      	uxth	r2, r0
 800afea:	18d2      	adds	r2, r2, r3
 800afec:	466b      	mov	r3, sp
 800afee:	b289      	uxth	r1, r1
 800aff0:	8b9b      	ldrh	r3, [r3, #28]
 800aff2:	1a52      	subs	r2, r2, r1
 800aff4:	0c01      	lsrs	r1, r0, #16
 800aff6:	1ac9      	subs	r1, r1, r3
 800aff8:	1413      	asrs	r3, r2, #16
 800affa:	18cb      	adds	r3, r1, r3
 800affc:	1419      	asrs	r1, r3, #16
 800affe:	b292      	uxth	r2, r2
 800b000:	041b      	lsls	r3, r3, #16
 800b002:	4313      	orrs	r3, r2
 800b004:	c508      	stmia	r5!, {r3}
 800b006:	9b05      	ldr	r3, [sp, #20]
 800b008:	9106      	str	r1, [sp, #24]
 800b00a:	4563      	cmp	r3, ip
 800b00c:	d2dd      	bcs.n	800afca <quorem+0x4a>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d030      	beq.n	800b076 <quorem+0xf6>
 800b014:	0038      	movs	r0, r7
 800b016:	9904      	ldr	r1, [sp, #16]
 800b018:	f001 fa2a 	bl	800c470 <__mcmp>
 800b01c:	2800      	cmp	r0, #0
 800b01e:	db21      	blt.n	800b064 <quorem+0xe4>
 800b020:	0038      	movs	r0, r7
 800b022:	2600      	movs	r6, #0
 800b024:	9b02      	ldr	r3, [sp, #8]
 800b026:	9c04      	ldr	r4, [sp, #16]
 800b028:	3301      	adds	r3, #1
 800b02a:	9302      	str	r3, [sp, #8]
 800b02c:	3014      	adds	r0, #20
 800b02e:	3414      	adds	r4, #20
 800b030:	6803      	ldr	r3, [r0, #0]
 800b032:	cc02      	ldmia	r4!, {r1}
 800b034:	b29d      	uxth	r5, r3
 800b036:	19ad      	adds	r5, r5, r6
 800b038:	b28a      	uxth	r2, r1
 800b03a:	1aaa      	subs	r2, r5, r2
 800b03c:	0c09      	lsrs	r1, r1, #16
 800b03e:	0c1b      	lsrs	r3, r3, #16
 800b040:	1a5b      	subs	r3, r3, r1
 800b042:	1411      	asrs	r1, r2, #16
 800b044:	185b      	adds	r3, r3, r1
 800b046:	141e      	asrs	r6, r3, #16
 800b048:	b292      	uxth	r2, r2
 800b04a:	041b      	lsls	r3, r3, #16
 800b04c:	4313      	orrs	r3, r2
 800b04e:	c008      	stmia	r0!, {r3}
 800b050:	9b05      	ldr	r3, [sp, #20]
 800b052:	42a3      	cmp	r3, r4
 800b054:	d2ec      	bcs.n	800b030 <quorem+0xb0>
 800b056:	9b01      	ldr	r3, [sp, #4]
 800b058:	9a03      	ldr	r2, [sp, #12]
 800b05a:	009b      	lsls	r3, r3, #2
 800b05c:	18d3      	adds	r3, r2, r3
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	2a00      	cmp	r2, #0
 800b062:	d015      	beq.n	800b090 <quorem+0x110>
 800b064:	9802      	ldr	r0, [sp, #8]
 800b066:	b009      	add	sp, #36	; 0x24
 800b068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d106      	bne.n	800b07e <quorem+0xfe>
 800b070:	9b01      	ldr	r3, [sp, #4]
 800b072:	3b01      	subs	r3, #1
 800b074:	9301      	str	r3, [sp, #4]
 800b076:	9b03      	ldr	r3, [sp, #12]
 800b078:	3c04      	subs	r4, #4
 800b07a:	42a3      	cmp	r3, r4
 800b07c:	d3f5      	bcc.n	800b06a <quorem+0xea>
 800b07e:	9b01      	ldr	r3, [sp, #4]
 800b080:	613b      	str	r3, [r7, #16]
 800b082:	e7c7      	b.n	800b014 <quorem+0x94>
 800b084:	681a      	ldr	r2, [r3, #0]
 800b086:	2a00      	cmp	r2, #0
 800b088:	d106      	bne.n	800b098 <quorem+0x118>
 800b08a:	9a01      	ldr	r2, [sp, #4]
 800b08c:	3a01      	subs	r2, #1
 800b08e:	9201      	str	r2, [sp, #4]
 800b090:	9a03      	ldr	r2, [sp, #12]
 800b092:	3b04      	subs	r3, #4
 800b094:	429a      	cmp	r2, r3
 800b096:	d3f5      	bcc.n	800b084 <quorem+0x104>
 800b098:	9b01      	ldr	r3, [sp, #4]
 800b09a:	613b      	str	r3, [r7, #16]
 800b09c:	e7e2      	b.n	800b064 <quorem+0xe4>
	...

0800b0a0 <_dtoa_r>:
 800b0a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0a2:	0014      	movs	r4, r2
 800b0a4:	001d      	movs	r5, r3
 800b0a6:	69c6      	ldr	r6, [r0, #28]
 800b0a8:	b09d      	sub	sp, #116	; 0x74
 800b0aa:	9408      	str	r4, [sp, #32]
 800b0ac:	9509      	str	r5, [sp, #36]	; 0x24
 800b0ae:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800b0b0:	9004      	str	r0, [sp, #16]
 800b0b2:	2e00      	cmp	r6, #0
 800b0b4:	d10f      	bne.n	800b0d6 <_dtoa_r+0x36>
 800b0b6:	2010      	movs	r0, #16
 800b0b8:	f000 fe4a 	bl	800bd50 <malloc>
 800b0bc:	9b04      	ldr	r3, [sp, #16]
 800b0be:	1e02      	subs	r2, r0, #0
 800b0c0:	61d8      	str	r0, [r3, #28]
 800b0c2:	d104      	bne.n	800b0ce <_dtoa_r+0x2e>
 800b0c4:	21ef      	movs	r1, #239	; 0xef
 800b0c6:	4bc6      	ldr	r3, [pc, #792]	; (800b3e0 <_dtoa_r+0x340>)
 800b0c8:	48c6      	ldr	r0, [pc, #792]	; (800b3e4 <_dtoa_r+0x344>)
 800b0ca:	f002 fcc3 	bl	800da54 <__assert_func>
 800b0ce:	6046      	str	r6, [r0, #4]
 800b0d0:	6086      	str	r6, [r0, #8]
 800b0d2:	6006      	str	r6, [r0, #0]
 800b0d4:	60c6      	str	r6, [r0, #12]
 800b0d6:	9b04      	ldr	r3, [sp, #16]
 800b0d8:	69db      	ldr	r3, [r3, #28]
 800b0da:	6819      	ldr	r1, [r3, #0]
 800b0dc:	2900      	cmp	r1, #0
 800b0de:	d00b      	beq.n	800b0f8 <_dtoa_r+0x58>
 800b0e0:	685a      	ldr	r2, [r3, #4]
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	4093      	lsls	r3, r2
 800b0e6:	604a      	str	r2, [r1, #4]
 800b0e8:	608b      	str	r3, [r1, #8]
 800b0ea:	9804      	ldr	r0, [sp, #16]
 800b0ec:	f000 ff32 	bl	800bf54 <_Bfree>
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	9b04      	ldr	r3, [sp, #16]
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	601a      	str	r2, [r3, #0]
 800b0f8:	2d00      	cmp	r5, #0
 800b0fa:	da1e      	bge.n	800b13a <_dtoa_r+0x9a>
 800b0fc:	2301      	movs	r3, #1
 800b0fe:	603b      	str	r3, [r7, #0]
 800b100:	006b      	lsls	r3, r5, #1
 800b102:	085b      	lsrs	r3, r3, #1
 800b104:	9309      	str	r3, [sp, #36]	; 0x24
 800b106:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b108:	4bb7      	ldr	r3, [pc, #732]	; (800b3e8 <_dtoa_r+0x348>)
 800b10a:	4ab7      	ldr	r2, [pc, #732]	; (800b3e8 <_dtoa_r+0x348>)
 800b10c:	403b      	ands	r3, r7
 800b10e:	4293      	cmp	r3, r2
 800b110:	d116      	bne.n	800b140 <_dtoa_r+0xa0>
 800b112:	4bb6      	ldr	r3, [pc, #728]	; (800b3ec <_dtoa_r+0x34c>)
 800b114:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b116:	6013      	str	r3, [r2, #0]
 800b118:	033b      	lsls	r3, r7, #12
 800b11a:	0b1b      	lsrs	r3, r3, #12
 800b11c:	4323      	orrs	r3, r4
 800b11e:	d101      	bne.n	800b124 <_dtoa_r+0x84>
 800b120:	f000 fdb5 	bl	800bc8e <_dtoa_r+0xbee>
 800b124:	4bb2      	ldr	r3, [pc, #712]	; (800b3f0 <_dtoa_r+0x350>)
 800b126:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b128:	9306      	str	r3, [sp, #24]
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	d002      	beq.n	800b134 <_dtoa_r+0x94>
 800b12e:	4bb1      	ldr	r3, [pc, #708]	; (800b3f4 <_dtoa_r+0x354>)
 800b130:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b132:	6013      	str	r3, [r2, #0]
 800b134:	9806      	ldr	r0, [sp, #24]
 800b136:	b01d      	add	sp, #116	; 0x74
 800b138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b13a:	2300      	movs	r3, #0
 800b13c:	603b      	str	r3, [r7, #0]
 800b13e:	e7e2      	b.n	800b106 <_dtoa_r+0x66>
 800b140:	9a08      	ldr	r2, [sp, #32]
 800b142:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b144:	9210      	str	r2, [sp, #64]	; 0x40
 800b146:	9311      	str	r3, [sp, #68]	; 0x44
 800b148:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b14a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b14c:	2200      	movs	r2, #0
 800b14e:	2300      	movs	r3, #0
 800b150:	f7f5 f97c 	bl	800044c <__aeabi_dcmpeq>
 800b154:	1e06      	subs	r6, r0, #0
 800b156:	d009      	beq.n	800b16c <_dtoa_r+0xcc>
 800b158:	2301      	movs	r3, #1
 800b15a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b15c:	6013      	str	r3, [r2, #0]
 800b15e:	4ba6      	ldr	r3, [pc, #664]	; (800b3f8 <_dtoa_r+0x358>)
 800b160:	9306      	str	r3, [sp, #24]
 800b162:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0e5      	beq.n	800b134 <_dtoa_r+0x94>
 800b168:	4ba4      	ldr	r3, [pc, #656]	; (800b3fc <_dtoa_r+0x35c>)
 800b16a:	e7e1      	b.n	800b130 <_dtoa_r+0x90>
 800b16c:	ab1a      	add	r3, sp, #104	; 0x68
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	ab1b      	add	r3, sp, #108	; 0x6c
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	9804      	ldr	r0, [sp, #16]
 800b176:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b178:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b17a:	f001 fa95 	bl	800c6a8 <__d2b>
 800b17e:	007a      	lsls	r2, r7, #1
 800b180:	9005      	str	r0, [sp, #20]
 800b182:	0d52      	lsrs	r2, r2, #21
 800b184:	d100      	bne.n	800b188 <_dtoa_r+0xe8>
 800b186:	e07b      	b.n	800b280 <_dtoa_r+0x1e0>
 800b188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b18a:	9617      	str	r6, [sp, #92]	; 0x5c
 800b18c:	0319      	lsls	r1, r3, #12
 800b18e:	4b9c      	ldr	r3, [pc, #624]	; (800b400 <_dtoa_r+0x360>)
 800b190:	0b09      	lsrs	r1, r1, #12
 800b192:	430b      	orrs	r3, r1
 800b194:	499b      	ldr	r1, [pc, #620]	; (800b404 <_dtoa_r+0x364>)
 800b196:	1857      	adds	r7, r2, r1
 800b198:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b19a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b19c:	0019      	movs	r1, r3
 800b19e:	2200      	movs	r2, #0
 800b1a0:	4b99      	ldr	r3, [pc, #612]	; (800b408 <_dtoa_r+0x368>)
 800b1a2:	f7f6 fc0d 	bl	80019c0 <__aeabi_dsub>
 800b1a6:	4a99      	ldr	r2, [pc, #612]	; (800b40c <_dtoa_r+0x36c>)
 800b1a8:	4b99      	ldr	r3, [pc, #612]	; (800b410 <_dtoa_r+0x370>)
 800b1aa:	f7f6 f947 	bl	800143c <__aeabi_dmul>
 800b1ae:	4a99      	ldr	r2, [pc, #612]	; (800b414 <_dtoa_r+0x374>)
 800b1b0:	4b99      	ldr	r3, [pc, #612]	; (800b418 <_dtoa_r+0x378>)
 800b1b2:	f7f5 f9e9 	bl	8000588 <__aeabi_dadd>
 800b1b6:	0004      	movs	r4, r0
 800b1b8:	0038      	movs	r0, r7
 800b1ba:	000d      	movs	r5, r1
 800b1bc:	f7f6 ffd6 	bl	800216c <__aeabi_i2d>
 800b1c0:	4a96      	ldr	r2, [pc, #600]	; (800b41c <_dtoa_r+0x37c>)
 800b1c2:	4b97      	ldr	r3, [pc, #604]	; (800b420 <_dtoa_r+0x380>)
 800b1c4:	f7f6 f93a 	bl	800143c <__aeabi_dmul>
 800b1c8:	0002      	movs	r2, r0
 800b1ca:	000b      	movs	r3, r1
 800b1cc:	0020      	movs	r0, r4
 800b1ce:	0029      	movs	r1, r5
 800b1d0:	f7f5 f9da 	bl	8000588 <__aeabi_dadd>
 800b1d4:	0004      	movs	r4, r0
 800b1d6:	000d      	movs	r5, r1
 800b1d8:	f7f6 ff92 	bl	8002100 <__aeabi_d2iz>
 800b1dc:	2200      	movs	r2, #0
 800b1de:	9003      	str	r0, [sp, #12]
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	0020      	movs	r0, r4
 800b1e4:	0029      	movs	r1, r5
 800b1e6:	f7f5 f937 	bl	8000458 <__aeabi_dcmplt>
 800b1ea:	2800      	cmp	r0, #0
 800b1ec:	d00b      	beq.n	800b206 <_dtoa_r+0x166>
 800b1ee:	9803      	ldr	r0, [sp, #12]
 800b1f0:	f7f6 ffbc 	bl	800216c <__aeabi_i2d>
 800b1f4:	002b      	movs	r3, r5
 800b1f6:	0022      	movs	r2, r4
 800b1f8:	f7f5 f928 	bl	800044c <__aeabi_dcmpeq>
 800b1fc:	4243      	negs	r3, r0
 800b1fe:	4158      	adcs	r0, r3
 800b200:	9b03      	ldr	r3, [sp, #12]
 800b202:	1a1b      	subs	r3, r3, r0
 800b204:	9303      	str	r3, [sp, #12]
 800b206:	2301      	movs	r3, #1
 800b208:	9316      	str	r3, [sp, #88]	; 0x58
 800b20a:	9b03      	ldr	r3, [sp, #12]
 800b20c:	2b16      	cmp	r3, #22
 800b20e:	d810      	bhi.n	800b232 <_dtoa_r+0x192>
 800b210:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b212:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b214:	9a03      	ldr	r2, [sp, #12]
 800b216:	4b83      	ldr	r3, [pc, #524]	; (800b424 <_dtoa_r+0x384>)
 800b218:	00d2      	lsls	r2, r2, #3
 800b21a:	189b      	adds	r3, r3, r2
 800b21c:	681a      	ldr	r2, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	f7f5 f91a 	bl	8000458 <__aeabi_dcmplt>
 800b224:	2800      	cmp	r0, #0
 800b226:	d047      	beq.n	800b2b8 <_dtoa_r+0x218>
 800b228:	9b03      	ldr	r3, [sp, #12]
 800b22a:	3b01      	subs	r3, #1
 800b22c:	9303      	str	r3, [sp, #12]
 800b22e:	2300      	movs	r3, #0
 800b230:	9316      	str	r3, [sp, #88]	; 0x58
 800b232:	2200      	movs	r2, #0
 800b234:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800b236:	920a      	str	r2, [sp, #40]	; 0x28
 800b238:	1bdb      	subs	r3, r3, r7
 800b23a:	1e5a      	subs	r2, r3, #1
 800b23c:	d53e      	bpl.n	800b2bc <_dtoa_r+0x21c>
 800b23e:	2201      	movs	r2, #1
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	930a      	str	r3, [sp, #40]	; 0x28
 800b244:	2300      	movs	r3, #0
 800b246:	930c      	str	r3, [sp, #48]	; 0x30
 800b248:	9b03      	ldr	r3, [sp, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	db38      	blt.n	800b2c0 <_dtoa_r+0x220>
 800b24e:	9a03      	ldr	r2, [sp, #12]
 800b250:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b252:	4694      	mov	ip, r2
 800b254:	4463      	add	r3, ip
 800b256:	930c      	str	r3, [sp, #48]	; 0x30
 800b258:	2300      	movs	r3, #0
 800b25a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b25c:	930d      	str	r3, [sp, #52]	; 0x34
 800b25e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b260:	2401      	movs	r4, #1
 800b262:	2b09      	cmp	r3, #9
 800b264:	d867      	bhi.n	800b336 <_dtoa_r+0x296>
 800b266:	2b05      	cmp	r3, #5
 800b268:	dd02      	ble.n	800b270 <_dtoa_r+0x1d0>
 800b26a:	2400      	movs	r4, #0
 800b26c:	3b04      	subs	r3, #4
 800b26e:	9322      	str	r3, [sp, #136]	; 0x88
 800b270:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b272:	1e98      	subs	r0, r3, #2
 800b274:	2803      	cmp	r0, #3
 800b276:	d867      	bhi.n	800b348 <_dtoa_r+0x2a8>
 800b278:	f7f4 ff4e 	bl	8000118 <__gnu_thumb1_case_uqi>
 800b27c:	5b383a2b 	.word	0x5b383a2b
 800b280:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b282:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800b284:	18f6      	adds	r6, r6, r3
 800b286:	4b68      	ldr	r3, [pc, #416]	; (800b428 <_dtoa_r+0x388>)
 800b288:	18f2      	adds	r2, r6, r3
 800b28a:	2a20      	cmp	r2, #32
 800b28c:	dd0f      	ble.n	800b2ae <_dtoa_r+0x20e>
 800b28e:	2340      	movs	r3, #64	; 0x40
 800b290:	1a9b      	subs	r3, r3, r2
 800b292:	409f      	lsls	r7, r3
 800b294:	4b65      	ldr	r3, [pc, #404]	; (800b42c <_dtoa_r+0x38c>)
 800b296:	0038      	movs	r0, r7
 800b298:	18f3      	adds	r3, r6, r3
 800b29a:	40dc      	lsrs	r4, r3
 800b29c:	4320      	orrs	r0, r4
 800b29e:	f7f6 ff95 	bl	80021cc <__aeabi_ui2d>
 800b2a2:	2201      	movs	r2, #1
 800b2a4:	4b62      	ldr	r3, [pc, #392]	; (800b430 <_dtoa_r+0x390>)
 800b2a6:	1e77      	subs	r7, r6, #1
 800b2a8:	18cb      	adds	r3, r1, r3
 800b2aa:	9217      	str	r2, [sp, #92]	; 0x5c
 800b2ac:	e776      	b.n	800b19c <_dtoa_r+0xfc>
 800b2ae:	2320      	movs	r3, #32
 800b2b0:	0020      	movs	r0, r4
 800b2b2:	1a9b      	subs	r3, r3, r2
 800b2b4:	4098      	lsls	r0, r3
 800b2b6:	e7f2      	b.n	800b29e <_dtoa_r+0x1fe>
 800b2b8:	9016      	str	r0, [sp, #88]	; 0x58
 800b2ba:	e7ba      	b.n	800b232 <_dtoa_r+0x192>
 800b2bc:	920c      	str	r2, [sp, #48]	; 0x30
 800b2be:	e7c3      	b.n	800b248 <_dtoa_r+0x1a8>
 800b2c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c2:	9a03      	ldr	r2, [sp, #12]
 800b2c4:	1a9b      	subs	r3, r3, r2
 800b2c6:	930a      	str	r3, [sp, #40]	; 0x28
 800b2c8:	4253      	negs	r3, r2
 800b2ca:	930d      	str	r3, [sp, #52]	; 0x34
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	9313      	str	r3, [sp, #76]	; 0x4c
 800b2d0:	e7c5      	b.n	800b25e <_dtoa_r+0x1be>
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b2d8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2da:	9307      	str	r3, [sp, #28]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	dc13      	bgt.n	800b308 <_dtoa_r+0x268>
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	001a      	movs	r2, r3
 800b2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2e6:	9307      	str	r3, [sp, #28]
 800b2e8:	9223      	str	r2, [sp, #140]	; 0x8c
 800b2ea:	e00d      	b.n	800b308 <_dtoa_r+0x268>
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e7f1      	b.n	800b2d4 <_dtoa_r+0x234>
 800b2f0:	2300      	movs	r3, #0
 800b2f2:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800b2f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2f6:	4694      	mov	ip, r2
 800b2f8:	9b03      	ldr	r3, [sp, #12]
 800b2fa:	4463      	add	r3, ip
 800b2fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2fe:	3301      	adds	r3, #1
 800b300:	9307      	str	r3, [sp, #28]
 800b302:	2b00      	cmp	r3, #0
 800b304:	dc00      	bgt.n	800b308 <_dtoa_r+0x268>
 800b306:	2301      	movs	r3, #1
 800b308:	9a04      	ldr	r2, [sp, #16]
 800b30a:	2100      	movs	r1, #0
 800b30c:	69d0      	ldr	r0, [r2, #28]
 800b30e:	2204      	movs	r2, #4
 800b310:	0015      	movs	r5, r2
 800b312:	3514      	adds	r5, #20
 800b314:	429d      	cmp	r5, r3
 800b316:	d91b      	bls.n	800b350 <_dtoa_r+0x2b0>
 800b318:	6041      	str	r1, [r0, #4]
 800b31a:	9804      	ldr	r0, [sp, #16]
 800b31c:	f000 fdd6 	bl	800becc <_Balloc>
 800b320:	9006      	str	r0, [sp, #24]
 800b322:	2800      	cmp	r0, #0
 800b324:	d117      	bne.n	800b356 <_dtoa_r+0x2b6>
 800b326:	21b0      	movs	r1, #176	; 0xb0
 800b328:	4b42      	ldr	r3, [pc, #264]	; (800b434 <_dtoa_r+0x394>)
 800b32a:	482e      	ldr	r0, [pc, #184]	; (800b3e4 <_dtoa_r+0x344>)
 800b32c:	9a06      	ldr	r2, [sp, #24]
 800b32e:	31ff      	adds	r1, #255	; 0xff
 800b330:	e6cb      	b.n	800b0ca <_dtoa_r+0x2a>
 800b332:	2301      	movs	r3, #1
 800b334:	e7dd      	b.n	800b2f2 <_dtoa_r+0x252>
 800b336:	2300      	movs	r3, #0
 800b338:	940f      	str	r4, [sp, #60]	; 0x3c
 800b33a:	9322      	str	r3, [sp, #136]	; 0x88
 800b33c:	3b01      	subs	r3, #1
 800b33e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b340:	9307      	str	r3, [sp, #28]
 800b342:	2200      	movs	r2, #0
 800b344:	3313      	adds	r3, #19
 800b346:	e7cf      	b.n	800b2e8 <_dtoa_r+0x248>
 800b348:	2301      	movs	r3, #1
 800b34a:	930f      	str	r3, [sp, #60]	; 0x3c
 800b34c:	3b02      	subs	r3, #2
 800b34e:	e7f6      	b.n	800b33e <_dtoa_r+0x29e>
 800b350:	3101      	adds	r1, #1
 800b352:	0052      	lsls	r2, r2, #1
 800b354:	e7dc      	b.n	800b310 <_dtoa_r+0x270>
 800b356:	9b04      	ldr	r3, [sp, #16]
 800b358:	9a06      	ldr	r2, [sp, #24]
 800b35a:	69db      	ldr	r3, [r3, #28]
 800b35c:	601a      	str	r2, [r3, #0]
 800b35e:	9b07      	ldr	r3, [sp, #28]
 800b360:	2b0e      	cmp	r3, #14
 800b362:	d900      	bls.n	800b366 <_dtoa_r+0x2c6>
 800b364:	e0e5      	b.n	800b532 <_dtoa_r+0x492>
 800b366:	2c00      	cmp	r4, #0
 800b368:	d100      	bne.n	800b36c <_dtoa_r+0x2cc>
 800b36a:	e0e2      	b.n	800b532 <_dtoa_r+0x492>
 800b36c:	9b03      	ldr	r3, [sp, #12]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	dd64      	ble.n	800b43c <_dtoa_r+0x39c>
 800b372:	210f      	movs	r1, #15
 800b374:	9a03      	ldr	r2, [sp, #12]
 800b376:	4b2b      	ldr	r3, [pc, #172]	; (800b424 <_dtoa_r+0x384>)
 800b378:	400a      	ands	r2, r1
 800b37a:	00d2      	lsls	r2, r2, #3
 800b37c:	189b      	adds	r3, r3, r2
 800b37e:	681e      	ldr	r6, [r3, #0]
 800b380:	685f      	ldr	r7, [r3, #4]
 800b382:	9b03      	ldr	r3, [sp, #12]
 800b384:	2402      	movs	r4, #2
 800b386:	111d      	asrs	r5, r3, #4
 800b388:	05db      	lsls	r3, r3, #23
 800b38a:	d50a      	bpl.n	800b3a2 <_dtoa_r+0x302>
 800b38c:	4b2a      	ldr	r3, [pc, #168]	; (800b438 <_dtoa_r+0x398>)
 800b38e:	400d      	ands	r5, r1
 800b390:	6a1a      	ldr	r2, [r3, #32]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b396:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b398:	f7f5 fc56 	bl	8000c48 <__aeabi_ddiv>
 800b39c:	9008      	str	r0, [sp, #32]
 800b39e:	9109      	str	r1, [sp, #36]	; 0x24
 800b3a0:	3401      	adds	r4, #1
 800b3a2:	4b25      	ldr	r3, [pc, #148]	; (800b438 <_dtoa_r+0x398>)
 800b3a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b3a6:	2d00      	cmp	r5, #0
 800b3a8:	d108      	bne.n	800b3bc <_dtoa_r+0x31c>
 800b3aa:	9808      	ldr	r0, [sp, #32]
 800b3ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b3ae:	0032      	movs	r2, r6
 800b3b0:	003b      	movs	r3, r7
 800b3b2:	f7f5 fc49 	bl	8000c48 <__aeabi_ddiv>
 800b3b6:	9008      	str	r0, [sp, #32]
 800b3b8:	9109      	str	r1, [sp, #36]	; 0x24
 800b3ba:	e05a      	b.n	800b472 <_dtoa_r+0x3d2>
 800b3bc:	2301      	movs	r3, #1
 800b3be:	421d      	tst	r5, r3
 800b3c0:	d009      	beq.n	800b3d6 <_dtoa_r+0x336>
 800b3c2:	18e4      	adds	r4, r4, r3
 800b3c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3c6:	0030      	movs	r0, r6
 800b3c8:	681a      	ldr	r2, [r3, #0]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	0039      	movs	r1, r7
 800b3ce:	f7f6 f835 	bl	800143c <__aeabi_dmul>
 800b3d2:	0006      	movs	r6, r0
 800b3d4:	000f      	movs	r7, r1
 800b3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b3d8:	106d      	asrs	r5, r5, #1
 800b3da:	3308      	adds	r3, #8
 800b3dc:	e7e2      	b.n	800b3a4 <_dtoa_r+0x304>
 800b3de:	46c0      	nop			; (mov r8, r8)
 800b3e0:	0800e9c6 	.word	0x0800e9c6
 800b3e4:	0800e9dd 	.word	0x0800e9dd
 800b3e8:	7ff00000 	.word	0x7ff00000
 800b3ec:	0000270f 	.word	0x0000270f
 800b3f0:	0800e9c2 	.word	0x0800e9c2
 800b3f4:	0800e9c5 	.word	0x0800e9c5
 800b3f8:	0800e990 	.word	0x0800e990
 800b3fc:	0800e991 	.word	0x0800e991
 800b400:	3ff00000 	.word	0x3ff00000
 800b404:	fffffc01 	.word	0xfffffc01
 800b408:	3ff80000 	.word	0x3ff80000
 800b40c:	636f4361 	.word	0x636f4361
 800b410:	3fd287a7 	.word	0x3fd287a7
 800b414:	8b60c8b3 	.word	0x8b60c8b3
 800b418:	3fc68a28 	.word	0x3fc68a28
 800b41c:	509f79fb 	.word	0x509f79fb
 800b420:	3fd34413 	.word	0x3fd34413
 800b424:	0800eac8 	.word	0x0800eac8
 800b428:	00000432 	.word	0x00000432
 800b42c:	00000412 	.word	0x00000412
 800b430:	fe100000 	.word	0xfe100000
 800b434:	0800ea35 	.word	0x0800ea35
 800b438:	0800eaa0 	.word	0x0800eaa0
 800b43c:	9b03      	ldr	r3, [sp, #12]
 800b43e:	2402      	movs	r4, #2
 800b440:	2b00      	cmp	r3, #0
 800b442:	d016      	beq.n	800b472 <_dtoa_r+0x3d2>
 800b444:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b446:	9911      	ldr	r1, [sp, #68]	; 0x44
 800b448:	220f      	movs	r2, #15
 800b44a:	425d      	negs	r5, r3
 800b44c:	402a      	ands	r2, r5
 800b44e:	4bdd      	ldr	r3, [pc, #884]	; (800b7c4 <_dtoa_r+0x724>)
 800b450:	00d2      	lsls	r2, r2, #3
 800b452:	189b      	adds	r3, r3, r2
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	f7f5 fff0 	bl	800143c <__aeabi_dmul>
 800b45c:	2701      	movs	r7, #1
 800b45e:	2300      	movs	r3, #0
 800b460:	9008      	str	r0, [sp, #32]
 800b462:	9109      	str	r1, [sp, #36]	; 0x24
 800b464:	4ed8      	ldr	r6, [pc, #864]	; (800b7c8 <_dtoa_r+0x728>)
 800b466:	112d      	asrs	r5, r5, #4
 800b468:	2d00      	cmp	r5, #0
 800b46a:	d000      	beq.n	800b46e <_dtoa_r+0x3ce>
 800b46c:	e091      	b.n	800b592 <_dtoa_r+0x4f2>
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d1a1      	bne.n	800b3b6 <_dtoa_r+0x316>
 800b472:	9e08      	ldr	r6, [sp, #32]
 800b474:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b476:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d100      	bne.n	800b47e <_dtoa_r+0x3de>
 800b47c:	e094      	b.n	800b5a8 <_dtoa_r+0x508>
 800b47e:	2200      	movs	r2, #0
 800b480:	0030      	movs	r0, r6
 800b482:	0039      	movs	r1, r7
 800b484:	4bd1      	ldr	r3, [pc, #836]	; (800b7cc <_dtoa_r+0x72c>)
 800b486:	f7f4 ffe7 	bl	8000458 <__aeabi_dcmplt>
 800b48a:	2800      	cmp	r0, #0
 800b48c:	d100      	bne.n	800b490 <_dtoa_r+0x3f0>
 800b48e:	e08b      	b.n	800b5a8 <_dtoa_r+0x508>
 800b490:	9b07      	ldr	r3, [sp, #28]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d100      	bne.n	800b498 <_dtoa_r+0x3f8>
 800b496:	e087      	b.n	800b5a8 <_dtoa_r+0x508>
 800b498:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dd45      	ble.n	800b52a <_dtoa_r+0x48a>
 800b49e:	9b03      	ldr	r3, [sp, #12]
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	930e      	str	r3, [sp, #56]	; 0x38
 800b4a6:	0030      	movs	r0, r6
 800b4a8:	4bc9      	ldr	r3, [pc, #804]	; (800b7d0 <_dtoa_r+0x730>)
 800b4aa:	0039      	movs	r1, r7
 800b4ac:	f7f5 ffc6 	bl	800143c <__aeabi_dmul>
 800b4b0:	9008      	str	r0, [sp, #32]
 800b4b2:	9109      	str	r1, [sp, #36]	; 0x24
 800b4b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4b6:	3401      	adds	r4, #1
 800b4b8:	0020      	movs	r0, r4
 800b4ba:	9e08      	ldr	r6, [sp, #32]
 800b4bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b4be:	9312      	str	r3, [sp, #72]	; 0x48
 800b4c0:	f7f6 fe54 	bl	800216c <__aeabi_i2d>
 800b4c4:	0032      	movs	r2, r6
 800b4c6:	003b      	movs	r3, r7
 800b4c8:	f7f5 ffb8 	bl	800143c <__aeabi_dmul>
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	4bc1      	ldr	r3, [pc, #772]	; (800b7d4 <_dtoa_r+0x734>)
 800b4d0:	f7f5 f85a 	bl	8000588 <__aeabi_dadd>
 800b4d4:	4ac0      	ldr	r2, [pc, #768]	; (800b7d8 <_dtoa_r+0x738>)
 800b4d6:	9014      	str	r0, [sp, #80]	; 0x50
 800b4d8:	9115      	str	r1, [sp, #84]	; 0x54
 800b4da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b4dc:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800b4de:	4694      	mov	ip, r2
 800b4e0:	9308      	str	r3, [sp, #32]
 800b4e2:	9409      	str	r4, [sp, #36]	; 0x24
 800b4e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b4e6:	4463      	add	r3, ip
 800b4e8:	9318      	str	r3, [sp, #96]	; 0x60
 800b4ea:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d15e      	bne.n	800b5b0 <_dtoa_r+0x510>
 800b4f2:	2200      	movs	r2, #0
 800b4f4:	4bb9      	ldr	r3, [pc, #740]	; (800b7dc <_dtoa_r+0x73c>)
 800b4f6:	0030      	movs	r0, r6
 800b4f8:	0039      	movs	r1, r7
 800b4fa:	f7f6 fa61 	bl	80019c0 <__aeabi_dsub>
 800b4fe:	9a08      	ldr	r2, [sp, #32]
 800b500:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b502:	0004      	movs	r4, r0
 800b504:	000d      	movs	r5, r1
 800b506:	f7f4 ffbb 	bl	8000480 <__aeabi_dcmpgt>
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d000      	beq.n	800b510 <_dtoa_r+0x470>
 800b50e:	e2b3      	b.n	800ba78 <_dtoa_r+0x9d8>
 800b510:	48b3      	ldr	r0, [pc, #716]	; (800b7e0 <_dtoa_r+0x740>)
 800b512:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b514:	4684      	mov	ip, r0
 800b516:	4461      	add	r1, ip
 800b518:	000b      	movs	r3, r1
 800b51a:	0020      	movs	r0, r4
 800b51c:	0029      	movs	r1, r5
 800b51e:	9a08      	ldr	r2, [sp, #32]
 800b520:	f7f4 ff9a 	bl	8000458 <__aeabi_dcmplt>
 800b524:	2800      	cmp	r0, #0
 800b526:	d000      	beq.n	800b52a <_dtoa_r+0x48a>
 800b528:	e2a3      	b.n	800ba72 <_dtoa_r+0x9d2>
 800b52a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b52c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800b52e:	9308      	str	r3, [sp, #32]
 800b530:	9409      	str	r4, [sp, #36]	; 0x24
 800b532:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b534:	2b00      	cmp	r3, #0
 800b536:	da00      	bge.n	800b53a <_dtoa_r+0x49a>
 800b538:	e179      	b.n	800b82e <_dtoa_r+0x78e>
 800b53a:	9a03      	ldr	r2, [sp, #12]
 800b53c:	2a0e      	cmp	r2, #14
 800b53e:	dd00      	ble.n	800b542 <_dtoa_r+0x4a2>
 800b540:	e175      	b.n	800b82e <_dtoa_r+0x78e>
 800b542:	4ba0      	ldr	r3, [pc, #640]	; (800b7c4 <_dtoa_r+0x724>)
 800b544:	00d2      	lsls	r2, r2, #3
 800b546:	189b      	adds	r3, r3, r2
 800b548:	681e      	ldr	r6, [r3, #0]
 800b54a:	685f      	ldr	r7, [r3, #4]
 800b54c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b54e:	2b00      	cmp	r3, #0
 800b550:	db00      	blt.n	800b554 <_dtoa_r+0x4b4>
 800b552:	e0e5      	b.n	800b720 <_dtoa_r+0x680>
 800b554:	9b07      	ldr	r3, [sp, #28]
 800b556:	2b00      	cmp	r3, #0
 800b558:	dd00      	ble.n	800b55c <_dtoa_r+0x4bc>
 800b55a:	e0e1      	b.n	800b720 <_dtoa_r+0x680>
 800b55c:	d000      	beq.n	800b560 <_dtoa_r+0x4c0>
 800b55e:	e288      	b.n	800ba72 <_dtoa_r+0x9d2>
 800b560:	2200      	movs	r2, #0
 800b562:	0030      	movs	r0, r6
 800b564:	0039      	movs	r1, r7
 800b566:	4b9d      	ldr	r3, [pc, #628]	; (800b7dc <_dtoa_r+0x73c>)
 800b568:	f7f5 ff68 	bl	800143c <__aeabi_dmul>
 800b56c:	9a08      	ldr	r2, [sp, #32]
 800b56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b570:	f7f4 ff90 	bl	8000494 <__aeabi_dcmpge>
 800b574:	9e07      	ldr	r6, [sp, #28]
 800b576:	0037      	movs	r7, r6
 800b578:	2800      	cmp	r0, #0
 800b57a:	d000      	beq.n	800b57e <_dtoa_r+0x4de>
 800b57c:	e25f      	b.n	800ba3e <_dtoa_r+0x99e>
 800b57e:	9b06      	ldr	r3, [sp, #24]
 800b580:	9a06      	ldr	r2, [sp, #24]
 800b582:	3301      	adds	r3, #1
 800b584:	9308      	str	r3, [sp, #32]
 800b586:	2331      	movs	r3, #49	; 0x31
 800b588:	7013      	strb	r3, [r2, #0]
 800b58a:	9b03      	ldr	r3, [sp, #12]
 800b58c:	3301      	adds	r3, #1
 800b58e:	9303      	str	r3, [sp, #12]
 800b590:	e25a      	b.n	800ba48 <_dtoa_r+0x9a8>
 800b592:	423d      	tst	r5, r7
 800b594:	d005      	beq.n	800b5a2 <_dtoa_r+0x502>
 800b596:	6832      	ldr	r2, [r6, #0]
 800b598:	6873      	ldr	r3, [r6, #4]
 800b59a:	f7f5 ff4f 	bl	800143c <__aeabi_dmul>
 800b59e:	003b      	movs	r3, r7
 800b5a0:	3401      	adds	r4, #1
 800b5a2:	106d      	asrs	r5, r5, #1
 800b5a4:	3608      	adds	r6, #8
 800b5a6:	e75f      	b.n	800b468 <_dtoa_r+0x3c8>
 800b5a8:	9b03      	ldr	r3, [sp, #12]
 800b5aa:	930e      	str	r3, [sp, #56]	; 0x38
 800b5ac:	9b07      	ldr	r3, [sp, #28]
 800b5ae:	e783      	b.n	800b4b8 <_dtoa_r+0x418>
 800b5b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b5b2:	4b84      	ldr	r3, [pc, #528]	; (800b7c4 <_dtoa_r+0x724>)
 800b5b4:	3a01      	subs	r2, #1
 800b5b6:	00d2      	lsls	r2, r2, #3
 800b5b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800b5ba:	189b      	adds	r3, r3, r2
 800b5bc:	9c08      	ldr	r4, [sp, #32]
 800b5be:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b5c0:	681a      	ldr	r2, [r3, #0]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	2900      	cmp	r1, #0
 800b5c6:	d051      	beq.n	800b66c <_dtoa_r+0x5cc>
 800b5c8:	2000      	movs	r0, #0
 800b5ca:	4986      	ldr	r1, [pc, #536]	; (800b7e4 <_dtoa_r+0x744>)
 800b5cc:	f7f5 fb3c 	bl	8000c48 <__aeabi_ddiv>
 800b5d0:	0022      	movs	r2, r4
 800b5d2:	002b      	movs	r3, r5
 800b5d4:	f7f6 f9f4 	bl	80019c0 <__aeabi_dsub>
 800b5d8:	9a06      	ldr	r2, [sp, #24]
 800b5da:	0004      	movs	r4, r0
 800b5dc:	4694      	mov	ip, r2
 800b5de:	000d      	movs	r5, r1
 800b5e0:	9b06      	ldr	r3, [sp, #24]
 800b5e2:	9314      	str	r3, [sp, #80]	; 0x50
 800b5e4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b5e6:	4463      	add	r3, ip
 800b5e8:	9318      	str	r3, [sp, #96]	; 0x60
 800b5ea:	0039      	movs	r1, r7
 800b5ec:	0030      	movs	r0, r6
 800b5ee:	f7f6 fd87 	bl	8002100 <__aeabi_d2iz>
 800b5f2:	9012      	str	r0, [sp, #72]	; 0x48
 800b5f4:	f7f6 fdba 	bl	800216c <__aeabi_i2d>
 800b5f8:	0002      	movs	r2, r0
 800b5fa:	000b      	movs	r3, r1
 800b5fc:	0030      	movs	r0, r6
 800b5fe:	0039      	movs	r1, r7
 800b600:	f7f6 f9de 	bl	80019c0 <__aeabi_dsub>
 800b604:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b606:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b608:	3301      	adds	r3, #1
 800b60a:	9308      	str	r3, [sp, #32]
 800b60c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b60e:	0006      	movs	r6, r0
 800b610:	3330      	adds	r3, #48	; 0x30
 800b612:	7013      	strb	r3, [r2, #0]
 800b614:	0022      	movs	r2, r4
 800b616:	002b      	movs	r3, r5
 800b618:	000f      	movs	r7, r1
 800b61a:	f7f4 ff1d 	bl	8000458 <__aeabi_dcmplt>
 800b61e:	2800      	cmp	r0, #0
 800b620:	d174      	bne.n	800b70c <_dtoa_r+0x66c>
 800b622:	0032      	movs	r2, r6
 800b624:	003b      	movs	r3, r7
 800b626:	2000      	movs	r0, #0
 800b628:	4968      	ldr	r1, [pc, #416]	; (800b7cc <_dtoa_r+0x72c>)
 800b62a:	f7f6 f9c9 	bl	80019c0 <__aeabi_dsub>
 800b62e:	0022      	movs	r2, r4
 800b630:	002b      	movs	r3, r5
 800b632:	f7f4 ff11 	bl	8000458 <__aeabi_dcmplt>
 800b636:	2800      	cmp	r0, #0
 800b638:	d000      	beq.n	800b63c <_dtoa_r+0x59c>
 800b63a:	e0d7      	b.n	800b7ec <_dtoa_r+0x74c>
 800b63c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800b63e:	9a08      	ldr	r2, [sp, #32]
 800b640:	4293      	cmp	r3, r2
 800b642:	d100      	bne.n	800b646 <_dtoa_r+0x5a6>
 800b644:	e771      	b.n	800b52a <_dtoa_r+0x48a>
 800b646:	2200      	movs	r2, #0
 800b648:	0020      	movs	r0, r4
 800b64a:	0029      	movs	r1, r5
 800b64c:	4b60      	ldr	r3, [pc, #384]	; (800b7d0 <_dtoa_r+0x730>)
 800b64e:	f7f5 fef5 	bl	800143c <__aeabi_dmul>
 800b652:	4b5f      	ldr	r3, [pc, #380]	; (800b7d0 <_dtoa_r+0x730>)
 800b654:	0004      	movs	r4, r0
 800b656:	000d      	movs	r5, r1
 800b658:	0030      	movs	r0, r6
 800b65a:	0039      	movs	r1, r7
 800b65c:	2200      	movs	r2, #0
 800b65e:	f7f5 feed 	bl	800143c <__aeabi_dmul>
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	0006      	movs	r6, r0
 800b666:	000f      	movs	r7, r1
 800b668:	9314      	str	r3, [sp, #80]	; 0x50
 800b66a:	e7be      	b.n	800b5ea <_dtoa_r+0x54a>
 800b66c:	0020      	movs	r0, r4
 800b66e:	0029      	movs	r1, r5
 800b670:	f7f5 fee4 	bl	800143c <__aeabi_dmul>
 800b674:	9a06      	ldr	r2, [sp, #24]
 800b676:	9b06      	ldr	r3, [sp, #24]
 800b678:	4694      	mov	ip, r2
 800b67a:	9308      	str	r3, [sp, #32]
 800b67c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b67e:	9014      	str	r0, [sp, #80]	; 0x50
 800b680:	9115      	str	r1, [sp, #84]	; 0x54
 800b682:	4463      	add	r3, ip
 800b684:	9319      	str	r3, [sp, #100]	; 0x64
 800b686:	0030      	movs	r0, r6
 800b688:	0039      	movs	r1, r7
 800b68a:	f7f6 fd39 	bl	8002100 <__aeabi_d2iz>
 800b68e:	9018      	str	r0, [sp, #96]	; 0x60
 800b690:	f7f6 fd6c 	bl	800216c <__aeabi_i2d>
 800b694:	0002      	movs	r2, r0
 800b696:	000b      	movs	r3, r1
 800b698:	0030      	movs	r0, r6
 800b69a:	0039      	movs	r1, r7
 800b69c:	f7f6 f990 	bl	80019c0 <__aeabi_dsub>
 800b6a0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800b6a2:	9b08      	ldr	r3, [sp, #32]
 800b6a4:	3630      	adds	r6, #48	; 0x30
 800b6a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b6a8:	701e      	strb	r6, [r3, #0]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	0004      	movs	r4, r0
 800b6ae:	000d      	movs	r5, r1
 800b6b0:	9308      	str	r3, [sp, #32]
 800b6b2:	4293      	cmp	r3, r2
 800b6b4:	d12d      	bne.n	800b712 <_dtoa_r+0x672>
 800b6b6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800b6b8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800b6ba:	9a06      	ldr	r2, [sp, #24]
 800b6bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b6be:	4694      	mov	ip, r2
 800b6c0:	4463      	add	r3, ip
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	9308      	str	r3, [sp, #32]
 800b6c6:	4b47      	ldr	r3, [pc, #284]	; (800b7e4 <_dtoa_r+0x744>)
 800b6c8:	f7f4 ff5e 	bl	8000588 <__aeabi_dadd>
 800b6cc:	0002      	movs	r2, r0
 800b6ce:	000b      	movs	r3, r1
 800b6d0:	0020      	movs	r0, r4
 800b6d2:	0029      	movs	r1, r5
 800b6d4:	f7f4 fed4 	bl	8000480 <__aeabi_dcmpgt>
 800b6d8:	2800      	cmp	r0, #0
 800b6da:	d000      	beq.n	800b6de <_dtoa_r+0x63e>
 800b6dc:	e086      	b.n	800b7ec <_dtoa_r+0x74c>
 800b6de:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b6e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	493f      	ldr	r1, [pc, #252]	; (800b7e4 <_dtoa_r+0x744>)
 800b6e6:	f7f6 f96b 	bl	80019c0 <__aeabi_dsub>
 800b6ea:	0002      	movs	r2, r0
 800b6ec:	000b      	movs	r3, r1
 800b6ee:	0020      	movs	r0, r4
 800b6f0:	0029      	movs	r1, r5
 800b6f2:	f7f4 feb1 	bl	8000458 <__aeabi_dcmplt>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d100      	bne.n	800b6fc <_dtoa_r+0x65c>
 800b6fa:	e716      	b.n	800b52a <_dtoa_r+0x48a>
 800b6fc:	9b08      	ldr	r3, [sp, #32]
 800b6fe:	001a      	movs	r2, r3
 800b700:	3a01      	subs	r2, #1
 800b702:	9208      	str	r2, [sp, #32]
 800b704:	7812      	ldrb	r2, [r2, #0]
 800b706:	2a30      	cmp	r2, #48	; 0x30
 800b708:	d0f8      	beq.n	800b6fc <_dtoa_r+0x65c>
 800b70a:	9308      	str	r3, [sp, #32]
 800b70c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b70e:	9303      	str	r3, [sp, #12]
 800b710:	e046      	b.n	800b7a0 <_dtoa_r+0x700>
 800b712:	2200      	movs	r2, #0
 800b714:	4b2e      	ldr	r3, [pc, #184]	; (800b7d0 <_dtoa_r+0x730>)
 800b716:	f7f5 fe91 	bl	800143c <__aeabi_dmul>
 800b71a:	0006      	movs	r6, r0
 800b71c:	000f      	movs	r7, r1
 800b71e:	e7b2      	b.n	800b686 <_dtoa_r+0x5e6>
 800b720:	9b06      	ldr	r3, [sp, #24]
 800b722:	9a06      	ldr	r2, [sp, #24]
 800b724:	930a      	str	r3, [sp, #40]	; 0x28
 800b726:	9b07      	ldr	r3, [sp, #28]
 800b728:	9c08      	ldr	r4, [sp, #32]
 800b72a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800b72c:	3b01      	subs	r3, #1
 800b72e:	189b      	adds	r3, r3, r2
 800b730:	930b      	str	r3, [sp, #44]	; 0x2c
 800b732:	0032      	movs	r2, r6
 800b734:	003b      	movs	r3, r7
 800b736:	0020      	movs	r0, r4
 800b738:	0029      	movs	r1, r5
 800b73a:	f7f5 fa85 	bl	8000c48 <__aeabi_ddiv>
 800b73e:	f7f6 fcdf 	bl	8002100 <__aeabi_d2iz>
 800b742:	9007      	str	r0, [sp, #28]
 800b744:	f7f6 fd12 	bl	800216c <__aeabi_i2d>
 800b748:	0032      	movs	r2, r6
 800b74a:	003b      	movs	r3, r7
 800b74c:	f7f5 fe76 	bl	800143c <__aeabi_dmul>
 800b750:	0002      	movs	r2, r0
 800b752:	000b      	movs	r3, r1
 800b754:	0020      	movs	r0, r4
 800b756:	0029      	movs	r1, r5
 800b758:	f7f6 f932 	bl	80019c0 <__aeabi_dsub>
 800b75c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b75e:	001a      	movs	r2, r3
 800b760:	3201      	adds	r2, #1
 800b762:	920a      	str	r2, [sp, #40]	; 0x28
 800b764:	9208      	str	r2, [sp, #32]
 800b766:	9a07      	ldr	r2, [sp, #28]
 800b768:	3230      	adds	r2, #48	; 0x30
 800b76a:	701a      	strb	r2, [r3, #0]
 800b76c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b76e:	429a      	cmp	r2, r3
 800b770:	d14f      	bne.n	800b812 <_dtoa_r+0x772>
 800b772:	0002      	movs	r2, r0
 800b774:	000b      	movs	r3, r1
 800b776:	f7f4 ff07 	bl	8000588 <__aeabi_dadd>
 800b77a:	0032      	movs	r2, r6
 800b77c:	003b      	movs	r3, r7
 800b77e:	0004      	movs	r4, r0
 800b780:	000d      	movs	r5, r1
 800b782:	f7f4 fe7d 	bl	8000480 <__aeabi_dcmpgt>
 800b786:	2800      	cmp	r0, #0
 800b788:	d12e      	bne.n	800b7e8 <_dtoa_r+0x748>
 800b78a:	0032      	movs	r2, r6
 800b78c:	003b      	movs	r3, r7
 800b78e:	0020      	movs	r0, r4
 800b790:	0029      	movs	r1, r5
 800b792:	f7f4 fe5b 	bl	800044c <__aeabi_dcmpeq>
 800b796:	2800      	cmp	r0, #0
 800b798:	d002      	beq.n	800b7a0 <_dtoa_r+0x700>
 800b79a:	9b07      	ldr	r3, [sp, #28]
 800b79c:	07de      	lsls	r6, r3, #31
 800b79e:	d423      	bmi.n	800b7e8 <_dtoa_r+0x748>
 800b7a0:	9905      	ldr	r1, [sp, #20]
 800b7a2:	9804      	ldr	r0, [sp, #16]
 800b7a4:	f000 fbd6 	bl	800bf54 <_Bfree>
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	9a08      	ldr	r2, [sp, #32]
 800b7ac:	7013      	strb	r3, [r2, #0]
 800b7ae:	9b03      	ldr	r3, [sp, #12]
 800b7b0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	6013      	str	r3, [r2, #0]
 800b7b6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d100      	bne.n	800b7be <_dtoa_r+0x71e>
 800b7bc:	e4ba      	b.n	800b134 <_dtoa_r+0x94>
 800b7be:	9a08      	ldr	r2, [sp, #32]
 800b7c0:	601a      	str	r2, [r3, #0]
 800b7c2:	e4b7      	b.n	800b134 <_dtoa_r+0x94>
 800b7c4:	0800eac8 	.word	0x0800eac8
 800b7c8:	0800eaa0 	.word	0x0800eaa0
 800b7cc:	3ff00000 	.word	0x3ff00000
 800b7d0:	40240000 	.word	0x40240000
 800b7d4:	401c0000 	.word	0x401c0000
 800b7d8:	fcc00000 	.word	0xfcc00000
 800b7dc:	40140000 	.word	0x40140000
 800b7e0:	7cc00000 	.word	0x7cc00000
 800b7e4:	3fe00000 	.word	0x3fe00000
 800b7e8:	9b03      	ldr	r3, [sp, #12]
 800b7ea:	930e      	str	r3, [sp, #56]	; 0x38
 800b7ec:	9b08      	ldr	r3, [sp, #32]
 800b7ee:	9308      	str	r3, [sp, #32]
 800b7f0:	3b01      	subs	r3, #1
 800b7f2:	781a      	ldrb	r2, [r3, #0]
 800b7f4:	2a39      	cmp	r2, #57	; 0x39
 800b7f6:	d108      	bne.n	800b80a <_dtoa_r+0x76a>
 800b7f8:	9a06      	ldr	r2, [sp, #24]
 800b7fa:	429a      	cmp	r2, r3
 800b7fc:	d1f7      	bne.n	800b7ee <_dtoa_r+0x74e>
 800b7fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b800:	9906      	ldr	r1, [sp, #24]
 800b802:	3201      	adds	r2, #1
 800b804:	920e      	str	r2, [sp, #56]	; 0x38
 800b806:	2230      	movs	r2, #48	; 0x30
 800b808:	700a      	strb	r2, [r1, #0]
 800b80a:	781a      	ldrb	r2, [r3, #0]
 800b80c:	3201      	adds	r2, #1
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e77c      	b.n	800b70c <_dtoa_r+0x66c>
 800b812:	2200      	movs	r2, #0
 800b814:	4ba9      	ldr	r3, [pc, #676]	; (800babc <_dtoa_r+0xa1c>)
 800b816:	f7f5 fe11 	bl	800143c <__aeabi_dmul>
 800b81a:	2200      	movs	r2, #0
 800b81c:	2300      	movs	r3, #0
 800b81e:	0004      	movs	r4, r0
 800b820:	000d      	movs	r5, r1
 800b822:	f7f4 fe13 	bl	800044c <__aeabi_dcmpeq>
 800b826:	2800      	cmp	r0, #0
 800b828:	d100      	bne.n	800b82c <_dtoa_r+0x78c>
 800b82a:	e782      	b.n	800b732 <_dtoa_r+0x692>
 800b82c:	e7b8      	b.n	800b7a0 <_dtoa_r+0x700>
 800b82e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800b830:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b832:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b834:	2f00      	cmp	r7, #0
 800b836:	d012      	beq.n	800b85e <_dtoa_r+0x7be>
 800b838:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800b83a:	2a01      	cmp	r2, #1
 800b83c:	dc6e      	bgt.n	800b91c <_dtoa_r+0x87c>
 800b83e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b840:	2a00      	cmp	r2, #0
 800b842:	d065      	beq.n	800b910 <_dtoa_r+0x870>
 800b844:	4a9e      	ldr	r2, [pc, #632]	; (800bac0 <_dtoa_r+0xa20>)
 800b846:	189b      	adds	r3, r3, r2
 800b848:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b84a:	2101      	movs	r1, #1
 800b84c:	18d2      	adds	r2, r2, r3
 800b84e:	920a      	str	r2, [sp, #40]	; 0x28
 800b850:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b852:	9804      	ldr	r0, [sp, #16]
 800b854:	18d3      	adds	r3, r2, r3
 800b856:	930c      	str	r3, [sp, #48]	; 0x30
 800b858:	f000 fc78 	bl	800c14c <__i2b>
 800b85c:	0007      	movs	r7, r0
 800b85e:	2c00      	cmp	r4, #0
 800b860:	d00e      	beq.n	800b880 <_dtoa_r+0x7e0>
 800b862:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b864:	2b00      	cmp	r3, #0
 800b866:	dd0b      	ble.n	800b880 <_dtoa_r+0x7e0>
 800b868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b86a:	0023      	movs	r3, r4
 800b86c:	4294      	cmp	r4, r2
 800b86e:	dd00      	ble.n	800b872 <_dtoa_r+0x7d2>
 800b870:	0013      	movs	r3, r2
 800b872:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b874:	1ae4      	subs	r4, r4, r3
 800b876:	1ad2      	subs	r2, r2, r3
 800b878:	920a      	str	r2, [sp, #40]	; 0x28
 800b87a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b87c:	1ad3      	subs	r3, r2, r3
 800b87e:	930c      	str	r3, [sp, #48]	; 0x30
 800b880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b882:	2b00      	cmp	r3, #0
 800b884:	d01e      	beq.n	800b8c4 <_dtoa_r+0x824>
 800b886:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d05c      	beq.n	800b946 <_dtoa_r+0x8a6>
 800b88c:	2d00      	cmp	r5, #0
 800b88e:	dd10      	ble.n	800b8b2 <_dtoa_r+0x812>
 800b890:	0039      	movs	r1, r7
 800b892:	002a      	movs	r2, r5
 800b894:	9804      	ldr	r0, [sp, #16]
 800b896:	f000 fd21 	bl	800c2dc <__pow5mult>
 800b89a:	9a05      	ldr	r2, [sp, #20]
 800b89c:	0001      	movs	r1, r0
 800b89e:	0007      	movs	r7, r0
 800b8a0:	9804      	ldr	r0, [sp, #16]
 800b8a2:	f000 fc6b 	bl	800c17c <__multiply>
 800b8a6:	0006      	movs	r6, r0
 800b8a8:	9905      	ldr	r1, [sp, #20]
 800b8aa:	9804      	ldr	r0, [sp, #16]
 800b8ac:	f000 fb52 	bl	800bf54 <_Bfree>
 800b8b0:	9605      	str	r6, [sp, #20]
 800b8b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8b4:	1b5a      	subs	r2, r3, r5
 800b8b6:	42ab      	cmp	r3, r5
 800b8b8:	d004      	beq.n	800b8c4 <_dtoa_r+0x824>
 800b8ba:	9905      	ldr	r1, [sp, #20]
 800b8bc:	9804      	ldr	r0, [sp, #16]
 800b8be:	f000 fd0d 	bl	800c2dc <__pow5mult>
 800b8c2:	9005      	str	r0, [sp, #20]
 800b8c4:	2101      	movs	r1, #1
 800b8c6:	9804      	ldr	r0, [sp, #16]
 800b8c8:	f000 fc40 	bl	800c14c <__i2b>
 800b8cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8ce:	0006      	movs	r6, r0
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	dd3a      	ble.n	800b94a <_dtoa_r+0x8aa>
 800b8d4:	001a      	movs	r2, r3
 800b8d6:	0001      	movs	r1, r0
 800b8d8:	9804      	ldr	r0, [sp, #16]
 800b8da:	f000 fcff 	bl	800c2dc <__pow5mult>
 800b8de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b8e0:	0006      	movs	r6, r0
 800b8e2:	2500      	movs	r5, #0
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	dc38      	bgt.n	800b95a <_dtoa_r+0x8ba>
 800b8e8:	2500      	movs	r5, #0
 800b8ea:	9b08      	ldr	r3, [sp, #32]
 800b8ec:	42ab      	cmp	r3, r5
 800b8ee:	d130      	bne.n	800b952 <_dtoa_r+0x8b2>
 800b8f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8f2:	031b      	lsls	r3, r3, #12
 800b8f4:	42ab      	cmp	r3, r5
 800b8f6:	d12c      	bne.n	800b952 <_dtoa_r+0x8b2>
 800b8f8:	4b72      	ldr	r3, [pc, #456]	; (800bac4 <_dtoa_r+0xa24>)
 800b8fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8fc:	4213      	tst	r3, r2
 800b8fe:	d028      	beq.n	800b952 <_dtoa_r+0x8b2>
 800b900:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b902:	3501      	adds	r5, #1
 800b904:	3301      	adds	r3, #1
 800b906:	930a      	str	r3, [sp, #40]	; 0x28
 800b908:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b90a:	3301      	adds	r3, #1
 800b90c:	930c      	str	r3, [sp, #48]	; 0x30
 800b90e:	e020      	b.n	800b952 <_dtoa_r+0x8b2>
 800b910:	2336      	movs	r3, #54	; 0x36
 800b912:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b914:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b916:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b918:	1a9b      	subs	r3, r3, r2
 800b91a:	e795      	b.n	800b848 <_dtoa_r+0x7a8>
 800b91c:	9b07      	ldr	r3, [sp, #28]
 800b91e:	1e5d      	subs	r5, r3, #1
 800b920:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b922:	42ab      	cmp	r3, r5
 800b924:	db07      	blt.n	800b936 <_dtoa_r+0x896>
 800b926:	1b5d      	subs	r5, r3, r5
 800b928:	9b07      	ldr	r3, [sp, #28]
 800b92a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	da8b      	bge.n	800b848 <_dtoa_r+0x7a8>
 800b930:	1ae4      	subs	r4, r4, r3
 800b932:	2300      	movs	r3, #0
 800b934:	e788      	b.n	800b848 <_dtoa_r+0x7a8>
 800b936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b938:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b93a:	1aeb      	subs	r3, r5, r3
 800b93c:	18d3      	adds	r3, r2, r3
 800b93e:	950d      	str	r5, [sp, #52]	; 0x34
 800b940:	9313      	str	r3, [sp, #76]	; 0x4c
 800b942:	2500      	movs	r5, #0
 800b944:	e7f0      	b.n	800b928 <_dtoa_r+0x888>
 800b946:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b948:	e7b7      	b.n	800b8ba <_dtoa_r+0x81a>
 800b94a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b94c:	2500      	movs	r5, #0
 800b94e:	2b01      	cmp	r3, #1
 800b950:	ddca      	ble.n	800b8e8 <_dtoa_r+0x848>
 800b952:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b954:	2001      	movs	r0, #1
 800b956:	2b00      	cmp	r3, #0
 800b958:	d008      	beq.n	800b96c <_dtoa_r+0x8cc>
 800b95a:	6933      	ldr	r3, [r6, #16]
 800b95c:	3303      	adds	r3, #3
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	18f3      	adds	r3, r6, r3
 800b962:	6858      	ldr	r0, [r3, #4]
 800b964:	f000 fbaa 	bl	800c0bc <__hi0bits>
 800b968:	2320      	movs	r3, #32
 800b96a:	1a18      	subs	r0, r3, r0
 800b96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b96e:	1818      	adds	r0, r3, r0
 800b970:	0002      	movs	r2, r0
 800b972:	231f      	movs	r3, #31
 800b974:	401a      	ands	r2, r3
 800b976:	4218      	tst	r0, r3
 800b978:	d047      	beq.n	800ba0a <_dtoa_r+0x96a>
 800b97a:	3301      	adds	r3, #1
 800b97c:	1a9b      	subs	r3, r3, r2
 800b97e:	2b04      	cmp	r3, #4
 800b980:	dd3f      	ble.n	800ba02 <_dtoa_r+0x962>
 800b982:	231c      	movs	r3, #28
 800b984:	1a9b      	subs	r3, r3, r2
 800b986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b988:	18e4      	adds	r4, r4, r3
 800b98a:	18d2      	adds	r2, r2, r3
 800b98c:	920a      	str	r2, [sp, #40]	; 0x28
 800b98e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b990:	18d3      	adds	r3, r2, r3
 800b992:	930c      	str	r3, [sp, #48]	; 0x30
 800b994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b996:	2b00      	cmp	r3, #0
 800b998:	dd05      	ble.n	800b9a6 <_dtoa_r+0x906>
 800b99a:	001a      	movs	r2, r3
 800b99c:	9905      	ldr	r1, [sp, #20]
 800b99e:	9804      	ldr	r0, [sp, #16]
 800b9a0:	f000 fcf8 	bl	800c394 <__lshift>
 800b9a4:	9005      	str	r0, [sp, #20]
 800b9a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	dd05      	ble.n	800b9b8 <_dtoa_r+0x918>
 800b9ac:	0031      	movs	r1, r6
 800b9ae:	001a      	movs	r2, r3
 800b9b0:	9804      	ldr	r0, [sp, #16]
 800b9b2:	f000 fcef 	bl	800c394 <__lshift>
 800b9b6:	0006      	movs	r6, r0
 800b9b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d027      	beq.n	800ba0e <_dtoa_r+0x96e>
 800b9be:	0031      	movs	r1, r6
 800b9c0:	9805      	ldr	r0, [sp, #20]
 800b9c2:	f000 fd55 	bl	800c470 <__mcmp>
 800b9c6:	2800      	cmp	r0, #0
 800b9c8:	da21      	bge.n	800ba0e <_dtoa_r+0x96e>
 800b9ca:	9b03      	ldr	r3, [sp, #12]
 800b9cc:	220a      	movs	r2, #10
 800b9ce:	3b01      	subs	r3, #1
 800b9d0:	9303      	str	r3, [sp, #12]
 800b9d2:	9905      	ldr	r1, [sp, #20]
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	9804      	ldr	r0, [sp, #16]
 800b9d8:	f000 fae0 	bl	800bf9c <__multadd>
 800b9dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9de:	9005      	str	r0, [sp, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d100      	bne.n	800b9e6 <_dtoa_r+0x946>
 800b9e4:	e15d      	b.n	800bca2 <_dtoa_r+0xc02>
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	0039      	movs	r1, r7
 800b9ea:	220a      	movs	r2, #10
 800b9ec:	9804      	ldr	r0, [sp, #16]
 800b9ee:	f000 fad5 	bl	800bf9c <__multadd>
 800b9f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b9f4:	0007      	movs	r7, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	dc49      	bgt.n	800ba8e <_dtoa_r+0x9ee>
 800b9fa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b9fc:	2b02      	cmp	r3, #2
 800b9fe:	dc0e      	bgt.n	800ba1e <_dtoa_r+0x97e>
 800ba00:	e045      	b.n	800ba8e <_dtoa_r+0x9ee>
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	d0c6      	beq.n	800b994 <_dtoa_r+0x8f4>
 800ba06:	331c      	adds	r3, #28
 800ba08:	e7bd      	b.n	800b986 <_dtoa_r+0x8e6>
 800ba0a:	0013      	movs	r3, r2
 800ba0c:	e7fb      	b.n	800ba06 <_dtoa_r+0x966>
 800ba0e:	9b07      	ldr	r3, [sp, #28]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	dc36      	bgt.n	800ba82 <_dtoa_r+0x9e2>
 800ba14:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ba16:	2b02      	cmp	r3, #2
 800ba18:	dd33      	ble.n	800ba82 <_dtoa_r+0x9e2>
 800ba1a:	9b07      	ldr	r3, [sp, #28]
 800ba1c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d10c      	bne.n	800ba3e <_dtoa_r+0x99e>
 800ba24:	0031      	movs	r1, r6
 800ba26:	2205      	movs	r2, #5
 800ba28:	9804      	ldr	r0, [sp, #16]
 800ba2a:	f000 fab7 	bl	800bf9c <__multadd>
 800ba2e:	0006      	movs	r6, r0
 800ba30:	0001      	movs	r1, r0
 800ba32:	9805      	ldr	r0, [sp, #20]
 800ba34:	f000 fd1c 	bl	800c470 <__mcmp>
 800ba38:	2800      	cmp	r0, #0
 800ba3a:	dd00      	ble.n	800ba3e <_dtoa_r+0x99e>
 800ba3c:	e59f      	b.n	800b57e <_dtoa_r+0x4de>
 800ba3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ba40:	43db      	mvns	r3, r3
 800ba42:	9303      	str	r3, [sp, #12]
 800ba44:	9b06      	ldr	r3, [sp, #24]
 800ba46:	9308      	str	r3, [sp, #32]
 800ba48:	2500      	movs	r5, #0
 800ba4a:	0031      	movs	r1, r6
 800ba4c:	9804      	ldr	r0, [sp, #16]
 800ba4e:	f000 fa81 	bl	800bf54 <_Bfree>
 800ba52:	2f00      	cmp	r7, #0
 800ba54:	d100      	bne.n	800ba58 <_dtoa_r+0x9b8>
 800ba56:	e6a3      	b.n	800b7a0 <_dtoa_r+0x700>
 800ba58:	2d00      	cmp	r5, #0
 800ba5a:	d005      	beq.n	800ba68 <_dtoa_r+0x9c8>
 800ba5c:	42bd      	cmp	r5, r7
 800ba5e:	d003      	beq.n	800ba68 <_dtoa_r+0x9c8>
 800ba60:	0029      	movs	r1, r5
 800ba62:	9804      	ldr	r0, [sp, #16]
 800ba64:	f000 fa76 	bl	800bf54 <_Bfree>
 800ba68:	0039      	movs	r1, r7
 800ba6a:	9804      	ldr	r0, [sp, #16]
 800ba6c:	f000 fa72 	bl	800bf54 <_Bfree>
 800ba70:	e696      	b.n	800b7a0 <_dtoa_r+0x700>
 800ba72:	2600      	movs	r6, #0
 800ba74:	0037      	movs	r7, r6
 800ba76:	e7e2      	b.n	800ba3e <_dtoa_r+0x99e>
 800ba78:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ba7a:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ba7c:	9303      	str	r3, [sp, #12]
 800ba7e:	0037      	movs	r7, r6
 800ba80:	e57d      	b.n	800b57e <_dtoa_r+0x4de>
 800ba82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d100      	bne.n	800ba8a <_dtoa_r+0x9ea>
 800ba88:	e0c3      	b.n	800bc12 <_dtoa_r+0xb72>
 800ba8a:	9b07      	ldr	r3, [sp, #28]
 800ba8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba8e:	2c00      	cmp	r4, #0
 800ba90:	dd05      	ble.n	800ba9e <_dtoa_r+0x9fe>
 800ba92:	0039      	movs	r1, r7
 800ba94:	0022      	movs	r2, r4
 800ba96:	9804      	ldr	r0, [sp, #16]
 800ba98:	f000 fc7c 	bl	800c394 <__lshift>
 800ba9c:	0007      	movs	r7, r0
 800ba9e:	0038      	movs	r0, r7
 800baa0:	2d00      	cmp	r5, #0
 800baa2:	d024      	beq.n	800baee <_dtoa_r+0xa4e>
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	9804      	ldr	r0, [sp, #16]
 800baa8:	f000 fa10 	bl	800becc <_Balloc>
 800baac:	1e04      	subs	r4, r0, #0
 800baae:	d111      	bne.n	800bad4 <_dtoa_r+0xa34>
 800bab0:	0022      	movs	r2, r4
 800bab2:	4b05      	ldr	r3, [pc, #20]	; (800bac8 <_dtoa_r+0xa28>)
 800bab4:	4805      	ldr	r0, [pc, #20]	; (800bacc <_dtoa_r+0xa2c>)
 800bab6:	4906      	ldr	r1, [pc, #24]	; (800bad0 <_dtoa_r+0xa30>)
 800bab8:	f7ff fb07 	bl	800b0ca <_dtoa_r+0x2a>
 800babc:	40240000 	.word	0x40240000
 800bac0:	00000433 	.word	0x00000433
 800bac4:	7ff00000 	.word	0x7ff00000
 800bac8:	0800ea35 	.word	0x0800ea35
 800bacc:	0800e9dd 	.word	0x0800e9dd
 800bad0:	000002ef 	.word	0x000002ef
 800bad4:	0039      	movs	r1, r7
 800bad6:	693a      	ldr	r2, [r7, #16]
 800bad8:	310c      	adds	r1, #12
 800bada:	3202      	adds	r2, #2
 800badc:	0092      	lsls	r2, r2, #2
 800bade:	300c      	adds	r0, #12
 800bae0:	f7ff fa40 	bl	800af64 <memcpy>
 800bae4:	2201      	movs	r2, #1
 800bae6:	0021      	movs	r1, r4
 800bae8:	9804      	ldr	r0, [sp, #16]
 800baea:	f000 fc53 	bl	800c394 <__lshift>
 800baee:	9b06      	ldr	r3, [sp, #24]
 800baf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800baf2:	9307      	str	r3, [sp, #28]
 800baf4:	3b01      	subs	r3, #1
 800baf6:	189b      	adds	r3, r3, r2
 800baf8:	2201      	movs	r2, #1
 800bafa:	003d      	movs	r5, r7
 800bafc:	0007      	movs	r7, r0
 800bafe:	930e      	str	r3, [sp, #56]	; 0x38
 800bb00:	9b08      	ldr	r3, [sp, #32]
 800bb02:	4013      	ands	r3, r2
 800bb04:	930d      	str	r3, [sp, #52]	; 0x34
 800bb06:	0031      	movs	r1, r6
 800bb08:	9805      	ldr	r0, [sp, #20]
 800bb0a:	f7ff fa39 	bl	800af80 <quorem>
 800bb0e:	0029      	movs	r1, r5
 800bb10:	0004      	movs	r4, r0
 800bb12:	900b      	str	r0, [sp, #44]	; 0x2c
 800bb14:	9805      	ldr	r0, [sp, #20]
 800bb16:	f000 fcab 	bl	800c470 <__mcmp>
 800bb1a:	003a      	movs	r2, r7
 800bb1c:	900c      	str	r0, [sp, #48]	; 0x30
 800bb1e:	0031      	movs	r1, r6
 800bb20:	9804      	ldr	r0, [sp, #16]
 800bb22:	f000 fcc1 	bl	800c4a8 <__mdiff>
 800bb26:	2201      	movs	r2, #1
 800bb28:	68c3      	ldr	r3, [r0, #12]
 800bb2a:	3430      	adds	r4, #48	; 0x30
 800bb2c:	9008      	str	r0, [sp, #32]
 800bb2e:	920a      	str	r2, [sp, #40]	; 0x28
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d104      	bne.n	800bb3e <_dtoa_r+0xa9e>
 800bb34:	0001      	movs	r1, r0
 800bb36:	9805      	ldr	r0, [sp, #20]
 800bb38:	f000 fc9a 	bl	800c470 <__mcmp>
 800bb3c:	900a      	str	r0, [sp, #40]	; 0x28
 800bb3e:	9908      	ldr	r1, [sp, #32]
 800bb40:	9804      	ldr	r0, [sp, #16]
 800bb42:	f000 fa07 	bl	800bf54 <_Bfree>
 800bb46:	9b07      	ldr	r3, [sp, #28]
 800bb48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	9308      	str	r3, [sp, #32]
 800bb4e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb50:	4313      	orrs	r3, r2
 800bb52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb54:	4313      	orrs	r3, r2
 800bb56:	d109      	bne.n	800bb6c <_dtoa_r+0xacc>
 800bb58:	2c39      	cmp	r4, #57	; 0x39
 800bb5a:	d022      	beq.n	800bba2 <_dtoa_r+0xb02>
 800bb5c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	dd01      	ble.n	800bb66 <_dtoa_r+0xac6>
 800bb62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bb64:	3431      	adds	r4, #49	; 0x31
 800bb66:	9b07      	ldr	r3, [sp, #28]
 800bb68:	701c      	strb	r4, [r3, #0]
 800bb6a:	e76e      	b.n	800ba4a <_dtoa_r+0x9aa>
 800bb6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	db04      	blt.n	800bb7c <_dtoa_r+0xadc>
 800bb72:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800bb74:	4313      	orrs	r3, r2
 800bb76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb78:	4313      	orrs	r3, r2
 800bb7a:	d11e      	bne.n	800bbba <_dtoa_r+0xb1a>
 800bb7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	ddf1      	ble.n	800bb66 <_dtoa_r+0xac6>
 800bb82:	9905      	ldr	r1, [sp, #20]
 800bb84:	2201      	movs	r2, #1
 800bb86:	9804      	ldr	r0, [sp, #16]
 800bb88:	f000 fc04 	bl	800c394 <__lshift>
 800bb8c:	0031      	movs	r1, r6
 800bb8e:	9005      	str	r0, [sp, #20]
 800bb90:	f000 fc6e 	bl	800c470 <__mcmp>
 800bb94:	2800      	cmp	r0, #0
 800bb96:	dc02      	bgt.n	800bb9e <_dtoa_r+0xafe>
 800bb98:	d1e5      	bne.n	800bb66 <_dtoa_r+0xac6>
 800bb9a:	07e3      	lsls	r3, r4, #31
 800bb9c:	d5e3      	bpl.n	800bb66 <_dtoa_r+0xac6>
 800bb9e:	2c39      	cmp	r4, #57	; 0x39
 800bba0:	d1df      	bne.n	800bb62 <_dtoa_r+0xac2>
 800bba2:	2339      	movs	r3, #57	; 0x39
 800bba4:	9a07      	ldr	r2, [sp, #28]
 800bba6:	7013      	strb	r3, [r2, #0]
 800bba8:	9b08      	ldr	r3, [sp, #32]
 800bbaa:	9308      	str	r3, [sp, #32]
 800bbac:	3b01      	subs	r3, #1
 800bbae:	781a      	ldrb	r2, [r3, #0]
 800bbb0:	2a39      	cmp	r2, #57	; 0x39
 800bbb2:	d063      	beq.n	800bc7c <_dtoa_r+0xbdc>
 800bbb4:	3201      	adds	r2, #1
 800bbb6:	701a      	strb	r2, [r3, #0]
 800bbb8:	e747      	b.n	800ba4a <_dtoa_r+0x9aa>
 800bbba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	dd03      	ble.n	800bbc8 <_dtoa_r+0xb28>
 800bbc0:	2c39      	cmp	r4, #57	; 0x39
 800bbc2:	d0ee      	beq.n	800bba2 <_dtoa_r+0xb02>
 800bbc4:	3401      	adds	r4, #1
 800bbc6:	e7ce      	b.n	800bb66 <_dtoa_r+0xac6>
 800bbc8:	9b07      	ldr	r3, [sp, #28]
 800bbca:	9a07      	ldr	r2, [sp, #28]
 800bbcc:	701c      	strb	r4, [r3, #0]
 800bbce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d03e      	beq.n	800bc52 <_dtoa_r+0xbb2>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	220a      	movs	r2, #10
 800bbd8:	9905      	ldr	r1, [sp, #20]
 800bbda:	9804      	ldr	r0, [sp, #16]
 800bbdc:	f000 f9de 	bl	800bf9c <__multadd>
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	9005      	str	r0, [sp, #20]
 800bbe4:	220a      	movs	r2, #10
 800bbe6:	0029      	movs	r1, r5
 800bbe8:	9804      	ldr	r0, [sp, #16]
 800bbea:	42bd      	cmp	r5, r7
 800bbec:	d106      	bne.n	800bbfc <_dtoa_r+0xb5c>
 800bbee:	f000 f9d5 	bl	800bf9c <__multadd>
 800bbf2:	0005      	movs	r5, r0
 800bbf4:	0007      	movs	r7, r0
 800bbf6:	9b08      	ldr	r3, [sp, #32]
 800bbf8:	9307      	str	r3, [sp, #28]
 800bbfa:	e784      	b.n	800bb06 <_dtoa_r+0xa66>
 800bbfc:	f000 f9ce 	bl	800bf9c <__multadd>
 800bc00:	0039      	movs	r1, r7
 800bc02:	0005      	movs	r5, r0
 800bc04:	2300      	movs	r3, #0
 800bc06:	220a      	movs	r2, #10
 800bc08:	9804      	ldr	r0, [sp, #16]
 800bc0a:	f000 f9c7 	bl	800bf9c <__multadd>
 800bc0e:	0007      	movs	r7, r0
 800bc10:	e7f1      	b.n	800bbf6 <_dtoa_r+0xb56>
 800bc12:	9b07      	ldr	r3, [sp, #28]
 800bc14:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc16:	2500      	movs	r5, #0
 800bc18:	0031      	movs	r1, r6
 800bc1a:	9805      	ldr	r0, [sp, #20]
 800bc1c:	f7ff f9b0 	bl	800af80 <quorem>
 800bc20:	9b06      	ldr	r3, [sp, #24]
 800bc22:	3030      	adds	r0, #48	; 0x30
 800bc24:	5558      	strb	r0, [r3, r5]
 800bc26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc28:	3501      	adds	r5, #1
 800bc2a:	0004      	movs	r4, r0
 800bc2c:	42ab      	cmp	r3, r5
 800bc2e:	dd07      	ble.n	800bc40 <_dtoa_r+0xba0>
 800bc30:	2300      	movs	r3, #0
 800bc32:	220a      	movs	r2, #10
 800bc34:	9905      	ldr	r1, [sp, #20]
 800bc36:	9804      	ldr	r0, [sp, #16]
 800bc38:	f000 f9b0 	bl	800bf9c <__multadd>
 800bc3c:	9005      	str	r0, [sp, #20]
 800bc3e:	e7eb      	b.n	800bc18 <_dtoa_r+0xb78>
 800bc40:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bc42:	2301      	movs	r3, #1
 800bc44:	2a00      	cmp	r2, #0
 800bc46:	dd00      	ble.n	800bc4a <_dtoa_r+0xbaa>
 800bc48:	0013      	movs	r3, r2
 800bc4a:	2500      	movs	r5, #0
 800bc4c:	9a06      	ldr	r2, [sp, #24]
 800bc4e:	18d3      	adds	r3, r2, r3
 800bc50:	9308      	str	r3, [sp, #32]
 800bc52:	9905      	ldr	r1, [sp, #20]
 800bc54:	2201      	movs	r2, #1
 800bc56:	9804      	ldr	r0, [sp, #16]
 800bc58:	f000 fb9c 	bl	800c394 <__lshift>
 800bc5c:	0031      	movs	r1, r6
 800bc5e:	9005      	str	r0, [sp, #20]
 800bc60:	f000 fc06 	bl	800c470 <__mcmp>
 800bc64:	2800      	cmp	r0, #0
 800bc66:	dc9f      	bgt.n	800bba8 <_dtoa_r+0xb08>
 800bc68:	d101      	bne.n	800bc6e <_dtoa_r+0xbce>
 800bc6a:	07e4      	lsls	r4, r4, #31
 800bc6c:	d49c      	bmi.n	800bba8 <_dtoa_r+0xb08>
 800bc6e:	9b08      	ldr	r3, [sp, #32]
 800bc70:	9308      	str	r3, [sp, #32]
 800bc72:	3b01      	subs	r3, #1
 800bc74:	781a      	ldrb	r2, [r3, #0]
 800bc76:	2a30      	cmp	r2, #48	; 0x30
 800bc78:	d0fa      	beq.n	800bc70 <_dtoa_r+0xbd0>
 800bc7a:	e6e6      	b.n	800ba4a <_dtoa_r+0x9aa>
 800bc7c:	9a06      	ldr	r2, [sp, #24]
 800bc7e:	429a      	cmp	r2, r3
 800bc80:	d193      	bne.n	800bbaa <_dtoa_r+0xb0a>
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	3301      	adds	r3, #1
 800bc86:	9303      	str	r3, [sp, #12]
 800bc88:	2331      	movs	r3, #49	; 0x31
 800bc8a:	7013      	strb	r3, [r2, #0]
 800bc8c:	e6dd      	b.n	800ba4a <_dtoa_r+0x9aa>
 800bc8e:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <_dtoa_r+0xc14>)
 800bc90:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800bc92:	9306      	str	r3, [sp, #24]
 800bc94:	4b08      	ldr	r3, [pc, #32]	; (800bcb8 <_dtoa_r+0xc18>)
 800bc96:	2a00      	cmp	r2, #0
 800bc98:	d001      	beq.n	800bc9e <_dtoa_r+0xbfe>
 800bc9a:	f7ff fa49 	bl	800b130 <_dtoa_r+0x90>
 800bc9e:	f7ff fa49 	bl	800b134 <_dtoa_r+0x94>
 800bca2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	dcb6      	bgt.n	800bc16 <_dtoa_r+0xb76>
 800bca8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bcaa:	2b02      	cmp	r3, #2
 800bcac:	dd00      	ble.n	800bcb0 <_dtoa_r+0xc10>
 800bcae:	e6b6      	b.n	800ba1e <_dtoa_r+0x97e>
 800bcb0:	e7b1      	b.n	800bc16 <_dtoa_r+0xb76>
 800bcb2:	46c0      	nop			; (mov r8, r8)
 800bcb4:	0800e9b9 	.word	0x0800e9b9
 800bcb8:	0800e9c1 	.word	0x0800e9c1

0800bcbc <_free_r>:
 800bcbc:	b570      	push	{r4, r5, r6, lr}
 800bcbe:	0005      	movs	r5, r0
 800bcc0:	2900      	cmp	r1, #0
 800bcc2:	d010      	beq.n	800bce6 <_free_r+0x2a>
 800bcc4:	1f0c      	subs	r4, r1, #4
 800bcc6:	6823      	ldr	r3, [r4, #0]
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	da00      	bge.n	800bcce <_free_r+0x12>
 800bccc:	18e4      	adds	r4, r4, r3
 800bcce:	0028      	movs	r0, r5
 800bcd0:	f000 f8ec 	bl	800beac <__malloc_lock>
 800bcd4:	4a1d      	ldr	r2, [pc, #116]	; (800bd4c <_free_r+0x90>)
 800bcd6:	6813      	ldr	r3, [r2, #0]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d105      	bne.n	800bce8 <_free_r+0x2c>
 800bcdc:	6063      	str	r3, [r4, #4]
 800bcde:	6014      	str	r4, [r2, #0]
 800bce0:	0028      	movs	r0, r5
 800bce2:	f000 f8eb 	bl	800bebc <__malloc_unlock>
 800bce6:	bd70      	pop	{r4, r5, r6, pc}
 800bce8:	42a3      	cmp	r3, r4
 800bcea:	d908      	bls.n	800bcfe <_free_r+0x42>
 800bcec:	6820      	ldr	r0, [r4, #0]
 800bcee:	1821      	adds	r1, r4, r0
 800bcf0:	428b      	cmp	r3, r1
 800bcf2:	d1f3      	bne.n	800bcdc <_free_r+0x20>
 800bcf4:	6819      	ldr	r1, [r3, #0]
 800bcf6:	685b      	ldr	r3, [r3, #4]
 800bcf8:	1809      	adds	r1, r1, r0
 800bcfa:	6021      	str	r1, [r4, #0]
 800bcfc:	e7ee      	b.n	800bcdc <_free_r+0x20>
 800bcfe:	001a      	movs	r2, r3
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d001      	beq.n	800bd0a <_free_r+0x4e>
 800bd06:	42a3      	cmp	r3, r4
 800bd08:	d9f9      	bls.n	800bcfe <_free_r+0x42>
 800bd0a:	6811      	ldr	r1, [r2, #0]
 800bd0c:	1850      	adds	r0, r2, r1
 800bd0e:	42a0      	cmp	r0, r4
 800bd10:	d10b      	bne.n	800bd2a <_free_r+0x6e>
 800bd12:	6820      	ldr	r0, [r4, #0]
 800bd14:	1809      	adds	r1, r1, r0
 800bd16:	1850      	adds	r0, r2, r1
 800bd18:	6011      	str	r1, [r2, #0]
 800bd1a:	4283      	cmp	r3, r0
 800bd1c:	d1e0      	bne.n	800bce0 <_free_r+0x24>
 800bd1e:	6818      	ldr	r0, [r3, #0]
 800bd20:	685b      	ldr	r3, [r3, #4]
 800bd22:	1841      	adds	r1, r0, r1
 800bd24:	6011      	str	r1, [r2, #0]
 800bd26:	6053      	str	r3, [r2, #4]
 800bd28:	e7da      	b.n	800bce0 <_free_r+0x24>
 800bd2a:	42a0      	cmp	r0, r4
 800bd2c:	d902      	bls.n	800bd34 <_free_r+0x78>
 800bd2e:	230c      	movs	r3, #12
 800bd30:	602b      	str	r3, [r5, #0]
 800bd32:	e7d5      	b.n	800bce0 <_free_r+0x24>
 800bd34:	6820      	ldr	r0, [r4, #0]
 800bd36:	1821      	adds	r1, r4, r0
 800bd38:	428b      	cmp	r3, r1
 800bd3a:	d103      	bne.n	800bd44 <_free_r+0x88>
 800bd3c:	6819      	ldr	r1, [r3, #0]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	1809      	adds	r1, r1, r0
 800bd42:	6021      	str	r1, [r4, #0]
 800bd44:	6063      	str	r3, [r4, #4]
 800bd46:	6054      	str	r4, [r2, #4]
 800bd48:	e7ca      	b.n	800bce0 <_free_r+0x24>
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	2000813c 	.word	0x2000813c

0800bd50 <malloc>:
 800bd50:	b510      	push	{r4, lr}
 800bd52:	4b03      	ldr	r3, [pc, #12]	; (800bd60 <malloc+0x10>)
 800bd54:	0001      	movs	r1, r0
 800bd56:	6818      	ldr	r0, [r3, #0]
 800bd58:	f000 f826 	bl	800bda8 <_malloc_r>
 800bd5c:	bd10      	pop	{r4, pc}
 800bd5e:	46c0      	nop			; (mov r8, r8)
 800bd60:	20000098 	.word	0x20000098

0800bd64 <sbrk_aligned>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4e0f      	ldr	r6, [pc, #60]	; (800bda4 <sbrk_aligned+0x40>)
 800bd68:	000d      	movs	r5, r1
 800bd6a:	6831      	ldr	r1, [r6, #0]
 800bd6c:	0004      	movs	r4, r0
 800bd6e:	2900      	cmp	r1, #0
 800bd70:	d102      	bne.n	800bd78 <sbrk_aligned+0x14>
 800bd72:	f001 fe57 	bl	800da24 <_sbrk_r>
 800bd76:	6030      	str	r0, [r6, #0]
 800bd78:	0029      	movs	r1, r5
 800bd7a:	0020      	movs	r0, r4
 800bd7c:	f001 fe52 	bl	800da24 <_sbrk_r>
 800bd80:	1c43      	adds	r3, r0, #1
 800bd82:	d00a      	beq.n	800bd9a <sbrk_aligned+0x36>
 800bd84:	2303      	movs	r3, #3
 800bd86:	1cc5      	adds	r5, r0, #3
 800bd88:	439d      	bics	r5, r3
 800bd8a:	42a8      	cmp	r0, r5
 800bd8c:	d007      	beq.n	800bd9e <sbrk_aligned+0x3a>
 800bd8e:	1a29      	subs	r1, r5, r0
 800bd90:	0020      	movs	r0, r4
 800bd92:	f001 fe47 	bl	800da24 <_sbrk_r>
 800bd96:	3001      	adds	r0, #1
 800bd98:	d101      	bne.n	800bd9e <sbrk_aligned+0x3a>
 800bd9a:	2501      	movs	r5, #1
 800bd9c:	426d      	negs	r5, r5
 800bd9e:	0028      	movs	r0, r5
 800bda0:	bd70      	pop	{r4, r5, r6, pc}
 800bda2:	46c0      	nop			; (mov r8, r8)
 800bda4:	20008140 	.word	0x20008140

0800bda8 <_malloc_r>:
 800bda8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bdaa:	2203      	movs	r2, #3
 800bdac:	1ccb      	adds	r3, r1, #3
 800bdae:	4393      	bics	r3, r2
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	0006      	movs	r6, r0
 800bdb4:	001f      	movs	r7, r3
 800bdb6:	2b0c      	cmp	r3, #12
 800bdb8:	d238      	bcs.n	800be2c <_malloc_r+0x84>
 800bdba:	270c      	movs	r7, #12
 800bdbc:	42b9      	cmp	r1, r7
 800bdbe:	d837      	bhi.n	800be30 <_malloc_r+0x88>
 800bdc0:	0030      	movs	r0, r6
 800bdc2:	f000 f873 	bl	800beac <__malloc_lock>
 800bdc6:	4b38      	ldr	r3, [pc, #224]	; (800bea8 <_malloc_r+0x100>)
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	001c      	movs	r4, r3
 800bdce:	2c00      	cmp	r4, #0
 800bdd0:	d133      	bne.n	800be3a <_malloc_r+0x92>
 800bdd2:	0039      	movs	r1, r7
 800bdd4:	0030      	movs	r0, r6
 800bdd6:	f7ff ffc5 	bl	800bd64 <sbrk_aligned>
 800bdda:	0004      	movs	r4, r0
 800bddc:	1c43      	adds	r3, r0, #1
 800bdde:	d15e      	bne.n	800be9e <_malloc_r+0xf6>
 800bde0:	9b00      	ldr	r3, [sp, #0]
 800bde2:	681c      	ldr	r4, [r3, #0]
 800bde4:	0025      	movs	r5, r4
 800bde6:	2d00      	cmp	r5, #0
 800bde8:	d14e      	bne.n	800be88 <_malloc_r+0xe0>
 800bdea:	2c00      	cmp	r4, #0
 800bdec:	d051      	beq.n	800be92 <_malloc_r+0xea>
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	0029      	movs	r1, r5
 800bdf2:	18e3      	adds	r3, r4, r3
 800bdf4:	0030      	movs	r0, r6
 800bdf6:	9301      	str	r3, [sp, #4]
 800bdf8:	f001 fe14 	bl	800da24 <_sbrk_r>
 800bdfc:	9b01      	ldr	r3, [sp, #4]
 800bdfe:	4283      	cmp	r3, r0
 800be00:	d147      	bne.n	800be92 <_malloc_r+0xea>
 800be02:	6823      	ldr	r3, [r4, #0]
 800be04:	0030      	movs	r0, r6
 800be06:	1aff      	subs	r7, r7, r3
 800be08:	0039      	movs	r1, r7
 800be0a:	f7ff ffab 	bl	800bd64 <sbrk_aligned>
 800be0e:	3001      	adds	r0, #1
 800be10:	d03f      	beq.n	800be92 <_malloc_r+0xea>
 800be12:	6823      	ldr	r3, [r4, #0]
 800be14:	19db      	adds	r3, r3, r7
 800be16:	6023      	str	r3, [r4, #0]
 800be18:	9b00      	ldr	r3, [sp, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d040      	beq.n	800bea2 <_malloc_r+0xfa>
 800be20:	685a      	ldr	r2, [r3, #4]
 800be22:	42a2      	cmp	r2, r4
 800be24:	d133      	bne.n	800be8e <_malloc_r+0xe6>
 800be26:	2200      	movs	r2, #0
 800be28:	605a      	str	r2, [r3, #4]
 800be2a:	e014      	b.n	800be56 <_malloc_r+0xae>
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	dac5      	bge.n	800bdbc <_malloc_r+0x14>
 800be30:	230c      	movs	r3, #12
 800be32:	2500      	movs	r5, #0
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	0028      	movs	r0, r5
 800be38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be3a:	6821      	ldr	r1, [r4, #0]
 800be3c:	1bc9      	subs	r1, r1, r7
 800be3e:	d420      	bmi.n	800be82 <_malloc_r+0xda>
 800be40:	290b      	cmp	r1, #11
 800be42:	d918      	bls.n	800be76 <_malloc_r+0xce>
 800be44:	19e2      	adds	r2, r4, r7
 800be46:	6027      	str	r7, [r4, #0]
 800be48:	42a3      	cmp	r3, r4
 800be4a:	d112      	bne.n	800be72 <_malloc_r+0xca>
 800be4c:	9b00      	ldr	r3, [sp, #0]
 800be4e:	601a      	str	r2, [r3, #0]
 800be50:	6863      	ldr	r3, [r4, #4]
 800be52:	6011      	str	r1, [r2, #0]
 800be54:	6053      	str	r3, [r2, #4]
 800be56:	0030      	movs	r0, r6
 800be58:	0025      	movs	r5, r4
 800be5a:	f000 f82f 	bl	800bebc <__malloc_unlock>
 800be5e:	2207      	movs	r2, #7
 800be60:	350b      	adds	r5, #11
 800be62:	1d23      	adds	r3, r4, #4
 800be64:	4395      	bics	r5, r2
 800be66:	1aea      	subs	r2, r5, r3
 800be68:	429d      	cmp	r5, r3
 800be6a:	d0e4      	beq.n	800be36 <_malloc_r+0x8e>
 800be6c:	1b5b      	subs	r3, r3, r5
 800be6e:	50a3      	str	r3, [r4, r2]
 800be70:	e7e1      	b.n	800be36 <_malloc_r+0x8e>
 800be72:	605a      	str	r2, [r3, #4]
 800be74:	e7ec      	b.n	800be50 <_malloc_r+0xa8>
 800be76:	6862      	ldr	r2, [r4, #4]
 800be78:	42a3      	cmp	r3, r4
 800be7a:	d1d5      	bne.n	800be28 <_malloc_r+0x80>
 800be7c:	9b00      	ldr	r3, [sp, #0]
 800be7e:	601a      	str	r2, [r3, #0]
 800be80:	e7e9      	b.n	800be56 <_malloc_r+0xae>
 800be82:	0023      	movs	r3, r4
 800be84:	6864      	ldr	r4, [r4, #4]
 800be86:	e7a2      	b.n	800bdce <_malloc_r+0x26>
 800be88:	002c      	movs	r4, r5
 800be8a:	686d      	ldr	r5, [r5, #4]
 800be8c:	e7ab      	b.n	800bde6 <_malloc_r+0x3e>
 800be8e:	0013      	movs	r3, r2
 800be90:	e7c4      	b.n	800be1c <_malloc_r+0x74>
 800be92:	230c      	movs	r3, #12
 800be94:	0030      	movs	r0, r6
 800be96:	6033      	str	r3, [r6, #0]
 800be98:	f000 f810 	bl	800bebc <__malloc_unlock>
 800be9c:	e7cb      	b.n	800be36 <_malloc_r+0x8e>
 800be9e:	6027      	str	r7, [r4, #0]
 800bea0:	e7d9      	b.n	800be56 <_malloc_r+0xae>
 800bea2:	605b      	str	r3, [r3, #4]
 800bea4:	deff      	udf	#255	; 0xff
 800bea6:	46c0      	nop			; (mov r8, r8)
 800bea8:	2000813c 	.word	0x2000813c

0800beac <__malloc_lock>:
 800beac:	b510      	push	{r4, lr}
 800beae:	4802      	ldr	r0, [pc, #8]	; (800beb8 <__malloc_lock+0xc>)
 800beb0:	f7ff f84b 	bl	800af4a <__retarget_lock_acquire_recursive>
 800beb4:	bd10      	pop	{r4, pc}
 800beb6:	46c0      	nop			; (mov r8, r8)
 800beb8:	20008138 	.word	0x20008138

0800bebc <__malloc_unlock>:
 800bebc:	b510      	push	{r4, lr}
 800bebe:	4802      	ldr	r0, [pc, #8]	; (800bec8 <__malloc_unlock+0xc>)
 800bec0:	f7ff f844 	bl	800af4c <__retarget_lock_release_recursive>
 800bec4:	bd10      	pop	{r4, pc}
 800bec6:	46c0      	nop			; (mov r8, r8)
 800bec8:	20008138 	.word	0x20008138

0800becc <_Balloc>:
 800becc:	b570      	push	{r4, r5, r6, lr}
 800bece:	69c5      	ldr	r5, [r0, #28]
 800bed0:	0006      	movs	r6, r0
 800bed2:	000c      	movs	r4, r1
 800bed4:	2d00      	cmp	r5, #0
 800bed6:	d10e      	bne.n	800bef6 <_Balloc+0x2a>
 800bed8:	2010      	movs	r0, #16
 800beda:	f7ff ff39 	bl	800bd50 <malloc>
 800bede:	1e02      	subs	r2, r0, #0
 800bee0:	61f0      	str	r0, [r6, #28]
 800bee2:	d104      	bne.n	800beee <_Balloc+0x22>
 800bee4:	216b      	movs	r1, #107	; 0x6b
 800bee6:	4b19      	ldr	r3, [pc, #100]	; (800bf4c <_Balloc+0x80>)
 800bee8:	4819      	ldr	r0, [pc, #100]	; (800bf50 <_Balloc+0x84>)
 800beea:	f001 fdb3 	bl	800da54 <__assert_func>
 800beee:	6045      	str	r5, [r0, #4]
 800bef0:	6085      	str	r5, [r0, #8]
 800bef2:	6005      	str	r5, [r0, #0]
 800bef4:	60c5      	str	r5, [r0, #12]
 800bef6:	69f5      	ldr	r5, [r6, #28]
 800bef8:	68eb      	ldr	r3, [r5, #12]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d013      	beq.n	800bf26 <_Balloc+0x5a>
 800befe:	69f3      	ldr	r3, [r6, #28]
 800bf00:	00a2      	lsls	r2, r4, #2
 800bf02:	68db      	ldr	r3, [r3, #12]
 800bf04:	189b      	adds	r3, r3, r2
 800bf06:	6818      	ldr	r0, [r3, #0]
 800bf08:	2800      	cmp	r0, #0
 800bf0a:	d118      	bne.n	800bf3e <_Balloc+0x72>
 800bf0c:	2101      	movs	r1, #1
 800bf0e:	000d      	movs	r5, r1
 800bf10:	40a5      	lsls	r5, r4
 800bf12:	1d6a      	adds	r2, r5, #5
 800bf14:	0030      	movs	r0, r6
 800bf16:	0092      	lsls	r2, r2, #2
 800bf18:	f001 fdba 	bl	800da90 <_calloc_r>
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d00c      	beq.n	800bf3a <_Balloc+0x6e>
 800bf20:	6044      	str	r4, [r0, #4]
 800bf22:	6085      	str	r5, [r0, #8]
 800bf24:	e00d      	b.n	800bf42 <_Balloc+0x76>
 800bf26:	2221      	movs	r2, #33	; 0x21
 800bf28:	2104      	movs	r1, #4
 800bf2a:	0030      	movs	r0, r6
 800bf2c:	f001 fdb0 	bl	800da90 <_calloc_r>
 800bf30:	69f3      	ldr	r3, [r6, #28]
 800bf32:	60e8      	str	r0, [r5, #12]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d1e1      	bne.n	800befe <_Balloc+0x32>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	bd70      	pop	{r4, r5, r6, pc}
 800bf3e:	6802      	ldr	r2, [r0, #0]
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	2300      	movs	r3, #0
 800bf44:	6103      	str	r3, [r0, #16]
 800bf46:	60c3      	str	r3, [r0, #12]
 800bf48:	e7f8      	b.n	800bf3c <_Balloc+0x70>
 800bf4a:	46c0      	nop			; (mov r8, r8)
 800bf4c:	0800e9c6 	.word	0x0800e9c6
 800bf50:	0800ea46 	.word	0x0800ea46

0800bf54 <_Bfree>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	69c6      	ldr	r6, [r0, #28]
 800bf58:	0005      	movs	r5, r0
 800bf5a:	000c      	movs	r4, r1
 800bf5c:	2e00      	cmp	r6, #0
 800bf5e:	d10e      	bne.n	800bf7e <_Bfree+0x2a>
 800bf60:	2010      	movs	r0, #16
 800bf62:	f7ff fef5 	bl	800bd50 <malloc>
 800bf66:	1e02      	subs	r2, r0, #0
 800bf68:	61e8      	str	r0, [r5, #28]
 800bf6a:	d104      	bne.n	800bf76 <_Bfree+0x22>
 800bf6c:	218f      	movs	r1, #143	; 0x8f
 800bf6e:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <_Bfree+0x40>)
 800bf70:	4809      	ldr	r0, [pc, #36]	; (800bf98 <_Bfree+0x44>)
 800bf72:	f001 fd6f 	bl	800da54 <__assert_func>
 800bf76:	6046      	str	r6, [r0, #4]
 800bf78:	6086      	str	r6, [r0, #8]
 800bf7a:	6006      	str	r6, [r0, #0]
 800bf7c:	60c6      	str	r6, [r0, #12]
 800bf7e:	2c00      	cmp	r4, #0
 800bf80:	d007      	beq.n	800bf92 <_Bfree+0x3e>
 800bf82:	69eb      	ldr	r3, [r5, #28]
 800bf84:	6862      	ldr	r2, [r4, #4]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	0092      	lsls	r2, r2, #2
 800bf8a:	189b      	adds	r3, r3, r2
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	6022      	str	r2, [r4, #0]
 800bf90:	601c      	str	r4, [r3, #0]
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	0800e9c6 	.word	0x0800e9c6
 800bf98:	0800ea46 	.word	0x0800ea46

0800bf9c <__multadd>:
 800bf9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf9e:	000e      	movs	r6, r1
 800bfa0:	9001      	str	r0, [sp, #4]
 800bfa2:	000c      	movs	r4, r1
 800bfa4:	001d      	movs	r5, r3
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	690f      	ldr	r7, [r1, #16]
 800bfaa:	3614      	adds	r6, #20
 800bfac:	6833      	ldr	r3, [r6, #0]
 800bfae:	3001      	adds	r0, #1
 800bfb0:	b299      	uxth	r1, r3
 800bfb2:	4351      	muls	r1, r2
 800bfb4:	0c1b      	lsrs	r3, r3, #16
 800bfb6:	4353      	muls	r3, r2
 800bfb8:	1949      	adds	r1, r1, r5
 800bfba:	0c0d      	lsrs	r5, r1, #16
 800bfbc:	195b      	adds	r3, r3, r5
 800bfbe:	0c1d      	lsrs	r5, r3, #16
 800bfc0:	b289      	uxth	r1, r1
 800bfc2:	041b      	lsls	r3, r3, #16
 800bfc4:	185b      	adds	r3, r3, r1
 800bfc6:	c608      	stmia	r6!, {r3}
 800bfc8:	4287      	cmp	r7, r0
 800bfca:	dcef      	bgt.n	800bfac <__multadd+0x10>
 800bfcc:	2d00      	cmp	r5, #0
 800bfce:	d022      	beq.n	800c016 <__multadd+0x7a>
 800bfd0:	68a3      	ldr	r3, [r4, #8]
 800bfd2:	42bb      	cmp	r3, r7
 800bfd4:	dc19      	bgt.n	800c00a <__multadd+0x6e>
 800bfd6:	6861      	ldr	r1, [r4, #4]
 800bfd8:	9801      	ldr	r0, [sp, #4]
 800bfda:	3101      	adds	r1, #1
 800bfdc:	f7ff ff76 	bl	800becc <_Balloc>
 800bfe0:	1e06      	subs	r6, r0, #0
 800bfe2:	d105      	bne.n	800bff0 <__multadd+0x54>
 800bfe4:	0032      	movs	r2, r6
 800bfe6:	21ba      	movs	r1, #186	; 0xba
 800bfe8:	4b0c      	ldr	r3, [pc, #48]	; (800c01c <__multadd+0x80>)
 800bfea:	480d      	ldr	r0, [pc, #52]	; (800c020 <__multadd+0x84>)
 800bfec:	f001 fd32 	bl	800da54 <__assert_func>
 800bff0:	0021      	movs	r1, r4
 800bff2:	6922      	ldr	r2, [r4, #16]
 800bff4:	310c      	adds	r1, #12
 800bff6:	3202      	adds	r2, #2
 800bff8:	0092      	lsls	r2, r2, #2
 800bffa:	300c      	adds	r0, #12
 800bffc:	f7fe ffb2 	bl	800af64 <memcpy>
 800c000:	0021      	movs	r1, r4
 800c002:	9801      	ldr	r0, [sp, #4]
 800c004:	f7ff ffa6 	bl	800bf54 <_Bfree>
 800c008:	0034      	movs	r4, r6
 800c00a:	1d3b      	adds	r3, r7, #4
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	18e3      	adds	r3, r4, r3
 800c010:	605d      	str	r5, [r3, #4]
 800c012:	1c7b      	adds	r3, r7, #1
 800c014:	6123      	str	r3, [r4, #16]
 800c016:	0020      	movs	r0, r4
 800c018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c01a:	46c0      	nop			; (mov r8, r8)
 800c01c:	0800ea35 	.word	0x0800ea35
 800c020:	0800ea46 	.word	0x0800ea46

0800c024 <__s2b>:
 800c024:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c026:	0006      	movs	r6, r0
 800c028:	0018      	movs	r0, r3
 800c02a:	000c      	movs	r4, r1
 800c02c:	3008      	adds	r0, #8
 800c02e:	2109      	movs	r1, #9
 800c030:	9301      	str	r3, [sp, #4]
 800c032:	0015      	movs	r5, r2
 800c034:	f7f4 f90e 	bl	8000254 <__divsi3>
 800c038:	2301      	movs	r3, #1
 800c03a:	2100      	movs	r1, #0
 800c03c:	4283      	cmp	r3, r0
 800c03e:	db0a      	blt.n	800c056 <__s2b+0x32>
 800c040:	0030      	movs	r0, r6
 800c042:	f7ff ff43 	bl	800becc <_Balloc>
 800c046:	1e01      	subs	r1, r0, #0
 800c048:	d108      	bne.n	800c05c <__s2b+0x38>
 800c04a:	000a      	movs	r2, r1
 800c04c:	4b19      	ldr	r3, [pc, #100]	; (800c0b4 <__s2b+0x90>)
 800c04e:	481a      	ldr	r0, [pc, #104]	; (800c0b8 <__s2b+0x94>)
 800c050:	31d3      	adds	r1, #211	; 0xd3
 800c052:	f001 fcff 	bl	800da54 <__assert_func>
 800c056:	005b      	lsls	r3, r3, #1
 800c058:	3101      	adds	r1, #1
 800c05a:	e7ef      	b.n	800c03c <__s2b+0x18>
 800c05c:	9b08      	ldr	r3, [sp, #32]
 800c05e:	6143      	str	r3, [r0, #20]
 800c060:	2301      	movs	r3, #1
 800c062:	6103      	str	r3, [r0, #16]
 800c064:	2d09      	cmp	r5, #9
 800c066:	dd18      	ble.n	800c09a <__s2b+0x76>
 800c068:	0023      	movs	r3, r4
 800c06a:	3309      	adds	r3, #9
 800c06c:	001f      	movs	r7, r3
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	1964      	adds	r4, r4, r5
 800c072:	783b      	ldrb	r3, [r7, #0]
 800c074:	220a      	movs	r2, #10
 800c076:	0030      	movs	r0, r6
 800c078:	3b30      	subs	r3, #48	; 0x30
 800c07a:	f7ff ff8f 	bl	800bf9c <__multadd>
 800c07e:	3701      	adds	r7, #1
 800c080:	0001      	movs	r1, r0
 800c082:	42a7      	cmp	r7, r4
 800c084:	d1f5      	bne.n	800c072 <__s2b+0x4e>
 800c086:	002c      	movs	r4, r5
 800c088:	9b00      	ldr	r3, [sp, #0]
 800c08a:	3c08      	subs	r4, #8
 800c08c:	191c      	adds	r4, r3, r4
 800c08e:	002f      	movs	r7, r5
 800c090:	9b01      	ldr	r3, [sp, #4]
 800c092:	429f      	cmp	r7, r3
 800c094:	db04      	blt.n	800c0a0 <__s2b+0x7c>
 800c096:	0008      	movs	r0, r1
 800c098:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c09a:	2509      	movs	r5, #9
 800c09c:	340a      	adds	r4, #10
 800c09e:	e7f6      	b.n	800c08e <__s2b+0x6a>
 800c0a0:	1b63      	subs	r3, r4, r5
 800c0a2:	5ddb      	ldrb	r3, [r3, r7]
 800c0a4:	220a      	movs	r2, #10
 800c0a6:	0030      	movs	r0, r6
 800c0a8:	3b30      	subs	r3, #48	; 0x30
 800c0aa:	f7ff ff77 	bl	800bf9c <__multadd>
 800c0ae:	3701      	adds	r7, #1
 800c0b0:	0001      	movs	r1, r0
 800c0b2:	e7ed      	b.n	800c090 <__s2b+0x6c>
 800c0b4:	0800ea35 	.word	0x0800ea35
 800c0b8:	0800ea46 	.word	0x0800ea46

0800c0bc <__hi0bits>:
 800c0bc:	0003      	movs	r3, r0
 800c0be:	0c02      	lsrs	r2, r0, #16
 800c0c0:	2000      	movs	r0, #0
 800c0c2:	4282      	cmp	r2, r0
 800c0c4:	d101      	bne.n	800c0ca <__hi0bits+0xe>
 800c0c6:	041b      	lsls	r3, r3, #16
 800c0c8:	3010      	adds	r0, #16
 800c0ca:	0e1a      	lsrs	r2, r3, #24
 800c0cc:	d101      	bne.n	800c0d2 <__hi0bits+0x16>
 800c0ce:	3008      	adds	r0, #8
 800c0d0:	021b      	lsls	r3, r3, #8
 800c0d2:	0f1a      	lsrs	r2, r3, #28
 800c0d4:	d101      	bne.n	800c0da <__hi0bits+0x1e>
 800c0d6:	3004      	adds	r0, #4
 800c0d8:	011b      	lsls	r3, r3, #4
 800c0da:	0f9a      	lsrs	r2, r3, #30
 800c0dc:	d101      	bne.n	800c0e2 <__hi0bits+0x26>
 800c0de:	3002      	adds	r0, #2
 800c0e0:	009b      	lsls	r3, r3, #2
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	db03      	blt.n	800c0ee <__hi0bits+0x32>
 800c0e6:	3001      	adds	r0, #1
 800c0e8:	005b      	lsls	r3, r3, #1
 800c0ea:	d400      	bmi.n	800c0ee <__hi0bits+0x32>
 800c0ec:	2020      	movs	r0, #32
 800c0ee:	4770      	bx	lr

0800c0f0 <__lo0bits>:
 800c0f0:	6803      	ldr	r3, [r0, #0]
 800c0f2:	0001      	movs	r1, r0
 800c0f4:	2207      	movs	r2, #7
 800c0f6:	0018      	movs	r0, r3
 800c0f8:	4010      	ands	r0, r2
 800c0fa:	4213      	tst	r3, r2
 800c0fc:	d00d      	beq.n	800c11a <__lo0bits+0x2a>
 800c0fe:	3a06      	subs	r2, #6
 800c100:	2000      	movs	r0, #0
 800c102:	4213      	tst	r3, r2
 800c104:	d105      	bne.n	800c112 <__lo0bits+0x22>
 800c106:	3002      	adds	r0, #2
 800c108:	4203      	tst	r3, r0
 800c10a:	d003      	beq.n	800c114 <__lo0bits+0x24>
 800c10c:	40d3      	lsrs	r3, r2
 800c10e:	0010      	movs	r0, r2
 800c110:	600b      	str	r3, [r1, #0]
 800c112:	4770      	bx	lr
 800c114:	089b      	lsrs	r3, r3, #2
 800c116:	600b      	str	r3, [r1, #0]
 800c118:	e7fb      	b.n	800c112 <__lo0bits+0x22>
 800c11a:	b29a      	uxth	r2, r3
 800c11c:	2a00      	cmp	r2, #0
 800c11e:	d101      	bne.n	800c124 <__lo0bits+0x34>
 800c120:	2010      	movs	r0, #16
 800c122:	0c1b      	lsrs	r3, r3, #16
 800c124:	b2da      	uxtb	r2, r3
 800c126:	2a00      	cmp	r2, #0
 800c128:	d101      	bne.n	800c12e <__lo0bits+0x3e>
 800c12a:	3008      	adds	r0, #8
 800c12c:	0a1b      	lsrs	r3, r3, #8
 800c12e:	071a      	lsls	r2, r3, #28
 800c130:	d101      	bne.n	800c136 <__lo0bits+0x46>
 800c132:	3004      	adds	r0, #4
 800c134:	091b      	lsrs	r3, r3, #4
 800c136:	079a      	lsls	r2, r3, #30
 800c138:	d101      	bne.n	800c13e <__lo0bits+0x4e>
 800c13a:	3002      	adds	r0, #2
 800c13c:	089b      	lsrs	r3, r3, #2
 800c13e:	07da      	lsls	r2, r3, #31
 800c140:	d4e9      	bmi.n	800c116 <__lo0bits+0x26>
 800c142:	3001      	adds	r0, #1
 800c144:	085b      	lsrs	r3, r3, #1
 800c146:	d1e6      	bne.n	800c116 <__lo0bits+0x26>
 800c148:	2020      	movs	r0, #32
 800c14a:	e7e2      	b.n	800c112 <__lo0bits+0x22>

0800c14c <__i2b>:
 800c14c:	b510      	push	{r4, lr}
 800c14e:	000c      	movs	r4, r1
 800c150:	2101      	movs	r1, #1
 800c152:	f7ff febb 	bl	800becc <_Balloc>
 800c156:	2800      	cmp	r0, #0
 800c158:	d107      	bne.n	800c16a <__i2b+0x1e>
 800c15a:	2146      	movs	r1, #70	; 0x46
 800c15c:	4c05      	ldr	r4, [pc, #20]	; (800c174 <__i2b+0x28>)
 800c15e:	0002      	movs	r2, r0
 800c160:	4b05      	ldr	r3, [pc, #20]	; (800c178 <__i2b+0x2c>)
 800c162:	0020      	movs	r0, r4
 800c164:	31ff      	adds	r1, #255	; 0xff
 800c166:	f001 fc75 	bl	800da54 <__assert_func>
 800c16a:	2301      	movs	r3, #1
 800c16c:	6144      	str	r4, [r0, #20]
 800c16e:	6103      	str	r3, [r0, #16]
 800c170:	bd10      	pop	{r4, pc}
 800c172:	46c0      	nop			; (mov r8, r8)
 800c174:	0800ea46 	.word	0x0800ea46
 800c178:	0800ea35 	.word	0x0800ea35

0800c17c <__multiply>:
 800c17c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c17e:	0015      	movs	r5, r2
 800c180:	690a      	ldr	r2, [r1, #16]
 800c182:	692b      	ldr	r3, [r5, #16]
 800c184:	000c      	movs	r4, r1
 800c186:	b08b      	sub	sp, #44	; 0x2c
 800c188:	429a      	cmp	r2, r3
 800c18a:	da01      	bge.n	800c190 <__multiply+0x14>
 800c18c:	002c      	movs	r4, r5
 800c18e:	000d      	movs	r5, r1
 800c190:	6927      	ldr	r7, [r4, #16]
 800c192:	692e      	ldr	r6, [r5, #16]
 800c194:	6861      	ldr	r1, [r4, #4]
 800c196:	19bb      	adds	r3, r7, r6
 800c198:	9303      	str	r3, [sp, #12]
 800c19a:	68a3      	ldr	r3, [r4, #8]
 800c19c:	19ba      	adds	r2, r7, r6
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	da00      	bge.n	800c1a4 <__multiply+0x28>
 800c1a2:	3101      	adds	r1, #1
 800c1a4:	f7ff fe92 	bl	800becc <_Balloc>
 800c1a8:	9002      	str	r0, [sp, #8]
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d106      	bne.n	800c1bc <__multiply+0x40>
 800c1ae:	21b1      	movs	r1, #177	; 0xb1
 800c1b0:	4b48      	ldr	r3, [pc, #288]	; (800c2d4 <__multiply+0x158>)
 800c1b2:	4849      	ldr	r0, [pc, #292]	; (800c2d8 <__multiply+0x15c>)
 800c1b4:	9a02      	ldr	r2, [sp, #8]
 800c1b6:	0049      	lsls	r1, r1, #1
 800c1b8:	f001 fc4c 	bl	800da54 <__assert_func>
 800c1bc:	9b02      	ldr	r3, [sp, #8]
 800c1be:	2200      	movs	r2, #0
 800c1c0:	3314      	adds	r3, #20
 800c1c2:	469c      	mov	ip, r3
 800c1c4:	19bb      	adds	r3, r7, r6
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4463      	add	r3, ip
 800c1ca:	9304      	str	r3, [sp, #16]
 800c1cc:	4663      	mov	r3, ip
 800c1ce:	9904      	ldr	r1, [sp, #16]
 800c1d0:	428b      	cmp	r3, r1
 800c1d2:	d32a      	bcc.n	800c22a <__multiply+0xae>
 800c1d4:	0023      	movs	r3, r4
 800c1d6:	00bf      	lsls	r7, r7, #2
 800c1d8:	3314      	adds	r3, #20
 800c1da:	3514      	adds	r5, #20
 800c1dc:	9308      	str	r3, [sp, #32]
 800c1de:	00b6      	lsls	r6, r6, #2
 800c1e0:	19db      	adds	r3, r3, r7
 800c1e2:	9305      	str	r3, [sp, #20]
 800c1e4:	19ab      	adds	r3, r5, r6
 800c1e6:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	9306      	str	r3, [sp, #24]
 800c1ec:	0023      	movs	r3, r4
 800c1ee:	9a05      	ldr	r2, [sp, #20]
 800c1f0:	3315      	adds	r3, #21
 800c1f2:	9501      	str	r5, [sp, #4]
 800c1f4:	429a      	cmp	r2, r3
 800c1f6:	d305      	bcc.n	800c204 <__multiply+0x88>
 800c1f8:	1b13      	subs	r3, r2, r4
 800c1fa:	3b15      	subs	r3, #21
 800c1fc:	089b      	lsrs	r3, r3, #2
 800c1fe:	3301      	adds	r3, #1
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	9306      	str	r3, [sp, #24]
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c208:	4293      	cmp	r3, r2
 800c20a:	d310      	bcc.n	800c22e <__multiply+0xb2>
 800c20c:	9b03      	ldr	r3, [sp, #12]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	dd05      	ble.n	800c21e <__multiply+0xa2>
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	3b04      	subs	r3, #4
 800c216:	9304      	str	r3, [sp, #16]
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d056      	beq.n	800c2cc <__multiply+0x150>
 800c21e:	9b02      	ldr	r3, [sp, #8]
 800c220:	9a03      	ldr	r2, [sp, #12]
 800c222:	0018      	movs	r0, r3
 800c224:	611a      	str	r2, [r3, #16]
 800c226:	b00b      	add	sp, #44	; 0x2c
 800c228:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c22a:	c304      	stmia	r3!, {r2}
 800c22c:	e7cf      	b.n	800c1ce <__multiply+0x52>
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	6818      	ldr	r0, [r3, #0]
 800c232:	b280      	uxth	r0, r0
 800c234:	2800      	cmp	r0, #0
 800c236:	d01e      	beq.n	800c276 <__multiply+0xfa>
 800c238:	4667      	mov	r7, ip
 800c23a:	2500      	movs	r5, #0
 800c23c:	9e08      	ldr	r6, [sp, #32]
 800c23e:	ce02      	ldmia	r6!, {r1}
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	9307      	str	r3, [sp, #28]
 800c244:	b28b      	uxth	r3, r1
 800c246:	4343      	muls	r3, r0
 800c248:	001a      	movs	r2, r3
 800c24a:	466b      	mov	r3, sp
 800c24c:	8b9b      	ldrh	r3, [r3, #28]
 800c24e:	18d3      	adds	r3, r2, r3
 800c250:	195b      	adds	r3, r3, r5
 800c252:	0c0d      	lsrs	r5, r1, #16
 800c254:	4345      	muls	r5, r0
 800c256:	9a07      	ldr	r2, [sp, #28]
 800c258:	0c11      	lsrs	r1, r2, #16
 800c25a:	1869      	adds	r1, r5, r1
 800c25c:	0c1a      	lsrs	r2, r3, #16
 800c25e:	188a      	adds	r2, r1, r2
 800c260:	b29b      	uxth	r3, r3
 800c262:	0c15      	lsrs	r5, r2, #16
 800c264:	0412      	lsls	r2, r2, #16
 800c266:	431a      	orrs	r2, r3
 800c268:	9b05      	ldr	r3, [sp, #20]
 800c26a:	c704      	stmia	r7!, {r2}
 800c26c:	42b3      	cmp	r3, r6
 800c26e:	d8e6      	bhi.n	800c23e <__multiply+0xc2>
 800c270:	4663      	mov	r3, ip
 800c272:	9a06      	ldr	r2, [sp, #24]
 800c274:	509d      	str	r5, [r3, r2]
 800c276:	9b01      	ldr	r3, [sp, #4]
 800c278:	6818      	ldr	r0, [r3, #0]
 800c27a:	0c00      	lsrs	r0, r0, #16
 800c27c:	d020      	beq.n	800c2c0 <__multiply+0x144>
 800c27e:	4663      	mov	r3, ip
 800c280:	0025      	movs	r5, r4
 800c282:	4661      	mov	r1, ip
 800c284:	2700      	movs	r7, #0
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3514      	adds	r5, #20
 800c28a:	682a      	ldr	r2, [r5, #0]
 800c28c:	680e      	ldr	r6, [r1, #0]
 800c28e:	b292      	uxth	r2, r2
 800c290:	4342      	muls	r2, r0
 800c292:	0c36      	lsrs	r6, r6, #16
 800c294:	1992      	adds	r2, r2, r6
 800c296:	19d2      	adds	r2, r2, r7
 800c298:	0416      	lsls	r6, r2, #16
 800c29a:	b29b      	uxth	r3, r3
 800c29c:	431e      	orrs	r6, r3
 800c29e:	600e      	str	r6, [r1, #0]
 800c2a0:	cd40      	ldmia	r5!, {r6}
 800c2a2:	684b      	ldr	r3, [r1, #4]
 800c2a4:	0c36      	lsrs	r6, r6, #16
 800c2a6:	4346      	muls	r6, r0
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	0c12      	lsrs	r2, r2, #16
 800c2ac:	18f3      	adds	r3, r6, r3
 800c2ae:	189b      	adds	r3, r3, r2
 800c2b0:	9a05      	ldr	r2, [sp, #20]
 800c2b2:	0c1f      	lsrs	r7, r3, #16
 800c2b4:	3104      	adds	r1, #4
 800c2b6:	42aa      	cmp	r2, r5
 800c2b8:	d8e7      	bhi.n	800c28a <__multiply+0x10e>
 800c2ba:	4662      	mov	r2, ip
 800c2bc:	9906      	ldr	r1, [sp, #24]
 800c2be:	5053      	str	r3, [r2, r1]
 800c2c0:	9b01      	ldr	r3, [sp, #4]
 800c2c2:	3304      	adds	r3, #4
 800c2c4:	9301      	str	r3, [sp, #4]
 800c2c6:	2304      	movs	r3, #4
 800c2c8:	449c      	add	ip, r3
 800c2ca:	e79b      	b.n	800c204 <__multiply+0x88>
 800c2cc:	9b03      	ldr	r3, [sp, #12]
 800c2ce:	3b01      	subs	r3, #1
 800c2d0:	9303      	str	r3, [sp, #12]
 800c2d2:	e79b      	b.n	800c20c <__multiply+0x90>
 800c2d4:	0800ea35 	.word	0x0800ea35
 800c2d8:	0800ea46 	.word	0x0800ea46

0800c2dc <__pow5mult>:
 800c2dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c2de:	2303      	movs	r3, #3
 800c2e0:	0015      	movs	r5, r2
 800c2e2:	0007      	movs	r7, r0
 800c2e4:	000e      	movs	r6, r1
 800c2e6:	401a      	ands	r2, r3
 800c2e8:	421d      	tst	r5, r3
 800c2ea:	d008      	beq.n	800c2fe <__pow5mult+0x22>
 800c2ec:	4925      	ldr	r1, [pc, #148]	; (800c384 <__pow5mult+0xa8>)
 800c2ee:	3a01      	subs	r2, #1
 800c2f0:	0092      	lsls	r2, r2, #2
 800c2f2:	5852      	ldr	r2, [r2, r1]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	0031      	movs	r1, r6
 800c2f8:	f7ff fe50 	bl	800bf9c <__multadd>
 800c2fc:	0006      	movs	r6, r0
 800c2fe:	10ad      	asrs	r5, r5, #2
 800c300:	d03d      	beq.n	800c37e <__pow5mult+0xa2>
 800c302:	69fc      	ldr	r4, [r7, #28]
 800c304:	2c00      	cmp	r4, #0
 800c306:	d10f      	bne.n	800c328 <__pow5mult+0x4c>
 800c308:	2010      	movs	r0, #16
 800c30a:	f7ff fd21 	bl	800bd50 <malloc>
 800c30e:	1e02      	subs	r2, r0, #0
 800c310:	61f8      	str	r0, [r7, #28]
 800c312:	d105      	bne.n	800c320 <__pow5mult+0x44>
 800c314:	21b4      	movs	r1, #180	; 0xb4
 800c316:	4b1c      	ldr	r3, [pc, #112]	; (800c388 <__pow5mult+0xac>)
 800c318:	481c      	ldr	r0, [pc, #112]	; (800c38c <__pow5mult+0xb0>)
 800c31a:	31ff      	adds	r1, #255	; 0xff
 800c31c:	f001 fb9a 	bl	800da54 <__assert_func>
 800c320:	6044      	str	r4, [r0, #4]
 800c322:	6084      	str	r4, [r0, #8]
 800c324:	6004      	str	r4, [r0, #0]
 800c326:	60c4      	str	r4, [r0, #12]
 800c328:	69fb      	ldr	r3, [r7, #28]
 800c32a:	689c      	ldr	r4, [r3, #8]
 800c32c:	9301      	str	r3, [sp, #4]
 800c32e:	2c00      	cmp	r4, #0
 800c330:	d108      	bne.n	800c344 <__pow5mult+0x68>
 800c332:	0038      	movs	r0, r7
 800c334:	4916      	ldr	r1, [pc, #88]	; (800c390 <__pow5mult+0xb4>)
 800c336:	f7ff ff09 	bl	800c14c <__i2b>
 800c33a:	9b01      	ldr	r3, [sp, #4]
 800c33c:	0004      	movs	r4, r0
 800c33e:	6098      	str	r0, [r3, #8]
 800c340:	2300      	movs	r3, #0
 800c342:	6003      	str	r3, [r0, #0]
 800c344:	2301      	movs	r3, #1
 800c346:	421d      	tst	r5, r3
 800c348:	d00a      	beq.n	800c360 <__pow5mult+0x84>
 800c34a:	0031      	movs	r1, r6
 800c34c:	0022      	movs	r2, r4
 800c34e:	0038      	movs	r0, r7
 800c350:	f7ff ff14 	bl	800c17c <__multiply>
 800c354:	0031      	movs	r1, r6
 800c356:	9001      	str	r0, [sp, #4]
 800c358:	0038      	movs	r0, r7
 800c35a:	f7ff fdfb 	bl	800bf54 <_Bfree>
 800c35e:	9e01      	ldr	r6, [sp, #4]
 800c360:	106d      	asrs	r5, r5, #1
 800c362:	d00c      	beq.n	800c37e <__pow5mult+0xa2>
 800c364:	6820      	ldr	r0, [r4, #0]
 800c366:	2800      	cmp	r0, #0
 800c368:	d107      	bne.n	800c37a <__pow5mult+0x9e>
 800c36a:	0022      	movs	r2, r4
 800c36c:	0021      	movs	r1, r4
 800c36e:	0038      	movs	r0, r7
 800c370:	f7ff ff04 	bl	800c17c <__multiply>
 800c374:	2300      	movs	r3, #0
 800c376:	6020      	str	r0, [r4, #0]
 800c378:	6003      	str	r3, [r0, #0]
 800c37a:	0004      	movs	r4, r0
 800c37c:	e7e2      	b.n	800c344 <__pow5mult+0x68>
 800c37e:	0030      	movs	r0, r6
 800c380:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c382:	46c0      	nop			; (mov r8, r8)
 800c384:	0800eb90 	.word	0x0800eb90
 800c388:	0800e9c6 	.word	0x0800e9c6
 800c38c:	0800ea46 	.word	0x0800ea46
 800c390:	00000271 	.word	0x00000271

0800c394 <__lshift>:
 800c394:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c396:	000c      	movs	r4, r1
 800c398:	0017      	movs	r7, r2
 800c39a:	6923      	ldr	r3, [r4, #16]
 800c39c:	1155      	asrs	r5, r2, #5
 800c39e:	b087      	sub	sp, #28
 800c3a0:	18eb      	adds	r3, r5, r3
 800c3a2:	9302      	str	r3, [sp, #8]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	9301      	str	r3, [sp, #4]
 800c3a8:	6849      	ldr	r1, [r1, #4]
 800c3aa:	68a3      	ldr	r3, [r4, #8]
 800c3ac:	9004      	str	r0, [sp, #16]
 800c3ae:	9a01      	ldr	r2, [sp, #4]
 800c3b0:	4293      	cmp	r3, r2
 800c3b2:	db10      	blt.n	800c3d6 <__lshift+0x42>
 800c3b4:	9804      	ldr	r0, [sp, #16]
 800c3b6:	f7ff fd89 	bl	800becc <_Balloc>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	0002      	movs	r2, r0
 800c3be:	0006      	movs	r6, r0
 800c3c0:	0019      	movs	r1, r3
 800c3c2:	3214      	adds	r2, #20
 800c3c4:	4298      	cmp	r0, r3
 800c3c6:	d10c      	bne.n	800c3e2 <__lshift+0x4e>
 800c3c8:	31df      	adds	r1, #223	; 0xdf
 800c3ca:	0032      	movs	r2, r6
 800c3cc:	4b26      	ldr	r3, [pc, #152]	; (800c468 <__lshift+0xd4>)
 800c3ce:	4827      	ldr	r0, [pc, #156]	; (800c46c <__lshift+0xd8>)
 800c3d0:	31ff      	adds	r1, #255	; 0xff
 800c3d2:	f001 fb3f 	bl	800da54 <__assert_func>
 800c3d6:	3101      	adds	r1, #1
 800c3d8:	005b      	lsls	r3, r3, #1
 800c3da:	e7e8      	b.n	800c3ae <__lshift+0x1a>
 800c3dc:	0098      	lsls	r0, r3, #2
 800c3de:	5011      	str	r1, [r2, r0]
 800c3e0:	3301      	adds	r3, #1
 800c3e2:	42ab      	cmp	r3, r5
 800c3e4:	dbfa      	blt.n	800c3dc <__lshift+0x48>
 800c3e6:	43eb      	mvns	r3, r5
 800c3e8:	17db      	asrs	r3, r3, #31
 800c3ea:	401d      	ands	r5, r3
 800c3ec:	211f      	movs	r1, #31
 800c3ee:	0023      	movs	r3, r4
 800c3f0:	0038      	movs	r0, r7
 800c3f2:	00ad      	lsls	r5, r5, #2
 800c3f4:	1955      	adds	r5, r2, r5
 800c3f6:	6922      	ldr	r2, [r4, #16]
 800c3f8:	3314      	adds	r3, #20
 800c3fa:	0092      	lsls	r2, r2, #2
 800c3fc:	4008      	ands	r0, r1
 800c3fe:	4684      	mov	ip, r0
 800c400:	189a      	adds	r2, r3, r2
 800c402:	420f      	tst	r7, r1
 800c404:	d02a      	beq.n	800c45c <__lshift+0xc8>
 800c406:	3101      	adds	r1, #1
 800c408:	1a09      	subs	r1, r1, r0
 800c40a:	9105      	str	r1, [sp, #20]
 800c40c:	2100      	movs	r1, #0
 800c40e:	9503      	str	r5, [sp, #12]
 800c410:	4667      	mov	r7, ip
 800c412:	6818      	ldr	r0, [r3, #0]
 800c414:	40b8      	lsls	r0, r7
 800c416:	4308      	orrs	r0, r1
 800c418:	9903      	ldr	r1, [sp, #12]
 800c41a:	c101      	stmia	r1!, {r0}
 800c41c:	9103      	str	r1, [sp, #12]
 800c41e:	9805      	ldr	r0, [sp, #20]
 800c420:	cb02      	ldmia	r3!, {r1}
 800c422:	40c1      	lsrs	r1, r0
 800c424:	429a      	cmp	r2, r3
 800c426:	d8f3      	bhi.n	800c410 <__lshift+0x7c>
 800c428:	0020      	movs	r0, r4
 800c42a:	3015      	adds	r0, #21
 800c42c:	2304      	movs	r3, #4
 800c42e:	4282      	cmp	r2, r0
 800c430:	d304      	bcc.n	800c43c <__lshift+0xa8>
 800c432:	1b13      	subs	r3, r2, r4
 800c434:	3b15      	subs	r3, #21
 800c436:	089b      	lsrs	r3, r3, #2
 800c438:	3301      	adds	r3, #1
 800c43a:	009b      	lsls	r3, r3, #2
 800c43c:	50e9      	str	r1, [r5, r3]
 800c43e:	2900      	cmp	r1, #0
 800c440:	d002      	beq.n	800c448 <__lshift+0xb4>
 800c442:	9b02      	ldr	r3, [sp, #8]
 800c444:	3302      	adds	r3, #2
 800c446:	9301      	str	r3, [sp, #4]
 800c448:	9b01      	ldr	r3, [sp, #4]
 800c44a:	9804      	ldr	r0, [sp, #16]
 800c44c:	3b01      	subs	r3, #1
 800c44e:	0021      	movs	r1, r4
 800c450:	6133      	str	r3, [r6, #16]
 800c452:	f7ff fd7f 	bl	800bf54 <_Bfree>
 800c456:	0030      	movs	r0, r6
 800c458:	b007      	add	sp, #28
 800c45a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c45c:	cb02      	ldmia	r3!, {r1}
 800c45e:	c502      	stmia	r5!, {r1}
 800c460:	429a      	cmp	r2, r3
 800c462:	d8fb      	bhi.n	800c45c <__lshift+0xc8>
 800c464:	e7f0      	b.n	800c448 <__lshift+0xb4>
 800c466:	46c0      	nop			; (mov r8, r8)
 800c468:	0800ea35 	.word	0x0800ea35
 800c46c:	0800ea46 	.word	0x0800ea46

0800c470 <__mcmp>:
 800c470:	b530      	push	{r4, r5, lr}
 800c472:	690b      	ldr	r3, [r1, #16]
 800c474:	6904      	ldr	r4, [r0, #16]
 800c476:	0002      	movs	r2, r0
 800c478:	1ae0      	subs	r0, r4, r3
 800c47a:	429c      	cmp	r4, r3
 800c47c:	d10e      	bne.n	800c49c <__mcmp+0x2c>
 800c47e:	3214      	adds	r2, #20
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	3114      	adds	r1, #20
 800c484:	0014      	movs	r4, r2
 800c486:	18c9      	adds	r1, r1, r3
 800c488:	18d2      	adds	r2, r2, r3
 800c48a:	3a04      	subs	r2, #4
 800c48c:	3904      	subs	r1, #4
 800c48e:	6815      	ldr	r5, [r2, #0]
 800c490:	680b      	ldr	r3, [r1, #0]
 800c492:	429d      	cmp	r5, r3
 800c494:	d003      	beq.n	800c49e <__mcmp+0x2e>
 800c496:	2001      	movs	r0, #1
 800c498:	429d      	cmp	r5, r3
 800c49a:	d303      	bcc.n	800c4a4 <__mcmp+0x34>
 800c49c:	bd30      	pop	{r4, r5, pc}
 800c49e:	4294      	cmp	r4, r2
 800c4a0:	d3f3      	bcc.n	800c48a <__mcmp+0x1a>
 800c4a2:	e7fb      	b.n	800c49c <__mcmp+0x2c>
 800c4a4:	4240      	negs	r0, r0
 800c4a6:	e7f9      	b.n	800c49c <__mcmp+0x2c>

0800c4a8 <__mdiff>:
 800c4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4aa:	000e      	movs	r6, r1
 800c4ac:	0007      	movs	r7, r0
 800c4ae:	0011      	movs	r1, r2
 800c4b0:	0030      	movs	r0, r6
 800c4b2:	b087      	sub	sp, #28
 800c4b4:	0014      	movs	r4, r2
 800c4b6:	f7ff ffdb 	bl	800c470 <__mcmp>
 800c4ba:	1e05      	subs	r5, r0, #0
 800c4bc:	d110      	bne.n	800c4e0 <__mdiff+0x38>
 800c4be:	0001      	movs	r1, r0
 800c4c0:	0038      	movs	r0, r7
 800c4c2:	f7ff fd03 	bl	800becc <_Balloc>
 800c4c6:	1e02      	subs	r2, r0, #0
 800c4c8:	d104      	bne.n	800c4d4 <__mdiff+0x2c>
 800c4ca:	4b3f      	ldr	r3, [pc, #252]	; (800c5c8 <__mdiff+0x120>)
 800c4cc:	483f      	ldr	r0, [pc, #252]	; (800c5cc <__mdiff+0x124>)
 800c4ce:	4940      	ldr	r1, [pc, #256]	; (800c5d0 <__mdiff+0x128>)
 800c4d0:	f001 fac0 	bl	800da54 <__assert_func>
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	6145      	str	r5, [r0, #20]
 800c4d8:	6103      	str	r3, [r0, #16]
 800c4da:	0010      	movs	r0, r2
 800c4dc:	b007      	add	sp, #28
 800c4de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	9301      	str	r3, [sp, #4]
 800c4e4:	2800      	cmp	r0, #0
 800c4e6:	db04      	blt.n	800c4f2 <__mdiff+0x4a>
 800c4e8:	0023      	movs	r3, r4
 800c4ea:	0034      	movs	r4, r6
 800c4ec:	001e      	movs	r6, r3
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	9301      	str	r3, [sp, #4]
 800c4f2:	0038      	movs	r0, r7
 800c4f4:	6861      	ldr	r1, [r4, #4]
 800c4f6:	f7ff fce9 	bl	800becc <_Balloc>
 800c4fa:	1e02      	subs	r2, r0, #0
 800c4fc:	d103      	bne.n	800c506 <__mdiff+0x5e>
 800c4fe:	4b32      	ldr	r3, [pc, #200]	; (800c5c8 <__mdiff+0x120>)
 800c500:	4832      	ldr	r0, [pc, #200]	; (800c5cc <__mdiff+0x124>)
 800c502:	4934      	ldr	r1, [pc, #208]	; (800c5d4 <__mdiff+0x12c>)
 800c504:	e7e4      	b.n	800c4d0 <__mdiff+0x28>
 800c506:	9b01      	ldr	r3, [sp, #4]
 800c508:	2700      	movs	r7, #0
 800c50a:	60c3      	str	r3, [r0, #12]
 800c50c:	6920      	ldr	r0, [r4, #16]
 800c50e:	3414      	adds	r4, #20
 800c510:	0083      	lsls	r3, r0, #2
 800c512:	18e3      	adds	r3, r4, r3
 800c514:	0021      	movs	r1, r4
 800c516:	9401      	str	r4, [sp, #4]
 800c518:	0034      	movs	r4, r6
 800c51a:	9302      	str	r3, [sp, #8]
 800c51c:	6933      	ldr	r3, [r6, #16]
 800c51e:	3414      	adds	r4, #20
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	18e3      	adds	r3, r4, r3
 800c524:	9303      	str	r3, [sp, #12]
 800c526:	0013      	movs	r3, r2
 800c528:	3314      	adds	r3, #20
 800c52a:	469c      	mov	ip, r3
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	9104      	str	r1, [sp, #16]
 800c530:	9b04      	ldr	r3, [sp, #16]
 800c532:	cc02      	ldmia	r4!, {r1}
 800c534:	cb20      	ldmia	r3!, {r5}
 800c536:	9304      	str	r3, [sp, #16]
 800c538:	b2ab      	uxth	r3, r5
 800c53a:	19df      	adds	r7, r3, r7
 800c53c:	b28b      	uxth	r3, r1
 800c53e:	1afb      	subs	r3, r7, r3
 800c540:	0c09      	lsrs	r1, r1, #16
 800c542:	0c2d      	lsrs	r5, r5, #16
 800c544:	1a6d      	subs	r5, r5, r1
 800c546:	1419      	asrs	r1, r3, #16
 800c548:	1869      	adds	r1, r5, r1
 800c54a:	b29b      	uxth	r3, r3
 800c54c:	140f      	asrs	r7, r1, #16
 800c54e:	0409      	lsls	r1, r1, #16
 800c550:	4319      	orrs	r1, r3
 800c552:	4663      	mov	r3, ip
 800c554:	c302      	stmia	r3!, {r1}
 800c556:	469c      	mov	ip, r3
 800c558:	9b03      	ldr	r3, [sp, #12]
 800c55a:	42a3      	cmp	r3, r4
 800c55c:	d8e8      	bhi.n	800c530 <__mdiff+0x88>
 800c55e:	0031      	movs	r1, r6
 800c560:	9c03      	ldr	r4, [sp, #12]
 800c562:	3115      	adds	r1, #21
 800c564:	2304      	movs	r3, #4
 800c566:	428c      	cmp	r4, r1
 800c568:	d304      	bcc.n	800c574 <__mdiff+0xcc>
 800c56a:	1ba3      	subs	r3, r4, r6
 800c56c:	3b15      	subs	r3, #21
 800c56e:	089b      	lsrs	r3, r3, #2
 800c570:	3301      	adds	r3, #1
 800c572:	009b      	lsls	r3, r3, #2
 800c574:	9901      	ldr	r1, [sp, #4]
 800c576:	18cd      	adds	r5, r1, r3
 800c578:	9905      	ldr	r1, [sp, #20]
 800c57a:	002e      	movs	r6, r5
 800c57c:	18cb      	adds	r3, r1, r3
 800c57e:	469c      	mov	ip, r3
 800c580:	9902      	ldr	r1, [sp, #8]
 800c582:	428e      	cmp	r6, r1
 800c584:	d310      	bcc.n	800c5a8 <__mdiff+0x100>
 800c586:	9e02      	ldr	r6, [sp, #8]
 800c588:	1ee9      	subs	r1, r5, #3
 800c58a:	2400      	movs	r4, #0
 800c58c:	428e      	cmp	r6, r1
 800c58e:	d304      	bcc.n	800c59a <__mdiff+0xf2>
 800c590:	0031      	movs	r1, r6
 800c592:	3103      	adds	r1, #3
 800c594:	1b49      	subs	r1, r1, r5
 800c596:	0889      	lsrs	r1, r1, #2
 800c598:	008c      	lsls	r4, r1, #2
 800c59a:	191b      	adds	r3, r3, r4
 800c59c:	3b04      	subs	r3, #4
 800c59e:	6819      	ldr	r1, [r3, #0]
 800c5a0:	2900      	cmp	r1, #0
 800c5a2:	d00f      	beq.n	800c5c4 <__mdiff+0x11c>
 800c5a4:	6110      	str	r0, [r2, #16]
 800c5a6:	e798      	b.n	800c4da <__mdiff+0x32>
 800c5a8:	ce02      	ldmia	r6!, {r1}
 800c5aa:	b28c      	uxth	r4, r1
 800c5ac:	19e4      	adds	r4, r4, r7
 800c5ae:	0c0f      	lsrs	r7, r1, #16
 800c5b0:	1421      	asrs	r1, r4, #16
 800c5b2:	1879      	adds	r1, r7, r1
 800c5b4:	b2a4      	uxth	r4, r4
 800c5b6:	140f      	asrs	r7, r1, #16
 800c5b8:	0409      	lsls	r1, r1, #16
 800c5ba:	4321      	orrs	r1, r4
 800c5bc:	4664      	mov	r4, ip
 800c5be:	c402      	stmia	r4!, {r1}
 800c5c0:	46a4      	mov	ip, r4
 800c5c2:	e7dd      	b.n	800c580 <__mdiff+0xd8>
 800c5c4:	3801      	subs	r0, #1
 800c5c6:	e7e9      	b.n	800c59c <__mdiff+0xf4>
 800c5c8:	0800ea35 	.word	0x0800ea35
 800c5cc:	0800ea46 	.word	0x0800ea46
 800c5d0:	00000237 	.word	0x00000237
 800c5d4:	00000245 	.word	0x00000245

0800c5d8 <__ulp>:
 800c5d8:	2000      	movs	r0, #0
 800c5da:	4b0b      	ldr	r3, [pc, #44]	; (800c608 <__ulp+0x30>)
 800c5dc:	4019      	ands	r1, r3
 800c5de:	4b0b      	ldr	r3, [pc, #44]	; (800c60c <__ulp+0x34>)
 800c5e0:	18c9      	adds	r1, r1, r3
 800c5e2:	4281      	cmp	r1, r0
 800c5e4:	dc06      	bgt.n	800c5f4 <__ulp+0x1c>
 800c5e6:	4249      	negs	r1, r1
 800c5e8:	150b      	asrs	r3, r1, #20
 800c5ea:	2b13      	cmp	r3, #19
 800c5ec:	dc03      	bgt.n	800c5f6 <__ulp+0x1e>
 800c5ee:	2180      	movs	r1, #128	; 0x80
 800c5f0:	0309      	lsls	r1, r1, #12
 800c5f2:	4119      	asrs	r1, r3
 800c5f4:	4770      	bx	lr
 800c5f6:	3b14      	subs	r3, #20
 800c5f8:	2001      	movs	r0, #1
 800c5fa:	2b1e      	cmp	r3, #30
 800c5fc:	dc02      	bgt.n	800c604 <__ulp+0x2c>
 800c5fe:	2080      	movs	r0, #128	; 0x80
 800c600:	0600      	lsls	r0, r0, #24
 800c602:	40d8      	lsrs	r0, r3
 800c604:	2100      	movs	r1, #0
 800c606:	e7f5      	b.n	800c5f4 <__ulp+0x1c>
 800c608:	7ff00000 	.word	0x7ff00000
 800c60c:	fcc00000 	.word	0xfcc00000

0800c610 <__b2d>:
 800c610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c612:	0006      	movs	r6, r0
 800c614:	6903      	ldr	r3, [r0, #16]
 800c616:	3614      	adds	r6, #20
 800c618:	009b      	lsls	r3, r3, #2
 800c61a:	18f3      	adds	r3, r6, r3
 800c61c:	1f1d      	subs	r5, r3, #4
 800c61e:	682c      	ldr	r4, [r5, #0]
 800c620:	000f      	movs	r7, r1
 800c622:	0020      	movs	r0, r4
 800c624:	9301      	str	r3, [sp, #4]
 800c626:	f7ff fd49 	bl	800c0bc <__hi0bits>
 800c62a:	2220      	movs	r2, #32
 800c62c:	1a12      	subs	r2, r2, r0
 800c62e:	603a      	str	r2, [r7, #0]
 800c630:	0003      	movs	r3, r0
 800c632:	4a1c      	ldr	r2, [pc, #112]	; (800c6a4 <__b2d+0x94>)
 800c634:	280a      	cmp	r0, #10
 800c636:	dc15      	bgt.n	800c664 <__b2d+0x54>
 800c638:	210b      	movs	r1, #11
 800c63a:	0027      	movs	r7, r4
 800c63c:	1a09      	subs	r1, r1, r0
 800c63e:	40cf      	lsrs	r7, r1
 800c640:	433a      	orrs	r2, r7
 800c642:	468c      	mov	ip, r1
 800c644:	0011      	movs	r1, r2
 800c646:	2200      	movs	r2, #0
 800c648:	42ae      	cmp	r6, r5
 800c64a:	d202      	bcs.n	800c652 <__b2d+0x42>
 800c64c:	9a01      	ldr	r2, [sp, #4]
 800c64e:	3a08      	subs	r2, #8
 800c650:	6812      	ldr	r2, [r2, #0]
 800c652:	3315      	adds	r3, #21
 800c654:	409c      	lsls	r4, r3
 800c656:	4663      	mov	r3, ip
 800c658:	0027      	movs	r7, r4
 800c65a:	40da      	lsrs	r2, r3
 800c65c:	4317      	orrs	r7, r2
 800c65e:	0038      	movs	r0, r7
 800c660:	b003      	add	sp, #12
 800c662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c664:	2700      	movs	r7, #0
 800c666:	42ae      	cmp	r6, r5
 800c668:	d202      	bcs.n	800c670 <__b2d+0x60>
 800c66a:	9d01      	ldr	r5, [sp, #4]
 800c66c:	3d08      	subs	r5, #8
 800c66e:	682f      	ldr	r7, [r5, #0]
 800c670:	210b      	movs	r1, #11
 800c672:	4249      	negs	r1, r1
 800c674:	468c      	mov	ip, r1
 800c676:	449c      	add	ip, r3
 800c678:	2b0b      	cmp	r3, #11
 800c67a:	d010      	beq.n	800c69e <__b2d+0x8e>
 800c67c:	4661      	mov	r1, ip
 800c67e:	2320      	movs	r3, #32
 800c680:	408c      	lsls	r4, r1
 800c682:	1a5b      	subs	r3, r3, r1
 800c684:	0039      	movs	r1, r7
 800c686:	40d9      	lsrs	r1, r3
 800c688:	430c      	orrs	r4, r1
 800c68a:	4322      	orrs	r2, r4
 800c68c:	0011      	movs	r1, r2
 800c68e:	2200      	movs	r2, #0
 800c690:	42b5      	cmp	r5, r6
 800c692:	d901      	bls.n	800c698 <__b2d+0x88>
 800c694:	3d04      	subs	r5, #4
 800c696:	682a      	ldr	r2, [r5, #0]
 800c698:	4664      	mov	r4, ip
 800c69a:	40a7      	lsls	r7, r4
 800c69c:	e7dd      	b.n	800c65a <__b2d+0x4a>
 800c69e:	4322      	orrs	r2, r4
 800c6a0:	0011      	movs	r1, r2
 800c6a2:	e7dc      	b.n	800c65e <__b2d+0x4e>
 800c6a4:	3ff00000 	.word	0x3ff00000

0800c6a8 <__d2b>:
 800c6a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	0014      	movs	r4, r2
 800c6ae:	001d      	movs	r5, r3
 800c6b0:	9f08      	ldr	r7, [sp, #32]
 800c6b2:	f7ff fc0b 	bl	800becc <_Balloc>
 800c6b6:	1e06      	subs	r6, r0, #0
 800c6b8:	d105      	bne.n	800c6c6 <__d2b+0x1e>
 800c6ba:	0032      	movs	r2, r6
 800c6bc:	4b24      	ldr	r3, [pc, #144]	; (800c750 <__d2b+0xa8>)
 800c6be:	4825      	ldr	r0, [pc, #148]	; (800c754 <__d2b+0xac>)
 800c6c0:	4925      	ldr	r1, [pc, #148]	; (800c758 <__d2b+0xb0>)
 800c6c2:	f001 f9c7 	bl	800da54 <__assert_func>
 800c6c6:	032b      	lsls	r3, r5, #12
 800c6c8:	006d      	lsls	r5, r5, #1
 800c6ca:	0b1b      	lsrs	r3, r3, #12
 800c6cc:	0d6d      	lsrs	r5, r5, #21
 800c6ce:	d125      	bne.n	800c71c <__d2b+0x74>
 800c6d0:	9301      	str	r3, [sp, #4]
 800c6d2:	2c00      	cmp	r4, #0
 800c6d4:	d028      	beq.n	800c728 <__d2b+0x80>
 800c6d6:	4668      	mov	r0, sp
 800c6d8:	9400      	str	r4, [sp, #0]
 800c6da:	f7ff fd09 	bl	800c0f0 <__lo0bits>
 800c6de:	9b01      	ldr	r3, [sp, #4]
 800c6e0:	9900      	ldr	r1, [sp, #0]
 800c6e2:	2800      	cmp	r0, #0
 800c6e4:	d01e      	beq.n	800c724 <__d2b+0x7c>
 800c6e6:	2220      	movs	r2, #32
 800c6e8:	001c      	movs	r4, r3
 800c6ea:	1a12      	subs	r2, r2, r0
 800c6ec:	4094      	lsls	r4, r2
 800c6ee:	0022      	movs	r2, r4
 800c6f0:	40c3      	lsrs	r3, r0
 800c6f2:	430a      	orrs	r2, r1
 800c6f4:	6172      	str	r2, [r6, #20]
 800c6f6:	9301      	str	r3, [sp, #4]
 800c6f8:	9c01      	ldr	r4, [sp, #4]
 800c6fa:	61b4      	str	r4, [r6, #24]
 800c6fc:	1e63      	subs	r3, r4, #1
 800c6fe:	419c      	sbcs	r4, r3
 800c700:	3401      	adds	r4, #1
 800c702:	6134      	str	r4, [r6, #16]
 800c704:	2d00      	cmp	r5, #0
 800c706:	d017      	beq.n	800c738 <__d2b+0x90>
 800c708:	2435      	movs	r4, #53	; 0x35
 800c70a:	4b14      	ldr	r3, [pc, #80]	; (800c75c <__d2b+0xb4>)
 800c70c:	18ed      	adds	r5, r5, r3
 800c70e:	182d      	adds	r5, r5, r0
 800c710:	603d      	str	r5, [r7, #0]
 800c712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c714:	1a24      	subs	r4, r4, r0
 800c716:	601c      	str	r4, [r3, #0]
 800c718:	0030      	movs	r0, r6
 800c71a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c71c:	2280      	movs	r2, #128	; 0x80
 800c71e:	0352      	lsls	r2, r2, #13
 800c720:	4313      	orrs	r3, r2
 800c722:	e7d5      	b.n	800c6d0 <__d2b+0x28>
 800c724:	6171      	str	r1, [r6, #20]
 800c726:	e7e7      	b.n	800c6f8 <__d2b+0x50>
 800c728:	a801      	add	r0, sp, #4
 800c72a:	f7ff fce1 	bl	800c0f0 <__lo0bits>
 800c72e:	9b01      	ldr	r3, [sp, #4]
 800c730:	2401      	movs	r4, #1
 800c732:	6173      	str	r3, [r6, #20]
 800c734:	3020      	adds	r0, #32
 800c736:	e7e4      	b.n	800c702 <__d2b+0x5a>
 800c738:	4b09      	ldr	r3, [pc, #36]	; (800c760 <__d2b+0xb8>)
 800c73a:	18c0      	adds	r0, r0, r3
 800c73c:	4b09      	ldr	r3, [pc, #36]	; (800c764 <__d2b+0xbc>)
 800c73e:	6038      	str	r0, [r7, #0]
 800c740:	18e3      	adds	r3, r4, r3
 800c742:	009b      	lsls	r3, r3, #2
 800c744:	18f3      	adds	r3, r6, r3
 800c746:	6958      	ldr	r0, [r3, #20]
 800c748:	f7ff fcb8 	bl	800c0bc <__hi0bits>
 800c74c:	0164      	lsls	r4, r4, #5
 800c74e:	e7e0      	b.n	800c712 <__d2b+0x6a>
 800c750:	0800ea35 	.word	0x0800ea35
 800c754:	0800ea46 	.word	0x0800ea46
 800c758:	0000030f 	.word	0x0000030f
 800c75c:	fffffbcd 	.word	0xfffffbcd
 800c760:	fffffbce 	.word	0xfffffbce
 800c764:	3fffffff 	.word	0x3fffffff

0800c768 <__ratio>:
 800c768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c76a:	b087      	sub	sp, #28
 800c76c:	000f      	movs	r7, r1
 800c76e:	a904      	add	r1, sp, #16
 800c770:	0006      	movs	r6, r0
 800c772:	f7ff ff4d 	bl	800c610 <__b2d>
 800c776:	9000      	str	r0, [sp, #0]
 800c778:	9101      	str	r1, [sp, #4]
 800c77a:	9c00      	ldr	r4, [sp, #0]
 800c77c:	9d01      	ldr	r5, [sp, #4]
 800c77e:	0038      	movs	r0, r7
 800c780:	a905      	add	r1, sp, #20
 800c782:	f7ff ff45 	bl	800c610 <__b2d>
 800c786:	9002      	str	r0, [sp, #8]
 800c788:	9103      	str	r1, [sp, #12]
 800c78a:	9a02      	ldr	r2, [sp, #8]
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	6930      	ldr	r0, [r6, #16]
 800c790:	6939      	ldr	r1, [r7, #16]
 800c792:	9e04      	ldr	r6, [sp, #16]
 800c794:	1a40      	subs	r0, r0, r1
 800c796:	9905      	ldr	r1, [sp, #20]
 800c798:	0140      	lsls	r0, r0, #5
 800c79a:	1a71      	subs	r1, r6, r1
 800c79c:	1841      	adds	r1, r0, r1
 800c79e:	0508      	lsls	r0, r1, #20
 800c7a0:	2900      	cmp	r1, #0
 800c7a2:	dd07      	ble.n	800c7b4 <__ratio+0x4c>
 800c7a4:	9901      	ldr	r1, [sp, #4]
 800c7a6:	1845      	adds	r5, r0, r1
 800c7a8:	0020      	movs	r0, r4
 800c7aa:	0029      	movs	r1, r5
 800c7ac:	f7f4 fa4c 	bl	8000c48 <__aeabi_ddiv>
 800c7b0:	b007      	add	sp, #28
 800c7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7b4:	9903      	ldr	r1, [sp, #12]
 800c7b6:	1a0b      	subs	r3, r1, r0
 800c7b8:	e7f6      	b.n	800c7a8 <__ratio+0x40>

0800c7ba <__copybits>:
 800c7ba:	b570      	push	{r4, r5, r6, lr}
 800c7bc:	0014      	movs	r4, r2
 800c7be:	0005      	movs	r5, r0
 800c7c0:	3901      	subs	r1, #1
 800c7c2:	6913      	ldr	r3, [r2, #16]
 800c7c4:	1149      	asrs	r1, r1, #5
 800c7c6:	3101      	adds	r1, #1
 800c7c8:	0089      	lsls	r1, r1, #2
 800c7ca:	3414      	adds	r4, #20
 800c7cc:	009b      	lsls	r3, r3, #2
 800c7ce:	1841      	adds	r1, r0, r1
 800c7d0:	18e3      	adds	r3, r4, r3
 800c7d2:	42a3      	cmp	r3, r4
 800c7d4:	d80d      	bhi.n	800c7f2 <__copybits+0x38>
 800c7d6:	0014      	movs	r4, r2
 800c7d8:	3411      	adds	r4, #17
 800c7da:	2500      	movs	r5, #0
 800c7dc:	429c      	cmp	r4, r3
 800c7de:	d803      	bhi.n	800c7e8 <__copybits+0x2e>
 800c7e0:	1a9b      	subs	r3, r3, r2
 800c7e2:	3b11      	subs	r3, #17
 800c7e4:	089b      	lsrs	r3, r3, #2
 800c7e6:	009d      	lsls	r5, r3, #2
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	1940      	adds	r0, r0, r5
 800c7ec:	4281      	cmp	r1, r0
 800c7ee:	d803      	bhi.n	800c7f8 <__copybits+0x3e>
 800c7f0:	bd70      	pop	{r4, r5, r6, pc}
 800c7f2:	cc40      	ldmia	r4!, {r6}
 800c7f4:	c540      	stmia	r5!, {r6}
 800c7f6:	e7ec      	b.n	800c7d2 <__copybits+0x18>
 800c7f8:	c008      	stmia	r0!, {r3}
 800c7fa:	e7f7      	b.n	800c7ec <__copybits+0x32>

0800c7fc <__any_on>:
 800c7fc:	0002      	movs	r2, r0
 800c7fe:	6900      	ldr	r0, [r0, #16]
 800c800:	b510      	push	{r4, lr}
 800c802:	3214      	adds	r2, #20
 800c804:	114b      	asrs	r3, r1, #5
 800c806:	4298      	cmp	r0, r3
 800c808:	db13      	blt.n	800c832 <__any_on+0x36>
 800c80a:	dd0c      	ble.n	800c826 <__any_on+0x2a>
 800c80c:	241f      	movs	r4, #31
 800c80e:	0008      	movs	r0, r1
 800c810:	4020      	ands	r0, r4
 800c812:	4221      	tst	r1, r4
 800c814:	d007      	beq.n	800c826 <__any_on+0x2a>
 800c816:	0099      	lsls	r1, r3, #2
 800c818:	588c      	ldr	r4, [r1, r2]
 800c81a:	0021      	movs	r1, r4
 800c81c:	40c1      	lsrs	r1, r0
 800c81e:	4081      	lsls	r1, r0
 800c820:	2001      	movs	r0, #1
 800c822:	428c      	cmp	r4, r1
 800c824:	d104      	bne.n	800c830 <__any_on+0x34>
 800c826:	009b      	lsls	r3, r3, #2
 800c828:	18d3      	adds	r3, r2, r3
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d803      	bhi.n	800c836 <__any_on+0x3a>
 800c82e:	2000      	movs	r0, #0
 800c830:	bd10      	pop	{r4, pc}
 800c832:	0003      	movs	r3, r0
 800c834:	e7f7      	b.n	800c826 <__any_on+0x2a>
 800c836:	3b04      	subs	r3, #4
 800c838:	6819      	ldr	r1, [r3, #0]
 800c83a:	2900      	cmp	r1, #0
 800c83c:	d0f5      	beq.n	800c82a <__any_on+0x2e>
 800c83e:	2001      	movs	r0, #1
 800c840:	e7f6      	b.n	800c830 <__any_on+0x34>
	...

0800c844 <sulp>:
 800c844:	b570      	push	{r4, r5, r6, lr}
 800c846:	0016      	movs	r6, r2
 800c848:	000d      	movs	r5, r1
 800c84a:	f7ff fec5 	bl	800c5d8 <__ulp>
 800c84e:	2e00      	cmp	r6, #0
 800c850:	d00d      	beq.n	800c86e <sulp+0x2a>
 800c852:	236b      	movs	r3, #107	; 0x6b
 800c854:	006a      	lsls	r2, r5, #1
 800c856:	0d52      	lsrs	r2, r2, #21
 800c858:	1a9b      	subs	r3, r3, r2
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	dd07      	ble.n	800c86e <sulp+0x2a>
 800c85e:	2400      	movs	r4, #0
 800c860:	4a03      	ldr	r2, [pc, #12]	; (800c870 <sulp+0x2c>)
 800c862:	051b      	lsls	r3, r3, #20
 800c864:	189d      	adds	r5, r3, r2
 800c866:	002b      	movs	r3, r5
 800c868:	0022      	movs	r2, r4
 800c86a:	f7f4 fde7 	bl	800143c <__aeabi_dmul>
 800c86e:	bd70      	pop	{r4, r5, r6, pc}
 800c870:	3ff00000 	.word	0x3ff00000

0800c874 <_strtod_l>:
 800c874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c876:	b0a1      	sub	sp, #132	; 0x84
 800c878:	9219      	str	r2, [sp, #100]	; 0x64
 800c87a:	2200      	movs	r2, #0
 800c87c:	2600      	movs	r6, #0
 800c87e:	2700      	movs	r7, #0
 800c880:	9004      	str	r0, [sp, #16]
 800c882:	9107      	str	r1, [sp, #28]
 800c884:	921c      	str	r2, [sp, #112]	; 0x70
 800c886:	911b      	str	r1, [sp, #108]	; 0x6c
 800c888:	780a      	ldrb	r2, [r1, #0]
 800c88a:	2a2b      	cmp	r2, #43	; 0x2b
 800c88c:	d055      	beq.n	800c93a <_strtod_l+0xc6>
 800c88e:	d841      	bhi.n	800c914 <_strtod_l+0xa0>
 800c890:	2a0d      	cmp	r2, #13
 800c892:	d83b      	bhi.n	800c90c <_strtod_l+0x98>
 800c894:	2a08      	cmp	r2, #8
 800c896:	d83b      	bhi.n	800c910 <_strtod_l+0x9c>
 800c898:	2a00      	cmp	r2, #0
 800c89a:	d044      	beq.n	800c926 <_strtod_l+0xb2>
 800c89c:	2200      	movs	r2, #0
 800c89e:	920f      	str	r2, [sp, #60]	; 0x3c
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c8a4:	9109      	str	r1, [sp, #36]	; 0x24
 800c8a6:	782a      	ldrb	r2, [r5, #0]
 800c8a8:	2a30      	cmp	r2, #48	; 0x30
 800c8aa:	d000      	beq.n	800c8ae <_strtod_l+0x3a>
 800c8ac:	e085      	b.n	800c9ba <_strtod_l+0x146>
 800c8ae:	786a      	ldrb	r2, [r5, #1]
 800c8b0:	3120      	adds	r1, #32
 800c8b2:	438a      	bics	r2, r1
 800c8b4:	2a58      	cmp	r2, #88	; 0x58
 800c8b6:	d000      	beq.n	800c8ba <_strtod_l+0x46>
 800c8b8:	e075      	b.n	800c9a6 <_strtod_l+0x132>
 800c8ba:	9302      	str	r3, [sp, #8]
 800c8bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8be:	4a97      	ldr	r2, [pc, #604]	; (800cb1c <_strtod_l+0x2a8>)
 800c8c0:	9301      	str	r3, [sp, #4]
 800c8c2:	ab1c      	add	r3, sp, #112	; 0x70
 800c8c4:	9300      	str	r3, [sp, #0]
 800c8c6:	9804      	ldr	r0, [sp, #16]
 800c8c8:	ab1d      	add	r3, sp, #116	; 0x74
 800c8ca:	a91b      	add	r1, sp, #108	; 0x6c
 800c8cc:	f001 f978 	bl	800dbc0 <__gethex>
 800c8d0:	230f      	movs	r3, #15
 800c8d2:	0002      	movs	r2, r0
 800c8d4:	401a      	ands	r2, r3
 800c8d6:	0004      	movs	r4, r0
 800c8d8:	9205      	str	r2, [sp, #20]
 800c8da:	4218      	tst	r0, r3
 800c8dc:	d005      	beq.n	800c8ea <_strtod_l+0x76>
 800c8de:	2a06      	cmp	r2, #6
 800c8e0:	d12d      	bne.n	800c93e <_strtod_l+0xca>
 800c8e2:	1c6b      	adds	r3, r5, #1
 800c8e4:	931b      	str	r3, [sp, #108]	; 0x6c
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800c8ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d002      	beq.n	800c8f6 <_strtod_l+0x82>
 800c8f0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c8f2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c8f4:	6013      	str	r3, [r2, #0]
 800c8f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d01b      	beq.n	800c934 <_strtod_l+0xc0>
 800c8fc:	2380      	movs	r3, #128	; 0x80
 800c8fe:	0032      	movs	r2, r6
 800c900:	061b      	lsls	r3, r3, #24
 800c902:	18fb      	adds	r3, r7, r3
 800c904:	0010      	movs	r0, r2
 800c906:	0019      	movs	r1, r3
 800c908:	b021      	add	sp, #132	; 0x84
 800c90a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c90c:	2a20      	cmp	r2, #32
 800c90e:	d1c5      	bne.n	800c89c <_strtod_l+0x28>
 800c910:	3101      	adds	r1, #1
 800c912:	e7b8      	b.n	800c886 <_strtod_l+0x12>
 800c914:	2a2d      	cmp	r2, #45	; 0x2d
 800c916:	d1c1      	bne.n	800c89c <_strtod_l+0x28>
 800c918:	3a2c      	subs	r2, #44	; 0x2c
 800c91a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c91c:	1c4a      	adds	r2, r1, #1
 800c91e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c920:	784a      	ldrb	r2, [r1, #1]
 800c922:	2a00      	cmp	r2, #0
 800c924:	d1bc      	bne.n	800c8a0 <_strtod_l+0x2c>
 800c926:	9b07      	ldr	r3, [sp, #28]
 800c928:	931b      	str	r3, [sp, #108]	; 0x6c
 800c92a:	2300      	movs	r3, #0
 800c92c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c92e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c930:	2b00      	cmp	r3, #0
 800c932:	d1dd      	bne.n	800c8f0 <_strtod_l+0x7c>
 800c934:	0032      	movs	r2, r6
 800c936:	003b      	movs	r3, r7
 800c938:	e7e4      	b.n	800c904 <_strtod_l+0x90>
 800c93a:	2200      	movs	r2, #0
 800c93c:	e7ed      	b.n	800c91a <_strtod_l+0xa6>
 800c93e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c940:	2a00      	cmp	r2, #0
 800c942:	d007      	beq.n	800c954 <_strtod_l+0xe0>
 800c944:	2135      	movs	r1, #53	; 0x35
 800c946:	a81e      	add	r0, sp, #120	; 0x78
 800c948:	f7ff ff37 	bl	800c7ba <__copybits>
 800c94c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c94e:	9804      	ldr	r0, [sp, #16]
 800c950:	f7ff fb00 	bl	800bf54 <_Bfree>
 800c954:	9805      	ldr	r0, [sp, #20]
 800c956:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c958:	3801      	subs	r0, #1
 800c95a:	2804      	cmp	r0, #4
 800c95c:	d806      	bhi.n	800c96c <_strtod_l+0xf8>
 800c95e:	f7f3 fbdb 	bl	8000118 <__gnu_thumb1_case_uqi>
 800c962:	0312      	.short	0x0312
 800c964:	1e1c      	.short	0x1e1c
 800c966:	12          	.byte	0x12
 800c967:	00          	.byte	0x00
 800c968:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c96a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c96c:	05e4      	lsls	r4, r4, #23
 800c96e:	d502      	bpl.n	800c976 <_strtod_l+0x102>
 800c970:	2380      	movs	r3, #128	; 0x80
 800c972:	061b      	lsls	r3, r3, #24
 800c974:	431f      	orrs	r7, r3
 800c976:	4b6a      	ldr	r3, [pc, #424]	; (800cb20 <_strtod_l+0x2ac>)
 800c978:	423b      	tst	r3, r7
 800c97a:	d1b6      	bne.n	800c8ea <_strtod_l+0x76>
 800c97c:	f7fe faba 	bl	800aef4 <__errno>
 800c980:	2322      	movs	r3, #34	; 0x22
 800c982:	6003      	str	r3, [r0, #0]
 800c984:	e7b1      	b.n	800c8ea <_strtod_l+0x76>
 800c986:	4967      	ldr	r1, [pc, #412]	; (800cb24 <_strtod_l+0x2b0>)
 800c988:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c98a:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c98c:	400a      	ands	r2, r1
 800c98e:	4966      	ldr	r1, [pc, #408]	; (800cb28 <_strtod_l+0x2b4>)
 800c990:	185b      	adds	r3, r3, r1
 800c992:	051b      	lsls	r3, r3, #20
 800c994:	431a      	orrs	r2, r3
 800c996:	0017      	movs	r7, r2
 800c998:	e7e8      	b.n	800c96c <_strtod_l+0xf8>
 800c99a:	4f61      	ldr	r7, [pc, #388]	; (800cb20 <_strtod_l+0x2ac>)
 800c99c:	e7e6      	b.n	800c96c <_strtod_l+0xf8>
 800c99e:	2601      	movs	r6, #1
 800c9a0:	4f62      	ldr	r7, [pc, #392]	; (800cb2c <_strtod_l+0x2b8>)
 800c9a2:	4276      	negs	r6, r6
 800c9a4:	e7e2      	b.n	800c96c <_strtod_l+0xf8>
 800c9a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9a8:	1c5a      	adds	r2, r3, #1
 800c9aa:	921b      	str	r2, [sp, #108]	; 0x6c
 800c9ac:	785b      	ldrb	r3, [r3, #1]
 800c9ae:	2b30      	cmp	r3, #48	; 0x30
 800c9b0:	d0f9      	beq.n	800c9a6 <_strtod_l+0x132>
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d099      	beq.n	800c8ea <_strtod_l+0x76>
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c9ba:	2500      	movs	r5, #0
 800c9bc:	220a      	movs	r2, #10
 800c9be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c9c0:	950d      	str	r5, [sp, #52]	; 0x34
 800c9c2:	9310      	str	r3, [sp, #64]	; 0x40
 800c9c4:	9508      	str	r5, [sp, #32]
 800c9c6:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c9c8:	7804      	ldrb	r4, [r0, #0]
 800c9ca:	0023      	movs	r3, r4
 800c9cc:	3b30      	subs	r3, #48	; 0x30
 800c9ce:	b2d9      	uxtb	r1, r3
 800c9d0:	2909      	cmp	r1, #9
 800c9d2:	d927      	bls.n	800ca24 <_strtod_l+0x1b0>
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	4956      	ldr	r1, [pc, #344]	; (800cb30 <_strtod_l+0x2bc>)
 800c9d8:	f001 f812 	bl	800da00 <strncmp>
 800c9dc:	2800      	cmp	r0, #0
 800c9de:	d031      	beq.n	800ca44 <_strtod_l+0x1d0>
 800c9e0:	2000      	movs	r0, #0
 800c9e2:	0023      	movs	r3, r4
 800c9e4:	4684      	mov	ip, r0
 800c9e6:	9a08      	ldr	r2, [sp, #32]
 800c9e8:	900c      	str	r0, [sp, #48]	; 0x30
 800c9ea:	9205      	str	r2, [sp, #20]
 800c9ec:	2220      	movs	r2, #32
 800c9ee:	0019      	movs	r1, r3
 800c9f0:	4391      	bics	r1, r2
 800c9f2:	000a      	movs	r2, r1
 800c9f4:	2100      	movs	r1, #0
 800c9f6:	9106      	str	r1, [sp, #24]
 800c9f8:	2a45      	cmp	r2, #69	; 0x45
 800c9fa:	d000      	beq.n	800c9fe <_strtod_l+0x18a>
 800c9fc:	e0c2      	b.n	800cb84 <_strtod_l+0x310>
 800c9fe:	9b05      	ldr	r3, [sp, #20]
 800ca00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca02:	4303      	orrs	r3, r0
 800ca04:	4313      	orrs	r3, r2
 800ca06:	428b      	cmp	r3, r1
 800ca08:	d08d      	beq.n	800c926 <_strtod_l+0xb2>
 800ca0a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca0c:	9307      	str	r3, [sp, #28]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	931b      	str	r3, [sp, #108]	; 0x6c
 800ca12:	9b07      	ldr	r3, [sp, #28]
 800ca14:	785b      	ldrb	r3, [r3, #1]
 800ca16:	2b2b      	cmp	r3, #43	; 0x2b
 800ca18:	d071      	beq.n	800cafe <_strtod_l+0x28a>
 800ca1a:	000c      	movs	r4, r1
 800ca1c:	2b2d      	cmp	r3, #45	; 0x2d
 800ca1e:	d174      	bne.n	800cb0a <_strtod_l+0x296>
 800ca20:	2401      	movs	r4, #1
 800ca22:	e06d      	b.n	800cb00 <_strtod_l+0x28c>
 800ca24:	9908      	ldr	r1, [sp, #32]
 800ca26:	2908      	cmp	r1, #8
 800ca28:	dc09      	bgt.n	800ca3e <_strtod_l+0x1ca>
 800ca2a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800ca2c:	4351      	muls	r1, r2
 800ca2e:	185b      	adds	r3, r3, r1
 800ca30:	930d      	str	r3, [sp, #52]	; 0x34
 800ca32:	9b08      	ldr	r3, [sp, #32]
 800ca34:	3001      	adds	r0, #1
 800ca36:	3301      	adds	r3, #1
 800ca38:	9308      	str	r3, [sp, #32]
 800ca3a:	901b      	str	r0, [sp, #108]	; 0x6c
 800ca3c:	e7c3      	b.n	800c9c6 <_strtod_l+0x152>
 800ca3e:	4355      	muls	r5, r2
 800ca40:	195d      	adds	r5, r3, r5
 800ca42:	e7f6      	b.n	800ca32 <_strtod_l+0x1be>
 800ca44:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca46:	1c5a      	adds	r2, r3, #1
 800ca48:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca4a:	9a08      	ldr	r2, [sp, #32]
 800ca4c:	785b      	ldrb	r3, [r3, #1]
 800ca4e:	2a00      	cmp	r2, #0
 800ca50:	d03a      	beq.n	800cac8 <_strtod_l+0x254>
 800ca52:	900c      	str	r0, [sp, #48]	; 0x30
 800ca54:	9205      	str	r2, [sp, #20]
 800ca56:	001a      	movs	r2, r3
 800ca58:	3a30      	subs	r2, #48	; 0x30
 800ca5a:	2a09      	cmp	r2, #9
 800ca5c:	d912      	bls.n	800ca84 <_strtod_l+0x210>
 800ca5e:	2201      	movs	r2, #1
 800ca60:	4694      	mov	ip, r2
 800ca62:	e7c3      	b.n	800c9ec <_strtod_l+0x178>
 800ca64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ca66:	3001      	adds	r0, #1
 800ca68:	1c5a      	adds	r2, r3, #1
 800ca6a:	921b      	str	r2, [sp, #108]	; 0x6c
 800ca6c:	785b      	ldrb	r3, [r3, #1]
 800ca6e:	2b30      	cmp	r3, #48	; 0x30
 800ca70:	d0f8      	beq.n	800ca64 <_strtod_l+0x1f0>
 800ca72:	001a      	movs	r2, r3
 800ca74:	3a31      	subs	r2, #49	; 0x31
 800ca76:	2a08      	cmp	r2, #8
 800ca78:	d83c      	bhi.n	800caf4 <_strtod_l+0x280>
 800ca7a:	900c      	str	r0, [sp, #48]	; 0x30
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800ca80:	9005      	str	r0, [sp, #20]
 800ca82:	9210      	str	r2, [sp, #64]	; 0x40
 800ca84:	001a      	movs	r2, r3
 800ca86:	1c41      	adds	r1, r0, #1
 800ca88:	3a30      	subs	r2, #48	; 0x30
 800ca8a:	2b30      	cmp	r3, #48	; 0x30
 800ca8c:	d016      	beq.n	800cabc <_strtod_l+0x248>
 800ca8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ca90:	185b      	adds	r3, r3, r1
 800ca92:	930c      	str	r3, [sp, #48]	; 0x30
 800ca94:	9b05      	ldr	r3, [sp, #20]
 800ca96:	210a      	movs	r1, #10
 800ca98:	469c      	mov	ip, r3
 800ca9a:	4484      	add	ip, r0
 800ca9c:	4563      	cmp	r3, ip
 800ca9e:	d115      	bne.n	800cacc <_strtod_l+0x258>
 800caa0:	9905      	ldr	r1, [sp, #20]
 800caa2:	9b05      	ldr	r3, [sp, #20]
 800caa4:	3101      	adds	r1, #1
 800caa6:	1809      	adds	r1, r1, r0
 800caa8:	181b      	adds	r3, r3, r0
 800caaa:	9105      	str	r1, [sp, #20]
 800caac:	2b08      	cmp	r3, #8
 800caae:	dc19      	bgt.n	800cae4 <_strtod_l+0x270>
 800cab0:	230a      	movs	r3, #10
 800cab2:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cab4:	434b      	muls	r3, r1
 800cab6:	2100      	movs	r1, #0
 800cab8:	18d3      	adds	r3, r2, r3
 800caba:	930d      	str	r3, [sp, #52]	; 0x34
 800cabc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cabe:	0008      	movs	r0, r1
 800cac0:	1c5a      	adds	r2, r3, #1
 800cac2:	921b      	str	r2, [sp, #108]	; 0x6c
 800cac4:	785b      	ldrb	r3, [r3, #1]
 800cac6:	e7c6      	b.n	800ca56 <_strtod_l+0x1e2>
 800cac8:	9808      	ldr	r0, [sp, #32]
 800caca:	e7d0      	b.n	800ca6e <_strtod_l+0x1fa>
 800cacc:	1c5c      	adds	r4, r3, #1
 800cace:	2b08      	cmp	r3, #8
 800cad0:	dc04      	bgt.n	800cadc <_strtod_l+0x268>
 800cad2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cad4:	434b      	muls	r3, r1
 800cad6:	930d      	str	r3, [sp, #52]	; 0x34
 800cad8:	0023      	movs	r3, r4
 800cada:	e7df      	b.n	800ca9c <_strtod_l+0x228>
 800cadc:	2c10      	cmp	r4, #16
 800cade:	dcfb      	bgt.n	800cad8 <_strtod_l+0x264>
 800cae0:	434d      	muls	r5, r1
 800cae2:	e7f9      	b.n	800cad8 <_strtod_l+0x264>
 800cae4:	9b05      	ldr	r3, [sp, #20]
 800cae6:	2100      	movs	r1, #0
 800cae8:	2b10      	cmp	r3, #16
 800caea:	dce7      	bgt.n	800cabc <_strtod_l+0x248>
 800caec:	230a      	movs	r3, #10
 800caee:	435d      	muls	r5, r3
 800caf0:	1955      	adds	r5, r2, r5
 800caf2:	e7e3      	b.n	800cabc <_strtod_l+0x248>
 800caf4:	2200      	movs	r2, #0
 800caf6:	920c      	str	r2, [sp, #48]	; 0x30
 800caf8:	9205      	str	r2, [sp, #20]
 800cafa:	3201      	adds	r2, #1
 800cafc:	e7b0      	b.n	800ca60 <_strtod_l+0x1ec>
 800cafe:	2400      	movs	r4, #0
 800cb00:	9b07      	ldr	r3, [sp, #28]
 800cb02:	3302      	adds	r3, #2
 800cb04:	931b      	str	r3, [sp, #108]	; 0x6c
 800cb06:	9b07      	ldr	r3, [sp, #28]
 800cb08:	789b      	ldrb	r3, [r3, #2]
 800cb0a:	001a      	movs	r2, r3
 800cb0c:	3a30      	subs	r2, #48	; 0x30
 800cb0e:	2a09      	cmp	r2, #9
 800cb10:	d914      	bls.n	800cb3c <_strtod_l+0x2c8>
 800cb12:	9a07      	ldr	r2, [sp, #28]
 800cb14:	921b      	str	r2, [sp, #108]	; 0x6c
 800cb16:	2200      	movs	r2, #0
 800cb18:	e033      	b.n	800cb82 <_strtod_l+0x30e>
 800cb1a:	46c0      	nop			; (mov r8, r8)
 800cb1c:	0800eba0 	.word	0x0800eba0
 800cb20:	7ff00000 	.word	0x7ff00000
 800cb24:	ffefffff 	.word	0xffefffff
 800cb28:	00000433 	.word	0x00000433
 800cb2c:	7fffffff 	.word	0x7fffffff
 800cb30:	0800eb9c 	.word	0x0800eb9c
 800cb34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	921b      	str	r2, [sp, #108]	; 0x6c
 800cb3a:	785b      	ldrb	r3, [r3, #1]
 800cb3c:	2b30      	cmp	r3, #48	; 0x30
 800cb3e:	d0f9      	beq.n	800cb34 <_strtod_l+0x2c0>
 800cb40:	2200      	movs	r2, #0
 800cb42:	9206      	str	r2, [sp, #24]
 800cb44:	001a      	movs	r2, r3
 800cb46:	3a31      	subs	r2, #49	; 0x31
 800cb48:	2a08      	cmp	r2, #8
 800cb4a:	d81b      	bhi.n	800cb84 <_strtod_l+0x310>
 800cb4c:	3b30      	subs	r3, #48	; 0x30
 800cb4e:	930e      	str	r3, [sp, #56]	; 0x38
 800cb50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb52:	9306      	str	r3, [sp, #24]
 800cb54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cb56:	1c59      	adds	r1, r3, #1
 800cb58:	911b      	str	r1, [sp, #108]	; 0x6c
 800cb5a:	785b      	ldrb	r3, [r3, #1]
 800cb5c:	001a      	movs	r2, r3
 800cb5e:	3a30      	subs	r2, #48	; 0x30
 800cb60:	2a09      	cmp	r2, #9
 800cb62:	d93a      	bls.n	800cbda <_strtod_l+0x366>
 800cb64:	9a06      	ldr	r2, [sp, #24]
 800cb66:	1a8a      	subs	r2, r1, r2
 800cb68:	49b2      	ldr	r1, [pc, #712]	; (800ce34 <_strtod_l+0x5c0>)
 800cb6a:	9106      	str	r1, [sp, #24]
 800cb6c:	2a08      	cmp	r2, #8
 800cb6e:	dc04      	bgt.n	800cb7a <_strtod_l+0x306>
 800cb70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb72:	9206      	str	r2, [sp, #24]
 800cb74:	428a      	cmp	r2, r1
 800cb76:	dd00      	ble.n	800cb7a <_strtod_l+0x306>
 800cb78:	9106      	str	r1, [sp, #24]
 800cb7a:	2c00      	cmp	r4, #0
 800cb7c:	d002      	beq.n	800cb84 <_strtod_l+0x310>
 800cb7e:	9a06      	ldr	r2, [sp, #24]
 800cb80:	4252      	negs	r2, r2
 800cb82:	9206      	str	r2, [sp, #24]
 800cb84:	9a05      	ldr	r2, [sp, #20]
 800cb86:	2a00      	cmp	r2, #0
 800cb88:	d14d      	bne.n	800cc26 <_strtod_l+0x3b2>
 800cb8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb8c:	4310      	orrs	r0, r2
 800cb8e:	d000      	beq.n	800cb92 <_strtod_l+0x31e>
 800cb90:	e6ab      	b.n	800c8ea <_strtod_l+0x76>
 800cb92:	4662      	mov	r2, ip
 800cb94:	2a00      	cmp	r2, #0
 800cb96:	d000      	beq.n	800cb9a <_strtod_l+0x326>
 800cb98:	e6c5      	b.n	800c926 <_strtod_l+0xb2>
 800cb9a:	2b69      	cmp	r3, #105	; 0x69
 800cb9c:	d027      	beq.n	800cbee <_strtod_l+0x37a>
 800cb9e:	dc23      	bgt.n	800cbe8 <_strtod_l+0x374>
 800cba0:	2b49      	cmp	r3, #73	; 0x49
 800cba2:	d024      	beq.n	800cbee <_strtod_l+0x37a>
 800cba4:	2b4e      	cmp	r3, #78	; 0x4e
 800cba6:	d000      	beq.n	800cbaa <_strtod_l+0x336>
 800cba8:	e6bd      	b.n	800c926 <_strtod_l+0xb2>
 800cbaa:	49a3      	ldr	r1, [pc, #652]	; (800ce38 <_strtod_l+0x5c4>)
 800cbac:	a81b      	add	r0, sp, #108	; 0x6c
 800cbae:	f001 fa3d 	bl	800e02c <__match>
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d100      	bne.n	800cbb8 <_strtod_l+0x344>
 800cbb6:	e6b6      	b.n	800c926 <_strtod_l+0xb2>
 800cbb8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbba:	781b      	ldrb	r3, [r3, #0]
 800cbbc:	2b28      	cmp	r3, #40	; 0x28
 800cbbe:	d12c      	bne.n	800cc1a <_strtod_l+0x3a6>
 800cbc0:	499e      	ldr	r1, [pc, #632]	; (800ce3c <_strtod_l+0x5c8>)
 800cbc2:	aa1e      	add	r2, sp, #120	; 0x78
 800cbc4:	a81b      	add	r0, sp, #108	; 0x6c
 800cbc6:	f001 fa45 	bl	800e054 <__hexnan>
 800cbca:	2805      	cmp	r0, #5
 800cbcc:	d125      	bne.n	800cc1a <_strtod_l+0x3a6>
 800cbce:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800cbd0:	4a9b      	ldr	r2, [pc, #620]	; (800ce40 <_strtod_l+0x5cc>)
 800cbd2:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800cbd4:	431a      	orrs	r2, r3
 800cbd6:	0017      	movs	r7, r2
 800cbd8:	e687      	b.n	800c8ea <_strtod_l+0x76>
 800cbda:	220a      	movs	r2, #10
 800cbdc:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cbde:	434a      	muls	r2, r1
 800cbe0:	18d2      	adds	r2, r2, r3
 800cbe2:	3a30      	subs	r2, #48	; 0x30
 800cbe4:	920e      	str	r2, [sp, #56]	; 0x38
 800cbe6:	e7b5      	b.n	800cb54 <_strtod_l+0x2e0>
 800cbe8:	2b6e      	cmp	r3, #110	; 0x6e
 800cbea:	d0de      	beq.n	800cbaa <_strtod_l+0x336>
 800cbec:	e69b      	b.n	800c926 <_strtod_l+0xb2>
 800cbee:	4995      	ldr	r1, [pc, #596]	; (800ce44 <_strtod_l+0x5d0>)
 800cbf0:	a81b      	add	r0, sp, #108	; 0x6c
 800cbf2:	f001 fa1b 	bl	800e02c <__match>
 800cbf6:	2800      	cmp	r0, #0
 800cbf8:	d100      	bne.n	800cbfc <_strtod_l+0x388>
 800cbfa:	e694      	b.n	800c926 <_strtod_l+0xb2>
 800cbfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbfe:	4992      	ldr	r1, [pc, #584]	; (800ce48 <_strtod_l+0x5d4>)
 800cc00:	3b01      	subs	r3, #1
 800cc02:	a81b      	add	r0, sp, #108	; 0x6c
 800cc04:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc06:	f001 fa11 	bl	800e02c <__match>
 800cc0a:	2800      	cmp	r0, #0
 800cc0c:	d102      	bne.n	800cc14 <_strtod_l+0x3a0>
 800cc0e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cc10:	3301      	adds	r3, #1
 800cc12:	931b      	str	r3, [sp, #108]	; 0x6c
 800cc14:	2600      	movs	r6, #0
 800cc16:	4f8a      	ldr	r7, [pc, #552]	; (800ce40 <_strtod_l+0x5cc>)
 800cc18:	e667      	b.n	800c8ea <_strtod_l+0x76>
 800cc1a:	488c      	ldr	r0, [pc, #560]	; (800ce4c <_strtod_l+0x5d8>)
 800cc1c:	f000 ff14 	bl	800da48 <nan>
 800cc20:	0006      	movs	r6, r0
 800cc22:	000f      	movs	r7, r1
 800cc24:	e661      	b.n	800c8ea <_strtod_l+0x76>
 800cc26:	9b06      	ldr	r3, [sp, #24]
 800cc28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2a:	1a9b      	subs	r3, r3, r2
 800cc2c:	9309      	str	r3, [sp, #36]	; 0x24
 800cc2e:	9b08      	ldr	r3, [sp, #32]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d101      	bne.n	800cc38 <_strtod_l+0x3c4>
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	9308      	str	r3, [sp, #32]
 800cc38:	9c05      	ldr	r4, [sp, #20]
 800cc3a:	2c10      	cmp	r4, #16
 800cc3c:	dd00      	ble.n	800cc40 <_strtod_l+0x3cc>
 800cc3e:	2410      	movs	r4, #16
 800cc40:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cc42:	f7f5 fac3 	bl	80021cc <__aeabi_ui2d>
 800cc46:	9b05      	ldr	r3, [sp, #20]
 800cc48:	0006      	movs	r6, r0
 800cc4a:	000f      	movs	r7, r1
 800cc4c:	2b09      	cmp	r3, #9
 800cc4e:	dd15      	ble.n	800cc7c <_strtod_l+0x408>
 800cc50:	0022      	movs	r2, r4
 800cc52:	4b7f      	ldr	r3, [pc, #508]	; (800ce50 <_strtod_l+0x5dc>)
 800cc54:	3a09      	subs	r2, #9
 800cc56:	00d2      	lsls	r2, r2, #3
 800cc58:	189b      	adds	r3, r3, r2
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	f7f4 fbed 	bl	800143c <__aeabi_dmul>
 800cc62:	0006      	movs	r6, r0
 800cc64:	0028      	movs	r0, r5
 800cc66:	000f      	movs	r7, r1
 800cc68:	f7f5 fab0 	bl	80021cc <__aeabi_ui2d>
 800cc6c:	0002      	movs	r2, r0
 800cc6e:	000b      	movs	r3, r1
 800cc70:	0030      	movs	r0, r6
 800cc72:	0039      	movs	r1, r7
 800cc74:	f7f3 fc88 	bl	8000588 <__aeabi_dadd>
 800cc78:	0006      	movs	r6, r0
 800cc7a:	000f      	movs	r7, r1
 800cc7c:	9b05      	ldr	r3, [sp, #20]
 800cc7e:	2b0f      	cmp	r3, #15
 800cc80:	dc39      	bgt.n	800ccf6 <_strtod_l+0x482>
 800cc82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d100      	bne.n	800cc8a <_strtod_l+0x416>
 800cc88:	e62f      	b.n	800c8ea <_strtod_l+0x76>
 800cc8a:	dd24      	ble.n	800ccd6 <_strtod_l+0x462>
 800cc8c:	2b16      	cmp	r3, #22
 800cc8e:	dc09      	bgt.n	800cca4 <_strtod_l+0x430>
 800cc90:	496f      	ldr	r1, [pc, #444]	; (800ce50 <_strtod_l+0x5dc>)
 800cc92:	00db      	lsls	r3, r3, #3
 800cc94:	18c9      	adds	r1, r1, r3
 800cc96:	0032      	movs	r2, r6
 800cc98:	6808      	ldr	r0, [r1, #0]
 800cc9a:	6849      	ldr	r1, [r1, #4]
 800cc9c:	003b      	movs	r3, r7
 800cc9e:	f7f4 fbcd 	bl	800143c <__aeabi_dmul>
 800cca2:	e7bd      	b.n	800cc20 <_strtod_l+0x3ac>
 800cca4:	2325      	movs	r3, #37	; 0x25
 800cca6:	9a05      	ldr	r2, [sp, #20]
 800cca8:	1a9b      	subs	r3, r3, r2
 800ccaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccac:	4293      	cmp	r3, r2
 800ccae:	db22      	blt.n	800ccf6 <_strtod_l+0x482>
 800ccb0:	240f      	movs	r4, #15
 800ccb2:	9b05      	ldr	r3, [sp, #20]
 800ccb4:	4d66      	ldr	r5, [pc, #408]	; (800ce50 <_strtod_l+0x5dc>)
 800ccb6:	1ae4      	subs	r4, r4, r3
 800ccb8:	00e1      	lsls	r1, r4, #3
 800ccba:	1869      	adds	r1, r5, r1
 800ccbc:	0032      	movs	r2, r6
 800ccbe:	6808      	ldr	r0, [r1, #0]
 800ccc0:	6849      	ldr	r1, [r1, #4]
 800ccc2:	003b      	movs	r3, r7
 800ccc4:	f7f4 fbba 	bl	800143c <__aeabi_dmul>
 800ccc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccca:	1b1c      	subs	r4, r3, r4
 800cccc:	00e4      	lsls	r4, r4, #3
 800ccce:	192d      	adds	r5, r5, r4
 800ccd0:	682a      	ldr	r2, [r5, #0]
 800ccd2:	686b      	ldr	r3, [r5, #4]
 800ccd4:	e7e3      	b.n	800cc9e <_strtod_l+0x42a>
 800ccd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccd8:	3316      	adds	r3, #22
 800ccda:	db0c      	blt.n	800ccf6 <_strtod_l+0x482>
 800ccdc:	9906      	ldr	r1, [sp, #24]
 800ccde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cce0:	4b5b      	ldr	r3, [pc, #364]	; (800ce50 <_strtod_l+0x5dc>)
 800cce2:	1a52      	subs	r2, r2, r1
 800cce4:	00d2      	lsls	r2, r2, #3
 800cce6:	189b      	adds	r3, r3, r2
 800cce8:	0030      	movs	r0, r6
 800ccea:	681a      	ldr	r2, [r3, #0]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	0039      	movs	r1, r7
 800ccf0:	f7f3 ffaa 	bl	8000c48 <__aeabi_ddiv>
 800ccf4:	e794      	b.n	800cc20 <_strtod_l+0x3ac>
 800ccf6:	9b05      	ldr	r3, [sp, #20]
 800ccf8:	1b1c      	subs	r4, r3, r4
 800ccfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccfc:	18e4      	adds	r4, r4, r3
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	dd72      	ble.n	800cde8 <_strtod_l+0x574>
 800cd02:	220f      	movs	r2, #15
 800cd04:	0023      	movs	r3, r4
 800cd06:	4013      	ands	r3, r2
 800cd08:	4214      	tst	r4, r2
 800cd0a:	d00a      	beq.n	800cd22 <_strtod_l+0x4ae>
 800cd0c:	4950      	ldr	r1, [pc, #320]	; (800ce50 <_strtod_l+0x5dc>)
 800cd0e:	00db      	lsls	r3, r3, #3
 800cd10:	18c9      	adds	r1, r1, r3
 800cd12:	0032      	movs	r2, r6
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	6849      	ldr	r1, [r1, #4]
 800cd18:	003b      	movs	r3, r7
 800cd1a:	f7f4 fb8f 	bl	800143c <__aeabi_dmul>
 800cd1e:	0006      	movs	r6, r0
 800cd20:	000f      	movs	r7, r1
 800cd22:	230f      	movs	r3, #15
 800cd24:	439c      	bics	r4, r3
 800cd26:	d04a      	beq.n	800cdbe <_strtod_l+0x54a>
 800cd28:	3326      	adds	r3, #38	; 0x26
 800cd2a:	33ff      	adds	r3, #255	; 0xff
 800cd2c:	429c      	cmp	r4, r3
 800cd2e:	dd22      	ble.n	800cd76 <_strtod_l+0x502>
 800cd30:	2300      	movs	r3, #0
 800cd32:	9305      	str	r3, [sp, #20]
 800cd34:	9306      	str	r3, [sp, #24]
 800cd36:	930d      	str	r3, [sp, #52]	; 0x34
 800cd38:	9308      	str	r3, [sp, #32]
 800cd3a:	2322      	movs	r3, #34	; 0x22
 800cd3c:	2600      	movs	r6, #0
 800cd3e:	9a04      	ldr	r2, [sp, #16]
 800cd40:	4f3f      	ldr	r7, [pc, #252]	; (800ce40 <_strtod_l+0x5cc>)
 800cd42:	6013      	str	r3, [r2, #0]
 800cd44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cd46:	42b3      	cmp	r3, r6
 800cd48:	d100      	bne.n	800cd4c <_strtod_l+0x4d8>
 800cd4a:	e5ce      	b.n	800c8ea <_strtod_l+0x76>
 800cd4c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd4e:	9804      	ldr	r0, [sp, #16]
 800cd50:	f7ff f900 	bl	800bf54 <_Bfree>
 800cd54:	9908      	ldr	r1, [sp, #32]
 800cd56:	9804      	ldr	r0, [sp, #16]
 800cd58:	f7ff f8fc 	bl	800bf54 <_Bfree>
 800cd5c:	9906      	ldr	r1, [sp, #24]
 800cd5e:	9804      	ldr	r0, [sp, #16]
 800cd60:	f7ff f8f8 	bl	800bf54 <_Bfree>
 800cd64:	990d      	ldr	r1, [sp, #52]	; 0x34
 800cd66:	9804      	ldr	r0, [sp, #16]
 800cd68:	f7ff f8f4 	bl	800bf54 <_Bfree>
 800cd6c:	9905      	ldr	r1, [sp, #20]
 800cd6e:	9804      	ldr	r0, [sp, #16]
 800cd70:	f7ff f8f0 	bl	800bf54 <_Bfree>
 800cd74:	e5b9      	b.n	800c8ea <_strtod_l+0x76>
 800cd76:	2300      	movs	r3, #0
 800cd78:	0030      	movs	r0, r6
 800cd7a:	0039      	movs	r1, r7
 800cd7c:	4d35      	ldr	r5, [pc, #212]	; (800ce54 <_strtod_l+0x5e0>)
 800cd7e:	1124      	asrs	r4, r4, #4
 800cd80:	9307      	str	r3, [sp, #28]
 800cd82:	2c01      	cmp	r4, #1
 800cd84:	dc1e      	bgt.n	800cdc4 <_strtod_l+0x550>
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d001      	beq.n	800cd8e <_strtod_l+0x51a>
 800cd8a:	0006      	movs	r6, r0
 800cd8c:	000f      	movs	r7, r1
 800cd8e:	4b32      	ldr	r3, [pc, #200]	; (800ce58 <_strtod_l+0x5e4>)
 800cd90:	9a07      	ldr	r2, [sp, #28]
 800cd92:	18ff      	adds	r7, r7, r3
 800cd94:	4b2f      	ldr	r3, [pc, #188]	; (800ce54 <_strtod_l+0x5e0>)
 800cd96:	00d2      	lsls	r2, r2, #3
 800cd98:	189d      	adds	r5, r3, r2
 800cd9a:	6828      	ldr	r0, [r5, #0]
 800cd9c:	6869      	ldr	r1, [r5, #4]
 800cd9e:	0032      	movs	r2, r6
 800cda0:	003b      	movs	r3, r7
 800cda2:	f7f4 fb4b 	bl	800143c <__aeabi_dmul>
 800cda6:	4b26      	ldr	r3, [pc, #152]	; (800ce40 <_strtod_l+0x5cc>)
 800cda8:	4a2c      	ldr	r2, [pc, #176]	; (800ce5c <_strtod_l+0x5e8>)
 800cdaa:	0006      	movs	r6, r0
 800cdac:	400b      	ands	r3, r1
 800cdae:	4293      	cmp	r3, r2
 800cdb0:	d8be      	bhi.n	800cd30 <_strtod_l+0x4bc>
 800cdb2:	4a2b      	ldr	r2, [pc, #172]	; (800ce60 <_strtod_l+0x5ec>)
 800cdb4:	4293      	cmp	r3, r2
 800cdb6:	d913      	bls.n	800cde0 <_strtod_l+0x56c>
 800cdb8:	2601      	movs	r6, #1
 800cdba:	4f2a      	ldr	r7, [pc, #168]	; (800ce64 <_strtod_l+0x5f0>)
 800cdbc:	4276      	negs	r6, r6
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	9307      	str	r3, [sp, #28]
 800cdc2:	e088      	b.n	800ced6 <_strtod_l+0x662>
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	4214      	tst	r4, r2
 800cdc8:	d004      	beq.n	800cdd4 <_strtod_l+0x560>
 800cdca:	682a      	ldr	r2, [r5, #0]
 800cdcc:	686b      	ldr	r3, [r5, #4]
 800cdce:	f7f4 fb35 	bl	800143c <__aeabi_dmul>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	9a07      	ldr	r2, [sp, #28]
 800cdd6:	1064      	asrs	r4, r4, #1
 800cdd8:	3201      	adds	r2, #1
 800cdda:	9207      	str	r2, [sp, #28]
 800cddc:	3508      	adds	r5, #8
 800cdde:	e7d0      	b.n	800cd82 <_strtod_l+0x50e>
 800cde0:	23d4      	movs	r3, #212	; 0xd4
 800cde2:	049b      	lsls	r3, r3, #18
 800cde4:	18cf      	adds	r7, r1, r3
 800cde6:	e7ea      	b.n	800cdbe <_strtod_l+0x54a>
 800cde8:	2c00      	cmp	r4, #0
 800cdea:	d0e8      	beq.n	800cdbe <_strtod_l+0x54a>
 800cdec:	4264      	negs	r4, r4
 800cdee:	230f      	movs	r3, #15
 800cdf0:	0022      	movs	r2, r4
 800cdf2:	401a      	ands	r2, r3
 800cdf4:	421c      	tst	r4, r3
 800cdf6:	d00a      	beq.n	800ce0e <_strtod_l+0x59a>
 800cdf8:	4b15      	ldr	r3, [pc, #84]	; (800ce50 <_strtod_l+0x5dc>)
 800cdfa:	00d2      	lsls	r2, r2, #3
 800cdfc:	189b      	adds	r3, r3, r2
 800cdfe:	0030      	movs	r0, r6
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	685b      	ldr	r3, [r3, #4]
 800ce04:	0039      	movs	r1, r7
 800ce06:	f7f3 ff1f 	bl	8000c48 <__aeabi_ddiv>
 800ce0a:	0006      	movs	r6, r0
 800ce0c:	000f      	movs	r7, r1
 800ce0e:	1124      	asrs	r4, r4, #4
 800ce10:	d0d5      	beq.n	800cdbe <_strtod_l+0x54a>
 800ce12:	2c1f      	cmp	r4, #31
 800ce14:	dd28      	ble.n	800ce68 <_strtod_l+0x5f4>
 800ce16:	2300      	movs	r3, #0
 800ce18:	9305      	str	r3, [sp, #20]
 800ce1a:	9306      	str	r3, [sp, #24]
 800ce1c:	930d      	str	r3, [sp, #52]	; 0x34
 800ce1e:	9308      	str	r3, [sp, #32]
 800ce20:	2322      	movs	r3, #34	; 0x22
 800ce22:	9a04      	ldr	r2, [sp, #16]
 800ce24:	2600      	movs	r6, #0
 800ce26:	6013      	str	r3, [r2, #0]
 800ce28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce2a:	2700      	movs	r7, #0
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d18d      	bne.n	800cd4c <_strtod_l+0x4d8>
 800ce30:	e55b      	b.n	800c8ea <_strtod_l+0x76>
 800ce32:	46c0      	nop			; (mov r8, r8)
 800ce34:	00004e1f 	.word	0x00004e1f
 800ce38:	0800e98d 	.word	0x0800e98d
 800ce3c:	0800ebb4 	.word	0x0800ebb4
 800ce40:	7ff00000 	.word	0x7ff00000
 800ce44:	0800e985 	.word	0x0800e985
 800ce48:	0800e9bc 	.word	0x0800e9bc
 800ce4c:	0800ed45 	.word	0x0800ed45
 800ce50:	0800eac8 	.word	0x0800eac8
 800ce54:	0800eaa0 	.word	0x0800eaa0
 800ce58:	fcb00000 	.word	0xfcb00000
 800ce5c:	7ca00000 	.word	0x7ca00000
 800ce60:	7c900000 	.word	0x7c900000
 800ce64:	7fefffff 	.word	0x7fefffff
 800ce68:	2310      	movs	r3, #16
 800ce6a:	0022      	movs	r2, r4
 800ce6c:	401a      	ands	r2, r3
 800ce6e:	9207      	str	r2, [sp, #28]
 800ce70:	421c      	tst	r4, r3
 800ce72:	d001      	beq.n	800ce78 <_strtod_l+0x604>
 800ce74:	335a      	adds	r3, #90	; 0x5a
 800ce76:	9307      	str	r3, [sp, #28]
 800ce78:	0030      	movs	r0, r6
 800ce7a:	0039      	movs	r1, r7
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4dc4      	ldr	r5, [pc, #784]	; (800d190 <_strtod_l+0x91c>)
 800ce80:	2201      	movs	r2, #1
 800ce82:	4214      	tst	r4, r2
 800ce84:	d004      	beq.n	800ce90 <_strtod_l+0x61c>
 800ce86:	682a      	ldr	r2, [r5, #0]
 800ce88:	686b      	ldr	r3, [r5, #4]
 800ce8a:	f7f4 fad7 	bl	800143c <__aeabi_dmul>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	1064      	asrs	r4, r4, #1
 800ce92:	3508      	adds	r5, #8
 800ce94:	2c00      	cmp	r4, #0
 800ce96:	d1f3      	bne.n	800ce80 <_strtod_l+0x60c>
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <_strtod_l+0x62c>
 800ce9c:	0006      	movs	r6, r0
 800ce9e:	000f      	movs	r7, r1
 800cea0:	9b07      	ldr	r3, [sp, #28]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00f      	beq.n	800cec6 <_strtod_l+0x652>
 800cea6:	236b      	movs	r3, #107	; 0x6b
 800cea8:	007a      	lsls	r2, r7, #1
 800ceaa:	0d52      	lsrs	r2, r2, #21
 800ceac:	0039      	movs	r1, r7
 800ceae:	1a9b      	subs	r3, r3, r2
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	dd08      	ble.n	800cec6 <_strtod_l+0x652>
 800ceb4:	2b1f      	cmp	r3, #31
 800ceb6:	dc00      	bgt.n	800ceba <_strtod_l+0x646>
 800ceb8:	e121      	b.n	800d0fe <_strtod_l+0x88a>
 800ceba:	2600      	movs	r6, #0
 800cebc:	2b34      	cmp	r3, #52	; 0x34
 800cebe:	dc00      	bgt.n	800cec2 <_strtod_l+0x64e>
 800cec0:	e116      	b.n	800d0f0 <_strtod_l+0x87c>
 800cec2:	27dc      	movs	r7, #220	; 0xdc
 800cec4:	04bf      	lsls	r7, r7, #18
 800cec6:	2200      	movs	r2, #0
 800cec8:	2300      	movs	r3, #0
 800ceca:	0030      	movs	r0, r6
 800cecc:	0039      	movs	r1, r7
 800cece:	f7f3 fabd 	bl	800044c <__aeabi_dcmpeq>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	d19f      	bne.n	800ce16 <_strtod_l+0x5a2>
 800ced6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ced8:	9a08      	ldr	r2, [sp, #32]
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cede:	9b05      	ldr	r3, [sp, #20]
 800cee0:	9804      	ldr	r0, [sp, #16]
 800cee2:	f7ff f89f 	bl	800c024 <__s2b>
 800cee6:	900d      	str	r0, [sp, #52]	; 0x34
 800cee8:	2800      	cmp	r0, #0
 800ceea:	d100      	bne.n	800ceee <_strtod_l+0x67a>
 800ceec:	e720      	b.n	800cd30 <_strtod_l+0x4bc>
 800ceee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cef0:	9906      	ldr	r1, [sp, #24]
 800cef2:	17da      	asrs	r2, r3, #31
 800cef4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cef6:	1a5b      	subs	r3, r3, r1
 800cef8:	401a      	ands	r2, r3
 800cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefc:	9215      	str	r2, [sp, #84]	; 0x54
 800cefe:	43db      	mvns	r3, r3
 800cf00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf02:	17db      	asrs	r3, r3, #31
 800cf04:	401a      	ands	r2, r3
 800cf06:	2300      	movs	r3, #0
 800cf08:	9218      	str	r2, [sp, #96]	; 0x60
 800cf0a:	9305      	str	r3, [sp, #20]
 800cf0c:	9306      	str	r3, [sp, #24]
 800cf0e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf10:	9804      	ldr	r0, [sp, #16]
 800cf12:	6859      	ldr	r1, [r3, #4]
 800cf14:	f7fe ffda 	bl	800becc <_Balloc>
 800cf18:	9008      	str	r0, [sp, #32]
 800cf1a:	2800      	cmp	r0, #0
 800cf1c:	d100      	bne.n	800cf20 <_strtod_l+0x6ac>
 800cf1e:	e70c      	b.n	800cd3a <_strtod_l+0x4c6>
 800cf20:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf22:	300c      	adds	r0, #12
 800cf24:	0019      	movs	r1, r3
 800cf26:	691a      	ldr	r2, [r3, #16]
 800cf28:	310c      	adds	r1, #12
 800cf2a:	3202      	adds	r2, #2
 800cf2c:	0092      	lsls	r2, r2, #2
 800cf2e:	f7fe f819 	bl	800af64 <memcpy>
 800cf32:	ab1e      	add	r3, sp, #120	; 0x78
 800cf34:	9301      	str	r3, [sp, #4]
 800cf36:	ab1d      	add	r3, sp, #116	; 0x74
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	0032      	movs	r2, r6
 800cf3c:	003b      	movs	r3, r7
 800cf3e:	9804      	ldr	r0, [sp, #16]
 800cf40:	9610      	str	r6, [sp, #64]	; 0x40
 800cf42:	9711      	str	r7, [sp, #68]	; 0x44
 800cf44:	f7ff fbb0 	bl	800c6a8 <__d2b>
 800cf48:	901c      	str	r0, [sp, #112]	; 0x70
 800cf4a:	2800      	cmp	r0, #0
 800cf4c:	d100      	bne.n	800cf50 <_strtod_l+0x6dc>
 800cf4e:	e6f4      	b.n	800cd3a <_strtod_l+0x4c6>
 800cf50:	2101      	movs	r1, #1
 800cf52:	9804      	ldr	r0, [sp, #16]
 800cf54:	f7ff f8fa 	bl	800c14c <__i2b>
 800cf58:	9006      	str	r0, [sp, #24]
 800cf5a:	2800      	cmp	r0, #0
 800cf5c:	d100      	bne.n	800cf60 <_strtod_l+0x6ec>
 800cf5e:	e6ec      	b.n	800cd3a <_strtod_l+0x4c6>
 800cf60:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cf62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cf64:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cf66:	1ad4      	subs	r4, r2, r3
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	db01      	blt.n	800cf70 <_strtod_l+0x6fc>
 800cf6c:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cf6e:	195d      	adds	r5, r3, r5
 800cf70:	9907      	ldr	r1, [sp, #28]
 800cf72:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cf74:	1a5b      	subs	r3, r3, r1
 800cf76:	2136      	movs	r1, #54	; 0x36
 800cf78:	189b      	adds	r3, r3, r2
 800cf7a:	1a8a      	subs	r2, r1, r2
 800cf7c:	4985      	ldr	r1, [pc, #532]	; (800d194 <_strtod_l+0x920>)
 800cf7e:	2001      	movs	r0, #1
 800cf80:	468c      	mov	ip, r1
 800cf82:	2100      	movs	r1, #0
 800cf84:	3b01      	subs	r3, #1
 800cf86:	9114      	str	r1, [sp, #80]	; 0x50
 800cf88:	9012      	str	r0, [sp, #72]	; 0x48
 800cf8a:	4563      	cmp	r3, ip
 800cf8c:	da07      	bge.n	800cf9e <_strtod_l+0x72a>
 800cf8e:	4661      	mov	r1, ip
 800cf90:	1ac9      	subs	r1, r1, r3
 800cf92:	1a52      	subs	r2, r2, r1
 800cf94:	291f      	cmp	r1, #31
 800cf96:	dd00      	ble.n	800cf9a <_strtod_l+0x726>
 800cf98:	e0b6      	b.n	800d108 <_strtod_l+0x894>
 800cf9a:	4088      	lsls	r0, r1
 800cf9c:	9012      	str	r0, [sp, #72]	; 0x48
 800cf9e:	18ab      	adds	r3, r5, r2
 800cfa0:	930c      	str	r3, [sp, #48]	; 0x30
 800cfa2:	18a4      	adds	r4, r4, r2
 800cfa4:	9b07      	ldr	r3, [sp, #28]
 800cfa6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfa8:	191c      	adds	r4, r3, r4
 800cfaa:	002b      	movs	r3, r5
 800cfac:	4295      	cmp	r5, r2
 800cfae:	dd00      	ble.n	800cfb2 <_strtod_l+0x73e>
 800cfb0:	0013      	movs	r3, r2
 800cfb2:	42a3      	cmp	r3, r4
 800cfb4:	dd00      	ble.n	800cfb8 <_strtod_l+0x744>
 800cfb6:	0023      	movs	r3, r4
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	dd04      	ble.n	800cfc6 <_strtod_l+0x752>
 800cfbc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cfbe:	1ae4      	subs	r4, r4, r3
 800cfc0:	1ad2      	subs	r2, r2, r3
 800cfc2:	920c      	str	r2, [sp, #48]	; 0x30
 800cfc4:	1aed      	subs	r5, r5, r3
 800cfc6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	dd17      	ble.n	800cffc <_strtod_l+0x788>
 800cfcc:	001a      	movs	r2, r3
 800cfce:	9906      	ldr	r1, [sp, #24]
 800cfd0:	9804      	ldr	r0, [sp, #16]
 800cfd2:	f7ff f983 	bl	800c2dc <__pow5mult>
 800cfd6:	9006      	str	r0, [sp, #24]
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d100      	bne.n	800cfde <_strtod_l+0x76a>
 800cfdc:	e6ad      	b.n	800cd3a <_strtod_l+0x4c6>
 800cfde:	0001      	movs	r1, r0
 800cfe0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cfe2:	9804      	ldr	r0, [sp, #16]
 800cfe4:	f7ff f8ca 	bl	800c17c <__multiply>
 800cfe8:	900e      	str	r0, [sp, #56]	; 0x38
 800cfea:	2800      	cmp	r0, #0
 800cfec:	d100      	bne.n	800cff0 <_strtod_l+0x77c>
 800cfee:	e6a4      	b.n	800cd3a <_strtod_l+0x4c6>
 800cff0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cff2:	9804      	ldr	r0, [sp, #16]
 800cff4:	f7fe ffae 	bl	800bf54 <_Bfree>
 800cff8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cffa:	931c      	str	r3, [sp, #112]	; 0x70
 800cffc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cffe:	2b00      	cmp	r3, #0
 800d000:	dd00      	ble.n	800d004 <_strtod_l+0x790>
 800d002:	e087      	b.n	800d114 <_strtod_l+0x8a0>
 800d004:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d006:	2b00      	cmp	r3, #0
 800d008:	dd08      	ble.n	800d01c <_strtod_l+0x7a8>
 800d00a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d00c:	9908      	ldr	r1, [sp, #32]
 800d00e:	9804      	ldr	r0, [sp, #16]
 800d010:	f7ff f964 	bl	800c2dc <__pow5mult>
 800d014:	9008      	str	r0, [sp, #32]
 800d016:	2800      	cmp	r0, #0
 800d018:	d100      	bne.n	800d01c <_strtod_l+0x7a8>
 800d01a:	e68e      	b.n	800cd3a <_strtod_l+0x4c6>
 800d01c:	2c00      	cmp	r4, #0
 800d01e:	dd08      	ble.n	800d032 <_strtod_l+0x7be>
 800d020:	0022      	movs	r2, r4
 800d022:	9908      	ldr	r1, [sp, #32]
 800d024:	9804      	ldr	r0, [sp, #16]
 800d026:	f7ff f9b5 	bl	800c394 <__lshift>
 800d02a:	9008      	str	r0, [sp, #32]
 800d02c:	2800      	cmp	r0, #0
 800d02e:	d100      	bne.n	800d032 <_strtod_l+0x7be>
 800d030:	e683      	b.n	800cd3a <_strtod_l+0x4c6>
 800d032:	2d00      	cmp	r5, #0
 800d034:	dd08      	ble.n	800d048 <_strtod_l+0x7d4>
 800d036:	002a      	movs	r2, r5
 800d038:	9906      	ldr	r1, [sp, #24]
 800d03a:	9804      	ldr	r0, [sp, #16]
 800d03c:	f7ff f9aa 	bl	800c394 <__lshift>
 800d040:	9006      	str	r0, [sp, #24]
 800d042:	2800      	cmp	r0, #0
 800d044:	d100      	bne.n	800d048 <_strtod_l+0x7d4>
 800d046:	e678      	b.n	800cd3a <_strtod_l+0x4c6>
 800d048:	9a08      	ldr	r2, [sp, #32]
 800d04a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d04c:	9804      	ldr	r0, [sp, #16]
 800d04e:	f7ff fa2b 	bl	800c4a8 <__mdiff>
 800d052:	9005      	str	r0, [sp, #20]
 800d054:	2800      	cmp	r0, #0
 800d056:	d100      	bne.n	800d05a <_strtod_l+0x7e6>
 800d058:	e66f      	b.n	800cd3a <_strtod_l+0x4c6>
 800d05a:	2200      	movs	r2, #0
 800d05c:	68c3      	ldr	r3, [r0, #12]
 800d05e:	9906      	ldr	r1, [sp, #24]
 800d060:	60c2      	str	r2, [r0, #12]
 800d062:	930c      	str	r3, [sp, #48]	; 0x30
 800d064:	f7ff fa04 	bl	800c470 <__mcmp>
 800d068:	2800      	cmp	r0, #0
 800d06a:	da5d      	bge.n	800d128 <_strtod_l+0x8b4>
 800d06c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d06e:	4333      	orrs	r3, r6
 800d070:	d000      	beq.n	800d074 <_strtod_l+0x800>
 800d072:	e088      	b.n	800d186 <_strtod_l+0x912>
 800d074:	033b      	lsls	r3, r7, #12
 800d076:	d000      	beq.n	800d07a <_strtod_l+0x806>
 800d078:	e085      	b.n	800d186 <_strtod_l+0x912>
 800d07a:	22d6      	movs	r2, #214	; 0xd6
 800d07c:	4b46      	ldr	r3, [pc, #280]	; (800d198 <_strtod_l+0x924>)
 800d07e:	04d2      	lsls	r2, r2, #19
 800d080:	403b      	ands	r3, r7
 800d082:	4293      	cmp	r3, r2
 800d084:	d97f      	bls.n	800d186 <_strtod_l+0x912>
 800d086:	9b05      	ldr	r3, [sp, #20]
 800d088:	695b      	ldr	r3, [r3, #20]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d103      	bne.n	800d096 <_strtod_l+0x822>
 800d08e:	9b05      	ldr	r3, [sp, #20]
 800d090:	691b      	ldr	r3, [r3, #16]
 800d092:	2b01      	cmp	r3, #1
 800d094:	dd77      	ble.n	800d186 <_strtod_l+0x912>
 800d096:	9905      	ldr	r1, [sp, #20]
 800d098:	2201      	movs	r2, #1
 800d09a:	9804      	ldr	r0, [sp, #16]
 800d09c:	f7ff f97a 	bl	800c394 <__lshift>
 800d0a0:	9906      	ldr	r1, [sp, #24]
 800d0a2:	9005      	str	r0, [sp, #20]
 800d0a4:	f7ff f9e4 	bl	800c470 <__mcmp>
 800d0a8:	2800      	cmp	r0, #0
 800d0aa:	dd6c      	ble.n	800d186 <_strtod_l+0x912>
 800d0ac:	9907      	ldr	r1, [sp, #28]
 800d0ae:	003b      	movs	r3, r7
 800d0b0:	4a39      	ldr	r2, [pc, #228]	; (800d198 <_strtod_l+0x924>)
 800d0b2:	2900      	cmp	r1, #0
 800d0b4:	d100      	bne.n	800d0b8 <_strtod_l+0x844>
 800d0b6:	e094      	b.n	800d1e2 <_strtod_l+0x96e>
 800d0b8:	0011      	movs	r1, r2
 800d0ba:	20d6      	movs	r0, #214	; 0xd6
 800d0bc:	4039      	ands	r1, r7
 800d0be:	04c0      	lsls	r0, r0, #19
 800d0c0:	4281      	cmp	r1, r0
 800d0c2:	dd00      	ble.n	800d0c6 <_strtod_l+0x852>
 800d0c4:	e08d      	b.n	800d1e2 <_strtod_l+0x96e>
 800d0c6:	23dc      	movs	r3, #220	; 0xdc
 800d0c8:	049b      	lsls	r3, r3, #18
 800d0ca:	4299      	cmp	r1, r3
 800d0cc:	dc00      	bgt.n	800d0d0 <_strtod_l+0x85c>
 800d0ce:	e6a7      	b.n	800ce20 <_strtod_l+0x5ac>
 800d0d0:	0030      	movs	r0, r6
 800d0d2:	0039      	movs	r1, r7
 800d0d4:	4b31      	ldr	r3, [pc, #196]	; (800d19c <_strtod_l+0x928>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	f7f4 f9b0 	bl	800143c <__aeabi_dmul>
 800d0dc:	4b2e      	ldr	r3, [pc, #184]	; (800d198 <_strtod_l+0x924>)
 800d0de:	0006      	movs	r6, r0
 800d0e0:	000f      	movs	r7, r1
 800d0e2:	420b      	tst	r3, r1
 800d0e4:	d000      	beq.n	800d0e8 <_strtod_l+0x874>
 800d0e6:	e631      	b.n	800cd4c <_strtod_l+0x4d8>
 800d0e8:	2322      	movs	r3, #34	; 0x22
 800d0ea:	9a04      	ldr	r2, [sp, #16]
 800d0ec:	6013      	str	r3, [r2, #0]
 800d0ee:	e62d      	b.n	800cd4c <_strtod_l+0x4d8>
 800d0f0:	234b      	movs	r3, #75	; 0x4b
 800d0f2:	1a9a      	subs	r2, r3, r2
 800d0f4:	3b4c      	subs	r3, #76	; 0x4c
 800d0f6:	4093      	lsls	r3, r2
 800d0f8:	4019      	ands	r1, r3
 800d0fa:	000f      	movs	r7, r1
 800d0fc:	e6e3      	b.n	800cec6 <_strtod_l+0x652>
 800d0fe:	2201      	movs	r2, #1
 800d100:	4252      	negs	r2, r2
 800d102:	409a      	lsls	r2, r3
 800d104:	4016      	ands	r6, r2
 800d106:	e6de      	b.n	800cec6 <_strtod_l+0x652>
 800d108:	4925      	ldr	r1, [pc, #148]	; (800d1a0 <_strtod_l+0x92c>)
 800d10a:	1acb      	subs	r3, r1, r3
 800d10c:	0001      	movs	r1, r0
 800d10e:	4099      	lsls	r1, r3
 800d110:	9114      	str	r1, [sp, #80]	; 0x50
 800d112:	e743      	b.n	800cf9c <_strtod_l+0x728>
 800d114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d116:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d118:	9804      	ldr	r0, [sp, #16]
 800d11a:	f7ff f93b 	bl	800c394 <__lshift>
 800d11e:	901c      	str	r0, [sp, #112]	; 0x70
 800d120:	2800      	cmp	r0, #0
 800d122:	d000      	beq.n	800d126 <_strtod_l+0x8b2>
 800d124:	e76e      	b.n	800d004 <_strtod_l+0x790>
 800d126:	e608      	b.n	800cd3a <_strtod_l+0x4c6>
 800d128:	970e      	str	r7, [sp, #56]	; 0x38
 800d12a:	2800      	cmp	r0, #0
 800d12c:	d177      	bne.n	800d21e <_strtod_l+0x9aa>
 800d12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d130:	033b      	lsls	r3, r7, #12
 800d132:	0b1b      	lsrs	r3, r3, #12
 800d134:	2a00      	cmp	r2, #0
 800d136:	d039      	beq.n	800d1ac <_strtod_l+0x938>
 800d138:	4a1a      	ldr	r2, [pc, #104]	; (800d1a4 <_strtod_l+0x930>)
 800d13a:	4293      	cmp	r3, r2
 800d13c:	d139      	bne.n	800d1b2 <_strtod_l+0x93e>
 800d13e:	2101      	movs	r1, #1
 800d140:	9b07      	ldr	r3, [sp, #28]
 800d142:	4249      	negs	r1, r1
 800d144:	0032      	movs	r2, r6
 800d146:	0008      	movs	r0, r1
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00b      	beq.n	800d164 <_strtod_l+0x8f0>
 800d14c:	24d4      	movs	r4, #212	; 0xd4
 800d14e:	4b12      	ldr	r3, [pc, #72]	; (800d198 <_strtod_l+0x924>)
 800d150:	0008      	movs	r0, r1
 800d152:	403b      	ands	r3, r7
 800d154:	04e4      	lsls	r4, r4, #19
 800d156:	42a3      	cmp	r3, r4
 800d158:	d804      	bhi.n	800d164 <_strtod_l+0x8f0>
 800d15a:	306c      	adds	r0, #108	; 0x6c
 800d15c:	0d1b      	lsrs	r3, r3, #20
 800d15e:	1ac3      	subs	r3, r0, r3
 800d160:	4099      	lsls	r1, r3
 800d162:	0008      	movs	r0, r1
 800d164:	4282      	cmp	r2, r0
 800d166:	d124      	bne.n	800d1b2 <_strtod_l+0x93e>
 800d168:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <_strtod_l+0x934>)
 800d16a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d16c:	4299      	cmp	r1, r3
 800d16e:	d102      	bne.n	800d176 <_strtod_l+0x902>
 800d170:	3201      	adds	r2, #1
 800d172:	d100      	bne.n	800d176 <_strtod_l+0x902>
 800d174:	e5e1      	b.n	800cd3a <_strtod_l+0x4c6>
 800d176:	4b08      	ldr	r3, [pc, #32]	; (800d198 <_strtod_l+0x924>)
 800d178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d17a:	2600      	movs	r6, #0
 800d17c:	401a      	ands	r2, r3
 800d17e:	0013      	movs	r3, r2
 800d180:	2280      	movs	r2, #128	; 0x80
 800d182:	0352      	lsls	r2, r2, #13
 800d184:	189f      	adds	r7, r3, r2
 800d186:	9b07      	ldr	r3, [sp, #28]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d1a1      	bne.n	800d0d0 <_strtod_l+0x85c>
 800d18c:	e5de      	b.n	800cd4c <_strtod_l+0x4d8>
 800d18e:	46c0      	nop			; (mov r8, r8)
 800d190:	0800ebc8 	.word	0x0800ebc8
 800d194:	fffffc02 	.word	0xfffffc02
 800d198:	7ff00000 	.word	0x7ff00000
 800d19c:	39500000 	.word	0x39500000
 800d1a0:	fffffbe2 	.word	0xfffffbe2
 800d1a4:	000fffff 	.word	0x000fffff
 800d1a8:	7fefffff 	.word	0x7fefffff
 800d1ac:	4333      	orrs	r3, r6
 800d1ae:	d100      	bne.n	800d1b2 <_strtod_l+0x93e>
 800d1b0:	e77c      	b.n	800d0ac <_strtod_l+0x838>
 800d1b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d01d      	beq.n	800d1f4 <_strtod_l+0x980>
 800d1b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d1ba:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d1bc:	4213      	tst	r3, r2
 800d1be:	d0e2      	beq.n	800d186 <_strtod_l+0x912>
 800d1c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1c2:	0030      	movs	r0, r6
 800d1c4:	0039      	movs	r1, r7
 800d1c6:	9a07      	ldr	r2, [sp, #28]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d017      	beq.n	800d1fc <_strtod_l+0x988>
 800d1cc:	f7ff fb3a 	bl	800c844 <sulp>
 800d1d0:	0002      	movs	r2, r0
 800d1d2:	000b      	movs	r3, r1
 800d1d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d1d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d1d8:	f7f3 f9d6 	bl	8000588 <__aeabi_dadd>
 800d1dc:	0006      	movs	r6, r0
 800d1de:	000f      	movs	r7, r1
 800d1e0:	e7d1      	b.n	800d186 <_strtod_l+0x912>
 800d1e2:	2601      	movs	r6, #1
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	4a98      	ldr	r2, [pc, #608]	; (800d448 <_strtod_l+0xbd4>)
 800d1e8:	4276      	negs	r6, r6
 800d1ea:	189b      	adds	r3, r3, r2
 800d1ec:	4a97      	ldr	r2, [pc, #604]	; (800d44c <_strtod_l+0xbd8>)
 800d1ee:	431a      	orrs	r2, r3
 800d1f0:	0017      	movs	r7, r2
 800d1f2:	e7c8      	b.n	800d186 <_strtod_l+0x912>
 800d1f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d1f6:	4233      	tst	r3, r6
 800d1f8:	d0c5      	beq.n	800d186 <_strtod_l+0x912>
 800d1fa:	e7e1      	b.n	800d1c0 <_strtod_l+0x94c>
 800d1fc:	f7ff fb22 	bl	800c844 <sulp>
 800d200:	0002      	movs	r2, r0
 800d202:	000b      	movs	r3, r1
 800d204:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d206:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d208:	f7f4 fbda 	bl	80019c0 <__aeabi_dsub>
 800d20c:	2200      	movs	r2, #0
 800d20e:	2300      	movs	r3, #0
 800d210:	0006      	movs	r6, r0
 800d212:	000f      	movs	r7, r1
 800d214:	f7f3 f91a 	bl	800044c <__aeabi_dcmpeq>
 800d218:	2800      	cmp	r0, #0
 800d21a:	d0b4      	beq.n	800d186 <_strtod_l+0x912>
 800d21c:	e600      	b.n	800ce20 <_strtod_l+0x5ac>
 800d21e:	9906      	ldr	r1, [sp, #24]
 800d220:	9805      	ldr	r0, [sp, #20]
 800d222:	f7ff faa1 	bl	800c768 <__ratio>
 800d226:	2380      	movs	r3, #128	; 0x80
 800d228:	2200      	movs	r2, #0
 800d22a:	05db      	lsls	r3, r3, #23
 800d22c:	0004      	movs	r4, r0
 800d22e:	000d      	movs	r5, r1
 800d230:	f7f3 f91c 	bl	800046c <__aeabi_dcmple>
 800d234:	2800      	cmp	r0, #0
 800d236:	d06d      	beq.n	800d314 <_strtod_l+0xaa0>
 800d238:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d000      	beq.n	800d240 <_strtod_l+0x9cc>
 800d23e:	e07e      	b.n	800d33e <_strtod_l+0xaca>
 800d240:	2e00      	cmp	r6, #0
 800d242:	d158      	bne.n	800d2f6 <_strtod_l+0xa82>
 800d244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d246:	031b      	lsls	r3, r3, #12
 800d248:	d000      	beq.n	800d24c <_strtod_l+0x9d8>
 800d24a:	e07f      	b.n	800d34c <_strtod_l+0xad8>
 800d24c:	2200      	movs	r2, #0
 800d24e:	0020      	movs	r0, r4
 800d250:	0029      	movs	r1, r5
 800d252:	4b7f      	ldr	r3, [pc, #508]	; (800d450 <_strtod_l+0xbdc>)
 800d254:	f7f3 f900 	bl	8000458 <__aeabi_dcmplt>
 800d258:	2800      	cmp	r0, #0
 800d25a:	d158      	bne.n	800d30e <_strtod_l+0xa9a>
 800d25c:	0020      	movs	r0, r4
 800d25e:	0029      	movs	r1, r5
 800d260:	2200      	movs	r2, #0
 800d262:	4b7c      	ldr	r3, [pc, #496]	; (800d454 <_strtod_l+0xbe0>)
 800d264:	f7f4 f8ea 	bl	800143c <__aeabi_dmul>
 800d268:	0004      	movs	r4, r0
 800d26a:	000d      	movs	r5, r1
 800d26c:	2380      	movs	r3, #128	; 0x80
 800d26e:	061b      	lsls	r3, r3, #24
 800d270:	940a      	str	r4, [sp, #40]	; 0x28
 800d272:	18eb      	adds	r3, r5, r3
 800d274:	930b      	str	r3, [sp, #44]	; 0x2c
 800d276:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d278:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d27a:	9212      	str	r2, [sp, #72]	; 0x48
 800d27c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d27e:	4a76      	ldr	r2, [pc, #472]	; (800d458 <_strtod_l+0xbe4>)
 800d280:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d282:	4013      	ands	r3, r2
 800d284:	9314      	str	r3, [sp, #80]	; 0x50
 800d286:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d288:	4b74      	ldr	r3, [pc, #464]	; (800d45c <_strtod_l+0xbe8>)
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d000      	beq.n	800d290 <_strtod_l+0xa1c>
 800d28e:	e091      	b.n	800d3b4 <_strtod_l+0xb40>
 800d290:	4a73      	ldr	r2, [pc, #460]	; (800d460 <_strtod_l+0xbec>)
 800d292:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d294:	4694      	mov	ip, r2
 800d296:	4463      	add	r3, ip
 800d298:	001f      	movs	r7, r3
 800d29a:	0030      	movs	r0, r6
 800d29c:	0019      	movs	r1, r3
 800d29e:	f7ff f99b 	bl	800c5d8 <__ulp>
 800d2a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d2a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2a6:	f7f4 f8c9 	bl	800143c <__aeabi_dmul>
 800d2aa:	0032      	movs	r2, r6
 800d2ac:	003b      	movs	r3, r7
 800d2ae:	f7f3 f96b 	bl	8000588 <__aeabi_dadd>
 800d2b2:	4a69      	ldr	r2, [pc, #420]	; (800d458 <_strtod_l+0xbe4>)
 800d2b4:	4b6b      	ldr	r3, [pc, #428]	; (800d464 <_strtod_l+0xbf0>)
 800d2b6:	0006      	movs	r6, r0
 800d2b8:	400a      	ands	r2, r1
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	d949      	bls.n	800d352 <_strtod_l+0xade>
 800d2be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d2c0:	4b69      	ldr	r3, [pc, #420]	; (800d468 <_strtod_l+0xbf4>)
 800d2c2:	429a      	cmp	r2, r3
 800d2c4:	d103      	bne.n	800d2ce <_strtod_l+0xa5a>
 800d2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	d100      	bne.n	800d2ce <_strtod_l+0xa5a>
 800d2cc:	e535      	b.n	800cd3a <_strtod_l+0x4c6>
 800d2ce:	2601      	movs	r6, #1
 800d2d0:	4f65      	ldr	r7, [pc, #404]	; (800d468 <_strtod_l+0xbf4>)
 800d2d2:	4276      	negs	r6, r6
 800d2d4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d2d6:	9804      	ldr	r0, [sp, #16]
 800d2d8:	f7fe fe3c 	bl	800bf54 <_Bfree>
 800d2dc:	9908      	ldr	r1, [sp, #32]
 800d2de:	9804      	ldr	r0, [sp, #16]
 800d2e0:	f7fe fe38 	bl	800bf54 <_Bfree>
 800d2e4:	9906      	ldr	r1, [sp, #24]
 800d2e6:	9804      	ldr	r0, [sp, #16]
 800d2e8:	f7fe fe34 	bl	800bf54 <_Bfree>
 800d2ec:	9905      	ldr	r1, [sp, #20]
 800d2ee:	9804      	ldr	r0, [sp, #16]
 800d2f0:	f7fe fe30 	bl	800bf54 <_Bfree>
 800d2f4:	e60b      	b.n	800cf0e <_strtod_l+0x69a>
 800d2f6:	2e01      	cmp	r6, #1
 800d2f8:	d103      	bne.n	800d302 <_strtod_l+0xa8e>
 800d2fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d100      	bne.n	800d302 <_strtod_l+0xa8e>
 800d300:	e58e      	b.n	800ce20 <_strtod_l+0x5ac>
 800d302:	2300      	movs	r3, #0
 800d304:	4c59      	ldr	r4, [pc, #356]	; (800d46c <_strtod_l+0xbf8>)
 800d306:	930a      	str	r3, [sp, #40]	; 0x28
 800d308:	940b      	str	r4, [sp, #44]	; 0x2c
 800d30a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d30c:	e01c      	b.n	800d348 <_strtod_l+0xad4>
 800d30e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800d310:	4d50      	ldr	r5, [pc, #320]	; (800d454 <_strtod_l+0xbe0>)
 800d312:	e7ab      	b.n	800d26c <_strtod_l+0x9f8>
 800d314:	2200      	movs	r2, #0
 800d316:	0020      	movs	r0, r4
 800d318:	0029      	movs	r1, r5
 800d31a:	4b4e      	ldr	r3, [pc, #312]	; (800d454 <_strtod_l+0xbe0>)
 800d31c:	f7f4 f88e 	bl	800143c <__aeabi_dmul>
 800d320:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d322:	0004      	movs	r4, r0
 800d324:	000b      	movs	r3, r1
 800d326:	000d      	movs	r5, r1
 800d328:	2a00      	cmp	r2, #0
 800d32a:	d104      	bne.n	800d336 <_strtod_l+0xac2>
 800d32c:	2280      	movs	r2, #128	; 0x80
 800d32e:	0612      	lsls	r2, r2, #24
 800d330:	900a      	str	r0, [sp, #40]	; 0x28
 800d332:	188b      	adds	r3, r1, r2
 800d334:	e79e      	b.n	800d274 <_strtod_l+0xa00>
 800d336:	0002      	movs	r2, r0
 800d338:	920a      	str	r2, [sp, #40]	; 0x28
 800d33a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d33c:	e79b      	b.n	800d276 <_strtod_l+0xa02>
 800d33e:	2300      	movs	r3, #0
 800d340:	4c43      	ldr	r4, [pc, #268]	; (800d450 <_strtod_l+0xbdc>)
 800d342:	930a      	str	r3, [sp, #40]	; 0x28
 800d344:	940b      	str	r4, [sp, #44]	; 0x2c
 800d346:	2400      	movs	r4, #0
 800d348:	4d41      	ldr	r5, [pc, #260]	; (800d450 <_strtod_l+0xbdc>)
 800d34a:	e794      	b.n	800d276 <_strtod_l+0xa02>
 800d34c:	2300      	movs	r3, #0
 800d34e:	4c47      	ldr	r4, [pc, #284]	; (800d46c <_strtod_l+0xbf8>)
 800d350:	e7f7      	b.n	800d342 <_strtod_l+0xace>
 800d352:	23d4      	movs	r3, #212	; 0xd4
 800d354:	049b      	lsls	r3, r3, #18
 800d356:	18cf      	adds	r7, r1, r3
 800d358:	9b07      	ldr	r3, [sp, #28]
 800d35a:	970e      	str	r7, [sp, #56]	; 0x38
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d1b9      	bne.n	800d2d4 <_strtod_l+0xa60>
 800d360:	4b3d      	ldr	r3, [pc, #244]	; (800d458 <_strtod_l+0xbe4>)
 800d362:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d364:	403b      	ands	r3, r7
 800d366:	429a      	cmp	r2, r3
 800d368:	d1b4      	bne.n	800d2d4 <_strtod_l+0xa60>
 800d36a:	0020      	movs	r0, r4
 800d36c:	0029      	movs	r1, r5
 800d36e:	f7f3 f8b9 	bl	80004e4 <__aeabi_d2lz>
 800d372:	f7f3 f8f3 	bl	800055c <__aeabi_l2d>
 800d376:	0002      	movs	r2, r0
 800d378:	000b      	movs	r3, r1
 800d37a:	0020      	movs	r0, r4
 800d37c:	0029      	movs	r1, r5
 800d37e:	f7f4 fb1f 	bl	80019c0 <__aeabi_dsub>
 800d382:	033b      	lsls	r3, r7, #12
 800d384:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d386:	0b1b      	lsrs	r3, r3, #12
 800d388:	4333      	orrs	r3, r6
 800d38a:	4313      	orrs	r3, r2
 800d38c:	0004      	movs	r4, r0
 800d38e:	000d      	movs	r5, r1
 800d390:	4a37      	ldr	r2, [pc, #220]	; (800d470 <_strtod_l+0xbfc>)
 800d392:	2b00      	cmp	r3, #0
 800d394:	d054      	beq.n	800d440 <_strtod_l+0xbcc>
 800d396:	4b37      	ldr	r3, [pc, #220]	; (800d474 <_strtod_l+0xc00>)
 800d398:	f7f3 f85e 	bl	8000458 <__aeabi_dcmplt>
 800d39c:	2800      	cmp	r0, #0
 800d39e:	d000      	beq.n	800d3a2 <_strtod_l+0xb2e>
 800d3a0:	e4d4      	b.n	800cd4c <_strtod_l+0x4d8>
 800d3a2:	0020      	movs	r0, r4
 800d3a4:	0029      	movs	r1, r5
 800d3a6:	4a34      	ldr	r2, [pc, #208]	; (800d478 <_strtod_l+0xc04>)
 800d3a8:	4b2a      	ldr	r3, [pc, #168]	; (800d454 <_strtod_l+0xbe0>)
 800d3aa:	f7f3 f869 	bl	8000480 <__aeabi_dcmpgt>
 800d3ae:	2800      	cmp	r0, #0
 800d3b0:	d090      	beq.n	800d2d4 <_strtod_l+0xa60>
 800d3b2:	e4cb      	b.n	800cd4c <_strtod_l+0x4d8>
 800d3b4:	9b07      	ldr	r3, [sp, #28]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d02b      	beq.n	800d412 <_strtod_l+0xb9e>
 800d3ba:	23d4      	movs	r3, #212	; 0xd4
 800d3bc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d3be:	04db      	lsls	r3, r3, #19
 800d3c0:	429a      	cmp	r2, r3
 800d3c2:	d826      	bhi.n	800d412 <_strtod_l+0xb9e>
 800d3c4:	0020      	movs	r0, r4
 800d3c6:	0029      	movs	r1, r5
 800d3c8:	4a2c      	ldr	r2, [pc, #176]	; (800d47c <_strtod_l+0xc08>)
 800d3ca:	4b2d      	ldr	r3, [pc, #180]	; (800d480 <_strtod_l+0xc0c>)
 800d3cc:	f7f3 f84e 	bl	800046c <__aeabi_dcmple>
 800d3d0:	2800      	cmp	r0, #0
 800d3d2:	d017      	beq.n	800d404 <_strtod_l+0xb90>
 800d3d4:	0020      	movs	r0, r4
 800d3d6:	0029      	movs	r1, r5
 800d3d8:	f7f3 f866 	bl	80004a8 <__aeabi_d2uiz>
 800d3dc:	2800      	cmp	r0, #0
 800d3de:	d100      	bne.n	800d3e2 <_strtod_l+0xb6e>
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	f7f4 fef3 	bl	80021cc <__aeabi_ui2d>
 800d3e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d3e8:	0004      	movs	r4, r0
 800d3ea:	000b      	movs	r3, r1
 800d3ec:	000d      	movs	r5, r1
 800d3ee:	2a00      	cmp	r2, #0
 800d3f0:	d122      	bne.n	800d438 <_strtod_l+0xbc4>
 800d3f2:	2280      	movs	r2, #128	; 0x80
 800d3f4:	0612      	lsls	r2, r2, #24
 800d3f6:	188b      	adds	r3, r1, r2
 800d3f8:	9016      	str	r0, [sp, #88]	; 0x58
 800d3fa:	9317      	str	r3, [sp, #92]	; 0x5c
 800d3fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d3fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d400:	9212      	str	r2, [sp, #72]	; 0x48
 800d402:	9313      	str	r3, [sp, #76]	; 0x4c
 800d404:	22d6      	movs	r2, #214	; 0xd6
 800d406:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d408:	04d2      	lsls	r2, r2, #19
 800d40a:	189b      	adds	r3, r3, r2
 800d40c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d40e:	1a9b      	subs	r3, r3, r2
 800d410:	9313      	str	r3, [sp, #76]	; 0x4c
 800d412:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d414:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d416:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d418:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d41a:	f7ff f8dd 	bl	800c5d8 <__ulp>
 800d41e:	0002      	movs	r2, r0
 800d420:	000b      	movs	r3, r1
 800d422:	0030      	movs	r0, r6
 800d424:	0039      	movs	r1, r7
 800d426:	f7f4 f809 	bl	800143c <__aeabi_dmul>
 800d42a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d42c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d42e:	f7f3 f8ab 	bl	8000588 <__aeabi_dadd>
 800d432:	0006      	movs	r6, r0
 800d434:	000f      	movs	r7, r1
 800d436:	e78f      	b.n	800d358 <_strtod_l+0xae4>
 800d438:	0002      	movs	r2, r0
 800d43a:	9216      	str	r2, [sp, #88]	; 0x58
 800d43c:	9317      	str	r3, [sp, #92]	; 0x5c
 800d43e:	e7dd      	b.n	800d3fc <_strtod_l+0xb88>
 800d440:	4b10      	ldr	r3, [pc, #64]	; (800d484 <_strtod_l+0xc10>)
 800d442:	f7f3 f809 	bl	8000458 <__aeabi_dcmplt>
 800d446:	e7b2      	b.n	800d3ae <_strtod_l+0xb3a>
 800d448:	fff00000 	.word	0xfff00000
 800d44c:	000fffff 	.word	0x000fffff
 800d450:	3ff00000 	.word	0x3ff00000
 800d454:	3fe00000 	.word	0x3fe00000
 800d458:	7ff00000 	.word	0x7ff00000
 800d45c:	7fe00000 	.word	0x7fe00000
 800d460:	fcb00000 	.word	0xfcb00000
 800d464:	7c9fffff 	.word	0x7c9fffff
 800d468:	7fefffff 	.word	0x7fefffff
 800d46c:	bff00000 	.word	0xbff00000
 800d470:	94a03595 	.word	0x94a03595
 800d474:	3fdfffff 	.word	0x3fdfffff
 800d478:	35afe535 	.word	0x35afe535
 800d47c:	ffc00000 	.word	0xffc00000
 800d480:	41dfffff 	.word	0x41dfffff
 800d484:	3fcfffff 	.word	0x3fcfffff

0800d488 <_strtod_r>:
 800d488:	b510      	push	{r4, lr}
 800d48a:	4b02      	ldr	r3, [pc, #8]	; (800d494 <_strtod_r+0xc>)
 800d48c:	f7ff f9f2 	bl	800c874 <_strtod_l>
 800d490:	bd10      	pop	{r4, pc}
 800d492:	46c0      	nop			; (mov r8, r8)
 800d494:	2000009c 	.word	0x2000009c

0800d498 <_strtol_l.constprop.0>:
 800d498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d49a:	b087      	sub	sp, #28
 800d49c:	001e      	movs	r6, r3
 800d49e:	9005      	str	r0, [sp, #20]
 800d4a0:	9101      	str	r1, [sp, #4]
 800d4a2:	9202      	str	r2, [sp, #8]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d048      	beq.n	800d53a <_strtol_l.constprop.0+0xa2>
 800d4a8:	000b      	movs	r3, r1
 800d4aa:	2e24      	cmp	r6, #36	; 0x24
 800d4ac:	d845      	bhi.n	800d53a <_strtol_l.constprop.0+0xa2>
 800d4ae:	4a3b      	ldr	r2, [pc, #236]	; (800d59c <_strtol_l.constprop.0+0x104>)
 800d4b0:	2108      	movs	r1, #8
 800d4b2:	4694      	mov	ip, r2
 800d4b4:	001a      	movs	r2, r3
 800d4b6:	4660      	mov	r0, ip
 800d4b8:	7814      	ldrb	r4, [r2, #0]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	5d00      	ldrb	r0, [r0, r4]
 800d4be:	001d      	movs	r5, r3
 800d4c0:	0007      	movs	r7, r0
 800d4c2:	400f      	ands	r7, r1
 800d4c4:	4208      	tst	r0, r1
 800d4c6:	d1f5      	bne.n	800d4b4 <_strtol_l.constprop.0+0x1c>
 800d4c8:	2c2d      	cmp	r4, #45	; 0x2d
 800d4ca:	d13d      	bne.n	800d548 <_strtol_l.constprop.0+0xb0>
 800d4cc:	2701      	movs	r7, #1
 800d4ce:	781c      	ldrb	r4, [r3, #0]
 800d4d0:	1c95      	adds	r5, r2, #2
 800d4d2:	2e00      	cmp	r6, #0
 800d4d4:	d05e      	beq.n	800d594 <_strtol_l.constprop.0+0xfc>
 800d4d6:	2e10      	cmp	r6, #16
 800d4d8:	d109      	bne.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d4da:	2c30      	cmp	r4, #48	; 0x30
 800d4dc:	d107      	bne.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d4de:	2220      	movs	r2, #32
 800d4e0:	782b      	ldrb	r3, [r5, #0]
 800d4e2:	4393      	bics	r3, r2
 800d4e4:	2b58      	cmp	r3, #88	; 0x58
 800d4e6:	d150      	bne.n	800d58a <_strtol_l.constprop.0+0xf2>
 800d4e8:	2610      	movs	r6, #16
 800d4ea:	786c      	ldrb	r4, [r5, #1]
 800d4ec:	3502      	adds	r5, #2
 800d4ee:	4b2c      	ldr	r3, [pc, #176]	; (800d5a0 <_strtol_l.constprop.0+0x108>)
 800d4f0:	0031      	movs	r1, r6
 800d4f2:	18fb      	adds	r3, r7, r3
 800d4f4:	0018      	movs	r0, r3
 800d4f6:	9303      	str	r3, [sp, #12]
 800d4f8:	f7f2 fea8 	bl	800024c <__aeabi_uidivmod>
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	9104      	str	r1, [sp, #16]
 800d500:	2101      	movs	r1, #1
 800d502:	4684      	mov	ip, r0
 800d504:	0010      	movs	r0, r2
 800d506:	4249      	negs	r1, r1
 800d508:	0023      	movs	r3, r4
 800d50a:	3b30      	subs	r3, #48	; 0x30
 800d50c:	2b09      	cmp	r3, #9
 800d50e:	d903      	bls.n	800d518 <_strtol_l.constprop.0+0x80>
 800d510:	3b11      	subs	r3, #17
 800d512:	2b19      	cmp	r3, #25
 800d514:	d81d      	bhi.n	800d552 <_strtol_l.constprop.0+0xba>
 800d516:	330a      	adds	r3, #10
 800d518:	429e      	cmp	r6, r3
 800d51a:	dd1e      	ble.n	800d55a <_strtol_l.constprop.0+0xc2>
 800d51c:	1c54      	adds	r4, r2, #1
 800d51e:	d009      	beq.n	800d534 <_strtol_l.constprop.0+0x9c>
 800d520:	000a      	movs	r2, r1
 800d522:	4584      	cmp	ip, r0
 800d524:	d306      	bcc.n	800d534 <_strtol_l.constprop.0+0x9c>
 800d526:	d102      	bne.n	800d52e <_strtol_l.constprop.0+0x96>
 800d528:	9c04      	ldr	r4, [sp, #16]
 800d52a:	429c      	cmp	r4, r3
 800d52c:	db02      	blt.n	800d534 <_strtol_l.constprop.0+0x9c>
 800d52e:	2201      	movs	r2, #1
 800d530:	4370      	muls	r0, r6
 800d532:	1818      	adds	r0, r3, r0
 800d534:	782c      	ldrb	r4, [r5, #0]
 800d536:	3501      	adds	r5, #1
 800d538:	e7e6      	b.n	800d508 <_strtol_l.constprop.0+0x70>
 800d53a:	f7fd fcdb 	bl	800aef4 <__errno>
 800d53e:	2316      	movs	r3, #22
 800d540:	6003      	str	r3, [r0, #0]
 800d542:	2000      	movs	r0, #0
 800d544:	b007      	add	sp, #28
 800d546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d548:	2c2b      	cmp	r4, #43	; 0x2b
 800d54a:	d1c2      	bne.n	800d4d2 <_strtol_l.constprop.0+0x3a>
 800d54c:	781c      	ldrb	r4, [r3, #0]
 800d54e:	1c95      	adds	r5, r2, #2
 800d550:	e7bf      	b.n	800d4d2 <_strtol_l.constprop.0+0x3a>
 800d552:	0023      	movs	r3, r4
 800d554:	3b61      	subs	r3, #97	; 0x61
 800d556:	2b19      	cmp	r3, #25
 800d558:	d9dd      	bls.n	800d516 <_strtol_l.constprop.0+0x7e>
 800d55a:	1c53      	adds	r3, r2, #1
 800d55c:	d109      	bne.n	800d572 <_strtol_l.constprop.0+0xda>
 800d55e:	2322      	movs	r3, #34	; 0x22
 800d560:	9a05      	ldr	r2, [sp, #20]
 800d562:	9803      	ldr	r0, [sp, #12]
 800d564:	6013      	str	r3, [r2, #0]
 800d566:	9b02      	ldr	r3, [sp, #8]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0eb      	beq.n	800d544 <_strtol_l.constprop.0+0xac>
 800d56c:	1e6b      	subs	r3, r5, #1
 800d56e:	9301      	str	r3, [sp, #4]
 800d570:	e007      	b.n	800d582 <_strtol_l.constprop.0+0xea>
 800d572:	2f00      	cmp	r7, #0
 800d574:	d000      	beq.n	800d578 <_strtol_l.constprop.0+0xe0>
 800d576:	4240      	negs	r0, r0
 800d578:	9b02      	ldr	r3, [sp, #8]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d0e2      	beq.n	800d544 <_strtol_l.constprop.0+0xac>
 800d57e:	2a00      	cmp	r2, #0
 800d580:	d1f4      	bne.n	800d56c <_strtol_l.constprop.0+0xd4>
 800d582:	9b02      	ldr	r3, [sp, #8]
 800d584:	9a01      	ldr	r2, [sp, #4]
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	e7dc      	b.n	800d544 <_strtol_l.constprop.0+0xac>
 800d58a:	2430      	movs	r4, #48	; 0x30
 800d58c:	2e00      	cmp	r6, #0
 800d58e:	d1ae      	bne.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d590:	3608      	adds	r6, #8
 800d592:	e7ac      	b.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d594:	2c30      	cmp	r4, #48	; 0x30
 800d596:	d0a2      	beq.n	800d4de <_strtol_l.constprop.0+0x46>
 800d598:	260a      	movs	r6, #10
 800d59a:	e7a8      	b.n	800d4ee <_strtol_l.constprop.0+0x56>
 800d59c:	0800ebf1 	.word	0x0800ebf1
 800d5a0:	7fffffff 	.word	0x7fffffff

0800d5a4 <_strtol_r>:
 800d5a4:	b510      	push	{r4, lr}
 800d5a6:	f7ff ff77 	bl	800d498 <_strtol_l.constprop.0>
 800d5aa:	bd10      	pop	{r4, pc}

0800d5ac <__ssputs_r>:
 800d5ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d5ae:	b085      	sub	sp, #20
 800d5b0:	9301      	str	r3, [sp, #4]
 800d5b2:	9203      	str	r2, [sp, #12]
 800d5b4:	688e      	ldr	r6, [r1, #8]
 800d5b6:	9a01      	ldr	r2, [sp, #4]
 800d5b8:	0007      	movs	r7, r0
 800d5ba:	000c      	movs	r4, r1
 800d5bc:	680b      	ldr	r3, [r1, #0]
 800d5be:	4296      	cmp	r6, r2
 800d5c0:	d831      	bhi.n	800d626 <__ssputs_r+0x7a>
 800d5c2:	898a      	ldrh	r2, [r1, #12]
 800d5c4:	2190      	movs	r1, #144	; 0x90
 800d5c6:	00c9      	lsls	r1, r1, #3
 800d5c8:	420a      	tst	r2, r1
 800d5ca:	d029      	beq.n	800d620 <__ssputs_r+0x74>
 800d5cc:	2003      	movs	r0, #3
 800d5ce:	6921      	ldr	r1, [r4, #16]
 800d5d0:	1a5b      	subs	r3, r3, r1
 800d5d2:	9302      	str	r3, [sp, #8]
 800d5d4:	6963      	ldr	r3, [r4, #20]
 800d5d6:	4343      	muls	r3, r0
 800d5d8:	0fdd      	lsrs	r5, r3, #31
 800d5da:	18ed      	adds	r5, r5, r3
 800d5dc:	9b01      	ldr	r3, [sp, #4]
 800d5de:	9802      	ldr	r0, [sp, #8]
 800d5e0:	3301      	adds	r3, #1
 800d5e2:	181b      	adds	r3, r3, r0
 800d5e4:	106d      	asrs	r5, r5, #1
 800d5e6:	42ab      	cmp	r3, r5
 800d5e8:	d900      	bls.n	800d5ec <__ssputs_r+0x40>
 800d5ea:	001d      	movs	r5, r3
 800d5ec:	0552      	lsls	r2, r2, #21
 800d5ee:	d529      	bpl.n	800d644 <__ssputs_r+0x98>
 800d5f0:	0029      	movs	r1, r5
 800d5f2:	0038      	movs	r0, r7
 800d5f4:	f7fe fbd8 	bl	800bda8 <_malloc_r>
 800d5f8:	1e06      	subs	r6, r0, #0
 800d5fa:	d02d      	beq.n	800d658 <__ssputs_r+0xac>
 800d5fc:	9a02      	ldr	r2, [sp, #8]
 800d5fe:	6921      	ldr	r1, [r4, #16]
 800d600:	f7fd fcb0 	bl	800af64 <memcpy>
 800d604:	89a2      	ldrh	r2, [r4, #12]
 800d606:	4b19      	ldr	r3, [pc, #100]	; (800d66c <__ssputs_r+0xc0>)
 800d608:	401a      	ands	r2, r3
 800d60a:	2380      	movs	r3, #128	; 0x80
 800d60c:	4313      	orrs	r3, r2
 800d60e:	81a3      	strh	r3, [r4, #12]
 800d610:	9b02      	ldr	r3, [sp, #8]
 800d612:	6126      	str	r6, [r4, #16]
 800d614:	18f6      	adds	r6, r6, r3
 800d616:	6026      	str	r6, [r4, #0]
 800d618:	6165      	str	r5, [r4, #20]
 800d61a:	9e01      	ldr	r6, [sp, #4]
 800d61c:	1aed      	subs	r5, r5, r3
 800d61e:	60a5      	str	r5, [r4, #8]
 800d620:	9b01      	ldr	r3, [sp, #4]
 800d622:	429e      	cmp	r6, r3
 800d624:	d900      	bls.n	800d628 <__ssputs_r+0x7c>
 800d626:	9e01      	ldr	r6, [sp, #4]
 800d628:	0032      	movs	r2, r6
 800d62a:	9903      	ldr	r1, [sp, #12]
 800d62c:	6820      	ldr	r0, [r4, #0]
 800d62e:	f000 f9d4 	bl	800d9da <memmove>
 800d632:	2000      	movs	r0, #0
 800d634:	68a3      	ldr	r3, [r4, #8]
 800d636:	1b9b      	subs	r3, r3, r6
 800d638:	60a3      	str	r3, [r4, #8]
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	199b      	adds	r3, r3, r6
 800d63e:	6023      	str	r3, [r4, #0]
 800d640:	b005      	add	sp, #20
 800d642:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d644:	002a      	movs	r2, r5
 800d646:	0038      	movs	r0, r7
 800d648:	f000 fdbe 	bl	800e1c8 <_realloc_r>
 800d64c:	1e06      	subs	r6, r0, #0
 800d64e:	d1df      	bne.n	800d610 <__ssputs_r+0x64>
 800d650:	0038      	movs	r0, r7
 800d652:	6921      	ldr	r1, [r4, #16]
 800d654:	f7fe fb32 	bl	800bcbc <_free_r>
 800d658:	230c      	movs	r3, #12
 800d65a:	2001      	movs	r0, #1
 800d65c:	603b      	str	r3, [r7, #0]
 800d65e:	89a2      	ldrh	r2, [r4, #12]
 800d660:	3334      	adds	r3, #52	; 0x34
 800d662:	4313      	orrs	r3, r2
 800d664:	81a3      	strh	r3, [r4, #12]
 800d666:	4240      	negs	r0, r0
 800d668:	e7ea      	b.n	800d640 <__ssputs_r+0x94>
 800d66a:	46c0      	nop			; (mov r8, r8)
 800d66c:	fffffb7f 	.word	0xfffffb7f

0800d670 <_svfiprintf_r>:
 800d670:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d672:	b0a1      	sub	sp, #132	; 0x84
 800d674:	9003      	str	r0, [sp, #12]
 800d676:	001d      	movs	r5, r3
 800d678:	898b      	ldrh	r3, [r1, #12]
 800d67a:	000f      	movs	r7, r1
 800d67c:	0016      	movs	r6, r2
 800d67e:	061b      	lsls	r3, r3, #24
 800d680:	d511      	bpl.n	800d6a6 <_svfiprintf_r+0x36>
 800d682:	690b      	ldr	r3, [r1, #16]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d10e      	bne.n	800d6a6 <_svfiprintf_r+0x36>
 800d688:	2140      	movs	r1, #64	; 0x40
 800d68a:	f7fe fb8d 	bl	800bda8 <_malloc_r>
 800d68e:	6038      	str	r0, [r7, #0]
 800d690:	6138      	str	r0, [r7, #16]
 800d692:	2800      	cmp	r0, #0
 800d694:	d105      	bne.n	800d6a2 <_svfiprintf_r+0x32>
 800d696:	230c      	movs	r3, #12
 800d698:	9a03      	ldr	r2, [sp, #12]
 800d69a:	3801      	subs	r0, #1
 800d69c:	6013      	str	r3, [r2, #0]
 800d69e:	b021      	add	sp, #132	; 0x84
 800d6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d6a2:	2340      	movs	r3, #64	; 0x40
 800d6a4:	617b      	str	r3, [r7, #20]
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	ac08      	add	r4, sp, #32
 800d6aa:	6163      	str	r3, [r4, #20]
 800d6ac:	3320      	adds	r3, #32
 800d6ae:	7663      	strb	r3, [r4, #25]
 800d6b0:	3310      	adds	r3, #16
 800d6b2:	76a3      	strb	r3, [r4, #26]
 800d6b4:	9507      	str	r5, [sp, #28]
 800d6b6:	0035      	movs	r5, r6
 800d6b8:	782b      	ldrb	r3, [r5, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d001      	beq.n	800d6c2 <_svfiprintf_r+0x52>
 800d6be:	2b25      	cmp	r3, #37	; 0x25
 800d6c0:	d148      	bne.n	800d754 <_svfiprintf_r+0xe4>
 800d6c2:	1bab      	subs	r3, r5, r6
 800d6c4:	9305      	str	r3, [sp, #20]
 800d6c6:	42b5      	cmp	r5, r6
 800d6c8:	d00b      	beq.n	800d6e2 <_svfiprintf_r+0x72>
 800d6ca:	0032      	movs	r2, r6
 800d6cc:	0039      	movs	r1, r7
 800d6ce:	9803      	ldr	r0, [sp, #12]
 800d6d0:	f7ff ff6c 	bl	800d5ac <__ssputs_r>
 800d6d4:	3001      	adds	r0, #1
 800d6d6:	d100      	bne.n	800d6da <_svfiprintf_r+0x6a>
 800d6d8:	e0af      	b.n	800d83a <_svfiprintf_r+0x1ca>
 800d6da:	6963      	ldr	r3, [r4, #20]
 800d6dc:	9a05      	ldr	r2, [sp, #20]
 800d6de:	189b      	adds	r3, r3, r2
 800d6e0:	6163      	str	r3, [r4, #20]
 800d6e2:	782b      	ldrb	r3, [r5, #0]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d100      	bne.n	800d6ea <_svfiprintf_r+0x7a>
 800d6e8:	e0a7      	b.n	800d83a <_svfiprintf_r+0x1ca>
 800d6ea:	2201      	movs	r2, #1
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	4252      	negs	r2, r2
 800d6f0:	6062      	str	r2, [r4, #4]
 800d6f2:	a904      	add	r1, sp, #16
 800d6f4:	3254      	adds	r2, #84	; 0x54
 800d6f6:	1852      	adds	r2, r2, r1
 800d6f8:	1c6e      	adds	r6, r5, #1
 800d6fa:	6023      	str	r3, [r4, #0]
 800d6fc:	60e3      	str	r3, [r4, #12]
 800d6fe:	60a3      	str	r3, [r4, #8]
 800d700:	7013      	strb	r3, [r2, #0]
 800d702:	65a3      	str	r3, [r4, #88]	; 0x58
 800d704:	4b55      	ldr	r3, [pc, #340]	; (800d85c <_svfiprintf_r+0x1ec>)
 800d706:	2205      	movs	r2, #5
 800d708:	0018      	movs	r0, r3
 800d70a:	7831      	ldrb	r1, [r6, #0]
 800d70c:	9305      	str	r3, [sp, #20]
 800d70e:	f7fd fc1e 	bl	800af4e <memchr>
 800d712:	1c75      	adds	r5, r6, #1
 800d714:	2800      	cmp	r0, #0
 800d716:	d11f      	bne.n	800d758 <_svfiprintf_r+0xe8>
 800d718:	6822      	ldr	r2, [r4, #0]
 800d71a:	06d3      	lsls	r3, r2, #27
 800d71c:	d504      	bpl.n	800d728 <_svfiprintf_r+0xb8>
 800d71e:	2353      	movs	r3, #83	; 0x53
 800d720:	a904      	add	r1, sp, #16
 800d722:	185b      	adds	r3, r3, r1
 800d724:	2120      	movs	r1, #32
 800d726:	7019      	strb	r1, [r3, #0]
 800d728:	0713      	lsls	r3, r2, #28
 800d72a:	d504      	bpl.n	800d736 <_svfiprintf_r+0xc6>
 800d72c:	2353      	movs	r3, #83	; 0x53
 800d72e:	a904      	add	r1, sp, #16
 800d730:	185b      	adds	r3, r3, r1
 800d732:	212b      	movs	r1, #43	; 0x2b
 800d734:	7019      	strb	r1, [r3, #0]
 800d736:	7833      	ldrb	r3, [r6, #0]
 800d738:	2b2a      	cmp	r3, #42	; 0x2a
 800d73a:	d016      	beq.n	800d76a <_svfiprintf_r+0xfa>
 800d73c:	0035      	movs	r5, r6
 800d73e:	2100      	movs	r1, #0
 800d740:	200a      	movs	r0, #10
 800d742:	68e3      	ldr	r3, [r4, #12]
 800d744:	782a      	ldrb	r2, [r5, #0]
 800d746:	1c6e      	adds	r6, r5, #1
 800d748:	3a30      	subs	r2, #48	; 0x30
 800d74a:	2a09      	cmp	r2, #9
 800d74c:	d94e      	bls.n	800d7ec <_svfiprintf_r+0x17c>
 800d74e:	2900      	cmp	r1, #0
 800d750:	d111      	bne.n	800d776 <_svfiprintf_r+0x106>
 800d752:	e017      	b.n	800d784 <_svfiprintf_r+0x114>
 800d754:	3501      	adds	r5, #1
 800d756:	e7af      	b.n	800d6b8 <_svfiprintf_r+0x48>
 800d758:	9b05      	ldr	r3, [sp, #20]
 800d75a:	6822      	ldr	r2, [r4, #0]
 800d75c:	1ac0      	subs	r0, r0, r3
 800d75e:	2301      	movs	r3, #1
 800d760:	4083      	lsls	r3, r0
 800d762:	4313      	orrs	r3, r2
 800d764:	002e      	movs	r6, r5
 800d766:	6023      	str	r3, [r4, #0]
 800d768:	e7cc      	b.n	800d704 <_svfiprintf_r+0x94>
 800d76a:	9b07      	ldr	r3, [sp, #28]
 800d76c:	1d19      	adds	r1, r3, #4
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	9107      	str	r1, [sp, #28]
 800d772:	2b00      	cmp	r3, #0
 800d774:	db01      	blt.n	800d77a <_svfiprintf_r+0x10a>
 800d776:	930b      	str	r3, [sp, #44]	; 0x2c
 800d778:	e004      	b.n	800d784 <_svfiprintf_r+0x114>
 800d77a:	425b      	negs	r3, r3
 800d77c:	60e3      	str	r3, [r4, #12]
 800d77e:	2302      	movs	r3, #2
 800d780:	4313      	orrs	r3, r2
 800d782:	6023      	str	r3, [r4, #0]
 800d784:	782b      	ldrb	r3, [r5, #0]
 800d786:	2b2e      	cmp	r3, #46	; 0x2e
 800d788:	d10a      	bne.n	800d7a0 <_svfiprintf_r+0x130>
 800d78a:	786b      	ldrb	r3, [r5, #1]
 800d78c:	2b2a      	cmp	r3, #42	; 0x2a
 800d78e:	d135      	bne.n	800d7fc <_svfiprintf_r+0x18c>
 800d790:	9b07      	ldr	r3, [sp, #28]
 800d792:	3502      	adds	r5, #2
 800d794:	1d1a      	adds	r2, r3, #4
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	9207      	str	r2, [sp, #28]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	db2b      	blt.n	800d7f6 <_svfiprintf_r+0x186>
 800d79e:	9309      	str	r3, [sp, #36]	; 0x24
 800d7a0:	4e2f      	ldr	r6, [pc, #188]	; (800d860 <_svfiprintf_r+0x1f0>)
 800d7a2:	2203      	movs	r2, #3
 800d7a4:	0030      	movs	r0, r6
 800d7a6:	7829      	ldrb	r1, [r5, #0]
 800d7a8:	f7fd fbd1 	bl	800af4e <memchr>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d006      	beq.n	800d7be <_svfiprintf_r+0x14e>
 800d7b0:	2340      	movs	r3, #64	; 0x40
 800d7b2:	1b80      	subs	r0, r0, r6
 800d7b4:	4083      	lsls	r3, r0
 800d7b6:	6822      	ldr	r2, [r4, #0]
 800d7b8:	3501      	adds	r5, #1
 800d7ba:	4313      	orrs	r3, r2
 800d7bc:	6023      	str	r3, [r4, #0]
 800d7be:	7829      	ldrb	r1, [r5, #0]
 800d7c0:	2206      	movs	r2, #6
 800d7c2:	4828      	ldr	r0, [pc, #160]	; (800d864 <_svfiprintf_r+0x1f4>)
 800d7c4:	1c6e      	adds	r6, r5, #1
 800d7c6:	7621      	strb	r1, [r4, #24]
 800d7c8:	f7fd fbc1 	bl	800af4e <memchr>
 800d7cc:	2800      	cmp	r0, #0
 800d7ce:	d03c      	beq.n	800d84a <_svfiprintf_r+0x1da>
 800d7d0:	4b25      	ldr	r3, [pc, #148]	; (800d868 <_svfiprintf_r+0x1f8>)
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d125      	bne.n	800d822 <_svfiprintf_r+0x1b2>
 800d7d6:	2207      	movs	r2, #7
 800d7d8:	9b07      	ldr	r3, [sp, #28]
 800d7da:	3307      	adds	r3, #7
 800d7dc:	4393      	bics	r3, r2
 800d7de:	3308      	adds	r3, #8
 800d7e0:	9307      	str	r3, [sp, #28]
 800d7e2:	6963      	ldr	r3, [r4, #20]
 800d7e4:	9a04      	ldr	r2, [sp, #16]
 800d7e6:	189b      	adds	r3, r3, r2
 800d7e8:	6163      	str	r3, [r4, #20]
 800d7ea:	e764      	b.n	800d6b6 <_svfiprintf_r+0x46>
 800d7ec:	4343      	muls	r3, r0
 800d7ee:	0035      	movs	r5, r6
 800d7f0:	2101      	movs	r1, #1
 800d7f2:	189b      	adds	r3, r3, r2
 800d7f4:	e7a6      	b.n	800d744 <_svfiprintf_r+0xd4>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	425b      	negs	r3, r3
 800d7fa:	e7d0      	b.n	800d79e <_svfiprintf_r+0x12e>
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	200a      	movs	r0, #10
 800d800:	001a      	movs	r2, r3
 800d802:	3501      	adds	r5, #1
 800d804:	6063      	str	r3, [r4, #4]
 800d806:	7829      	ldrb	r1, [r5, #0]
 800d808:	1c6e      	adds	r6, r5, #1
 800d80a:	3930      	subs	r1, #48	; 0x30
 800d80c:	2909      	cmp	r1, #9
 800d80e:	d903      	bls.n	800d818 <_svfiprintf_r+0x1a8>
 800d810:	2b00      	cmp	r3, #0
 800d812:	d0c5      	beq.n	800d7a0 <_svfiprintf_r+0x130>
 800d814:	9209      	str	r2, [sp, #36]	; 0x24
 800d816:	e7c3      	b.n	800d7a0 <_svfiprintf_r+0x130>
 800d818:	4342      	muls	r2, r0
 800d81a:	0035      	movs	r5, r6
 800d81c:	2301      	movs	r3, #1
 800d81e:	1852      	adds	r2, r2, r1
 800d820:	e7f1      	b.n	800d806 <_svfiprintf_r+0x196>
 800d822:	aa07      	add	r2, sp, #28
 800d824:	9200      	str	r2, [sp, #0]
 800d826:	0021      	movs	r1, r4
 800d828:	003a      	movs	r2, r7
 800d82a:	4b10      	ldr	r3, [pc, #64]	; (800d86c <_svfiprintf_r+0x1fc>)
 800d82c:	9803      	ldr	r0, [sp, #12]
 800d82e:	f7fc fbf9 	bl	800a024 <_printf_float>
 800d832:	9004      	str	r0, [sp, #16]
 800d834:	9b04      	ldr	r3, [sp, #16]
 800d836:	3301      	adds	r3, #1
 800d838:	d1d3      	bne.n	800d7e2 <_svfiprintf_r+0x172>
 800d83a:	89bb      	ldrh	r3, [r7, #12]
 800d83c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800d83e:	065b      	lsls	r3, r3, #25
 800d840:	d400      	bmi.n	800d844 <_svfiprintf_r+0x1d4>
 800d842:	e72c      	b.n	800d69e <_svfiprintf_r+0x2e>
 800d844:	2001      	movs	r0, #1
 800d846:	4240      	negs	r0, r0
 800d848:	e729      	b.n	800d69e <_svfiprintf_r+0x2e>
 800d84a:	aa07      	add	r2, sp, #28
 800d84c:	9200      	str	r2, [sp, #0]
 800d84e:	0021      	movs	r1, r4
 800d850:	003a      	movs	r2, r7
 800d852:	4b06      	ldr	r3, [pc, #24]	; (800d86c <_svfiprintf_r+0x1fc>)
 800d854:	9803      	ldr	r0, [sp, #12]
 800d856:	f7fc feab 	bl	800a5b0 <_printf_i>
 800d85a:	e7ea      	b.n	800d832 <_svfiprintf_r+0x1c2>
 800d85c:	0800ecf1 	.word	0x0800ecf1
 800d860:	0800ecf7 	.word	0x0800ecf7
 800d864:	0800ecfb 	.word	0x0800ecfb
 800d868:	0800a025 	.word	0x0800a025
 800d86c:	0800d5ad 	.word	0x0800d5ad

0800d870 <__sflush_r>:
 800d870:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d872:	898b      	ldrh	r3, [r1, #12]
 800d874:	0005      	movs	r5, r0
 800d876:	000c      	movs	r4, r1
 800d878:	071a      	lsls	r2, r3, #28
 800d87a:	d45c      	bmi.n	800d936 <__sflush_r+0xc6>
 800d87c:	684a      	ldr	r2, [r1, #4]
 800d87e:	2a00      	cmp	r2, #0
 800d880:	dc04      	bgt.n	800d88c <__sflush_r+0x1c>
 800d882:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d884:	2a00      	cmp	r2, #0
 800d886:	dc01      	bgt.n	800d88c <__sflush_r+0x1c>
 800d888:	2000      	movs	r0, #0
 800d88a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d88c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d88e:	2f00      	cmp	r7, #0
 800d890:	d0fa      	beq.n	800d888 <__sflush_r+0x18>
 800d892:	2200      	movs	r2, #0
 800d894:	2080      	movs	r0, #128	; 0x80
 800d896:	682e      	ldr	r6, [r5, #0]
 800d898:	602a      	str	r2, [r5, #0]
 800d89a:	001a      	movs	r2, r3
 800d89c:	0140      	lsls	r0, r0, #5
 800d89e:	6a21      	ldr	r1, [r4, #32]
 800d8a0:	4002      	ands	r2, r0
 800d8a2:	4203      	tst	r3, r0
 800d8a4:	d034      	beq.n	800d910 <__sflush_r+0xa0>
 800d8a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8a8:	89a3      	ldrh	r3, [r4, #12]
 800d8aa:	075b      	lsls	r3, r3, #29
 800d8ac:	d506      	bpl.n	800d8bc <__sflush_r+0x4c>
 800d8ae:	6863      	ldr	r3, [r4, #4]
 800d8b0:	1ac0      	subs	r0, r0, r3
 800d8b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d001      	beq.n	800d8bc <__sflush_r+0x4c>
 800d8b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8ba:	1ac0      	subs	r0, r0, r3
 800d8bc:	0002      	movs	r2, r0
 800d8be:	2300      	movs	r3, #0
 800d8c0:	0028      	movs	r0, r5
 800d8c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d8c4:	6a21      	ldr	r1, [r4, #32]
 800d8c6:	47b8      	blx	r7
 800d8c8:	89a2      	ldrh	r2, [r4, #12]
 800d8ca:	1c43      	adds	r3, r0, #1
 800d8cc:	d106      	bne.n	800d8dc <__sflush_r+0x6c>
 800d8ce:	6829      	ldr	r1, [r5, #0]
 800d8d0:	291d      	cmp	r1, #29
 800d8d2:	d82c      	bhi.n	800d92e <__sflush_r+0xbe>
 800d8d4:	4b2a      	ldr	r3, [pc, #168]	; (800d980 <__sflush_r+0x110>)
 800d8d6:	410b      	asrs	r3, r1
 800d8d8:	07db      	lsls	r3, r3, #31
 800d8da:	d428      	bmi.n	800d92e <__sflush_r+0xbe>
 800d8dc:	2300      	movs	r3, #0
 800d8de:	6063      	str	r3, [r4, #4]
 800d8e0:	6923      	ldr	r3, [r4, #16]
 800d8e2:	6023      	str	r3, [r4, #0]
 800d8e4:	04d2      	lsls	r2, r2, #19
 800d8e6:	d505      	bpl.n	800d8f4 <__sflush_r+0x84>
 800d8e8:	1c43      	adds	r3, r0, #1
 800d8ea:	d102      	bne.n	800d8f2 <__sflush_r+0x82>
 800d8ec:	682b      	ldr	r3, [r5, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d100      	bne.n	800d8f4 <__sflush_r+0x84>
 800d8f2:	6560      	str	r0, [r4, #84]	; 0x54
 800d8f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d8f6:	602e      	str	r6, [r5, #0]
 800d8f8:	2900      	cmp	r1, #0
 800d8fa:	d0c5      	beq.n	800d888 <__sflush_r+0x18>
 800d8fc:	0023      	movs	r3, r4
 800d8fe:	3344      	adds	r3, #68	; 0x44
 800d900:	4299      	cmp	r1, r3
 800d902:	d002      	beq.n	800d90a <__sflush_r+0x9a>
 800d904:	0028      	movs	r0, r5
 800d906:	f7fe f9d9 	bl	800bcbc <_free_r>
 800d90a:	2000      	movs	r0, #0
 800d90c:	6360      	str	r0, [r4, #52]	; 0x34
 800d90e:	e7bc      	b.n	800d88a <__sflush_r+0x1a>
 800d910:	2301      	movs	r3, #1
 800d912:	0028      	movs	r0, r5
 800d914:	47b8      	blx	r7
 800d916:	1c43      	adds	r3, r0, #1
 800d918:	d1c6      	bne.n	800d8a8 <__sflush_r+0x38>
 800d91a:	682b      	ldr	r3, [r5, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d0c3      	beq.n	800d8a8 <__sflush_r+0x38>
 800d920:	2b1d      	cmp	r3, #29
 800d922:	d001      	beq.n	800d928 <__sflush_r+0xb8>
 800d924:	2b16      	cmp	r3, #22
 800d926:	d101      	bne.n	800d92c <__sflush_r+0xbc>
 800d928:	602e      	str	r6, [r5, #0]
 800d92a:	e7ad      	b.n	800d888 <__sflush_r+0x18>
 800d92c:	89a2      	ldrh	r2, [r4, #12]
 800d92e:	2340      	movs	r3, #64	; 0x40
 800d930:	4313      	orrs	r3, r2
 800d932:	81a3      	strh	r3, [r4, #12]
 800d934:	e7a9      	b.n	800d88a <__sflush_r+0x1a>
 800d936:	690e      	ldr	r6, [r1, #16]
 800d938:	2e00      	cmp	r6, #0
 800d93a:	d0a5      	beq.n	800d888 <__sflush_r+0x18>
 800d93c:	680f      	ldr	r7, [r1, #0]
 800d93e:	600e      	str	r6, [r1, #0]
 800d940:	1bba      	subs	r2, r7, r6
 800d942:	9201      	str	r2, [sp, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	079b      	lsls	r3, r3, #30
 800d948:	d100      	bne.n	800d94c <__sflush_r+0xdc>
 800d94a:	694a      	ldr	r2, [r1, #20]
 800d94c:	60a2      	str	r2, [r4, #8]
 800d94e:	9b01      	ldr	r3, [sp, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	dd99      	ble.n	800d888 <__sflush_r+0x18>
 800d954:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d956:	0032      	movs	r2, r6
 800d958:	001f      	movs	r7, r3
 800d95a:	0028      	movs	r0, r5
 800d95c:	9b01      	ldr	r3, [sp, #4]
 800d95e:	6a21      	ldr	r1, [r4, #32]
 800d960:	47b8      	blx	r7
 800d962:	2800      	cmp	r0, #0
 800d964:	dc06      	bgt.n	800d974 <__sflush_r+0x104>
 800d966:	2340      	movs	r3, #64	; 0x40
 800d968:	2001      	movs	r0, #1
 800d96a:	89a2      	ldrh	r2, [r4, #12]
 800d96c:	4240      	negs	r0, r0
 800d96e:	4313      	orrs	r3, r2
 800d970:	81a3      	strh	r3, [r4, #12]
 800d972:	e78a      	b.n	800d88a <__sflush_r+0x1a>
 800d974:	9b01      	ldr	r3, [sp, #4]
 800d976:	1836      	adds	r6, r6, r0
 800d978:	1a1b      	subs	r3, r3, r0
 800d97a:	9301      	str	r3, [sp, #4]
 800d97c:	e7e7      	b.n	800d94e <__sflush_r+0xde>
 800d97e:	46c0      	nop			; (mov r8, r8)
 800d980:	dfbffffe 	.word	0xdfbffffe

0800d984 <_fflush_r>:
 800d984:	690b      	ldr	r3, [r1, #16]
 800d986:	b570      	push	{r4, r5, r6, lr}
 800d988:	0005      	movs	r5, r0
 800d98a:	000c      	movs	r4, r1
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d102      	bne.n	800d996 <_fflush_r+0x12>
 800d990:	2500      	movs	r5, #0
 800d992:	0028      	movs	r0, r5
 800d994:	bd70      	pop	{r4, r5, r6, pc}
 800d996:	2800      	cmp	r0, #0
 800d998:	d004      	beq.n	800d9a4 <_fflush_r+0x20>
 800d99a:	6a03      	ldr	r3, [r0, #32]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d101      	bne.n	800d9a4 <_fflush_r+0x20>
 800d9a0:	f7fd f9ae 	bl	800ad00 <__sinit>
 800d9a4:	220c      	movs	r2, #12
 800d9a6:	5ea3      	ldrsh	r3, [r4, r2]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d0f1      	beq.n	800d990 <_fflush_r+0xc>
 800d9ac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d9ae:	07d2      	lsls	r2, r2, #31
 800d9b0:	d404      	bmi.n	800d9bc <_fflush_r+0x38>
 800d9b2:	059b      	lsls	r3, r3, #22
 800d9b4:	d402      	bmi.n	800d9bc <_fflush_r+0x38>
 800d9b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9b8:	f7fd fac7 	bl	800af4a <__retarget_lock_acquire_recursive>
 800d9bc:	0028      	movs	r0, r5
 800d9be:	0021      	movs	r1, r4
 800d9c0:	f7ff ff56 	bl	800d870 <__sflush_r>
 800d9c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d9c6:	0005      	movs	r5, r0
 800d9c8:	07db      	lsls	r3, r3, #31
 800d9ca:	d4e2      	bmi.n	800d992 <_fflush_r+0xe>
 800d9cc:	89a3      	ldrh	r3, [r4, #12]
 800d9ce:	059b      	lsls	r3, r3, #22
 800d9d0:	d4df      	bmi.n	800d992 <_fflush_r+0xe>
 800d9d2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d9d4:	f7fd faba 	bl	800af4c <__retarget_lock_release_recursive>
 800d9d8:	e7db      	b.n	800d992 <_fflush_r+0xe>

0800d9da <memmove>:
 800d9da:	b510      	push	{r4, lr}
 800d9dc:	4288      	cmp	r0, r1
 800d9de:	d902      	bls.n	800d9e6 <memmove+0xc>
 800d9e0:	188b      	adds	r3, r1, r2
 800d9e2:	4298      	cmp	r0, r3
 800d9e4:	d303      	bcc.n	800d9ee <memmove+0x14>
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	e007      	b.n	800d9fa <memmove+0x20>
 800d9ea:	5c8b      	ldrb	r3, [r1, r2]
 800d9ec:	5483      	strb	r3, [r0, r2]
 800d9ee:	3a01      	subs	r2, #1
 800d9f0:	d2fb      	bcs.n	800d9ea <memmove+0x10>
 800d9f2:	bd10      	pop	{r4, pc}
 800d9f4:	5ccc      	ldrb	r4, [r1, r3]
 800d9f6:	54c4      	strb	r4, [r0, r3]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	429a      	cmp	r2, r3
 800d9fc:	d1fa      	bne.n	800d9f4 <memmove+0x1a>
 800d9fe:	e7f8      	b.n	800d9f2 <memmove+0x18>

0800da00 <strncmp>:
 800da00:	b530      	push	{r4, r5, lr}
 800da02:	0005      	movs	r5, r0
 800da04:	1e10      	subs	r0, r2, #0
 800da06:	d00b      	beq.n	800da20 <strncmp+0x20>
 800da08:	2400      	movs	r4, #0
 800da0a:	3a01      	subs	r2, #1
 800da0c:	5d2b      	ldrb	r3, [r5, r4]
 800da0e:	5d08      	ldrb	r0, [r1, r4]
 800da10:	4283      	cmp	r3, r0
 800da12:	d104      	bne.n	800da1e <strncmp+0x1e>
 800da14:	42a2      	cmp	r2, r4
 800da16:	d002      	beq.n	800da1e <strncmp+0x1e>
 800da18:	3401      	adds	r4, #1
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d1f6      	bne.n	800da0c <strncmp+0xc>
 800da1e:	1a18      	subs	r0, r3, r0
 800da20:	bd30      	pop	{r4, r5, pc}
	...

0800da24 <_sbrk_r>:
 800da24:	2300      	movs	r3, #0
 800da26:	b570      	push	{r4, r5, r6, lr}
 800da28:	4d06      	ldr	r5, [pc, #24]	; (800da44 <_sbrk_r+0x20>)
 800da2a:	0004      	movs	r4, r0
 800da2c:	0008      	movs	r0, r1
 800da2e:	602b      	str	r3, [r5, #0]
 800da30:	f7f4 ffe4 	bl	80029fc <_sbrk>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	d103      	bne.n	800da40 <_sbrk_r+0x1c>
 800da38:	682b      	ldr	r3, [r5, #0]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d000      	beq.n	800da40 <_sbrk_r+0x1c>
 800da3e:	6023      	str	r3, [r4, #0]
 800da40:	bd70      	pop	{r4, r5, r6, pc}
 800da42:	46c0      	nop			; (mov r8, r8)
 800da44:	20008134 	.word	0x20008134

0800da48 <nan>:
 800da48:	2000      	movs	r0, #0
 800da4a:	4901      	ldr	r1, [pc, #4]	; (800da50 <nan+0x8>)
 800da4c:	4770      	bx	lr
 800da4e:	46c0      	nop			; (mov r8, r8)
 800da50:	7ff80000 	.word	0x7ff80000

0800da54 <__assert_func>:
 800da54:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800da56:	0014      	movs	r4, r2
 800da58:	001a      	movs	r2, r3
 800da5a:	4b09      	ldr	r3, [pc, #36]	; (800da80 <__assert_func+0x2c>)
 800da5c:	0005      	movs	r5, r0
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	000e      	movs	r6, r1
 800da62:	68d8      	ldr	r0, [r3, #12]
 800da64:	4b07      	ldr	r3, [pc, #28]	; (800da84 <__assert_func+0x30>)
 800da66:	2c00      	cmp	r4, #0
 800da68:	d101      	bne.n	800da6e <__assert_func+0x1a>
 800da6a:	4b07      	ldr	r3, [pc, #28]	; (800da88 <__assert_func+0x34>)
 800da6c:	001c      	movs	r4, r3
 800da6e:	4907      	ldr	r1, [pc, #28]	; (800da8c <__assert_func+0x38>)
 800da70:	9301      	str	r3, [sp, #4]
 800da72:	9402      	str	r4, [sp, #8]
 800da74:	002b      	movs	r3, r5
 800da76:	9600      	str	r6, [sp, #0]
 800da78:	f000 fbe2 	bl	800e240 <fiprintf>
 800da7c:	f000 fbf0 	bl	800e260 <abort>
 800da80:	20000098 	.word	0x20000098
 800da84:	0800ed0a 	.word	0x0800ed0a
 800da88:	0800ed45 	.word	0x0800ed45
 800da8c:	0800ed17 	.word	0x0800ed17

0800da90 <_calloc_r>:
 800da90:	b570      	push	{r4, r5, r6, lr}
 800da92:	0c0b      	lsrs	r3, r1, #16
 800da94:	0c15      	lsrs	r5, r2, #16
 800da96:	2b00      	cmp	r3, #0
 800da98:	d11e      	bne.n	800dad8 <_calloc_r+0x48>
 800da9a:	2d00      	cmp	r5, #0
 800da9c:	d10c      	bne.n	800dab8 <_calloc_r+0x28>
 800da9e:	b289      	uxth	r1, r1
 800daa0:	b294      	uxth	r4, r2
 800daa2:	434c      	muls	r4, r1
 800daa4:	0021      	movs	r1, r4
 800daa6:	f7fe f97f 	bl	800bda8 <_malloc_r>
 800daaa:	1e05      	subs	r5, r0, #0
 800daac:	d01b      	beq.n	800dae6 <_calloc_r+0x56>
 800daae:	0022      	movs	r2, r4
 800dab0:	2100      	movs	r1, #0
 800dab2:	f7fd f9c5 	bl	800ae40 <memset>
 800dab6:	e016      	b.n	800dae6 <_calloc_r+0x56>
 800dab8:	1c2b      	adds	r3, r5, #0
 800daba:	1c0c      	adds	r4, r1, #0
 800dabc:	b289      	uxth	r1, r1
 800dabe:	b292      	uxth	r2, r2
 800dac0:	434a      	muls	r2, r1
 800dac2:	b2a1      	uxth	r1, r4
 800dac4:	b29c      	uxth	r4, r3
 800dac6:	434c      	muls	r4, r1
 800dac8:	0c13      	lsrs	r3, r2, #16
 800daca:	18e4      	adds	r4, r4, r3
 800dacc:	0c23      	lsrs	r3, r4, #16
 800dace:	d107      	bne.n	800dae0 <_calloc_r+0x50>
 800dad0:	0424      	lsls	r4, r4, #16
 800dad2:	b292      	uxth	r2, r2
 800dad4:	4314      	orrs	r4, r2
 800dad6:	e7e5      	b.n	800daa4 <_calloc_r+0x14>
 800dad8:	2d00      	cmp	r5, #0
 800dada:	d101      	bne.n	800dae0 <_calloc_r+0x50>
 800dadc:	1c14      	adds	r4, r2, #0
 800dade:	e7ed      	b.n	800dabc <_calloc_r+0x2c>
 800dae0:	230c      	movs	r3, #12
 800dae2:	2500      	movs	r5, #0
 800dae4:	6003      	str	r3, [r0, #0]
 800dae6:	0028      	movs	r0, r5
 800dae8:	bd70      	pop	{r4, r5, r6, pc}

0800daea <rshift>:
 800daea:	0002      	movs	r2, r0
 800daec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daee:	6904      	ldr	r4, [r0, #16]
 800daf0:	114b      	asrs	r3, r1, #5
 800daf2:	b085      	sub	sp, #20
 800daf4:	3214      	adds	r2, #20
 800daf6:	9302      	str	r3, [sp, #8]
 800daf8:	114d      	asrs	r5, r1, #5
 800dafa:	0013      	movs	r3, r2
 800dafc:	42ac      	cmp	r4, r5
 800dafe:	dd32      	ble.n	800db66 <rshift+0x7c>
 800db00:	261f      	movs	r6, #31
 800db02:	000f      	movs	r7, r1
 800db04:	114b      	asrs	r3, r1, #5
 800db06:	009b      	lsls	r3, r3, #2
 800db08:	00a5      	lsls	r5, r4, #2
 800db0a:	18d3      	adds	r3, r2, r3
 800db0c:	4037      	ands	r7, r6
 800db0e:	1955      	adds	r5, r2, r5
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	9701      	str	r7, [sp, #4]
 800db14:	4231      	tst	r1, r6
 800db16:	d10d      	bne.n	800db34 <rshift+0x4a>
 800db18:	0016      	movs	r6, r2
 800db1a:	0019      	movs	r1, r3
 800db1c:	428d      	cmp	r5, r1
 800db1e:	d836      	bhi.n	800db8e <rshift+0xa4>
 800db20:	9900      	ldr	r1, [sp, #0]
 800db22:	2300      	movs	r3, #0
 800db24:	3903      	subs	r1, #3
 800db26:	428d      	cmp	r5, r1
 800db28:	d302      	bcc.n	800db30 <rshift+0x46>
 800db2a:	9b02      	ldr	r3, [sp, #8]
 800db2c:	1ae4      	subs	r4, r4, r3
 800db2e:	00a3      	lsls	r3, r4, #2
 800db30:	18d3      	adds	r3, r2, r3
 800db32:	e018      	b.n	800db66 <rshift+0x7c>
 800db34:	2120      	movs	r1, #32
 800db36:	9e01      	ldr	r6, [sp, #4]
 800db38:	9f01      	ldr	r7, [sp, #4]
 800db3a:	1b89      	subs	r1, r1, r6
 800db3c:	9e00      	ldr	r6, [sp, #0]
 800db3e:	9103      	str	r1, [sp, #12]
 800db40:	ce02      	ldmia	r6!, {r1}
 800db42:	4694      	mov	ip, r2
 800db44:	40f9      	lsrs	r1, r7
 800db46:	42b5      	cmp	r5, r6
 800db48:	d816      	bhi.n	800db78 <rshift+0x8e>
 800db4a:	9e00      	ldr	r6, [sp, #0]
 800db4c:	2300      	movs	r3, #0
 800db4e:	3601      	adds	r6, #1
 800db50:	42b5      	cmp	r5, r6
 800db52:	d303      	bcc.n	800db5c <rshift+0x72>
 800db54:	9b02      	ldr	r3, [sp, #8]
 800db56:	1ae3      	subs	r3, r4, r3
 800db58:	009b      	lsls	r3, r3, #2
 800db5a:	3b04      	subs	r3, #4
 800db5c:	18d3      	adds	r3, r2, r3
 800db5e:	6019      	str	r1, [r3, #0]
 800db60:	2900      	cmp	r1, #0
 800db62:	d000      	beq.n	800db66 <rshift+0x7c>
 800db64:	3304      	adds	r3, #4
 800db66:	1a99      	subs	r1, r3, r2
 800db68:	1089      	asrs	r1, r1, #2
 800db6a:	6101      	str	r1, [r0, #16]
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d101      	bne.n	800db74 <rshift+0x8a>
 800db70:	2300      	movs	r3, #0
 800db72:	6143      	str	r3, [r0, #20]
 800db74:	b005      	add	sp, #20
 800db76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db78:	6837      	ldr	r7, [r6, #0]
 800db7a:	9b03      	ldr	r3, [sp, #12]
 800db7c:	409f      	lsls	r7, r3
 800db7e:	430f      	orrs	r7, r1
 800db80:	4661      	mov	r1, ip
 800db82:	c180      	stmia	r1!, {r7}
 800db84:	468c      	mov	ip, r1
 800db86:	9b01      	ldr	r3, [sp, #4]
 800db88:	ce02      	ldmia	r6!, {r1}
 800db8a:	40d9      	lsrs	r1, r3
 800db8c:	e7db      	b.n	800db46 <rshift+0x5c>
 800db8e:	c980      	ldmia	r1!, {r7}
 800db90:	c680      	stmia	r6!, {r7}
 800db92:	e7c3      	b.n	800db1c <rshift+0x32>

0800db94 <__hexdig_fun>:
 800db94:	0002      	movs	r2, r0
 800db96:	3a30      	subs	r2, #48	; 0x30
 800db98:	0003      	movs	r3, r0
 800db9a:	2a09      	cmp	r2, #9
 800db9c:	d802      	bhi.n	800dba4 <__hexdig_fun+0x10>
 800db9e:	3b20      	subs	r3, #32
 800dba0:	b2d8      	uxtb	r0, r3
 800dba2:	4770      	bx	lr
 800dba4:	0002      	movs	r2, r0
 800dba6:	3a61      	subs	r2, #97	; 0x61
 800dba8:	2a05      	cmp	r2, #5
 800dbaa:	d801      	bhi.n	800dbb0 <__hexdig_fun+0x1c>
 800dbac:	3b47      	subs	r3, #71	; 0x47
 800dbae:	e7f7      	b.n	800dba0 <__hexdig_fun+0xc>
 800dbb0:	001a      	movs	r2, r3
 800dbb2:	3a41      	subs	r2, #65	; 0x41
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	2a05      	cmp	r2, #5
 800dbb8:	d8f3      	bhi.n	800dba2 <__hexdig_fun+0xe>
 800dbba:	3b27      	subs	r3, #39	; 0x27
 800dbbc:	e7f0      	b.n	800dba0 <__hexdig_fun+0xc>
	...

0800dbc0 <__gethex>:
 800dbc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dbc2:	b089      	sub	sp, #36	; 0x24
 800dbc4:	9307      	str	r3, [sp, #28]
 800dbc6:	2302      	movs	r3, #2
 800dbc8:	9201      	str	r2, [sp, #4]
 800dbca:	680a      	ldr	r2, [r1, #0]
 800dbcc:	425b      	negs	r3, r3
 800dbce:	9003      	str	r0, [sp, #12]
 800dbd0:	9106      	str	r1, [sp, #24]
 800dbd2:	1c96      	adds	r6, r2, #2
 800dbd4:	1a9b      	subs	r3, r3, r2
 800dbd6:	199a      	adds	r2, r3, r6
 800dbd8:	9600      	str	r6, [sp, #0]
 800dbda:	9205      	str	r2, [sp, #20]
 800dbdc:	9a00      	ldr	r2, [sp, #0]
 800dbde:	3601      	adds	r6, #1
 800dbe0:	7810      	ldrb	r0, [r2, #0]
 800dbe2:	2830      	cmp	r0, #48	; 0x30
 800dbe4:	d0f7      	beq.n	800dbd6 <__gethex+0x16>
 800dbe6:	f7ff ffd5 	bl	800db94 <__hexdig_fun>
 800dbea:	2300      	movs	r3, #0
 800dbec:	001d      	movs	r5, r3
 800dbee:	9302      	str	r3, [sp, #8]
 800dbf0:	4298      	cmp	r0, r3
 800dbf2:	d11d      	bne.n	800dc30 <__gethex+0x70>
 800dbf4:	2201      	movs	r2, #1
 800dbf6:	49a6      	ldr	r1, [pc, #664]	; (800de90 <__gethex+0x2d0>)
 800dbf8:	9800      	ldr	r0, [sp, #0]
 800dbfa:	f7ff ff01 	bl	800da00 <strncmp>
 800dbfe:	0007      	movs	r7, r0
 800dc00:	42a8      	cmp	r0, r5
 800dc02:	d169      	bne.n	800dcd8 <__gethex+0x118>
 800dc04:	9b00      	ldr	r3, [sp, #0]
 800dc06:	0034      	movs	r4, r6
 800dc08:	7858      	ldrb	r0, [r3, #1]
 800dc0a:	f7ff ffc3 	bl	800db94 <__hexdig_fun>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	9302      	str	r3, [sp, #8]
 800dc12:	42a8      	cmp	r0, r5
 800dc14:	d02f      	beq.n	800dc76 <__gethex+0xb6>
 800dc16:	9600      	str	r6, [sp, #0]
 800dc18:	9b00      	ldr	r3, [sp, #0]
 800dc1a:	7818      	ldrb	r0, [r3, #0]
 800dc1c:	2830      	cmp	r0, #48	; 0x30
 800dc1e:	d009      	beq.n	800dc34 <__gethex+0x74>
 800dc20:	f7ff ffb8 	bl	800db94 <__hexdig_fun>
 800dc24:	4242      	negs	r2, r0
 800dc26:	4142      	adcs	r2, r0
 800dc28:	2301      	movs	r3, #1
 800dc2a:	0035      	movs	r5, r6
 800dc2c:	9202      	str	r2, [sp, #8]
 800dc2e:	9305      	str	r3, [sp, #20]
 800dc30:	9c00      	ldr	r4, [sp, #0]
 800dc32:	e004      	b.n	800dc3e <__gethex+0x7e>
 800dc34:	9b00      	ldr	r3, [sp, #0]
 800dc36:	3301      	adds	r3, #1
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	e7ed      	b.n	800dc18 <__gethex+0x58>
 800dc3c:	3401      	adds	r4, #1
 800dc3e:	7820      	ldrb	r0, [r4, #0]
 800dc40:	f7ff ffa8 	bl	800db94 <__hexdig_fun>
 800dc44:	1e07      	subs	r7, r0, #0
 800dc46:	d1f9      	bne.n	800dc3c <__gethex+0x7c>
 800dc48:	2201      	movs	r2, #1
 800dc4a:	0020      	movs	r0, r4
 800dc4c:	4990      	ldr	r1, [pc, #576]	; (800de90 <__gethex+0x2d0>)
 800dc4e:	f7ff fed7 	bl	800da00 <strncmp>
 800dc52:	2800      	cmp	r0, #0
 800dc54:	d10d      	bne.n	800dc72 <__gethex+0xb2>
 800dc56:	2d00      	cmp	r5, #0
 800dc58:	d106      	bne.n	800dc68 <__gethex+0xa8>
 800dc5a:	3401      	adds	r4, #1
 800dc5c:	0025      	movs	r5, r4
 800dc5e:	7820      	ldrb	r0, [r4, #0]
 800dc60:	f7ff ff98 	bl	800db94 <__hexdig_fun>
 800dc64:	2800      	cmp	r0, #0
 800dc66:	d102      	bne.n	800dc6e <__gethex+0xae>
 800dc68:	1b2d      	subs	r5, r5, r4
 800dc6a:	00af      	lsls	r7, r5, #2
 800dc6c:	e003      	b.n	800dc76 <__gethex+0xb6>
 800dc6e:	3401      	adds	r4, #1
 800dc70:	e7f5      	b.n	800dc5e <__gethex+0x9e>
 800dc72:	2d00      	cmp	r5, #0
 800dc74:	d1f8      	bne.n	800dc68 <__gethex+0xa8>
 800dc76:	2220      	movs	r2, #32
 800dc78:	7823      	ldrb	r3, [r4, #0]
 800dc7a:	0026      	movs	r6, r4
 800dc7c:	4393      	bics	r3, r2
 800dc7e:	2b50      	cmp	r3, #80	; 0x50
 800dc80:	d11d      	bne.n	800dcbe <__gethex+0xfe>
 800dc82:	7863      	ldrb	r3, [r4, #1]
 800dc84:	2b2b      	cmp	r3, #43	; 0x2b
 800dc86:	d02c      	beq.n	800dce2 <__gethex+0x122>
 800dc88:	2b2d      	cmp	r3, #45	; 0x2d
 800dc8a:	d02e      	beq.n	800dcea <__gethex+0x12a>
 800dc8c:	2300      	movs	r3, #0
 800dc8e:	1c66      	adds	r6, r4, #1
 800dc90:	9304      	str	r3, [sp, #16]
 800dc92:	7830      	ldrb	r0, [r6, #0]
 800dc94:	f7ff ff7e 	bl	800db94 <__hexdig_fun>
 800dc98:	1e43      	subs	r3, r0, #1
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	2b18      	cmp	r3, #24
 800dc9e:	d82b      	bhi.n	800dcf8 <__gethex+0x138>
 800dca0:	3810      	subs	r0, #16
 800dca2:	0005      	movs	r5, r0
 800dca4:	7870      	ldrb	r0, [r6, #1]
 800dca6:	f7ff ff75 	bl	800db94 <__hexdig_fun>
 800dcaa:	1e43      	subs	r3, r0, #1
 800dcac:	b2db      	uxtb	r3, r3
 800dcae:	3601      	adds	r6, #1
 800dcb0:	2b18      	cmp	r3, #24
 800dcb2:	d91c      	bls.n	800dcee <__gethex+0x12e>
 800dcb4:	9b04      	ldr	r3, [sp, #16]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d000      	beq.n	800dcbc <__gethex+0xfc>
 800dcba:	426d      	negs	r5, r5
 800dcbc:	197f      	adds	r7, r7, r5
 800dcbe:	9b06      	ldr	r3, [sp, #24]
 800dcc0:	601e      	str	r6, [r3, #0]
 800dcc2:	9b02      	ldr	r3, [sp, #8]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d019      	beq.n	800dcfc <__gethex+0x13c>
 800dcc8:	2600      	movs	r6, #0
 800dcca:	9b05      	ldr	r3, [sp, #20]
 800dccc:	42b3      	cmp	r3, r6
 800dcce:	d100      	bne.n	800dcd2 <__gethex+0x112>
 800dcd0:	3606      	adds	r6, #6
 800dcd2:	0030      	movs	r0, r6
 800dcd4:	b009      	add	sp, #36	; 0x24
 800dcd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dcd8:	2301      	movs	r3, #1
 800dcda:	2700      	movs	r7, #0
 800dcdc:	9c00      	ldr	r4, [sp, #0]
 800dcde:	9302      	str	r3, [sp, #8]
 800dce0:	e7c9      	b.n	800dc76 <__gethex+0xb6>
 800dce2:	2300      	movs	r3, #0
 800dce4:	9304      	str	r3, [sp, #16]
 800dce6:	1ca6      	adds	r6, r4, #2
 800dce8:	e7d3      	b.n	800dc92 <__gethex+0xd2>
 800dcea:	2301      	movs	r3, #1
 800dcec:	e7fa      	b.n	800dce4 <__gethex+0x124>
 800dcee:	230a      	movs	r3, #10
 800dcf0:	435d      	muls	r5, r3
 800dcf2:	182d      	adds	r5, r5, r0
 800dcf4:	3d10      	subs	r5, #16
 800dcf6:	e7d5      	b.n	800dca4 <__gethex+0xe4>
 800dcf8:	0026      	movs	r6, r4
 800dcfa:	e7e0      	b.n	800dcbe <__gethex+0xfe>
 800dcfc:	9b00      	ldr	r3, [sp, #0]
 800dcfe:	9902      	ldr	r1, [sp, #8]
 800dd00:	1ae3      	subs	r3, r4, r3
 800dd02:	3b01      	subs	r3, #1
 800dd04:	2b07      	cmp	r3, #7
 800dd06:	dc0a      	bgt.n	800dd1e <__gethex+0x15e>
 800dd08:	9803      	ldr	r0, [sp, #12]
 800dd0a:	f7fe f8df 	bl	800becc <_Balloc>
 800dd0e:	1e05      	subs	r5, r0, #0
 800dd10:	d108      	bne.n	800dd24 <__gethex+0x164>
 800dd12:	002a      	movs	r2, r5
 800dd14:	21e4      	movs	r1, #228	; 0xe4
 800dd16:	4b5f      	ldr	r3, [pc, #380]	; (800de94 <__gethex+0x2d4>)
 800dd18:	485f      	ldr	r0, [pc, #380]	; (800de98 <__gethex+0x2d8>)
 800dd1a:	f7ff fe9b 	bl	800da54 <__assert_func>
 800dd1e:	3101      	adds	r1, #1
 800dd20:	105b      	asrs	r3, r3, #1
 800dd22:	e7ef      	b.n	800dd04 <__gethex+0x144>
 800dd24:	0003      	movs	r3, r0
 800dd26:	3314      	adds	r3, #20
 800dd28:	9302      	str	r3, [sp, #8]
 800dd2a:	9305      	str	r3, [sp, #20]
 800dd2c:	2300      	movs	r3, #0
 800dd2e:	001e      	movs	r6, r3
 800dd30:	9304      	str	r3, [sp, #16]
 800dd32:	9b00      	ldr	r3, [sp, #0]
 800dd34:	42a3      	cmp	r3, r4
 800dd36:	d33f      	bcc.n	800ddb8 <__gethex+0x1f8>
 800dd38:	9c05      	ldr	r4, [sp, #20]
 800dd3a:	9b02      	ldr	r3, [sp, #8]
 800dd3c:	c440      	stmia	r4!, {r6}
 800dd3e:	1ae4      	subs	r4, r4, r3
 800dd40:	10a4      	asrs	r4, r4, #2
 800dd42:	0030      	movs	r0, r6
 800dd44:	612c      	str	r4, [r5, #16]
 800dd46:	f7fe f9b9 	bl	800c0bc <__hi0bits>
 800dd4a:	9b01      	ldr	r3, [sp, #4]
 800dd4c:	0164      	lsls	r4, r4, #5
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	1a26      	subs	r6, r4, r0
 800dd52:	9300      	str	r3, [sp, #0]
 800dd54:	429e      	cmp	r6, r3
 800dd56:	dd51      	ble.n	800ddfc <__gethex+0x23c>
 800dd58:	1af6      	subs	r6, r6, r3
 800dd5a:	0031      	movs	r1, r6
 800dd5c:	0028      	movs	r0, r5
 800dd5e:	f7fe fd4d 	bl	800c7fc <__any_on>
 800dd62:	1e04      	subs	r4, r0, #0
 800dd64:	d016      	beq.n	800dd94 <__gethex+0x1d4>
 800dd66:	2401      	movs	r4, #1
 800dd68:	231f      	movs	r3, #31
 800dd6a:	0020      	movs	r0, r4
 800dd6c:	1e72      	subs	r2, r6, #1
 800dd6e:	4013      	ands	r3, r2
 800dd70:	4098      	lsls	r0, r3
 800dd72:	0003      	movs	r3, r0
 800dd74:	1151      	asrs	r1, r2, #5
 800dd76:	9802      	ldr	r0, [sp, #8]
 800dd78:	0089      	lsls	r1, r1, #2
 800dd7a:	5809      	ldr	r1, [r1, r0]
 800dd7c:	4219      	tst	r1, r3
 800dd7e:	d009      	beq.n	800dd94 <__gethex+0x1d4>
 800dd80:	42a2      	cmp	r2, r4
 800dd82:	dd06      	ble.n	800dd92 <__gethex+0x1d2>
 800dd84:	0028      	movs	r0, r5
 800dd86:	1eb1      	subs	r1, r6, #2
 800dd88:	f7fe fd38 	bl	800c7fc <__any_on>
 800dd8c:	3402      	adds	r4, #2
 800dd8e:	2800      	cmp	r0, #0
 800dd90:	d100      	bne.n	800dd94 <__gethex+0x1d4>
 800dd92:	2402      	movs	r4, #2
 800dd94:	0031      	movs	r1, r6
 800dd96:	0028      	movs	r0, r5
 800dd98:	f7ff fea7 	bl	800daea <rshift>
 800dd9c:	19bf      	adds	r7, r7, r6
 800dd9e:	9b01      	ldr	r3, [sp, #4]
 800dda0:	689b      	ldr	r3, [r3, #8]
 800dda2:	42bb      	cmp	r3, r7
 800dda4:	da3a      	bge.n	800de1c <__gethex+0x25c>
 800dda6:	0029      	movs	r1, r5
 800dda8:	9803      	ldr	r0, [sp, #12]
 800ddaa:	f7fe f8d3 	bl	800bf54 <_Bfree>
 800ddae:	2300      	movs	r3, #0
 800ddb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ddb2:	26a3      	movs	r6, #163	; 0xa3
 800ddb4:	6013      	str	r3, [r2, #0]
 800ddb6:	e78c      	b.n	800dcd2 <__gethex+0x112>
 800ddb8:	3c01      	subs	r4, #1
 800ddba:	7823      	ldrb	r3, [r4, #0]
 800ddbc:	2b2e      	cmp	r3, #46	; 0x2e
 800ddbe:	d012      	beq.n	800dde6 <__gethex+0x226>
 800ddc0:	9b04      	ldr	r3, [sp, #16]
 800ddc2:	2b20      	cmp	r3, #32
 800ddc4:	d104      	bne.n	800ddd0 <__gethex+0x210>
 800ddc6:	9b05      	ldr	r3, [sp, #20]
 800ddc8:	c340      	stmia	r3!, {r6}
 800ddca:	2600      	movs	r6, #0
 800ddcc:	9305      	str	r3, [sp, #20]
 800ddce:	9604      	str	r6, [sp, #16]
 800ddd0:	7820      	ldrb	r0, [r4, #0]
 800ddd2:	f7ff fedf 	bl	800db94 <__hexdig_fun>
 800ddd6:	230f      	movs	r3, #15
 800ddd8:	4018      	ands	r0, r3
 800ddda:	9b04      	ldr	r3, [sp, #16]
 800dddc:	4098      	lsls	r0, r3
 800ddde:	3304      	adds	r3, #4
 800dde0:	4306      	orrs	r6, r0
 800dde2:	9304      	str	r3, [sp, #16]
 800dde4:	e7a5      	b.n	800dd32 <__gethex+0x172>
 800dde6:	9b00      	ldr	r3, [sp, #0]
 800dde8:	42a3      	cmp	r3, r4
 800ddea:	d8e9      	bhi.n	800ddc0 <__gethex+0x200>
 800ddec:	2201      	movs	r2, #1
 800ddee:	0020      	movs	r0, r4
 800ddf0:	4927      	ldr	r1, [pc, #156]	; (800de90 <__gethex+0x2d0>)
 800ddf2:	f7ff fe05 	bl	800da00 <strncmp>
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d1e2      	bne.n	800ddc0 <__gethex+0x200>
 800ddfa:	e79a      	b.n	800dd32 <__gethex+0x172>
 800ddfc:	9b00      	ldr	r3, [sp, #0]
 800ddfe:	2400      	movs	r4, #0
 800de00:	429e      	cmp	r6, r3
 800de02:	dacc      	bge.n	800dd9e <__gethex+0x1de>
 800de04:	1b9e      	subs	r6, r3, r6
 800de06:	0029      	movs	r1, r5
 800de08:	0032      	movs	r2, r6
 800de0a:	9803      	ldr	r0, [sp, #12]
 800de0c:	f7fe fac2 	bl	800c394 <__lshift>
 800de10:	0003      	movs	r3, r0
 800de12:	3314      	adds	r3, #20
 800de14:	0005      	movs	r5, r0
 800de16:	1bbf      	subs	r7, r7, r6
 800de18:	9302      	str	r3, [sp, #8]
 800de1a:	e7c0      	b.n	800dd9e <__gethex+0x1de>
 800de1c:	9b01      	ldr	r3, [sp, #4]
 800de1e:	685e      	ldr	r6, [r3, #4]
 800de20:	42be      	cmp	r6, r7
 800de22:	dd70      	ble.n	800df06 <__gethex+0x346>
 800de24:	9b00      	ldr	r3, [sp, #0]
 800de26:	1bf6      	subs	r6, r6, r7
 800de28:	42b3      	cmp	r3, r6
 800de2a:	dc37      	bgt.n	800de9c <__gethex+0x2dc>
 800de2c:	9b01      	ldr	r3, [sp, #4]
 800de2e:	68db      	ldr	r3, [r3, #12]
 800de30:	2b02      	cmp	r3, #2
 800de32:	d024      	beq.n	800de7e <__gethex+0x2be>
 800de34:	2b03      	cmp	r3, #3
 800de36:	d026      	beq.n	800de86 <__gethex+0x2c6>
 800de38:	2b01      	cmp	r3, #1
 800de3a:	d117      	bne.n	800de6c <__gethex+0x2ac>
 800de3c:	9b00      	ldr	r3, [sp, #0]
 800de3e:	42b3      	cmp	r3, r6
 800de40:	d114      	bne.n	800de6c <__gethex+0x2ac>
 800de42:	2b01      	cmp	r3, #1
 800de44:	d10b      	bne.n	800de5e <__gethex+0x29e>
 800de46:	9b01      	ldr	r3, [sp, #4]
 800de48:	9a07      	ldr	r2, [sp, #28]
 800de4a:	685b      	ldr	r3, [r3, #4]
 800de4c:	2662      	movs	r6, #98	; 0x62
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	2301      	movs	r3, #1
 800de52:	9a02      	ldr	r2, [sp, #8]
 800de54:	612b      	str	r3, [r5, #16]
 800de56:	6013      	str	r3, [r2, #0]
 800de58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de5a:	601d      	str	r5, [r3, #0]
 800de5c:	e739      	b.n	800dcd2 <__gethex+0x112>
 800de5e:	9900      	ldr	r1, [sp, #0]
 800de60:	0028      	movs	r0, r5
 800de62:	3901      	subs	r1, #1
 800de64:	f7fe fcca 	bl	800c7fc <__any_on>
 800de68:	2800      	cmp	r0, #0
 800de6a:	d1ec      	bne.n	800de46 <__gethex+0x286>
 800de6c:	0029      	movs	r1, r5
 800de6e:	9803      	ldr	r0, [sp, #12]
 800de70:	f7fe f870 	bl	800bf54 <_Bfree>
 800de74:	2300      	movs	r3, #0
 800de76:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de78:	2650      	movs	r6, #80	; 0x50
 800de7a:	6013      	str	r3, [r2, #0]
 800de7c:	e729      	b.n	800dcd2 <__gethex+0x112>
 800de7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1f3      	bne.n	800de6c <__gethex+0x2ac>
 800de84:	e7df      	b.n	800de46 <__gethex+0x286>
 800de86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d1dc      	bne.n	800de46 <__gethex+0x286>
 800de8c:	e7ee      	b.n	800de6c <__gethex+0x2ac>
 800de8e:	46c0      	nop			; (mov r8, r8)
 800de90:	0800eb9c 	.word	0x0800eb9c
 800de94:	0800ea35 	.word	0x0800ea35
 800de98:	0800ed46 	.word	0x0800ed46
 800de9c:	1e77      	subs	r7, r6, #1
 800de9e:	2c00      	cmp	r4, #0
 800dea0:	d12f      	bne.n	800df02 <__gethex+0x342>
 800dea2:	2f00      	cmp	r7, #0
 800dea4:	d004      	beq.n	800deb0 <__gethex+0x2f0>
 800dea6:	0039      	movs	r1, r7
 800dea8:	0028      	movs	r0, r5
 800deaa:	f7fe fca7 	bl	800c7fc <__any_on>
 800deae:	0004      	movs	r4, r0
 800deb0:	231f      	movs	r3, #31
 800deb2:	117a      	asrs	r2, r7, #5
 800deb4:	401f      	ands	r7, r3
 800deb6:	3b1e      	subs	r3, #30
 800deb8:	40bb      	lsls	r3, r7
 800deba:	9902      	ldr	r1, [sp, #8]
 800debc:	0092      	lsls	r2, r2, #2
 800debe:	5852      	ldr	r2, [r2, r1]
 800dec0:	421a      	tst	r2, r3
 800dec2:	d001      	beq.n	800dec8 <__gethex+0x308>
 800dec4:	2302      	movs	r3, #2
 800dec6:	431c      	orrs	r4, r3
 800dec8:	9b00      	ldr	r3, [sp, #0]
 800deca:	0031      	movs	r1, r6
 800decc:	1b9b      	subs	r3, r3, r6
 800dece:	2602      	movs	r6, #2
 800ded0:	0028      	movs	r0, r5
 800ded2:	9300      	str	r3, [sp, #0]
 800ded4:	f7ff fe09 	bl	800daea <rshift>
 800ded8:	9b01      	ldr	r3, [sp, #4]
 800deda:	685f      	ldr	r7, [r3, #4]
 800dedc:	2c00      	cmp	r4, #0
 800dede:	d041      	beq.n	800df64 <__gethex+0x3a4>
 800dee0:	9b01      	ldr	r3, [sp, #4]
 800dee2:	68db      	ldr	r3, [r3, #12]
 800dee4:	2b02      	cmp	r3, #2
 800dee6:	d010      	beq.n	800df0a <__gethex+0x34a>
 800dee8:	2b03      	cmp	r3, #3
 800deea:	d012      	beq.n	800df12 <__gethex+0x352>
 800deec:	2b01      	cmp	r3, #1
 800deee:	d106      	bne.n	800defe <__gethex+0x33e>
 800def0:	07a2      	lsls	r2, r4, #30
 800def2:	d504      	bpl.n	800defe <__gethex+0x33e>
 800def4:	9a02      	ldr	r2, [sp, #8]
 800def6:	6812      	ldr	r2, [r2, #0]
 800def8:	4314      	orrs	r4, r2
 800defa:	421c      	tst	r4, r3
 800defc:	d10c      	bne.n	800df18 <__gethex+0x358>
 800defe:	2310      	movs	r3, #16
 800df00:	e02f      	b.n	800df62 <__gethex+0x3a2>
 800df02:	2401      	movs	r4, #1
 800df04:	e7d4      	b.n	800deb0 <__gethex+0x2f0>
 800df06:	2601      	movs	r6, #1
 800df08:	e7e8      	b.n	800dedc <__gethex+0x31c>
 800df0a:	2301      	movs	r3, #1
 800df0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800df0e:	1a9b      	subs	r3, r3, r2
 800df10:	930f      	str	r3, [sp, #60]	; 0x3c
 800df12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800df14:	2b00      	cmp	r3, #0
 800df16:	d0f2      	beq.n	800defe <__gethex+0x33e>
 800df18:	692b      	ldr	r3, [r5, #16]
 800df1a:	2000      	movs	r0, #0
 800df1c:	9302      	str	r3, [sp, #8]
 800df1e:	009b      	lsls	r3, r3, #2
 800df20:	9304      	str	r3, [sp, #16]
 800df22:	002b      	movs	r3, r5
 800df24:	9a04      	ldr	r2, [sp, #16]
 800df26:	3314      	adds	r3, #20
 800df28:	1899      	adds	r1, r3, r2
 800df2a:	681a      	ldr	r2, [r3, #0]
 800df2c:	1c54      	adds	r4, r2, #1
 800df2e:	d01e      	beq.n	800df6e <__gethex+0x3ae>
 800df30:	3201      	adds	r2, #1
 800df32:	601a      	str	r2, [r3, #0]
 800df34:	002b      	movs	r3, r5
 800df36:	3314      	adds	r3, #20
 800df38:	2e02      	cmp	r6, #2
 800df3a:	d141      	bne.n	800dfc0 <__gethex+0x400>
 800df3c:	9a01      	ldr	r2, [sp, #4]
 800df3e:	9900      	ldr	r1, [sp, #0]
 800df40:	6812      	ldr	r2, [r2, #0]
 800df42:	3a01      	subs	r2, #1
 800df44:	428a      	cmp	r2, r1
 800df46:	d10b      	bne.n	800df60 <__gethex+0x3a0>
 800df48:	221f      	movs	r2, #31
 800df4a:	9800      	ldr	r0, [sp, #0]
 800df4c:	1149      	asrs	r1, r1, #5
 800df4e:	4002      	ands	r2, r0
 800df50:	2001      	movs	r0, #1
 800df52:	0004      	movs	r4, r0
 800df54:	4094      	lsls	r4, r2
 800df56:	0089      	lsls	r1, r1, #2
 800df58:	58cb      	ldr	r3, [r1, r3]
 800df5a:	4223      	tst	r3, r4
 800df5c:	d000      	beq.n	800df60 <__gethex+0x3a0>
 800df5e:	2601      	movs	r6, #1
 800df60:	2320      	movs	r3, #32
 800df62:	431e      	orrs	r6, r3
 800df64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df66:	601d      	str	r5, [r3, #0]
 800df68:	9b07      	ldr	r3, [sp, #28]
 800df6a:	601f      	str	r7, [r3, #0]
 800df6c:	e6b1      	b.n	800dcd2 <__gethex+0x112>
 800df6e:	c301      	stmia	r3!, {r0}
 800df70:	4299      	cmp	r1, r3
 800df72:	d8da      	bhi.n	800df2a <__gethex+0x36a>
 800df74:	68ab      	ldr	r3, [r5, #8]
 800df76:	9a02      	ldr	r2, [sp, #8]
 800df78:	429a      	cmp	r2, r3
 800df7a:	db18      	blt.n	800dfae <__gethex+0x3ee>
 800df7c:	6869      	ldr	r1, [r5, #4]
 800df7e:	9803      	ldr	r0, [sp, #12]
 800df80:	3101      	adds	r1, #1
 800df82:	f7fd ffa3 	bl	800becc <_Balloc>
 800df86:	1e04      	subs	r4, r0, #0
 800df88:	d104      	bne.n	800df94 <__gethex+0x3d4>
 800df8a:	0022      	movs	r2, r4
 800df8c:	2184      	movs	r1, #132	; 0x84
 800df8e:	4b1c      	ldr	r3, [pc, #112]	; (800e000 <__gethex+0x440>)
 800df90:	481c      	ldr	r0, [pc, #112]	; (800e004 <__gethex+0x444>)
 800df92:	e6c2      	b.n	800dd1a <__gethex+0x15a>
 800df94:	0029      	movs	r1, r5
 800df96:	692a      	ldr	r2, [r5, #16]
 800df98:	310c      	adds	r1, #12
 800df9a:	3202      	adds	r2, #2
 800df9c:	0092      	lsls	r2, r2, #2
 800df9e:	300c      	adds	r0, #12
 800dfa0:	f7fc ffe0 	bl	800af64 <memcpy>
 800dfa4:	0029      	movs	r1, r5
 800dfa6:	9803      	ldr	r0, [sp, #12]
 800dfa8:	f7fd ffd4 	bl	800bf54 <_Bfree>
 800dfac:	0025      	movs	r5, r4
 800dfae:	692b      	ldr	r3, [r5, #16]
 800dfb0:	1c5a      	adds	r2, r3, #1
 800dfb2:	612a      	str	r2, [r5, #16]
 800dfb4:	2201      	movs	r2, #1
 800dfb6:	3304      	adds	r3, #4
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	18eb      	adds	r3, r5, r3
 800dfbc:	605a      	str	r2, [r3, #4]
 800dfbe:	e7b9      	b.n	800df34 <__gethex+0x374>
 800dfc0:	692a      	ldr	r2, [r5, #16]
 800dfc2:	9902      	ldr	r1, [sp, #8]
 800dfc4:	428a      	cmp	r2, r1
 800dfc6:	dd09      	ble.n	800dfdc <__gethex+0x41c>
 800dfc8:	2101      	movs	r1, #1
 800dfca:	0028      	movs	r0, r5
 800dfcc:	f7ff fd8d 	bl	800daea <rshift>
 800dfd0:	9b01      	ldr	r3, [sp, #4]
 800dfd2:	3701      	adds	r7, #1
 800dfd4:	689b      	ldr	r3, [r3, #8]
 800dfd6:	42bb      	cmp	r3, r7
 800dfd8:	dac1      	bge.n	800df5e <__gethex+0x39e>
 800dfda:	e6e4      	b.n	800dda6 <__gethex+0x1e6>
 800dfdc:	221f      	movs	r2, #31
 800dfde:	9c00      	ldr	r4, [sp, #0]
 800dfe0:	9900      	ldr	r1, [sp, #0]
 800dfe2:	2601      	movs	r6, #1
 800dfe4:	4014      	ands	r4, r2
 800dfe6:	4211      	tst	r1, r2
 800dfe8:	d0ba      	beq.n	800df60 <__gethex+0x3a0>
 800dfea:	9a04      	ldr	r2, [sp, #16]
 800dfec:	189b      	adds	r3, r3, r2
 800dfee:	3b04      	subs	r3, #4
 800dff0:	6818      	ldr	r0, [r3, #0]
 800dff2:	f7fe f863 	bl	800c0bc <__hi0bits>
 800dff6:	2320      	movs	r3, #32
 800dff8:	1b1b      	subs	r3, r3, r4
 800dffa:	4298      	cmp	r0, r3
 800dffc:	dbe4      	blt.n	800dfc8 <__gethex+0x408>
 800dffe:	e7af      	b.n	800df60 <__gethex+0x3a0>
 800e000:	0800ea35 	.word	0x0800ea35
 800e004:	0800ed46 	.word	0x0800ed46

0800e008 <L_shift>:
 800e008:	2308      	movs	r3, #8
 800e00a:	b570      	push	{r4, r5, r6, lr}
 800e00c:	2520      	movs	r5, #32
 800e00e:	1a9a      	subs	r2, r3, r2
 800e010:	0092      	lsls	r2, r2, #2
 800e012:	1aad      	subs	r5, r5, r2
 800e014:	6843      	ldr	r3, [r0, #4]
 800e016:	6804      	ldr	r4, [r0, #0]
 800e018:	001e      	movs	r6, r3
 800e01a:	40ae      	lsls	r6, r5
 800e01c:	40d3      	lsrs	r3, r2
 800e01e:	4334      	orrs	r4, r6
 800e020:	6004      	str	r4, [r0, #0]
 800e022:	6043      	str	r3, [r0, #4]
 800e024:	3004      	adds	r0, #4
 800e026:	4288      	cmp	r0, r1
 800e028:	d3f4      	bcc.n	800e014 <L_shift+0xc>
 800e02a:	bd70      	pop	{r4, r5, r6, pc}

0800e02c <__match>:
 800e02c:	b530      	push	{r4, r5, lr}
 800e02e:	6803      	ldr	r3, [r0, #0]
 800e030:	780c      	ldrb	r4, [r1, #0]
 800e032:	3301      	adds	r3, #1
 800e034:	2c00      	cmp	r4, #0
 800e036:	d102      	bne.n	800e03e <__match+0x12>
 800e038:	6003      	str	r3, [r0, #0]
 800e03a:	2001      	movs	r0, #1
 800e03c:	bd30      	pop	{r4, r5, pc}
 800e03e:	781a      	ldrb	r2, [r3, #0]
 800e040:	0015      	movs	r5, r2
 800e042:	3d41      	subs	r5, #65	; 0x41
 800e044:	2d19      	cmp	r5, #25
 800e046:	d800      	bhi.n	800e04a <__match+0x1e>
 800e048:	3220      	adds	r2, #32
 800e04a:	3101      	adds	r1, #1
 800e04c:	42a2      	cmp	r2, r4
 800e04e:	d0ef      	beq.n	800e030 <__match+0x4>
 800e050:	2000      	movs	r0, #0
 800e052:	e7f3      	b.n	800e03c <__match+0x10>

0800e054 <__hexnan>:
 800e054:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e056:	680b      	ldr	r3, [r1, #0]
 800e058:	b08b      	sub	sp, #44	; 0x2c
 800e05a:	9201      	str	r2, [sp, #4]
 800e05c:	9901      	ldr	r1, [sp, #4]
 800e05e:	115a      	asrs	r2, r3, #5
 800e060:	0092      	lsls	r2, r2, #2
 800e062:	188a      	adds	r2, r1, r2
 800e064:	9202      	str	r2, [sp, #8]
 800e066:	0019      	movs	r1, r3
 800e068:	221f      	movs	r2, #31
 800e06a:	4011      	ands	r1, r2
 800e06c:	9008      	str	r0, [sp, #32]
 800e06e:	9106      	str	r1, [sp, #24]
 800e070:	4213      	tst	r3, r2
 800e072:	d002      	beq.n	800e07a <__hexnan+0x26>
 800e074:	9b02      	ldr	r3, [sp, #8]
 800e076:	3304      	adds	r3, #4
 800e078:	9302      	str	r3, [sp, #8]
 800e07a:	9b02      	ldr	r3, [sp, #8]
 800e07c:	2500      	movs	r5, #0
 800e07e:	1f1f      	subs	r7, r3, #4
 800e080:	003e      	movs	r6, r7
 800e082:	003c      	movs	r4, r7
 800e084:	9b08      	ldr	r3, [sp, #32]
 800e086:	603d      	str	r5, [r7, #0]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	9507      	str	r5, [sp, #28]
 800e08c:	9305      	str	r3, [sp, #20]
 800e08e:	9503      	str	r5, [sp, #12]
 800e090:	9b05      	ldr	r3, [sp, #20]
 800e092:	3301      	adds	r3, #1
 800e094:	9309      	str	r3, [sp, #36]	; 0x24
 800e096:	9b05      	ldr	r3, [sp, #20]
 800e098:	785b      	ldrb	r3, [r3, #1]
 800e09a:	9304      	str	r3, [sp, #16]
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d028      	beq.n	800e0f2 <__hexnan+0x9e>
 800e0a0:	9804      	ldr	r0, [sp, #16]
 800e0a2:	f7ff fd77 	bl	800db94 <__hexdig_fun>
 800e0a6:	2800      	cmp	r0, #0
 800e0a8:	d154      	bne.n	800e154 <__hexnan+0x100>
 800e0aa:	9b04      	ldr	r3, [sp, #16]
 800e0ac:	2b20      	cmp	r3, #32
 800e0ae:	d819      	bhi.n	800e0e4 <__hexnan+0x90>
 800e0b0:	9b03      	ldr	r3, [sp, #12]
 800e0b2:	9a07      	ldr	r2, [sp, #28]
 800e0b4:	4293      	cmp	r3, r2
 800e0b6:	dd12      	ble.n	800e0de <__hexnan+0x8a>
 800e0b8:	42b4      	cmp	r4, r6
 800e0ba:	d206      	bcs.n	800e0ca <__hexnan+0x76>
 800e0bc:	2d07      	cmp	r5, #7
 800e0be:	dc04      	bgt.n	800e0ca <__hexnan+0x76>
 800e0c0:	002a      	movs	r2, r5
 800e0c2:	0031      	movs	r1, r6
 800e0c4:	0020      	movs	r0, r4
 800e0c6:	f7ff ff9f 	bl	800e008 <L_shift>
 800e0ca:	9b01      	ldr	r3, [sp, #4]
 800e0cc:	2508      	movs	r5, #8
 800e0ce:	429c      	cmp	r4, r3
 800e0d0:	d905      	bls.n	800e0de <__hexnan+0x8a>
 800e0d2:	1f26      	subs	r6, r4, #4
 800e0d4:	2500      	movs	r5, #0
 800e0d6:	0034      	movs	r4, r6
 800e0d8:	9b03      	ldr	r3, [sp, #12]
 800e0da:	6035      	str	r5, [r6, #0]
 800e0dc:	9307      	str	r3, [sp, #28]
 800e0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0e0:	9305      	str	r3, [sp, #20]
 800e0e2:	e7d5      	b.n	800e090 <__hexnan+0x3c>
 800e0e4:	9b04      	ldr	r3, [sp, #16]
 800e0e6:	2b29      	cmp	r3, #41	; 0x29
 800e0e8:	d159      	bne.n	800e19e <__hexnan+0x14a>
 800e0ea:	9b05      	ldr	r3, [sp, #20]
 800e0ec:	9a08      	ldr	r2, [sp, #32]
 800e0ee:	3302      	adds	r3, #2
 800e0f0:	6013      	str	r3, [r2, #0]
 800e0f2:	9b03      	ldr	r3, [sp, #12]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d052      	beq.n	800e19e <__hexnan+0x14a>
 800e0f8:	42b4      	cmp	r4, r6
 800e0fa:	d206      	bcs.n	800e10a <__hexnan+0xb6>
 800e0fc:	2d07      	cmp	r5, #7
 800e0fe:	dc04      	bgt.n	800e10a <__hexnan+0xb6>
 800e100:	002a      	movs	r2, r5
 800e102:	0031      	movs	r1, r6
 800e104:	0020      	movs	r0, r4
 800e106:	f7ff ff7f 	bl	800e008 <L_shift>
 800e10a:	9b01      	ldr	r3, [sp, #4]
 800e10c:	429c      	cmp	r4, r3
 800e10e:	d935      	bls.n	800e17c <__hexnan+0x128>
 800e110:	001a      	movs	r2, r3
 800e112:	0023      	movs	r3, r4
 800e114:	cb02      	ldmia	r3!, {r1}
 800e116:	c202      	stmia	r2!, {r1}
 800e118:	429f      	cmp	r7, r3
 800e11a:	d2fb      	bcs.n	800e114 <__hexnan+0xc0>
 800e11c:	9b02      	ldr	r3, [sp, #8]
 800e11e:	1c62      	adds	r2, r4, #1
 800e120:	1ed9      	subs	r1, r3, #3
 800e122:	2304      	movs	r3, #4
 800e124:	4291      	cmp	r1, r2
 800e126:	d305      	bcc.n	800e134 <__hexnan+0xe0>
 800e128:	9b02      	ldr	r3, [sp, #8]
 800e12a:	3b04      	subs	r3, #4
 800e12c:	1b1b      	subs	r3, r3, r4
 800e12e:	089b      	lsrs	r3, r3, #2
 800e130:	3301      	adds	r3, #1
 800e132:	009b      	lsls	r3, r3, #2
 800e134:	9a01      	ldr	r2, [sp, #4]
 800e136:	18d3      	adds	r3, r2, r3
 800e138:	2200      	movs	r2, #0
 800e13a:	c304      	stmia	r3!, {r2}
 800e13c:	429f      	cmp	r7, r3
 800e13e:	d2fc      	bcs.n	800e13a <__hexnan+0xe6>
 800e140:	683b      	ldr	r3, [r7, #0]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d104      	bne.n	800e150 <__hexnan+0xfc>
 800e146:	9b01      	ldr	r3, [sp, #4]
 800e148:	429f      	cmp	r7, r3
 800e14a:	d126      	bne.n	800e19a <__hexnan+0x146>
 800e14c:	2301      	movs	r3, #1
 800e14e:	603b      	str	r3, [r7, #0]
 800e150:	2005      	movs	r0, #5
 800e152:	e025      	b.n	800e1a0 <__hexnan+0x14c>
 800e154:	9b03      	ldr	r3, [sp, #12]
 800e156:	3501      	adds	r5, #1
 800e158:	3301      	adds	r3, #1
 800e15a:	9303      	str	r3, [sp, #12]
 800e15c:	2d08      	cmp	r5, #8
 800e15e:	dd06      	ble.n	800e16e <__hexnan+0x11a>
 800e160:	9b01      	ldr	r3, [sp, #4]
 800e162:	429c      	cmp	r4, r3
 800e164:	d9bb      	bls.n	800e0de <__hexnan+0x8a>
 800e166:	2300      	movs	r3, #0
 800e168:	2501      	movs	r5, #1
 800e16a:	3c04      	subs	r4, #4
 800e16c:	6023      	str	r3, [r4, #0]
 800e16e:	220f      	movs	r2, #15
 800e170:	6823      	ldr	r3, [r4, #0]
 800e172:	4010      	ands	r0, r2
 800e174:	011b      	lsls	r3, r3, #4
 800e176:	4303      	orrs	r3, r0
 800e178:	6023      	str	r3, [r4, #0]
 800e17a:	e7b0      	b.n	800e0de <__hexnan+0x8a>
 800e17c:	9b06      	ldr	r3, [sp, #24]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d0de      	beq.n	800e140 <__hexnan+0xec>
 800e182:	2320      	movs	r3, #32
 800e184:	9a06      	ldr	r2, [sp, #24]
 800e186:	9902      	ldr	r1, [sp, #8]
 800e188:	1a9b      	subs	r3, r3, r2
 800e18a:	2201      	movs	r2, #1
 800e18c:	4252      	negs	r2, r2
 800e18e:	40da      	lsrs	r2, r3
 800e190:	3904      	subs	r1, #4
 800e192:	680b      	ldr	r3, [r1, #0]
 800e194:	4013      	ands	r3, r2
 800e196:	600b      	str	r3, [r1, #0]
 800e198:	e7d2      	b.n	800e140 <__hexnan+0xec>
 800e19a:	3f04      	subs	r7, #4
 800e19c:	e7d0      	b.n	800e140 <__hexnan+0xec>
 800e19e:	2004      	movs	r0, #4
 800e1a0:	b00b      	add	sp, #44	; 0x2c
 800e1a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e1a4 <__ascii_mbtowc>:
 800e1a4:	b082      	sub	sp, #8
 800e1a6:	2900      	cmp	r1, #0
 800e1a8:	d100      	bne.n	800e1ac <__ascii_mbtowc+0x8>
 800e1aa:	a901      	add	r1, sp, #4
 800e1ac:	1e10      	subs	r0, r2, #0
 800e1ae:	d006      	beq.n	800e1be <__ascii_mbtowc+0x1a>
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d006      	beq.n	800e1c2 <__ascii_mbtowc+0x1e>
 800e1b4:	7813      	ldrb	r3, [r2, #0]
 800e1b6:	600b      	str	r3, [r1, #0]
 800e1b8:	7810      	ldrb	r0, [r2, #0]
 800e1ba:	1e43      	subs	r3, r0, #1
 800e1bc:	4198      	sbcs	r0, r3
 800e1be:	b002      	add	sp, #8
 800e1c0:	4770      	bx	lr
 800e1c2:	2002      	movs	r0, #2
 800e1c4:	4240      	negs	r0, r0
 800e1c6:	e7fa      	b.n	800e1be <__ascii_mbtowc+0x1a>

0800e1c8 <_realloc_r>:
 800e1c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1ca:	0007      	movs	r7, r0
 800e1cc:	000e      	movs	r6, r1
 800e1ce:	0014      	movs	r4, r2
 800e1d0:	2900      	cmp	r1, #0
 800e1d2:	d105      	bne.n	800e1e0 <_realloc_r+0x18>
 800e1d4:	0011      	movs	r1, r2
 800e1d6:	f7fd fde7 	bl	800bda8 <_malloc_r>
 800e1da:	0005      	movs	r5, r0
 800e1dc:	0028      	movs	r0, r5
 800e1de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e1e0:	2a00      	cmp	r2, #0
 800e1e2:	d103      	bne.n	800e1ec <_realloc_r+0x24>
 800e1e4:	f7fd fd6a 	bl	800bcbc <_free_r>
 800e1e8:	0025      	movs	r5, r4
 800e1ea:	e7f7      	b.n	800e1dc <_realloc_r+0x14>
 800e1ec:	f000 f83f 	bl	800e26e <_malloc_usable_size_r>
 800e1f0:	9001      	str	r0, [sp, #4]
 800e1f2:	4284      	cmp	r4, r0
 800e1f4:	d803      	bhi.n	800e1fe <_realloc_r+0x36>
 800e1f6:	0035      	movs	r5, r6
 800e1f8:	0843      	lsrs	r3, r0, #1
 800e1fa:	42a3      	cmp	r3, r4
 800e1fc:	d3ee      	bcc.n	800e1dc <_realloc_r+0x14>
 800e1fe:	0021      	movs	r1, r4
 800e200:	0038      	movs	r0, r7
 800e202:	f7fd fdd1 	bl	800bda8 <_malloc_r>
 800e206:	1e05      	subs	r5, r0, #0
 800e208:	d0e8      	beq.n	800e1dc <_realloc_r+0x14>
 800e20a:	9b01      	ldr	r3, [sp, #4]
 800e20c:	0022      	movs	r2, r4
 800e20e:	429c      	cmp	r4, r3
 800e210:	d900      	bls.n	800e214 <_realloc_r+0x4c>
 800e212:	001a      	movs	r2, r3
 800e214:	0031      	movs	r1, r6
 800e216:	0028      	movs	r0, r5
 800e218:	f7fc fea4 	bl	800af64 <memcpy>
 800e21c:	0031      	movs	r1, r6
 800e21e:	0038      	movs	r0, r7
 800e220:	f7fd fd4c 	bl	800bcbc <_free_r>
 800e224:	e7da      	b.n	800e1dc <_realloc_r+0x14>

0800e226 <__ascii_wctomb>:
 800e226:	0003      	movs	r3, r0
 800e228:	1e08      	subs	r0, r1, #0
 800e22a:	d005      	beq.n	800e238 <__ascii_wctomb+0x12>
 800e22c:	2aff      	cmp	r2, #255	; 0xff
 800e22e:	d904      	bls.n	800e23a <__ascii_wctomb+0x14>
 800e230:	228a      	movs	r2, #138	; 0x8a
 800e232:	2001      	movs	r0, #1
 800e234:	601a      	str	r2, [r3, #0]
 800e236:	4240      	negs	r0, r0
 800e238:	4770      	bx	lr
 800e23a:	2001      	movs	r0, #1
 800e23c:	700a      	strb	r2, [r1, #0]
 800e23e:	e7fb      	b.n	800e238 <__ascii_wctomb+0x12>

0800e240 <fiprintf>:
 800e240:	b40e      	push	{r1, r2, r3}
 800e242:	b517      	push	{r0, r1, r2, r4, lr}
 800e244:	4c05      	ldr	r4, [pc, #20]	; (800e25c <fiprintf+0x1c>)
 800e246:	ab05      	add	r3, sp, #20
 800e248:	cb04      	ldmia	r3!, {r2}
 800e24a:	0001      	movs	r1, r0
 800e24c:	6820      	ldr	r0, [r4, #0]
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	f000 f83c 	bl	800e2cc <_vfiprintf_r>
 800e254:	bc1e      	pop	{r1, r2, r3, r4}
 800e256:	bc08      	pop	{r3}
 800e258:	b003      	add	sp, #12
 800e25a:	4718      	bx	r3
 800e25c:	20000098 	.word	0x20000098

0800e260 <abort>:
 800e260:	2006      	movs	r0, #6
 800e262:	b510      	push	{r4, lr}
 800e264:	f000 fa1e 	bl	800e6a4 <raise>
 800e268:	2001      	movs	r0, #1
 800e26a:	f7f4 fb55 	bl	8002918 <_exit>

0800e26e <_malloc_usable_size_r>:
 800e26e:	1f0b      	subs	r3, r1, #4
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	1f18      	subs	r0, r3, #4
 800e274:	2b00      	cmp	r3, #0
 800e276:	da01      	bge.n	800e27c <_malloc_usable_size_r+0xe>
 800e278:	580b      	ldr	r3, [r1, r0]
 800e27a:	18c0      	adds	r0, r0, r3
 800e27c:	4770      	bx	lr

0800e27e <__sfputc_r>:
 800e27e:	6893      	ldr	r3, [r2, #8]
 800e280:	b510      	push	{r4, lr}
 800e282:	3b01      	subs	r3, #1
 800e284:	6093      	str	r3, [r2, #8]
 800e286:	2b00      	cmp	r3, #0
 800e288:	da04      	bge.n	800e294 <__sfputc_r+0x16>
 800e28a:	6994      	ldr	r4, [r2, #24]
 800e28c:	42a3      	cmp	r3, r4
 800e28e:	db07      	blt.n	800e2a0 <__sfputc_r+0x22>
 800e290:	290a      	cmp	r1, #10
 800e292:	d005      	beq.n	800e2a0 <__sfputc_r+0x22>
 800e294:	6813      	ldr	r3, [r2, #0]
 800e296:	1c58      	adds	r0, r3, #1
 800e298:	6010      	str	r0, [r2, #0]
 800e29a:	7019      	strb	r1, [r3, #0]
 800e29c:	0008      	movs	r0, r1
 800e29e:	bd10      	pop	{r4, pc}
 800e2a0:	f000 f930 	bl	800e504 <__swbuf_r>
 800e2a4:	0001      	movs	r1, r0
 800e2a6:	e7f9      	b.n	800e29c <__sfputc_r+0x1e>

0800e2a8 <__sfputs_r>:
 800e2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2aa:	0006      	movs	r6, r0
 800e2ac:	000f      	movs	r7, r1
 800e2ae:	0014      	movs	r4, r2
 800e2b0:	18d5      	adds	r5, r2, r3
 800e2b2:	42ac      	cmp	r4, r5
 800e2b4:	d101      	bne.n	800e2ba <__sfputs_r+0x12>
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	e007      	b.n	800e2ca <__sfputs_r+0x22>
 800e2ba:	7821      	ldrb	r1, [r4, #0]
 800e2bc:	003a      	movs	r2, r7
 800e2be:	0030      	movs	r0, r6
 800e2c0:	f7ff ffdd 	bl	800e27e <__sfputc_r>
 800e2c4:	3401      	adds	r4, #1
 800e2c6:	1c43      	adds	r3, r0, #1
 800e2c8:	d1f3      	bne.n	800e2b2 <__sfputs_r+0xa>
 800e2ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e2cc <_vfiprintf_r>:
 800e2cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e2ce:	b0a1      	sub	sp, #132	; 0x84
 800e2d0:	000f      	movs	r7, r1
 800e2d2:	0015      	movs	r5, r2
 800e2d4:	001e      	movs	r6, r3
 800e2d6:	9003      	str	r0, [sp, #12]
 800e2d8:	2800      	cmp	r0, #0
 800e2da:	d004      	beq.n	800e2e6 <_vfiprintf_r+0x1a>
 800e2dc:	6a03      	ldr	r3, [r0, #32]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d101      	bne.n	800e2e6 <_vfiprintf_r+0x1a>
 800e2e2:	f7fc fd0d 	bl	800ad00 <__sinit>
 800e2e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2e8:	07db      	lsls	r3, r3, #31
 800e2ea:	d405      	bmi.n	800e2f8 <_vfiprintf_r+0x2c>
 800e2ec:	89bb      	ldrh	r3, [r7, #12]
 800e2ee:	059b      	lsls	r3, r3, #22
 800e2f0:	d402      	bmi.n	800e2f8 <_vfiprintf_r+0x2c>
 800e2f2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e2f4:	f7fc fe29 	bl	800af4a <__retarget_lock_acquire_recursive>
 800e2f8:	89bb      	ldrh	r3, [r7, #12]
 800e2fa:	071b      	lsls	r3, r3, #28
 800e2fc:	d502      	bpl.n	800e304 <_vfiprintf_r+0x38>
 800e2fe:	693b      	ldr	r3, [r7, #16]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d113      	bne.n	800e32c <_vfiprintf_r+0x60>
 800e304:	0039      	movs	r1, r7
 800e306:	9803      	ldr	r0, [sp, #12]
 800e308:	f000 f93e 	bl	800e588 <__swsetup_r>
 800e30c:	2800      	cmp	r0, #0
 800e30e:	d00d      	beq.n	800e32c <_vfiprintf_r+0x60>
 800e310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e312:	07db      	lsls	r3, r3, #31
 800e314:	d503      	bpl.n	800e31e <_vfiprintf_r+0x52>
 800e316:	2001      	movs	r0, #1
 800e318:	4240      	negs	r0, r0
 800e31a:	b021      	add	sp, #132	; 0x84
 800e31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e31e:	89bb      	ldrh	r3, [r7, #12]
 800e320:	059b      	lsls	r3, r3, #22
 800e322:	d4f8      	bmi.n	800e316 <_vfiprintf_r+0x4a>
 800e324:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e326:	f7fc fe11 	bl	800af4c <__retarget_lock_release_recursive>
 800e32a:	e7f4      	b.n	800e316 <_vfiprintf_r+0x4a>
 800e32c:	2300      	movs	r3, #0
 800e32e:	ac08      	add	r4, sp, #32
 800e330:	6163      	str	r3, [r4, #20]
 800e332:	3320      	adds	r3, #32
 800e334:	7663      	strb	r3, [r4, #25]
 800e336:	3310      	adds	r3, #16
 800e338:	76a3      	strb	r3, [r4, #26]
 800e33a:	9607      	str	r6, [sp, #28]
 800e33c:	002e      	movs	r6, r5
 800e33e:	7833      	ldrb	r3, [r6, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d001      	beq.n	800e348 <_vfiprintf_r+0x7c>
 800e344:	2b25      	cmp	r3, #37	; 0x25
 800e346:	d148      	bne.n	800e3da <_vfiprintf_r+0x10e>
 800e348:	1b73      	subs	r3, r6, r5
 800e34a:	9305      	str	r3, [sp, #20]
 800e34c:	42ae      	cmp	r6, r5
 800e34e:	d00b      	beq.n	800e368 <_vfiprintf_r+0x9c>
 800e350:	002a      	movs	r2, r5
 800e352:	0039      	movs	r1, r7
 800e354:	9803      	ldr	r0, [sp, #12]
 800e356:	f7ff ffa7 	bl	800e2a8 <__sfputs_r>
 800e35a:	3001      	adds	r0, #1
 800e35c:	d100      	bne.n	800e360 <_vfiprintf_r+0x94>
 800e35e:	e0af      	b.n	800e4c0 <_vfiprintf_r+0x1f4>
 800e360:	6963      	ldr	r3, [r4, #20]
 800e362:	9a05      	ldr	r2, [sp, #20]
 800e364:	189b      	adds	r3, r3, r2
 800e366:	6163      	str	r3, [r4, #20]
 800e368:	7833      	ldrb	r3, [r6, #0]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d100      	bne.n	800e370 <_vfiprintf_r+0xa4>
 800e36e:	e0a7      	b.n	800e4c0 <_vfiprintf_r+0x1f4>
 800e370:	2201      	movs	r2, #1
 800e372:	2300      	movs	r3, #0
 800e374:	4252      	negs	r2, r2
 800e376:	6062      	str	r2, [r4, #4]
 800e378:	a904      	add	r1, sp, #16
 800e37a:	3254      	adds	r2, #84	; 0x54
 800e37c:	1852      	adds	r2, r2, r1
 800e37e:	1c75      	adds	r5, r6, #1
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	60e3      	str	r3, [r4, #12]
 800e384:	60a3      	str	r3, [r4, #8]
 800e386:	7013      	strb	r3, [r2, #0]
 800e388:	65a3      	str	r3, [r4, #88]	; 0x58
 800e38a:	4b59      	ldr	r3, [pc, #356]	; (800e4f0 <_vfiprintf_r+0x224>)
 800e38c:	2205      	movs	r2, #5
 800e38e:	0018      	movs	r0, r3
 800e390:	7829      	ldrb	r1, [r5, #0]
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	f7fc fddb 	bl	800af4e <memchr>
 800e398:	1c6e      	adds	r6, r5, #1
 800e39a:	2800      	cmp	r0, #0
 800e39c:	d11f      	bne.n	800e3de <_vfiprintf_r+0x112>
 800e39e:	6822      	ldr	r2, [r4, #0]
 800e3a0:	06d3      	lsls	r3, r2, #27
 800e3a2:	d504      	bpl.n	800e3ae <_vfiprintf_r+0xe2>
 800e3a4:	2353      	movs	r3, #83	; 0x53
 800e3a6:	a904      	add	r1, sp, #16
 800e3a8:	185b      	adds	r3, r3, r1
 800e3aa:	2120      	movs	r1, #32
 800e3ac:	7019      	strb	r1, [r3, #0]
 800e3ae:	0713      	lsls	r3, r2, #28
 800e3b0:	d504      	bpl.n	800e3bc <_vfiprintf_r+0xf0>
 800e3b2:	2353      	movs	r3, #83	; 0x53
 800e3b4:	a904      	add	r1, sp, #16
 800e3b6:	185b      	adds	r3, r3, r1
 800e3b8:	212b      	movs	r1, #43	; 0x2b
 800e3ba:	7019      	strb	r1, [r3, #0]
 800e3bc:	782b      	ldrb	r3, [r5, #0]
 800e3be:	2b2a      	cmp	r3, #42	; 0x2a
 800e3c0:	d016      	beq.n	800e3f0 <_vfiprintf_r+0x124>
 800e3c2:	002e      	movs	r6, r5
 800e3c4:	2100      	movs	r1, #0
 800e3c6:	200a      	movs	r0, #10
 800e3c8:	68e3      	ldr	r3, [r4, #12]
 800e3ca:	7832      	ldrb	r2, [r6, #0]
 800e3cc:	1c75      	adds	r5, r6, #1
 800e3ce:	3a30      	subs	r2, #48	; 0x30
 800e3d0:	2a09      	cmp	r2, #9
 800e3d2:	d94e      	bls.n	800e472 <_vfiprintf_r+0x1a6>
 800e3d4:	2900      	cmp	r1, #0
 800e3d6:	d111      	bne.n	800e3fc <_vfiprintf_r+0x130>
 800e3d8:	e017      	b.n	800e40a <_vfiprintf_r+0x13e>
 800e3da:	3601      	adds	r6, #1
 800e3dc:	e7af      	b.n	800e33e <_vfiprintf_r+0x72>
 800e3de:	9b05      	ldr	r3, [sp, #20]
 800e3e0:	6822      	ldr	r2, [r4, #0]
 800e3e2:	1ac0      	subs	r0, r0, r3
 800e3e4:	2301      	movs	r3, #1
 800e3e6:	4083      	lsls	r3, r0
 800e3e8:	4313      	orrs	r3, r2
 800e3ea:	0035      	movs	r5, r6
 800e3ec:	6023      	str	r3, [r4, #0]
 800e3ee:	e7cc      	b.n	800e38a <_vfiprintf_r+0xbe>
 800e3f0:	9b07      	ldr	r3, [sp, #28]
 800e3f2:	1d19      	adds	r1, r3, #4
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	9107      	str	r1, [sp, #28]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	db01      	blt.n	800e400 <_vfiprintf_r+0x134>
 800e3fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3fe:	e004      	b.n	800e40a <_vfiprintf_r+0x13e>
 800e400:	425b      	negs	r3, r3
 800e402:	60e3      	str	r3, [r4, #12]
 800e404:	2302      	movs	r3, #2
 800e406:	4313      	orrs	r3, r2
 800e408:	6023      	str	r3, [r4, #0]
 800e40a:	7833      	ldrb	r3, [r6, #0]
 800e40c:	2b2e      	cmp	r3, #46	; 0x2e
 800e40e:	d10a      	bne.n	800e426 <_vfiprintf_r+0x15a>
 800e410:	7873      	ldrb	r3, [r6, #1]
 800e412:	2b2a      	cmp	r3, #42	; 0x2a
 800e414:	d135      	bne.n	800e482 <_vfiprintf_r+0x1b6>
 800e416:	9b07      	ldr	r3, [sp, #28]
 800e418:	3602      	adds	r6, #2
 800e41a:	1d1a      	adds	r2, r3, #4
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	9207      	str	r2, [sp, #28]
 800e420:	2b00      	cmp	r3, #0
 800e422:	db2b      	blt.n	800e47c <_vfiprintf_r+0x1b0>
 800e424:	9309      	str	r3, [sp, #36]	; 0x24
 800e426:	4d33      	ldr	r5, [pc, #204]	; (800e4f4 <_vfiprintf_r+0x228>)
 800e428:	2203      	movs	r2, #3
 800e42a:	0028      	movs	r0, r5
 800e42c:	7831      	ldrb	r1, [r6, #0]
 800e42e:	f7fc fd8e 	bl	800af4e <memchr>
 800e432:	2800      	cmp	r0, #0
 800e434:	d006      	beq.n	800e444 <_vfiprintf_r+0x178>
 800e436:	2340      	movs	r3, #64	; 0x40
 800e438:	1b40      	subs	r0, r0, r5
 800e43a:	4083      	lsls	r3, r0
 800e43c:	6822      	ldr	r2, [r4, #0]
 800e43e:	3601      	adds	r6, #1
 800e440:	4313      	orrs	r3, r2
 800e442:	6023      	str	r3, [r4, #0]
 800e444:	7831      	ldrb	r1, [r6, #0]
 800e446:	2206      	movs	r2, #6
 800e448:	482b      	ldr	r0, [pc, #172]	; (800e4f8 <_vfiprintf_r+0x22c>)
 800e44a:	1c75      	adds	r5, r6, #1
 800e44c:	7621      	strb	r1, [r4, #24]
 800e44e:	f7fc fd7e 	bl	800af4e <memchr>
 800e452:	2800      	cmp	r0, #0
 800e454:	d043      	beq.n	800e4de <_vfiprintf_r+0x212>
 800e456:	4b29      	ldr	r3, [pc, #164]	; (800e4fc <_vfiprintf_r+0x230>)
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d125      	bne.n	800e4a8 <_vfiprintf_r+0x1dc>
 800e45c:	2207      	movs	r2, #7
 800e45e:	9b07      	ldr	r3, [sp, #28]
 800e460:	3307      	adds	r3, #7
 800e462:	4393      	bics	r3, r2
 800e464:	3308      	adds	r3, #8
 800e466:	9307      	str	r3, [sp, #28]
 800e468:	6963      	ldr	r3, [r4, #20]
 800e46a:	9a04      	ldr	r2, [sp, #16]
 800e46c:	189b      	adds	r3, r3, r2
 800e46e:	6163      	str	r3, [r4, #20]
 800e470:	e764      	b.n	800e33c <_vfiprintf_r+0x70>
 800e472:	4343      	muls	r3, r0
 800e474:	002e      	movs	r6, r5
 800e476:	2101      	movs	r1, #1
 800e478:	189b      	adds	r3, r3, r2
 800e47a:	e7a6      	b.n	800e3ca <_vfiprintf_r+0xfe>
 800e47c:	2301      	movs	r3, #1
 800e47e:	425b      	negs	r3, r3
 800e480:	e7d0      	b.n	800e424 <_vfiprintf_r+0x158>
 800e482:	2300      	movs	r3, #0
 800e484:	200a      	movs	r0, #10
 800e486:	001a      	movs	r2, r3
 800e488:	3601      	adds	r6, #1
 800e48a:	6063      	str	r3, [r4, #4]
 800e48c:	7831      	ldrb	r1, [r6, #0]
 800e48e:	1c75      	adds	r5, r6, #1
 800e490:	3930      	subs	r1, #48	; 0x30
 800e492:	2909      	cmp	r1, #9
 800e494:	d903      	bls.n	800e49e <_vfiprintf_r+0x1d2>
 800e496:	2b00      	cmp	r3, #0
 800e498:	d0c5      	beq.n	800e426 <_vfiprintf_r+0x15a>
 800e49a:	9209      	str	r2, [sp, #36]	; 0x24
 800e49c:	e7c3      	b.n	800e426 <_vfiprintf_r+0x15a>
 800e49e:	4342      	muls	r2, r0
 800e4a0:	002e      	movs	r6, r5
 800e4a2:	2301      	movs	r3, #1
 800e4a4:	1852      	adds	r2, r2, r1
 800e4a6:	e7f1      	b.n	800e48c <_vfiprintf_r+0x1c0>
 800e4a8:	aa07      	add	r2, sp, #28
 800e4aa:	9200      	str	r2, [sp, #0]
 800e4ac:	0021      	movs	r1, r4
 800e4ae:	003a      	movs	r2, r7
 800e4b0:	4b13      	ldr	r3, [pc, #76]	; (800e500 <_vfiprintf_r+0x234>)
 800e4b2:	9803      	ldr	r0, [sp, #12]
 800e4b4:	f7fb fdb6 	bl	800a024 <_printf_float>
 800e4b8:	9004      	str	r0, [sp, #16]
 800e4ba:	9b04      	ldr	r3, [sp, #16]
 800e4bc:	3301      	adds	r3, #1
 800e4be:	d1d3      	bne.n	800e468 <_vfiprintf_r+0x19c>
 800e4c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e4c2:	07db      	lsls	r3, r3, #31
 800e4c4:	d405      	bmi.n	800e4d2 <_vfiprintf_r+0x206>
 800e4c6:	89bb      	ldrh	r3, [r7, #12]
 800e4c8:	059b      	lsls	r3, r3, #22
 800e4ca:	d402      	bmi.n	800e4d2 <_vfiprintf_r+0x206>
 800e4cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800e4ce:	f7fc fd3d 	bl	800af4c <__retarget_lock_release_recursive>
 800e4d2:	89bb      	ldrh	r3, [r7, #12]
 800e4d4:	065b      	lsls	r3, r3, #25
 800e4d6:	d500      	bpl.n	800e4da <_vfiprintf_r+0x20e>
 800e4d8:	e71d      	b.n	800e316 <_vfiprintf_r+0x4a>
 800e4da:	980d      	ldr	r0, [sp, #52]	; 0x34
 800e4dc:	e71d      	b.n	800e31a <_vfiprintf_r+0x4e>
 800e4de:	aa07      	add	r2, sp, #28
 800e4e0:	9200      	str	r2, [sp, #0]
 800e4e2:	0021      	movs	r1, r4
 800e4e4:	003a      	movs	r2, r7
 800e4e6:	4b06      	ldr	r3, [pc, #24]	; (800e500 <_vfiprintf_r+0x234>)
 800e4e8:	9803      	ldr	r0, [sp, #12]
 800e4ea:	f7fc f861 	bl	800a5b0 <_printf_i>
 800e4ee:	e7e3      	b.n	800e4b8 <_vfiprintf_r+0x1ec>
 800e4f0:	0800ecf1 	.word	0x0800ecf1
 800e4f4:	0800ecf7 	.word	0x0800ecf7
 800e4f8:	0800ecfb 	.word	0x0800ecfb
 800e4fc:	0800a025 	.word	0x0800a025
 800e500:	0800e2a9 	.word	0x0800e2a9

0800e504 <__swbuf_r>:
 800e504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e506:	0006      	movs	r6, r0
 800e508:	000d      	movs	r5, r1
 800e50a:	0014      	movs	r4, r2
 800e50c:	2800      	cmp	r0, #0
 800e50e:	d004      	beq.n	800e51a <__swbuf_r+0x16>
 800e510:	6a03      	ldr	r3, [r0, #32]
 800e512:	2b00      	cmp	r3, #0
 800e514:	d101      	bne.n	800e51a <__swbuf_r+0x16>
 800e516:	f7fc fbf3 	bl	800ad00 <__sinit>
 800e51a:	69a3      	ldr	r3, [r4, #24]
 800e51c:	60a3      	str	r3, [r4, #8]
 800e51e:	89a3      	ldrh	r3, [r4, #12]
 800e520:	071b      	lsls	r3, r3, #28
 800e522:	d528      	bpl.n	800e576 <__swbuf_r+0x72>
 800e524:	6923      	ldr	r3, [r4, #16]
 800e526:	2b00      	cmp	r3, #0
 800e528:	d025      	beq.n	800e576 <__swbuf_r+0x72>
 800e52a:	6923      	ldr	r3, [r4, #16]
 800e52c:	6820      	ldr	r0, [r4, #0]
 800e52e:	b2ef      	uxtb	r7, r5
 800e530:	1ac0      	subs	r0, r0, r3
 800e532:	6963      	ldr	r3, [r4, #20]
 800e534:	b2ed      	uxtb	r5, r5
 800e536:	4283      	cmp	r3, r0
 800e538:	dc05      	bgt.n	800e546 <__swbuf_r+0x42>
 800e53a:	0021      	movs	r1, r4
 800e53c:	0030      	movs	r0, r6
 800e53e:	f7ff fa21 	bl	800d984 <_fflush_r>
 800e542:	2800      	cmp	r0, #0
 800e544:	d11d      	bne.n	800e582 <__swbuf_r+0x7e>
 800e546:	68a3      	ldr	r3, [r4, #8]
 800e548:	3001      	adds	r0, #1
 800e54a:	3b01      	subs	r3, #1
 800e54c:	60a3      	str	r3, [r4, #8]
 800e54e:	6823      	ldr	r3, [r4, #0]
 800e550:	1c5a      	adds	r2, r3, #1
 800e552:	6022      	str	r2, [r4, #0]
 800e554:	701f      	strb	r7, [r3, #0]
 800e556:	6963      	ldr	r3, [r4, #20]
 800e558:	4283      	cmp	r3, r0
 800e55a:	d004      	beq.n	800e566 <__swbuf_r+0x62>
 800e55c:	89a3      	ldrh	r3, [r4, #12]
 800e55e:	07db      	lsls	r3, r3, #31
 800e560:	d507      	bpl.n	800e572 <__swbuf_r+0x6e>
 800e562:	2d0a      	cmp	r5, #10
 800e564:	d105      	bne.n	800e572 <__swbuf_r+0x6e>
 800e566:	0021      	movs	r1, r4
 800e568:	0030      	movs	r0, r6
 800e56a:	f7ff fa0b 	bl	800d984 <_fflush_r>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d107      	bne.n	800e582 <__swbuf_r+0x7e>
 800e572:	0028      	movs	r0, r5
 800e574:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e576:	0021      	movs	r1, r4
 800e578:	0030      	movs	r0, r6
 800e57a:	f000 f805 	bl	800e588 <__swsetup_r>
 800e57e:	2800      	cmp	r0, #0
 800e580:	d0d3      	beq.n	800e52a <__swbuf_r+0x26>
 800e582:	2501      	movs	r5, #1
 800e584:	426d      	negs	r5, r5
 800e586:	e7f4      	b.n	800e572 <__swbuf_r+0x6e>

0800e588 <__swsetup_r>:
 800e588:	4b30      	ldr	r3, [pc, #192]	; (800e64c <__swsetup_r+0xc4>)
 800e58a:	b570      	push	{r4, r5, r6, lr}
 800e58c:	0005      	movs	r5, r0
 800e58e:	6818      	ldr	r0, [r3, #0]
 800e590:	000c      	movs	r4, r1
 800e592:	2800      	cmp	r0, #0
 800e594:	d004      	beq.n	800e5a0 <__swsetup_r+0x18>
 800e596:	6a03      	ldr	r3, [r0, #32]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d101      	bne.n	800e5a0 <__swsetup_r+0x18>
 800e59c:	f7fc fbb0 	bl	800ad00 <__sinit>
 800e5a0:	230c      	movs	r3, #12
 800e5a2:	5ee2      	ldrsh	r2, [r4, r3]
 800e5a4:	b293      	uxth	r3, r2
 800e5a6:	0711      	lsls	r1, r2, #28
 800e5a8:	d423      	bmi.n	800e5f2 <__swsetup_r+0x6a>
 800e5aa:	06d9      	lsls	r1, r3, #27
 800e5ac:	d407      	bmi.n	800e5be <__swsetup_r+0x36>
 800e5ae:	2309      	movs	r3, #9
 800e5b0:	2001      	movs	r0, #1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	3337      	adds	r3, #55	; 0x37
 800e5b6:	4313      	orrs	r3, r2
 800e5b8:	81a3      	strh	r3, [r4, #12]
 800e5ba:	4240      	negs	r0, r0
 800e5bc:	bd70      	pop	{r4, r5, r6, pc}
 800e5be:	075b      	lsls	r3, r3, #29
 800e5c0:	d513      	bpl.n	800e5ea <__swsetup_r+0x62>
 800e5c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e5c4:	2900      	cmp	r1, #0
 800e5c6:	d008      	beq.n	800e5da <__swsetup_r+0x52>
 800e5c8:	0023      	movs	r3, r4
 800e5ca:	3344      	adds	r3, #68	; 0x44
 800e5cc:	4299      	cmp	r1, r3
 800e5ce:	d002      	beq.n	800e5d6 <__swsetup_r+0x4e>
 800e5d0:	0028      	movs	r0, r5
 800e5d2:	f7fd fb73 	bl	800bcbc <_free_r>
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	6363      	str	r3, [r4, #52]	; 0x34
 800e5da:	2224      	movs	r2, #36	; 0x24
 800e5dc:	89a3      	ldrh	r3, [r4, #12]
 800e5de:	4393      	bics	r3, r2
 800e5e0:	81a3      	strh	r3, [r4, #12]
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	6063      	str	r3, [r4, #4]
 800e5e6:	6923      	ldr	r3, [r4, #16]
 800e5e8:	6023      	str	r3, [r4, #0]
 800e5ea:	2308      	movs	r3, #8
 800e5ec:	89a2      	ldrh	r2, [r4, #12]
 800e5ee:	4313      	orrs	r3, r2
 800e5f0:	81a3      	strh	r3, [r4, #12]
 800e5f2:	6923      	ldr	r3, [r4, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d10b      	bne.n	800e610 <__swsetup_r+0x88>
 800e5f8:	21a0      	movs	r1, #160	; 0xa0
 800e5fa:	2280      	movs	r2, #128	; 0x80
 800e5fc:	89a3      	ldrh	r3, [r4, #12]
 800e5fe:	0089      	lsls	r1, r1, #2
 800e600:	0092      	lsls	r2, r2, #2
 800e602:	400b      	ands	r3, r1
 800e604:	4293      	cmp	r3, r2
 800e606:	d003      	beq.n	800e610 <__swsetup_r+0x88>
 800e608:	0021      	movs	r1, r4
 800e60a:	0028      	movs	r0, r5
 800e60c:	f000 f892 	bl	800e734 <__smakebuf_r>
 800e610:	220c      	movs	r2, #12
 800e612:	5ea3      	ldrsh	r3, [r4, r2]
 800e614:	2001      	movs	r0, #1
 800e616:	001a      	movs	r2, r3
 800e618:	b299      	uxth	r1, r3
 800e61a:	4002      	ands	r2, r0
 800e61c:	4203      	tst	r3, r0
 800e61e:	d00f      	beq.n	800e640 <__swsetup_r+0xb8>
 800e620:	2200      	movs	r2, #0
 800e622:	60a2      	str	r2, [r4, #8]
 800e624:	6962      	ldr	r2, [r4, #20]
 800e626:	4252      	negs	r2, r2
 800e628:	61a2      	str	r2, [r4, #24]
 800e62a:	2000      	movs	r0, #0
 800e62c:	6922      	ldr	r2, [r4, #16]
 800e62e:	4282      	cmp	r2, r0
 800e630:	d1c4      	bne.n	800e5bc <__swsetup_r+0x34>
 800e632:	0609      	lsls	r1, r1, #24
 800e634:	d5c2      	bpl.n	800e5bc <__swsetup_r+0x34>
 800e636:	2240      	movs	r2, #64	; 0x40
 800e638:	4313      	orrs	r3, r2
 800e63a:	81a3      	strh	r3, [r4, #12]
 800e63c:	3801      	subs	r0, #1
 800e63e:	e7bd      	b.n	800e5bc <__swsetup_r+0x34>
 800e640:	0788      	lsls	r0, r1, #30
 800e642:	d400      	bmi.n	800e646 <__swsetup_r+0xbe>
 800e644:	6962      	ldr	r2, [r4, #20]
 800e646:	60a2      	str	r2, [r4, #8]
 800e648:	e7ef      	b.n	800e62a <__swsetup_r+0xa2>
 800e64a:	46c0      	nop			; (mov r8, r8)
 800e64c:	20000098 	.word	0x20000098

0800e650 <_raise_r>:
 800e650:	b570      	push	{r4, r5, r6, lr}
 800e652:	0004      	movs	r4, r0
 800e654:	000d      	movs	r5, r1
 800e656:	291f      	cmp	r1, #31
 800e658:	d904      	bls.n	800e664 <_raise_r+0x14>
 800e65a:	2316      	movs	r3, #22
 800e65c:	6003      	str	r3, [r0, #0]
 800e65e:	2001      	movs	r0, #1
 800e660:	4240      	negs	r0, r0
 800e662:	bd70      	pop	{r4, r5, r6, pc}
 800e664:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800e666:	2b00      	cmp	r3, #0
 800e668:	d004      	beq.n	800e674 <_raise_r+0x24>
 800e66a:	008a      	lsls	r2, r1, #2
 800e66c:	189b      	adds	r3, r3, r2
 800e66e:	681a      	ldr	r2, [r3, #0]
 800e670:	2a00      	cmp	r2, #0
 800e672:	d108      	bne.n	800e686 <_raise_r+0x36>
 800e674:	0020      	movs	r0, r4
 800e676:	f000 f831 	bl	800e6dc <_getpid_r>
 800e67a:	002a      	movs	r2, r5
 800e67c:	0001      	movs	r1, r0
 800e67e:	0020      	movs	r0, r4
 800e680:	f000 f81a 	bl	800e6b8 <_kill_r>
 800e684:	e7ed      	b.n	800e662 <_raise_r+0x12>
 800e686:	2000      	movs	r0, #0
 800e688:	2a01      	cmp	r2, #1
 800e68a:	d0ea      	beq.n	800e662 <_raise_r+0x12>
 800e68c:	1c51      	adds	r1, r2, #1
 800e68e:	d103      	bne.n	800e698 <_raise_r+0x48>
 800e690:	2316      	movs	r3, #22
 800e692:	3001      	adds	r0, #1
 800e694:	6023      	str	r3, [r4, #0]
 800e696:	e7e4      	b.n	800e662 <_raise_r+0x12>
 800e698:	2400      	movs	r4, #0
 800e69a:	0028      	movs	r0, r5
 800e69c:	601c      	str	r4, [r3, #0]
 800e69e:	4790      	blx	r2
 800e6a0:	0020      	movs	r0, r4
 800e6a2:	e7de      	b.n	800e662 <_raise_r+0x12>

0800e6a4 <raise>:
 800e6a4:	b510      	push	{r4, lr}
 800e6a6:	4b03      	ldr	r3, [pc, #12]	; (800e6b4 <raise+0x10>)
 800e6a8:	0001      	movs	r1, r0
 800e6aa:	6818      	ldr	r0, [r3, #0]
 800e6ac:	f7ff ffd0 	bl	800e650 <_raise_r>
 800e6b0:	bd10      	pop	{r4, pc}
 800e6b2:	46c0      	nop			; (mov r8, r8)
 800e6b4:	20000098 	.word	0x20000098

0800e6b8 <_kill_r>:
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	b570      	push	{r4, r5, r6, lr}
 800e6bc:	4d06      	ldr	r5, [pc, #24]	; (800e6d8 <_kill_r+0x20>)
 800e6be:	0004      	movs	r4, r0
 800e6c0:	0008      	movs	r0, r1
 800e6c2:	0011      	movs	r1, r2
 800e6c4:	602b      	str	r3, [r5, #0]
 800e6c6:	f7f4 f917 	bl	80028f8 <_kill>
 800e6ca:	1c43      	adds	r3, r0, #1
 800e6cc:	d103      	bne.n	800e6d6 <_kill_r+0x1e>
 800e6ce:	682b      	ldr	r3, [r5, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d000      	beq.n	800e6d6 <_kill_r+0x1e>
 800e6d4:	6023      	str	r3, [r4, #0]
 800e6d6:	bd70      	pop	{r4, r5, r6, pc}
 800e6d8:	20008134 	.word	0x20008134

0800e6dc <_getpid_r>:
 800e6dc:	b510      	push	{r4, lr}
 800e6de:	f7f4 f905 	bl	80028ec <_getpid>
 800e6e2:	bd10      	pop	{r4, pc}

0800e6e4 <__swhatbuf_r>:
 800e6e4:	b570      	push	{r4, r5, r6, lr}
 800e6e6:	000e      	movs	r6, r1
 800e6e8:	001d      	movs	r5, r3
 800e6ea:	230e      	movs	r3, #14
 800e6ec:	5ec9      	ldrsh	r1, [r1, r3]
 800e6ee:	0014      	movs	r4, r2
 800e6f0:	b096      	sub	sp, #88	; 0x58
 800e6f2:	2900      	cmp	r1, #0
 800e6f4:	da0c      	bge.n	800e710 <__swhatbuf_r+0x2c>
 800e6f6:	89b2      	ldrh	r2, [r6, #12]
 800e6f8:	2380      	movs	r3, #128	; 0x80
 800e6fa:	0011      	movs	r1, r2
 800e6fc:	4019      	ands	r1, r3
 800e6fe:	421a      	tst	r2, r3
 800e700:	d013      	beq.n	800e72a <__swhatbuf_r+0x46>
 800e702:	2100      	movs	r1, #0
 800e704:	3b40      	subs	r3, #64	; 0x40
 800e706:	2000      	movs	r0, #0
 800e708:	6029      	str	r1, [r5, #0]
 800e70a:	6023      	str	r3, [r4, #0]
 800e70c:	b016      	add	sp, #88	; 0x58
 800e70e:	bd70      	pop	{r4, r5, r6, pc}
 800e710:	466a      	mov	r2, sp
 800e712:	f000 f84d 	bl	800e7b0 <_fstat_r>
 800e716:	2800      	cmp	r0, #0
 800e718:	dbed      	blt.n	800e6f6 <__swhatbuf_r+0x12>
 800e71a:	23f0      	movs	r3, #240	; 0xf0
 800e71c:	9901      	ldr	r1, [sp, #4]
 800e71e:	021b      	lsls	r3, r3, #8
 800e720:	4019      	ands	r1, r3
 800e722:	4b03      	ldr	r3, [pc, #12]	; (800e730 <__swhatbuf_r+0x4c>)
 800e724:	18c9      	adds	r1, r1, r3
 800e726:	424b      	negs	r3, r1
 800e728:	4159      	adcs	r1, r3
 800e72a:	2380      	movs	r3, #128	; 0x80
 800e72c:	00db      	lsls	r3, r3, #3
 800e72e:	e7ea      	b.n	800e706 <__swhatbuf_r+0x22>
 800e730:	ffffe000 	.word	0xffffe000

0800e734 <__smakebuf_r>:
 800e734:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e736:	2602      	movs	r6, #2
 800e738:	898b      	ldrh	r3, [r1, #12]
 800e73a:	0005      	movs	r5, r0
 800e73c:	000c      	movs	r4, r1
 800e73e:	4233      	tst	r3, r6
 800e740:	d006      	beq.n	800e750 <__smakebuf_r+0x1c>
 800e742:	0023      	movs	r3, r4
 800e744:	3347      	adds	r3, #71	; 0x47
 800e746:	6023      	str	r3, [r4, #0]
 800e748:	6123      	str	r3, [r4, #16]
 800e74a:	2301      	movs	r3, #1
 800e74c:	6163      	str	r3, [r4, #20]
 800e74e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800e750:	466a      	mov	r2, sp
 800e752:	ab01      	add	r3, sp, #4
 800e754:	f7ff ffc6 	bl	800e6e4 <__swhatbuf_r>
 800e758:	9900      	ldr	r1, [sp, #0]
 800e75a:	0007      	movs	r7, r0
 800e75c:	0028      	movs	r0, r5
 800e75e:	f7fd fb23 	bl	800bda8 <_malloc_r>
 800e762:	2800      	cmp	r0, #0
 800e764:	d108      	bne.n	800e778 <__smakebuf_r+0x44>
 800e766:	220c      	movs	r2, #12
 800e768:	5ea3      	ldrsh	r3, [r4, r2]
 800e76a:	059a      	lsls	r2, r3, #22
 800e76c:	d4ef      	bmi.n	800e74e <__smakebuf_r+0x1a>
 800e76e:	2203      	movs	r2, #3
 800e770:	4393      	bics	r3, r2
 800e772:	431e      	orrs	r6, r3
 800e774:	81a6      	strh	r6, [r4, #12]
 800e776:	e7e4      	b.n	800e742 <__smakebuf_r+0xe>
 800e778:	2380      	movs	r3, #128	; 0x80
 800e77a:	89a2      	ldrh	r2, [r4, #12]
 800e77c:	6020      	str	r0, [r4, #0]
 800e77e:	4313      	orrs	r3, r2
 800e780:	81a3      	strh	r3, [r4, #12]
 800e782:	9b00      	ldr	r3, [sp, #0]
 800e784:	6120      	str	r0, [r4, #16]
 800e786:	6163      	str	r3, [r4, #20]
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d00c      	beq.n	800e7a8 <__smakebuf_r+0x74>
 800e78e:	0028      	movs	r0, r5
 800e790:	230e      	movs	r3, #14
 800e792:	5ee1      	ldrsh	r1, [r4, r3]
 800e794:	f000 f81e 	bl	800e7d4 <_isatty_r>
 800e798:	2800      	cmp	r0, #0
 800e79a:	d005      	beq.n	800e7a8 <__smakebuf_r+0x74>
 800e79c:	2303      	movs	r3, #3
 800e79e:	89a2      	ldrh	r2, [r4, #12]
 800e7a0:	439a      	bics	r2, r3
 800e7a2:	3b02      	subs	r3, #2
 800e7a4:	4313      	orrs	r3, r2
 800e7a6:	81a3      	strh	r3, [r4, #12]
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	433b      	orrs	r3, r7
 800e7ac:	81a3      	strh	r3, [r4, #12]
 800e7ae:	e7ce      	b.n	800e74e <__smakebuf_r+0x1a>

0800e7b0 <_fstat_r>:
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	b570      	push	{r4, r5, r6, lr}
 800e7b4:	4d06      	ldr	r5, [pc, #24]	; (800e7d0 <_fstat_r+0x20>)
 800e7b6:	0004      	movs	r4, r0
 800e7b8:	0008      	movs	r0, r1
 800e7ba:	0011      	movs	r1, r2
 800e7bc:	602b      	str	r3, [r5, #0]
 800e7be:	f7f4 f8fa 	bl	80029b6 <_fstat>
 800e7c2:	1c43      	adds	r3, r0, #1
 800e7c4:	d103      	bne.n	800e7ce <_fstat_r+0x1e>
 800e7c6:	682b      	ldr	r3, [r5, #0]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d000      	beq.n	800e7ce <_fstat_r+0x1e>
 800e7cc:	6023      	str	r3, [r4, #0]
 800e7ce:	bd70      	pop	{r4, r5, r6, pc}
 800e7d0:	20008134 	.word	0x20008134

0800e7d4 <_isatty_r>:
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	b570      	push	{r4, r5, r6, lr}
 800e7d8:	4d06      	ldr	r5, [pc, #24]	; (800e7f4 <_isatty_r+0x20>)
 800e7da:	0004      	movs	r4, r0
 800e7dc:	0008      	movs	r0, r1
 800e7de:	602b      	str	r3, [r5, #0]
 800e7e0:	f7f4 f8f7 	bl	80029d2 <_isatty>
 800e7e4:	1c43      	adds	r3, r0, #1
 800e7e6:	d103      	bne.n	800e7f0 <_isatty_r+0x1c>
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d000      	beq.n	800e7f0 <_isatty_r+0x1c>
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	bd70      	pop	{r4, r5, r6, pc}
 800e7f2:	46c0      	nop			; (mov r8, r8)
 800e7f4:	20008134 	.word	0x20008134

0800e7f8 <_init>:
 800e7f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7fa:	46c0      	nop			; (mov r8, r8)
 800e7fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7fe:	bc08      	pop	{r3}
 800e800:	469e      	mov	lr, r3
 800e802:	4770      	bx	lr

0800e804 <_fini>:
 800e804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e806:	46c0      	nop			; (mov r8, r8)
 800e808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e80a:	bc08      	pop	{r3}
 800e80c:	469e      	mov	lr, r3
 800e80e:	4770      	bx	lr
