/*
 * lidar_driver.h
 *
 *  Created on: Oct 5, 2023
 *      Author: LirokWid
 *      //http://stm32f4-discovery.net/2017/07/stm32-tutorial-efficiently-receive-uart-data-using-dma/
 *
 */

#ifndef INC_LIDAR_DRIVER_H_
#define INC_LIDAR_DRIVER_H_
#include "gpio.h"
#include "main.h"

#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include <stdlib.h>
#include "../UART/transmit_uart.h"

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

#define SERIAL_DEBUG  // enable printf debug on some functions


#define DEF_PREFIX 					0xA5
#define DEF_COMMAND_START_SCAN  	0x60
#define DEF_COMMAND_STOP_SCAN 	 	0x65
#define DEF_COMMAND_GET_ID 		 	0x90
#define DEF_COMMAND_GET_STATUS 	 	0x91
#define DEF_COMMAND_SOFT_RESTART 	0x80


// The lidar frames are variable in size but approximatively 30 bytes
//I am setting the buffer size here for 30 frames to have time to process the data between the DMA interrupts
#define DMA_BUFFER_SIZE				50*10
#define POINT_BUFFER_SIZE			100
#define LIDAR_SERIAL_SPEED 			128000

#define CLEARED_POINT	-2
#define VALUE_TO_CLOSE	-1



typedef enum lidar_systm_cmd_enum
{
	PREFIX 					= 0xA5,
	COMMAND_START_SCAN 		= 0xA560,
	COMMAND_STOP_SCAN 		= 0xA565,
	COMMAND_GET_ID 			= 0xA590,
	COMMAND_GET_STATUS 		= 0xA591,
	COMMAND_SOFT_RESTART 	= 0xA580
}LidarCommand;

typedef struct lidar_command_struct {
    uint8_t prefix;
    uint8_t command;
} LidarCommandStruct;

typedef int (* lidar_transmit_drv_t)(uint8_t *p_data, uint16_t size);
typedef int (* lidar_receive_drv_t)(uint8_t *p_data);

typedef struct lidar_serial_drv_struct
{
	lidar_transmit_drv_t transmit;
	lidar_receive_drv_t receive;
} lidar_serial_drv_t;


typedef int (* set_motor_speed_t)(uint8_t speed);

typedef struct lidar_motor_drv_struct
{
	uint8_t speed;
	set_motor_speed_t set_speed;
}lidar_motor_drv_t;

typedef enum lidar_state{
	WAITING_FOR_HEADER,
	PARSING_TYPE,
	PARSING_LENGHT,
	PARSING_START_ANGLE,
	PARSING_END_ANGLE,
	PARSING_CHECKSUM,

	PARSING_DATA
}lidar_state_t;




typedef enum h_lidar_parsing_bytes{
	START_BYTE_LOW 	= 0xAA,
	START_BYTE_HIGH	= 0x55

}h_lidar_parsing_bytes_t;

typedef struct lidar_frame_header{
	uint8_t 	CT;		//Package type and frequency
	uint8_t 	LSN;	//Number of sampling points
	uint16_t 	FSA; 	//Start angle on 2 bytes LSB first
	uint16_t 	LSA;	//End angle on 2 bytes LSB first
	uint16_t	CS;		//Checksum (XOR)

	uint16_t	frame_end;
	uint16_t 	start_angle;
	uint16_t 	end_angle;

}lidar_frame_header_t;


#define ANGLE_CIRCLE_SUBDIVISION 360

typedef struct lidar_point_data_t{
	uint8_t angle;
	uint8_t distance;
}lidar_point_data_t;

typedef struct h_lidar_struct
{
	lidar_serial_drv_t serial_drv;
	lidar_motor_drv_t motor;
	UART_HandleTypeDef *uart;
	LidarCommand cmd;

	lidar_state_t state;

	uint8_t model;
	uint8_t hardware;
	uint8_t	serial_number[16];

	struct firmware{
		uint8_t major;
		uint8_t minor;
	}firmware;

	struct health{
		uint8_t status;
		uint8_t error_code[2];
	}health;

	int is_sending;

	lidar_frame_header_t frame;
	uint8_t  dma_buffer[DMA_BUFFER_SIZE];
	uint16_t dma_head;
	uint16_t dist_buff[DMA_BUFFER_SIZE];

	int16_t points[ANGLE_CIRCLE_SUBDIVISION];
}h_lidar_t;

#define POINT_SAMPLES_MAX_NB 50

typedef struct points_sample_t{
	int16_t angle;
	int16_t distance;
}points_sample_t;

typedef struct device_health_t {
  uint8_t   status;
  uint16_t  error_code;
} device_health_t;

int Lidar_set_motor_speed(int speed);
int lidar_init_driver(h_lidar_t *lidar,UART_HandleTypeDef *lidar_uart1);
int lidar_parse(h_lidar_t *lidar);
void start_motor();
void stop_motor();

int lidar_parse(h_lidar_t *lidar);
int lidar_stop(h_lidar_t * lidar);
int lidar_info(h_lidar_t * lidar);
int lidar_scan(h_lidar_t * lidar);
int lidar_restart(h_lidar_t * lidar);

void agregate_points_data(h_lidar_t *lidar,points_sample_t *points, uint8_t point_nb, uint8_t LSB,uint8_t MSB);
void store_points_data(h_lidar_t *lidar, points_sample_t *points,uint8_t point_nb);




void lidar_set_motor_speed(int speed);

#endif /* INC_LIDAR_DRIVER_H_ */
