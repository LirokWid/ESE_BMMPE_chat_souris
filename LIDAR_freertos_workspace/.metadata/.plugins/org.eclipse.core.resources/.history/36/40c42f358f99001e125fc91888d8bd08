#include "tasks.h"



void LED_STATE_Task(void *pvParameters) {
    while (1) {
        HAL_GPIO_TogglePin(LED_STATE_GPIO_Port, LED_STATE_Pin);
        vTaskDelay(pdMS_TO_TICKS(500));  // 1Hz frequency
    }
}

void LED_ERROR_Task(void *pvParameters) {
    while (1) {
        HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
        vTaskDelay(pdMS_TO_TICKS(333));  // 3Hz frequency
    }
}

void motor_test_Task(void *pvParameters) {
	while (1){
		HAL_GPIO_WritePin(MOTOR_1_REV_GPIO_Port, MOTOR_1_REV_Pin, 1);
		HAL_GPIO_WritePin(MOTOR_1_FWD_GPIO_Port, MOTOR_1_FWD_Pin, 0);
		vTaskDelay(pdMS_TO_TICKS(5000));

		HAL_GPIO_WritePin(MOTOR_1_REV_GPIO_Port, MOTOR_1_REV_Pin, 0);
		HAL_GPIO_WritePin(MOTOR_1_FWD_GPIO_Port, MOTOR_1_FWD_Pin, 1);
		vTaskDelay(pdMS_TO_TICKS(5000));


		HAL_GPIO_WritePin(MOTOR_1_REV_GPIO_Port, MOTOR_1_REV_Pin, 0);
		HAL_GPIO_WritePin(MOTOR_1_FWD_GPIO_Port, MOTOR_1_FWD_Pin, 0);
		vTaskDelay(pdMS_TO_TICKS(5000));
	}
}



void Start_All_Tasks(void) {
	TaskHandle_t TaskHandle_LED_STATE;
	TaskHandle_t TaskHandle_LED_ERROR;
	TaskHandle_t TaskHandle_MOTOR_TEST;



    xTaskCreate(LED_STATE_Task, "LED_STATE_Task", configMINIMAL_STACK_SIZE, NULL, 4, &TaskHandle_LED_STATE);
    xTaskCreate(LED_ERROR_Task, "LED_ERROR_Task", configMINIMAL_STACK_SIZE, NULL, 3, &TaskHandle_LED_ERROR);
    xTaskCreate(motor_test_Task, "motor_test_Task", configMINIMAL_STACK_SIZE, NULL, 1, &TaskHandle_MOTOR_TEST);


}
