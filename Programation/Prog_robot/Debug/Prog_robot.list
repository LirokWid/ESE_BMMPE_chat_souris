
Prog_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053c4  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08005484  08005484  00015484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a8  080055a8  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080055a8  080055a8  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055a8  080055a8  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080055b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007de0  20000010  080055c0  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007df0  080055c0  00027df0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   000167a5  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037ed  00000000  00000000  00036820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f0  00000000  00000000  0003a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  0003b600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018ee3  00000000  00000000  0003c726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c521  00000000  00000000  00055609  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098e42  00000000  00000000  00071b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e40  00000000  00000000  0010a96c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  0010f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800546c 	.word	0x0800546c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800546c 	.word	0x0800546c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80003f4:	b590      	push	{r4, r7, lr}
 80003f6:	b087      	sub	sp, #28
 80003f8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80003fa:	1d3b      	adds	r3, r7, #4
 80003fc:	4a08      	ldr	r2, [pc, #32]	; (8000420 <MX_FREERTOS_Init+0x2c>)
 80003fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000400:	c313      	stmia	r3!, {r0, r1, r4}
 8000402:	ca03      	ldmia	r2!, {r0, r1}
 8000404:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2100      	movs	r1, #0
 800040a:	0018      	movs	r0, r3
 800040c:	f003 ffef 	bl	80043ee <osThreadCreate>
 8000410:	0002      	movs	r2, r0
 8000412:	4b04      	ldr	r3, [pc, #16]	; (8000424 <MX_FREERTOS_Init+0x30>)
 8000414:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b007      	add	sp, #28
 800041c:	bd90      	pop	{r4, r7, pc}
 800041e:	46c0      	nop			; (mov r8, r8)
 8000420:	08005490 	.word	0x08005490
 8000424:	2000002c 	.word	0x2000002c

08000428 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b082      	sub	sp, #8
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000430:	2001      	movs	r0, #1
 8000432:	f004 f804 	bl	800443e <osDelay>
 8000436:	e7fb      	b.n	8000430 <StartDefaultTask+0x8>

08000438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	2414      	movs	r4, #20
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f004 ffe3 	bl	8005414 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b68      	ldr	r3, [pc, #416]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000452:	4b67      	ldr	r3, [pc, #412]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000454:	2104      	movs	r1, #4
 8000456:	430a      	orrs	r2, r1
 8000458:	635a      	str	r2, [r3, #52]	; 0x34
 800045a:	4b65      	ldr	r3, [pc, #404]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 800045c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800045e:	2204      	movs	r2, #4
 8000460:	4013      	ands	r3, r2
 8000462:	613b      	str	r3, [r7, #16]
 8000464:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000466:	4b62      	ldr	r3, [pc, #392]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800046a:	4b61      	ldr	r3, [pc, #388]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 800046c:	2120      	movs	r1, #32
 800046e:	430a      	orrs	r2, r1
 8000470:	635a      	str	r2, [r3, #52]	; 0x34
 8000472:	4b5f      	ldr	r3, [pc, #380]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000474:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000476:	2220      	movs	r2, #32
 8000478:	4013      	ands	r3, r2
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800047e:	4b5c      	ldr	r3, [pc, #368]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000482:	4b5b      	ldr	r3, [pc, #364]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000484:	2101      	movs	r1, #1
 8000486:	430a      	orrs	r2, r1
 8000488:	635a      	str	r2, [r3, #52]	; 0x34
 800048a:	4b59      	ldr	r3, [pc, #356]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 800048c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800048e:	2201      	movs	r2, #1
 8000490:	4013      	ands	r3, r2
 8000492:	60bb      	str	r3, [r7, #8]
 8000494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000496:	4b56      	ldr	r3, [pc, #344]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 8000498:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800049a:	4b55      	ldr	r3, [pc, #340]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 800049c:	2102      	movs	r1, #2
 800049e:	430a      	orrs	r2, r1
 80004a0:	635a      	str	r2, [r3, #52]	; 0x34
 80004a2:	4b53      	ldr	r3, [pc, #332]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 80004a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004a6:	2202      	movs	r2, #2
 80004a8:	4013      	ands	r3, r2
 80004aa:	607b      	str	r3, [r7, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004ae:	4b50      	ldr	r3, [pc, #320]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 80004b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004b2:	4b4f      	ldr	r3, [pc, #316]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 80004b4:	2108      	movs	r1, #8
 80004b6:	430a      	orrs	r2, r1
 80004b8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ba:	4b4d      	ldr	r3, [pc, #308]	; (80005f0 <MX_GPIO_Init+0x1b8>)
 80004bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004be:	2208      	movs	r2, #8
 80004c0:	4013      	ands	r3, r2
 80004c2:	603b      	str	r3, [r7, #0]
 80004c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin, GPIO_PIN_RESET);
 80004c6:	23c0      	movs	r3, #192	; 0xc0
 80004c8:	01db      	lsls	r3, r3, #7
 80004ca:	484a      	ldr	r0, [pc, #296]	; (80005f4 <MX_GPIO_Init+0x1bc>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	0019      	movs	r1, r3
 80004d0:	f001 fc12 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 80004d4:	23a0      	movs	r3, #160	; 0xa0
 80004d6:	05db      	lsls	r3, r3, #23
 80004d8:	2200      	movs	r2, #0
 80004da:	2103      	movs	r1, #3
 80004dc:	0018      	movs	r0, r3
 80004de:	f001 fc0b 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin;
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	22c0      	movs	r2, #192	; 0xc0
 80004e6:	01d2      	lsls	r2, r2, #7
 80004e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ea:	193b      	adds	r3, r7, r4
 80004ec:	2201      	movs	r2, #1
 80004ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004f6:	193b      	adds	r3, r7, r4
 80004f8:	2200      	movs	r2, #0
 80004fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004fc:	193b      	adds	r3, r7, r4
 80004fe:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <MX_GPIO_Init+0x1bc>)
 8000500:	0019      	movs	r1, r3
 8000502:	0010      	movs	r0, r2
 8000504:	f001 fa94 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_ERROR_Pin;
 8000508:	193b      	adds	r3, r7, r4
 800050a:	2203      	movs	r2, #3
 800050c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800050e:	193b      	adds	r3, r7, r4
 8000510:	2201      	movs	r2, #1
 8000512:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	193b      	adds	r3, r7, r4
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800051a:	193b      	adds	r3, r7, r4
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000520:	193a      	adds	r2, r7, r4
 8000522:	23a0      	movs	r3, #160	; 0xa0
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	0011      	movs	r1, r2
 8000528:	0018      	movs	r0, r3
 800052a:	f001 fa81 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BORDURE_1_Pin|BORDURE_2_Pin|BORDURE_3_Pin;
 800052e:	0021      	movs	r1, r4
 8000530:	187b      	adds	r3, r7, r1
 8000532:	22e0      	movs	r2, #224	; 0xe0
 8000534:	0212      	lsls	r2, r2, #8
 8000536:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2288      	movs	r2, #136	; 0x88
 800053c:	0352      	lsls	r2, r2, #13
 800053e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	000c      	movs	r4, r1
 8000542:	193b      	adds	r3, r7, r4
 8000544:	2200      	movs	r2, #0
 8000546:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000548:	193b      	adds	r3, r7, r4
 800054a:	4a2b      	ldr	r2, [pc, #172]	; (80005f8 <MX_GPIO_Init+0x1c0>)
 800054c:	0019      	movs	r1, r3
 800054e:	0010      	movs	r0, r2
 8000550:	f001 fa6e 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUMPER_1_Pin|BUMPER_2_Pin;
 8000554:	193b      	adds	r3, r7, r4
 8000556:	22c0      	movs	r2, #192	; 0xc0
 8000558:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800055a:	193b      	adds	r3, r7, r4
 800055c:	2288      	movs	r2, #136	; 0x88
 800055e:	0352      	lsls	r2, r2, #13
 8000560:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000568:	193b      	adds	r3, r7, r4
 800056a:	4a22      	ldr	r2, [pc, #136]	; (80005f4 <MX_GPIO_Init+0x1bc>)
 800056c:	0019      	movs	r1, r3
 800056e:	0010      	movs	r0, r2
 8000570:	f001 fa5e 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BUMPER_3_Pin|BUMPER_4_Pin;
 8000574:	193b      	adds	r3, r7, r4
 8000576:	22c0      	movs	r2, #192	; 0xc0
 8000578:	0092      	lsls	r2, r2, #2
 800057a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800057c:	193b      	adds	r3, r7, r4
 800057e:	2288      	movs	r2, #136	; 0x88
 8000580:	0352      	lsls	r2, r2, #13
 8000582:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800058a:	193b      	adds	r3, r7, r4
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <MX_GPIO_Init+0x1c4>)
 800058e:	0019      	movs	r1, r3
 8000590:	0010      	movs	r0, r2
 8000592:	f001 fa4d 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 8000596:	193b      	adds	r3, r7, r4
 8000598:	22e0      	movs	r2, #224	; 0xe0
 800059a:	0152      	lsls	r2, r2, #5
 800059c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800059e:	193b      	adds	r3, r7, r4
 80005a0:	2288      	movs	r2, #136	; 0x88
 80005a2:	0352      	lsls	r2, r2, #13
 80005a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	2200      	movs	r2, #0
 80005aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ac:	193a      	adds	r2, r7, r4
 80005ae:	23a0      	movs	r3, #160	; 0xa0
 80005b0:	05db      	lsls	r3, r3, #23
 80005b2:	0011      	movs	r1, r2
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fa3b 	bl	8001a30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ba:	193b      	adds	r3, r7, r4
 80005bc:	227f      	movs	r2, #127	; 0x7f
 80005be:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	2200      	movs	r2, #0
 80005c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	193b      	adds	r3, r7, r4
 80005c8:	2200      	movs	r2, #0
 80005ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <MX_GPIO_Init+0x1c4>)
 80005d0:	0019      	movs	r1, r3
 80005d2:	0010      	movs	r0, r2
 80005d4:	f001 fa2c 	bl	8001a30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80005d8:	2200      	movs	r2, #0
 80005da:	2103      	movs	r1, #3
 80005dc:	2007      	movs	r0, #7
 80005de:	f001 f9f5 	bl	80019cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005e2:	2007      	movs	r0, #7
 80005e4:	f001 fa07 	bl	80019f6 <HAL_NVIC_EnableIRQ>

}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	b00b      	add	sp, #44	; 0x2c
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40021000 	.word	0x40021000
 80005f4:	50000800 	.word	0x50000800
 80005f8:	50000400 	.word	0x50000400
 80005fc:	50000c00 	.word	0x50000c00

08000600 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_I2C2_Init+0x74>)
 8000606:	4a1c      	ldr	r2, [pc, #112]	; (8000678 <MX_I2C2_Init+0x78>)
 8000608:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_I2C2_Init+0x74>)
 800060c:	4a1b      	ldr	r2, [pc, #108]	; (800067c <MX_I2C2_Init+0x7c>)
 800060e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_I2C2_Init+0x74>)
 8000612:	2200      	movs	r2, #0
 8000614:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_I2C2_Init+0x74>)
 8000618:	2201      	movs	r2, #1
 800061a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_I2C2_Init+0x74>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_I2C2_Init+0x74>)
 8000624:	2200      	movs	r2, #0
 8000626:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <MX_I2C2_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_I2C2_Init+0x74>)
 8000630:	2200      	movs	r2, #0
 8000632:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_I2C2_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_I2C2_Init+0x74>)
 800063c:	0018      	movs	r0, r3
 800063e:	f001 fbd1 	bl	8001de4 <HAL_I2C_Init>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000646:	f000 f8d2 	bl	80007ee <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800064a:	4b0a      	ldr	r3, [pc, #40]	; (8000674 <MX_I2C2_Init+0x74>)
 800064c:	2100      	movs	r1, #0
 800064e:	0018      	movs	r0, r3
 8000650:	f001 fc5e 	bl	8001f10 <HAL_I2CEx_ConfigAnalogFilter>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000658:	f000 f8c9 	bl	80007ee <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800065c:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MX_I2C2_Init+0x74>)
 800065e:	2100      	movs	r1, #0
 8000660:	0018      	movs	r0, r3
 8000662:	f001 fca1 	bl	8001fa8 <HAL_I2CEx_ConfigDigitalFilter>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800066a:	f000 f8c0 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000030 	.word	0x20000030
 8000678:	40005800 	.word	0x40005800
 800067c:	00303d5b 	.word	0x00303d5b

08000680 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b08b      	sub	sp, #44	; 0x2c
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2414      	movs	r4, #20
 800068a:	193b      	adds	r3, r7, r4
 800068c:	0018      	movs	r0, r3
 800068e:	2314      	movs	r3, #20
 8000690:	001a      	movs	r2, r3
 8000692:	2100      	movs	r1, #0
 8000694:	f004 febe 	bl	8005414 <memset>
  if(i2cHandle->Instance==I2C2)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1b      	ldr	r2, [pc, #108]	; (800070c <HAL_I2C_MspInit+0x8c>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d130      	bne.n	8000704 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_I2C_MspInit+0x90>)
 80006a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006a6:	4b1a      	ldr	r3, [pc, #104]	; (8000710 <HAL_I2C_MspInit+0x90>)
 80006a8:	2102      	movs	r1, #2
 80006aa:	430a      	orrs	r2, r1
 80006ac:	635a      	str	r2, [r3, #52]	; 0x34
 80006ae:	4b18      	ldr	r3, [pc, #96]	; (8000710 <HAL_I2C_MspInit+0x90>)
 80006b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006b2:	2202      	movs	r2, #2
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
 80006b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	22c0      	movs	r2, #192	; 0xc0
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006c2:	0021      	movs	r1, r4
 80006c4:	187b      	adds	r3, r7, r1
 80006c6:	2212      	movs	r2, #18
 80006c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d0:	187b      	adds	r3, r7, r1
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2206      	movs	r2, #6
 80006da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	4a0d      	ldr	r2, [pc, #52]	; (8000714 <HAL_I2C_MspInit+0x94>)
 80006e0:	0019      	movs	r1, r3
 80006e2:	0010      	movs	r0, r2
 80006e4:	f001 f9a4 	bl	8001a30 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_I2C_MspInit+0x90>)
 80006ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <HAL_I2C_MspInit+0x90>)
 80006ee:	2180      	movs	r1, #128	; 0x80
 80006f0:	03c9      	lsls	r1, r1, #15
 80006f2:	430a      	orrs	r2, r1
 80006f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_I2C_MspInit+0x90>)
 80006f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fa:	2380      	movs	r3, #128	; 0x80
 80006fc:	03db      	lsls	r3, r3, #15
 80006fe:	4013      	ands	r3, r2
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000704:	46c0      	nop			; (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	b00b      	add	sp, #44	; 0x2c
 800070a:	bd90      	pop	{r4, r7, pc}
 800070c:	40005800 	.word	0x40005800
 8000710:	40021000 	.word	0x40021000
 8000714:	50000400 	.word	0x50000400

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071c:	f001 f824 	bl	8001768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000720:	f000 f823 	bl	800076a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000724:	f7ff fe88 	bl	8000438 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000728:	f7ff ff6a 	bl	8000600 <MX_I2C2_Init>
  MX_TIM1_Init();
 800072c:	f000 f91e 	bl	800096c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000730:	f000 f986 	bl	8000a40 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000734:	f000 f9e8 	bl	8000b08 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000738:	f000 fa22 	bl	8000b80 <MX_TIM7_Init>
  MX_TIM14_Init();
 800073c:	f000 fa5c 	bl	8000bf8 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000740:	f000 faaa 	bl	8000c98 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000744:	f000 fb4c 	bl	8000de0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000748:	f000 fbd2 	bl	8000ef0 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800074c:	f000 fe2e 	bl	80013ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000750:	f000 fec8 	bl	80014e4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000754:	f000 fe78 	bl	8001448 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Create and start FreeRTOS tasks
  Start_All_Tasks();
 8000758:	f000 f8e4 	bl	8000924 <Start_All_Tasks>
  // Start the scheduler
  vTaskStartScheduler();
 800075c:	f004 f880 	bl	8004860 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000760:	f7ff fe48 	bl	80003f4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000764:	f003 fe3b 	bl	80043de <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000768:	e7fe      	b.n	8000768 <main+0x50>

0800076a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076a:	b590      	push	{r4, r7, lr}
 800076c:	b093      	sub	sp, #76	; 0x4c
 800076e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000770:	2414      	movs	r4, #20
 8000772:	193b      	adds	r3, r7, r4
 8000774:	0018      	movs	r0, r3
 8000776:	2334      	movs	r3, #52	; 0x34
 8000778:	001a      	movs	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	f004 fe4a 	bl	8005414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	0018      	movs	r0, r3
 8000784:	2310      	movs	r3, #16
 8000786:	001a      	movs	r2, r3
 8000788:	2100      	movs	r1, #0
 800078a:	f004 fe43 	bl	8005414 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	0018      	movs	r0, r3
 8000794:	f001 fc54 	bl	8002040 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	193b      	adds	r3, r7, r4
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079e:	193b      	adds	r3, r7, r4
 80007a0:	2280      	movs	r2, #128	; 0x80
 80007a2:	0252      	lsls	r2, r2, #9
 80007a4:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a6:	193b      	adds	r3, r7, r4
 80007a8:	2200      	movs	r2, #0
 80007aa:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ac:	193b      	adds	r3, r7, r4
 80007ae:	0018      	movs	r0, r3
 80007b0:	f001 fc92 	bl	80020d8 <HAL_RCC_OscConfig>
 80007b4:	1e03      	subs	r3, r0, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x52>
  {
    Error_Handler();
 80007b8:	f000 f819 	bl	80007ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	1d3b      	adds	r3, r7, #4
 80007be:	2207      	movs	r2, #7
 80007c0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007c2:	1d3b      	adds	r3, r7, #4
 80007c4:	2201      	movs	r2, #1
 80007c6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	2200      	movs	r2, #0
 80007cc:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2100      	movs	r1, #0
 80007d8:	0018      	movs	r0, r3
 80007da:	f001 ff8d 	bl	80026f8 <HAL_RCC_ClockConfig>
 80007de:	1e03      	subs	r3, r0, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007e2:	f000 f804 	bl	80007ee <Error_Handler>
  }
}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	46bd      	mov	sp, r7
 80007ea:	b013      	add	sp, #76	; 0x4c
 80007ec:	bd90      	pop	{r4, r7, pc}

080007ee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f2:	b672      	cpsid	i
}
 80007f4:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f6:	e7fe      	b.n	80007f6 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <HAL_MspInit+0x50>)
 8000800:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000802:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_MspInit+0x50>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	641a      	str	r2, [r3, #64]	; 0x40
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <HAL_MspInit+0x50>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <HAL_MspInit+0x50>)
 8000818:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <HAL_MspInit+0x50>)
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	0549      	lsls	r1, r1, #21
 8000820:	430a      	orrs	r2, r1
 8000822:	63da      	str	r2, [r3, #60]	; 0x3c
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <HAL_MspInit+0x50>)
 8000826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000828:	2380      	movs	r3, #128	; 0x80
 800082a:	055b      	lsls	r3, r3, #21
 800082c:	4013      	ands	r3, r2
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000832:	2302      	movs	r3, #2
 8000834:	425b      	negs	r3, r3
 8000836:	2200      	movs	r2, #0
 8000838:	2103      	movs	r1, #3
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f8c6 	bl	80019cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000840:	46c0      	nop			; (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	b002      	add	sp, #8
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40021000 	.word	0x40021000

0800084c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000850:	e7fe      	b.n	8000850 <NMI_Handler+0x4>

08000852 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000856:	e7fe      	b.n	8000856 <HardFault_Handler+0x4>

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 ffee 	bl	800183c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000860:	f004 fa80 	bl	8004d64 <xTaskGetSchedulerState>
 8000864:	0003      	movs	r3, r0
 8000866:	2b01      	cmp	r3, #1
 8000868:	d001      	beq.n	800086e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800086a:	f004 fbe5 	bl	8005038 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUMPER_1_Pin);
 8000878:	2040      	movs	r0, #64	; 0x40
 800087a:	f001 fa75 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_2_Pin);
 800087e:	2080      	movs	r0, #128	; 0x80
 8000880:	f001 fa72 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_3_Pin);
 8000884:	2380      	movs	r3, #128	; 0x80
 8000886:	005b      	lsls	r3, r3, #1
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fa6d 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_4_Pin);
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	009b      	lsls	r3, r3, #2
 8000892:	0018      	movs	r0, r3
 8000894:	f001 fa68 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	0018      	movs	r0, r3
 800089e:	f001 fa63 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 80008a2:	2380      	movs	r3, #128	; 0x80
 80008a4:	011b      	lsls	r3, r3, #4
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fa5e 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_3_Pin);
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	015b      	lsls	r3, r3, #5
 80008b0:	0018      	movs	r0, r3
 80008b2:	f001 fa59 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_1_Pin);
 80008b6:	2380      	movs	r3, #128	; 0x80
 80008b8:	019b      	lsls	r3, r3, #6
 80008ba:	0018      	movs	r0, r3
 80008bc:	f001 fa54 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_2_Pin);
 80008c0:	2380      	movs	r3, #128	; 0x80
 80008c2:	01db      	lsls	r3, r3, #7
 80008c4:	0018      	movs	r0, r3
 80008c6:	f001 fa4f 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_3_Pin);
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	021b      	lsls	r3, r3, #8
 80008ce:	0018      	movs	r0, r3
 80008d0:	f001 fa4a 	bl	8001d68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80008d4:	46c0      	nop			; (mov r8, r8)
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008de:	46c0      	nop			; (mov r8, r8)
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <LED_STATE_Task>:
#include "tasks.h"




void LED_STATE_Task(void *pvParameters) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(LED_STATE_GPIO_Port, LED_STATE_Pin);
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	05db      	lsls	r3, r3, #23
 80008f0:	2101      	movs	r1, #1
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fa1d 	bl	8001d32 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(500));  // 1Hz frequency
 80008f8:	23fa      	movs	r3, #250	; 0xfa
 80008fa:	005b      	lsls	r3, r3, #1
 80008fc:	0018      	movs	r0, r3
 80008fe:	f003 ff89 	bl	8004814 <vTaskDelay>
        HAL_GPIO_TogglePin(LED_STATE_GPIO_Port, LED_STATE_Pin);
 8000902:	e7f3      	b.n	80008ec <LED_STATE_Task+0x8>

08000904 <LED_ERROR_Task>:
    }
}

void LED_ERROR_Task(void *pvParameters) {
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    while (1) {
        HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 800090c:	23a0      	movs	r3, #160	; 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2102      	movs	r1, #2
 8000912:	0018      	movs	r0, r3
 8000914:	f001 fa0d 	bl	8001d32 <HAL_GPIO_TogglePin>
        vTaskDelay(pdMS_TO_TICKS(333));  // 3Hz frequency
 8000918:	234e      	movs	r3, #78	; 0x4e
 800091a:	33ff      	adds	r3, #255	; 0xff
 800091c:	0018      	movs	r0, r3
 800091e:	f003 ff79 	bl	8004814 <vTaskDelay>
        HAL_GPIO_TogglePin(LED_ERROR_GPIO_Port, LED_ERROR_Pin);
 8000922:	e7f3      	b.n	800090c <LED_ERROR_Task+0x8>

08000924 <Start_All_Tasks>:
    }
}

void Start_All_Tasks(void) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af02      	add	r7, sp, #8
	TaskHandle_t TaskHandle_LED_STATE;
	TaskHandle_t TaskHandle_LED_ERROR;

    xTaskCreate(LED_STATE_Task, "LED_STATE_Task", configMINIMAL_STACK_SIZE, NULL, 1, &TaskHandle_LED_STATE);
 800092a:	490c      	ldr	r1, [pc, #48]	; (800095c <Start_All_Tasks+0x38>)
 800092c:	480c      	ldr	r0, [pc, #48]	; (8000960 <Start_All_Tasks+0x3c>)
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	9301      	str	r3, [sp, #4]
 8000932:	2301      	movs	r3, #1
 8000934:	9300      	str	r3, [sp, #0]
 8000936:	2300      	movs	r3, #0
 8000938:	2280      	movs	r2, #128	; 0x80
 800093a:	f003 fe3d 	bl	80045b8 <xTaskCreate>
    xTaskCreate(LED_ERROR_Task, "LED_ERROR_Task", configMINIMAL_STACK_SIZE, NULL, 1, &TaskHandle_LED_ERROR);
 800093e:	4909      	ldr	r1, [pc, #36]	; (8000964 <Start_All_Tasks+0x40>)
 8000940:	4809      	ldr	r0, [pc, #36]	; (8000968 <Start_All_Tasks+0x44>)
 8000942:	003b      	movs	r3, r7
 8000944:	9301      	str	r3, [sp, #4]
 8000946:	2301      	movs	r3, #1
 8000948:	9300      	str	r3, [sp, #0]
 800094a:	2300      	movs	r3, #0
 800094c:	2280      	movs	r2, #128	; 0x80
 800094e:	f003 fe33 	bl	80045b8 <xTaskCreate>
}
 8000952:	46c0      	nop			; (mov r8, r8)
 8000954:	46bd      	mov	sp, r7
 8000956:	b002      	add	sp, #8
 8000958:	bd80      	pop	{r7, pc}
 800095a:	46c0      	nop			; (mov r8, r8)
 800095c:	080054a4 	.word	0x080054a4
 8000960:	080008e5 	.word	0x080008e5
 8000964:	080054b4 	.word	0x080054b4
 8000968:	08000905 	.word	0x08000905

0800096c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800096c:	b590      	push	{r4, r7, lr}
 800096e:	b08d      	sub	sp, #52	; 0x34
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000972:	240c      	movs	r4, #12
 8000974:	193b      	adds	r3, r7, r4
 8000976:	0018      	movs	r0, r3
 8000978:	2324      	movs	r3, #36	; 0x24
 800097a:	001a      	movs	r2, r3
 800097c:	2100      	movs	r1, #0
 800097e:	f004 fd49 	bl	8005414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	230c      	movs	r3, #12
 8000988:	001a      	movs	r2, r3
 800098a:	2100      	movs	r1, #0
 800098c:	f004 fd42 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000990:	4b28      	ldr	r3, [pc, #160]	; (8000a34 <MX_TIM1_Init+0xc8>)
 8000992:	4a29      	ldr	r2, [pc, #164]	; (8000a38 <MX_TIM1_Init+0xcc>)
 8000994:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000996:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_TIM1_Init+0xc8>)
 8000998:	2200      	movs	r2, #0
 800099a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099c:	4b25      	ldr	r3, [pc, #148]	; (8000a34 <MX_TIM1_Init+0xc8>)
 800099e:	2200      	movs	r2, #0
 80009a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_TIM1_Init+0xc8>)
 80009a4:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <MX_TIM1_Init+0xd0>)
 80009a6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_TIM1_Init+0xc8>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_TIM1_Init+0xc8>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_TIM1_Init+0xc8>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ba:	0021      	movs	r1, r4
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	2201      	movs	r2, #1
 80009c0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009c2:	187b      	adds	r3, r7, r1
 80009c4:	2200      	movs	r2, #0
 80009c6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	2201      	movs	r2, #1
 80009cc:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2201      	movs	r2, #1
 80009e4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2200      	movs	r2, #0
 80009f0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80009f2:	187a      	adds	r2, r7, r1
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_TIM1_Init+0xc8>)
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f002 fa09 	bl	8002e10 <HAL_TIM_Encoder_Init>
 80009fe:	1e03      	subs	r3, r0, #0
 8000a00:	d001      	beq.n	8000a06 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000a02:	f7ff fef4 	bl	80007ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a06:	003b      	movs	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a0c:	003b      	movs	r3, r7
 8000a0e:	2200      	movs	r2, #0
 8000a10:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a12:	003b      	movs	r3, r7
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a18:	003a      	movs	r2, r7
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_TIM1_Init+0xc8>)
 8000a1c:	0011      	movs	r1, r2
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f002 fed8 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a24:	1e03      	subs	r3, r0, #0
 8000a26:	d001      	beq.n	8000a2c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a28:	f7ff fee1 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a2c:	46c0      	nop			; (mov r8, r8)
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	b00d      	add	sp, #52	; 0x34
 8000a32:	bd90      	pop	{r4, r7, pc}
 8000a34:	20000084 	.word	0x20000084
 8000a38:	40012c00 	.word	0x40012c00
 8000a3c:	0000ffff 	.word	0x0000ffff

08000a40 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a40:	b590      	push	{r4, r7, lr}
 8000a42:	b08d      	sub	sp, #52	; 0x34
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a46:	240c      	movs	r4, #12
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	2324      	movs	r3, #36	; 0x24
 8000a4e:	001a      	movs	r2, r3
 8000a50:	2100      	movs	r1, #0
 8000a52:	f004 fcdf 	bl	8005414 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a56:	003b      	movs	r3, r7
 8000a58:	0018      	movs	r0, r3
 8000a5a:	230c      	movs	r3, #12
 8000a5c:	001a      	movs	r2, r3
 8000a5e:	2100      	movs	r1, #0
 8000a60:	f004 fcd8 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a64:	4b25      	ldr	r3, [pc, #148]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000a66:	4a26      	ldr	r2, [pc, #152]	; (8000b00 <MX_TIM3_Init+0xc0>)
 8000a68:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b22      	ldr	r3, [pc, #136]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000a78:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <MX_TIM3_Init+0xc4>)
 8000a7a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a88:	0021      	movs	r1, r4
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a90:	187b      	adds	r3, r7, r1
 8000a92:	2200      	movs	r2, #0
 8000a94:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a96:	187b      	adds	r3, r7, r1
 8000a98:	2201      	movs	r2, #1
 8000a9a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000aa2:	187b      	adds	r3, r7, r1
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	2200      	movs	r2, #0
 8000aac:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000ac0:	187a      	adds	r2, r7, r1
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000ac4:	0011      	movs	r1, r2
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f002 f9a2 	bl	8002e10 <HAL_TIM_Encoder_Init>
 8000acc:	1e03      	subs	r3, r0, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000ad0:	f7ff fe8d 	bl	80007ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad4:	003b      	movs	r3, r7
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ada:	003b      	movs	r3, r7
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000ae0:	003a      	movs	r2, r7
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_TIM3_Init+0xbc>)
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f002 fe74 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000af0:	f7ff fe7d 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	b00d      	add	sp, #52	; 0x34
 8000afa:	bd90      	pop	{r4, r7, pc}
 8000afc:	200000d0 	.word	0x200000d0
 8000b00:	40000400 	.word	0x40000400
 8000b04:	0000ffff 	.word	0x0000ffff

08000b08 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b0e:	1d3b      	adds	r3, r7, #4
 8000b10:	0018      	movs	r0, r3
 8000b12:	230c      	movs	r3, #12
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f004 fc7c 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b1c:	4b15      	ldr	r3, [pc, #84]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b1e:	4a16      	ldr	r2, [pc, #88]	; (8000b78 <MX_TIM6_Init+0x70>)
 8000b20:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b28:	4b12      	ldr	r3, [pc, #72]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b30:	4a12      	ldr	r2, [pc, #72]	; (8000b7c <MX_TIM6_Init+0x74>)
 8000b32:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f002 f8b7 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000b42:	1e03      	subs	r3, r0, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b46:	f7ff fe52 	bl	80007ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	1d3b      	adds	r3, r7, #4
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b56:	1d3a      	adds	r2, r7, #4
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_TIM6_Init+0x6c>)
 8000b5a:	0011      	movs	r1, r2
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f002 fe39 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b62:	1e03      	subs	r3, r0, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b66:	f7ff fe42 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	2000011c 	.word	0x2000011c
 8000b78:	40001000 	.word	0x40001000
 8000b7c:	0000ffff 	.word	0x0000ffff

08000b80 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	0018      	movs	r0, r3
 8000b8a:	230c      	movs	r3, #12
 8000b8c:	001a      	movs	r2, r3
 8000b8e:	2100      	movs	r1, #0
 8000b90:	f004 fc40 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000b96:	4a16      	ldr	r2, [pc, #88]	; (8000bf0 <MX_TIM7_Init+0x70>)
 8000b98:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000ba8:	4a12      	ldr	r2, [pc, #72]	; (8000bf4 <MX_TIM7_Init+0x74>)
 8000baa:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f002 f87b 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000bba:	1e03      	subs	r3, r0, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000bbe:	f7ff fe16 	bl	80007ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc8:	1d3b      	adds	r3, r7, #4
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bce:	1d3a      	adds	r2, r7, #4
 8000bd0:	4b06      	ldr	r3, [pc, #24]	; (8000bec <MX_TIM7_Init+0x6c>)
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f002 fdfd 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000bde:	f7ff fe06 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b004      	add	sp, #16
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	20000168 	.word	0x20000168
 8000bf0:	40001400 	.word	0x40001400
 8000bf4:	0000ffff 	.word	0x0000ffff

08000bf8 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b088      	sub	sp, #32
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	0018      	movs	r0, r3
 8000c02:	231c      	movs	r3, #28
 8000c04:	001a      	movs	r2, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	f004 fc04 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c0e:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <MX_TIM14_Init+0x98>)
 8000c10:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000c1e:	4b1b      	ldr	r3, [pc, #108]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c20:	4a1c      	ldr	r2, [pc, #112]	; (8000c94 <MX_TIM14_Init+0x9c>)
 8000c22:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c24:	4b19      	ldr	r3, [pc, #100]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c2a:	4b18      	ldr	r3, [pc, #96]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c30:	4b16      	ldr	r3, [pc, #88]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c32:	0018      	movs	r0, r3
 8000c34:	f002 f83c 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000c38:	1e03      	subs	r3, r0, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000c3c:	f7ff fdd7 	bl	80007ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c42:	0018      	movs	r0, r3
 8000c44:	f002 f88c 	bl	8002d60 <HAL_TIM_PWM_Init>
 8000c48:	1e03      	subs	r3, r0, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000c4c:	f7ff fdcf 	bl	80007ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2260      	movs	r2, #96	; 0x60
 8000c54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c5c:	1d3b      	adds	r3, r7, #4
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c62:	1d3b      	adds	r3, r7, #4
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c68:	1d39      	adds	r1, r7, #4
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f002 f976 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000c74:	1e03      	subs	r3, r0, #0
 8000c76:	d001      	beq.n	8000c7c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000c78:	f7ff fdb9 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000c7c:	4b03      	ldr	r3, [pc, #12]	; (8000c8c <MX_TIM14_Init+0x94>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f000 fad4 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000c84:	46c0      	nop			; (mov r8, r8)
 8000c86:	46bd      	mov	sp, r7
 8000c88:	b008      	add	sp, #32
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200001b4 	.word	0x200001b4
 8000c90:	40002000 	.word	0x40002000
 8000c94:	0000ffff 	.word	0x0000ffff

08000c98 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b098      	sub	sp, #96	; 0x60
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c9e:	2354      	movs	r3, #84	; 0x54
 8000ca0:	18fb      	adds	r3, r7, r3
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	001a      	movs	r2, r3
 8000ca8:	2100      	movs	r1, #0
 8000caa:	f004 fbb3 	bl	8005414 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cae:	2338      	movs	r3, #56	; 0x38
 8000cb0:	18fb      	adds	r3, r7, r3
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	231c      	movs	r3, #28
 8000cb6:	001a      	movs	r2, r3
 8000cb8:	2100      	movs	r1, #0
 8000cba:	f004 fbab 	bl	8005414 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	0018      	movs	r0, r3
 8000cc2:	2334      	movs	r3, #52	; 0x34
 8000cc4:	001a      	movs	r2, r3
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	f004 fba4 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000ccc:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000cce:	4a42      	ldr	r2, [pc, #264]	; (8000dd8 <MX_TIM15_Init+0x140>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000cd2:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000cde:	4b3d      	ldr	r3, [pc, #244]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000ce0:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <MX_TIM15_Init+0x144>)
 8000ce2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce4:	4b3b      	ldr	r3, [pc, #236]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000cea:	4b3a      	ldr	r3, [pc, #232]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf0:	4b38      	ldr	r3, [pc, #224]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000cf6:	4b37      	ldr	r3, [pc, #220]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000cf8:	0018      	movs	r0, r3
 8000cfa:	f002 f831 	bl	8002d60 <HAL_TIM_PWM_Init>
 8000cfe:	1e03      	subs	r3, r0, #0
 8000d00:	d001      	beq.n	8000d06 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d02:	f7ff fd74 	bl	80007ee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d06:	2154      	movs	r1, #84	; 0x54
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0e:	187b      	adds	r3, r7, r1
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d14:	187a      	adds	r2, r7, r1
 8000d16:	4b2f      	ldr	r3, [pc, #188]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f002 fd5a 	bl	80037d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d20:	1e03      	subs	r3, r0, #0
 8000d22:	d001      	beq.n	8000d28 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000d24:	f7ff fd63 	bl	80007ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d28:	2138      	movs	r1, #56	; 0x38
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2260      	movs	r2, #96	; 0x60
 8000d2e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	1879      	adds	r1, r7, r1
 8000d56:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	0018      	movs	r0, r3
 8000d5c:	f002 f900 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000d60:	1e03      	subs	r3, r0, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000d64:	f7ff fd43 	bl	80007ee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d68:	2338      	movs	r3, #56	; 0x38
 8000d6a:	18f9      	adds	r1, r7, r3
 8000d6c:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000d6e:	2204      	movs	r2, #4
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 f8f5 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	1e03      	subs	r3, r0, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8000d7a:	f7ff fd38 	bl	80007ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d90:	1d3b      	adds	r3, r7, #4
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d9c:	1d3b      	adds	r3, r7, #4
 8000d9e:	2280      	movs	r2, #128	; 0x80
 8000da0:	0192      	lsls	r2, r2, #6
 8000da2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2200      	movs	r2, #0
 8000da8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000db0:	1d3a      	adds	r2, r7, #4
 8000db2:	4b08      	ldr	r3, [pc, #32]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f002 fd74 	bl	80038a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000dc0:	f7ff fd15 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <MX_TIM15_Init+0x13c>)
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f000 fa30 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000dcc:	46c0      	nop			; (mov r8, r8)
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	b018      	add	sp, #96	; 0x60
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	20000200 	.word	0x20000200
 8000dd8:	40014000 	.word	0x40014000
 8000ddc:	0000ffff 	.word	0x0000ffff

08000de0 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b094      	sub	sp, #80	; 0x50
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de6:	2334      	movs	r3, #52	; 0x34
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	0018      	movs	r0, r3
 8000dec:	231c      	movs	r3, #28
 8000dee:	001a      	movs	r2, r3
 8000df0:	2100      	movs	r1, #0
 8000df2:	f004 fb0f 	bl	8005414 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000df6:	003b      	movs	r3, r7
 8000df8:	0018      	movs	r0, r3
 8000dfa:	2334      	movs	r3, #52	; 0x34
 8000dfc:	001a      	movs	r2, r3
 8000dfe:	2100      	movs	r1, #0
 8000e00:	f004 fb08 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e04:	4b37      	ldr	r3, [pc, #220]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e06:	4a38      	ldr	r2, [pc, #224]	; (8000ee8 <MX_TIM16_Init+0x108>)
 8000e08:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000e0a:	4b36      	ldr	r3, [pc, #216]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b34      	ldr	r3, [pc, #208]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000e16:	4b33      	ldr	r3, [pc, #204]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e18:	4a34      	ldr	r2, [pc, #208]	; (8000eec <MX_TIM16_Init+0x10c>)
 8000e1a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b31      	ldr	r3, [pc, #196]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e22:	4b30      	ldr	r3, [pc, #192]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 ff3d 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000e36:	1e03      	subs	r3, r0, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000e3a:	f7ff fcd8 	bl	80007ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e3e:	4b29      	ldr	r3, [pc, #164]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e40:	0018      	movs	r0, r3
 8000e42:	f001 ff8d 	bl	8002d60 <HAL_TIM_PWM_Init>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000e4a:	f7ff fcd0 	bl	80007ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e4e:	2134      	movs	r1, #52	; 0x34
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2260      	movs	r2, #96	; 0x60
 8000e54:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e56:	187b      	adds	r3, r7, r1
 8000e58:	2200      	movs	r2, #0
 8000e5a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e62:	187b      	adds	r3, r7, r1
 8000e64:	2200      	movs	r2, #0
 8000e66:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e6e:	187b      	adds	r3, r7, r1
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e74:	187b      	adds	r3, r7, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e7a:	1879      	adds	r1, r7, r1
 8000e7c:	4b19      	ldr	r3, [pc, #100]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	0018      	movs	r0, r3
 8000e82:	f002 f86d 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000e86:	1e03      	subs	r3, r0, #0
 8000e88:	d001      	beq.n	8000e8e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000e8a:	f7ff fcb0 	bl	80007ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e8e:	003b      	movs	r3, r7
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e94:	003b      	movs	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e9a:	003b      	movs	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea0:	003b      	movs	r3, r7
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eac:	003b      	movs	r3, r7
 8000eae:	2280      	movs	r2, #128	; 0x80
 8000eb0:	0192      	lsls	r2, r2, #6
 8000eb2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000eb4:	003b      	movs	r3, r7
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000ec0:	003a      	movs	r2, r7
 8000ec2:	4b08      	ldr	r3, [pc, #32]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000ec4:	0011      	movs	r1, r2
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f002 fcec 	bl	80038a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ecc:	1e03      	subs	r3, r0, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000ed0:	f7ff fc8d 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <MX_TIM16_Init+0x104>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 f9a8 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000edc:	46c0      	nop			; (mov r8, r8)
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	b014      	add	sp, #80	; 0x50
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	2000024c 	.word	0x2000024c
 8000ee8:	40014400 	.word	0x40014400
 8000eec:	0000ffff 	.word	0x0000ffff

08000ef0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b094      	sub	sp, #80	; 0x50
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef6:	2334      	movs	r3, #52	; 0x34
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	0018      	movs	r0, r3
 8000efc:	231c      	movs	r3, #28
 8000efe:	001a      	movs	r2, r3
 8000f00:	2100      	movs	r1, #0
 8000f02:	f004 fa87 	bl	8005414 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f06:	003b      	movs	r3, r7
 8000f08:	0018      	movs	r0, r3
 8000f0a:	2334      	movs	r3, #52	; 0x34
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	2100      	movs	r1, #0
 8000f10:	f004 fa80 	bl	8005414 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f14:	4b37      	ldr	r3, [pc, #220]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f16:	4a38      	ldr	r2, [pc, #224]	; (8000ff8 <MX_TIM17_Init+0x108>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b34      	ldr	r3, [pc, #208]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000f26:	4b33      	ldr	r3, [pc, #204]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f28:	4a34      	ldr	r2, [pc, #208]	; (8000ffc <MX_TIM17_Init+0x10c>)
 8000f2a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2c:	4b31      	ldr	r3, [pc, #196]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f38:	4b2e      	ldr	r3, [pc, #184]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 feb5 	bl	8002cb0 <HAL_TIM_Base_Init>
 8000f46:	1e03      	subs	r3, r0, #0
 8000f48:	d001      	beq.n	8000f4e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000f4a:	f7ff fc50 	bl	80007ee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f50:	0018      	movs	r0, r3
 8000f52:	f001 ff05 	bl	8002d60 <HAL_TIM_PWM_Init>
 8000f56:	1e03      	subs	r3, r0, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000f5a:	f7ff fc48 	bl	80007ee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5e:	2134      	movs	r1, #52	; 0x34
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	2260      	movs	r2, #96	; 0x60
 8000f64:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f66:	187b      	adds	r3, r7, r1
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6c:	187b      	adds	r3, r7, r1
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f72:	187b      	adds	r3, r7, r1
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f7e:	187b      	adds	r3, r7, r1
 8000f80:	2200      	movs	r2, #0
 8000f82:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f84:	187b      	adds	r3, r7, r1
 8000f86:	2200      	movs	r2, #0
 8000f88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f8a:	1879      	adds	r1, r7, r1
 8000f8c:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	0018      	movs	r0, r3
 8000f92:	f001 ffe5 	bl	8002f60 <HAL_TIM_PWM_ConfigChannel>
 8000f96:	1e03      	subs	r3, r0, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000f9a:	f7ff fc28 	bl	80007ee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f9e:	003b      	movs	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fa4:	003b      	movs	r3, r7
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000faa:	003b      	movs	r3, r7
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fb0:	003b      	movs	r3, r7
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fb6:	003b      	movs	r3, r7
 8000fb8:	2200      	movs	r2, #0
 8000fba:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fbc:	003b      	movs	r3, r7
 8000fbe:	2280      	movs	r2, #128	; 0x80
 8000fc0:	0192      	lsls	r2, r2, #6
 8000fc2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fc4:	003b      	movs	r3, r7
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fca:	003b      	movs	r3, r7
 8000fcc:	2200      	movs	r2, #0
 8000fce:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000fd0:	003a      	movs	r2, r7
 8000fd2:	4b08      	ldr	r3, [pc, #32]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000fd4:	0011      	movs	r1, r2
 8000fd6:	0018      	movs	r0, r3
 8000fd8:	f002 fc64 	bl	80038a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fdc:	1e03      	subs	r3, r0, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8000fe0:	f7ff fc05 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000fe4:	4b03      	ldr	r3, [pc, #12]	; (8000ff4 <MX_TIM17_Init+0x104>)
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 f920 	bl	800122c <HAL_TIM_MspPostInit>

}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b014      	add	sp, #80	; 0x50
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000298 	.word	0x20000298
 8000ff8:	40014800 	.word	0x40014800
 8000ffc:	0000ffff 	.word	0x0000ffff

08001000 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b08d      	sub	sp, #52	; 0x34
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	241c      	movs	r4, #28
 800100a:	193b      	adds	r3, r7, r4
 800100c:	0018      	movs	r0, r3
 800100e:	2314      	movs	r3, #20
 8001010:	001a      	movs	r2, r3
 8001012:	2100      	movs	r1, #0
 8001014:	f004 f9fe 	bl	8005414 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a36      	ldr	r2, [pc, #216]	; (80010f8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d132      	bne.n	8001088 <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001028:	2180      	movs	r1, #128	; 0x80
 800102a:	0109      	lsls	r1, r1, #4
 800102c:	430a      	orrs	r2, r1
 800102e:	641a      	str	r2, [r3, #64]	; 0x40
 8001030:	4b32      	ldr	r3, [pc, #200]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001032:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001034:	2380      	movs	r3, #128	; 0x80
 8001036:	011b      	lsls	r3, r3, #4
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b2f      	ldr	r3, [pc, #188]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001042:	4b2e      	ldr	r3, [pc, #184]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001044:	2101      	movs	r1, #1
 8001046:	430a      	orrs	r2, r1
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
 800104a:	4b2c      	ldr	r3, [pc, #176]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 800104c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800104e:	2201      	movs	r2, #1
 8001050:	4013      	ands	r3, r2
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_B_Pin|ENCODER_1_A_Pin;
 8001056:	193b      	adds	r3, r7, r4
 8001058:	22c0      	movs	r2, #192	; 0xc0
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	0021      	movs	r1, r4
 8001060:	187b      	adds	r3, r7, r1
 8001062:	2202      	movs	r2, #2
 8001064:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	187b      	adds	r3, r7, r1
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	187b      	adds	r3, r7, r1
 800106e:	2200      	movs	r2, #0
 8001070:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001072:	187b      	adds	r3, r7, r1
 8001074:	2202      	movs	r2, #2
 8001076:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	187a      	adds	r2, r7, r1
 800107a:	23a0      	movs	r3, #160	; 0xa0
 800107c:	05db      	lsls	r3, r3, #23
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f000 fcd5 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001086:	e033      	b.n	80010f0 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_TIM_Encoder_MspInit+0x100>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12e      	bne.n	80010f0 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001096:	4b19      	ldr	r3, [pc, #100]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 8001098:	2102      	movs	r1, #2
 800109a:	430a      	orrs	r2, r1
 800109c:	63da      	str	r2, [r3, #60]	; 0x3c
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 80010a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010a2:	2202      	movs	r2, #2
 80010a4:	4013      	ands	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 80010ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010ae:	4b13      	ldr	r3, [pc, #76]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	430a      	orrs	r2, r1
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_TIM_Encoder_MspInit+0xfc>)
 80010b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010ba:	2201      	movs	r2, #1
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_2_A_Pin|ENCODER_2_B_Pin;
 80010c2:	211c      	movs	r1, #28
 80010c4:	187b      	adds	r3, r7, r1
 80010c6:	22c0      	movs	r2, #192	; 0xc0
 80010c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	187b      	adds	r3, r7, r1
 80010cc:	2202      	movs	r2, #2
 80010ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	187b      	adds	r3, r7, r1
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80010dc:	187b      	adds	r3, r7, r1
 80010de:	2201      	movs	r2, #1
 80010e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	187a      	adds	r2, r7, r1
 80010e4:	23a0      	movs	r3, #160	; 0xa0
 80010e6:	05db      	lsls	r3, r3, #23
 80010e8:	0011      	movs	r1, r2
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fca0 	bl	8001a30 <HAL_GPIO_Init>
}
 80010f0:	46c0      	nop			; (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	b00d      	add	sp, #52	; 0x34
 80010f6:	bd90      	pop	{r4, r7, pc}
 80010f8:	40012c00 	.word	0x40012c00
 80010fc:	40021000 	.word	0x40021000
 8001100:	40000400 	.word	0x40000400

08001104 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a30      	ldr	r2, [pc, #192]	; (80011d4 <HAL_TIM_Base_MspInit+0xd0>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d10c      	bne.n	8001130 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001118:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 800111c:	2110      	movs	r1, #16
 800111e:	430a      	orrs	r2, r1
 8001120:	63da      	str	r2, [r3, #60]	; 0x3c
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001126:	2210      	movs	r2, #16
 8001128:	4013      	ands	r3, r2
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800112e:	e04c      	b.n	80011ca <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a29      	ldr	r2, [pc, #164]	; (80011dc <HAL_TIM_Base_MspInit+0xd8>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10c      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 800113c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001140:	2120      	movs	r1, #32
 8001142:	430a      	orrs	r2, r1
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	2220      	movs	r2, #32
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
 8001150:	69bb      	ldr	r3, [r7, #24]
}
 8001152:	e03a      	b.n	80011ca <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <HAL_TIM_Base_MspInit+0xdc>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10e      	bne.n	800117c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001162:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001164:	2180      	movs	r1, #128	; 0x80
 8001166:	0209      	lsls	r1, r1, #8
 8001168:	430a      	orrs	r2, r1
 800116a:	641a      	str	r2, [r3, #64]	; 0x40
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 800116e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001170:	2380      	movs	r3, #128	; 0x80
 8001172:	021b      	lsls	r3, r3, #8
 8001174:	4013      	ands	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	697b      	ldr	r3, [r7, #20]
}
 800117a:	e026      	b.n	80011ca <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_TIM_Base_MspInit+0xe0>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10e      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001188:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	0289      	lsls	r1, r1, #10
 8001190:	430a      	orrs	r2, r1
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
 8001194:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 8001196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001198:	2380      	movs	r3, #128	; 0x80
 800119a:	029b      	lsls	r3, r3, #10
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	693b      	ldr	r3, [r7, #16]
}
 80011a2:	e012      	b.n	80011ca <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM17)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a0f      	ldr	r2, [pc, #60]	; (80011e8 <HAL_TIM_Base_MspInit+0xe4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d10d      	bne.n	80011ca <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 80011b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 80011b4:	2180      	movs	r1, #128	; 0x80
 80011b6:	02c9      	lsls	r1, r1, #11
 80011b8:	430a      	orrs	r2, r1
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <HAL_TIM_Base_MspInit+0xd4>)
 80011be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011c0:	2380      	movs	r3, #128	; 0x80
 80011c2:	02db      	lsls	r3, r3, #11
 80011c4:	4013      	ands	r3, r2
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
}
 80011ca:	46c0      	nop			; (mov r8, r8)
 80011cc:	46bd      	mov	sp, r7
 80011ce:	b008      	add	sp, #32
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	40001000 	.word	0x40001000
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40001400 	.word	0x40001400
 80011e0:	40002000 	.word	0x40002000
 80011e4:	40014400 	.word	0x40014400
 80011e8:	40014800 	.word	0x40014800

080011ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_TIM_PWM_MspInit+0x38>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d10d      	bne.n	800121a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80011fe:	4b0a      	ldr	r3, [pc, #40]	; (8001228 <HAL_TIM_PWM_MspInit+0x3c>)
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	4b09      	ldr	r3, [pc, #36]	; (8001228 <HAL_TIM_PWM_MspInit+0x3c>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	0249      	lsls	r1, r1, #9
 8001208:	430a      	orrs	r2, r1
 800120a:	641a      	str	r2, [r3, #64]	; 0x40
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_TIM_PWM_MspInit+0x3c>)
 800120e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	025b      	lsls	r3, r3, #9
 8001214:	4013      	ands	r3, r2
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800121a:	46c0      	nop			; (mov r8, r8)
 800121c:	46bd      	mov	sp, r7
 800121e:	b004      	add	sp, #16
 8001220:	bd80      	pop	{r7, pc}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	40014000 	.word	0x40014000
 8001228:	40021000 	.word	0x40021000

0800122c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800122c:	b590      	push	{r4, r7, lr}
 800122e:	b08d      	sub	sp, #52	; 0x34
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	241c      	movs	r4, #28
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	2314      	movs	r3, #20
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f004 f8e8 	bl	8005414 <memset>
  if(timHandle->Instance==TIM14)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a51      	ldr	r2, [pc, #324]	; (8001390 <HAL_TIM_MspPostInit+0x164>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d123      	bne.n	8001296 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800124e:	4b51      	ldr	r3, [pc, #324]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 8001250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001252:	4b50      	ldr	r3, [pc, #320]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 8001254:	2104      	movs	r1, #4
 8001256:	430a      	orrs	r2, r1
 8001258:	635a      	str	r2, [r3, #52]	; 0x34
 800125a:	4b4e      	ldr	r3, [pc, #312]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 800125c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800125e:	2204      	movs	r2, #4
 8001260:	4013      	ands	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
 8001264:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 8001266:	193b      	adds	r3, r7, r4
 8001268:	2280      	movs	r2, #128	; 0x80
 800126a:	0152      	lsls	r2, r2, #5
 800126c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	0021      	movs	r1, r4
 8001270:	187b      	adds	r3, r7, r1
 8001272:	2202      	movs	r2, #2
 8001274:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	187b      	adds	r3, r7, r1
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	187b      	adds	r3, r7, r1
 800127e:	2200      	movs	r2, #0
 8001280:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8001282:	187b      	adds	r3, r7, r1
 8001284:	2202      	movs	r2, #2
 8001286:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001288:	187b      	adds	r3, r7, r1
 800128a:	4a43      	ldr	r2, [pc, #268]	; (8001398 <HAL_TIM_MspPostInit+0x16c>)
 800128c:	0019      	movs	r1, r3
 800128e:	0010      	movs	r0, r2
 8001290:	f000 fbce 	bl	8001a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8001294:	e078      	b.n	8001388 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a40      	ldr	r2, [pc, #256]	; (800139c <HAL_TIM_MspPostInit+0x170>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d122      	bne.n	80012e6 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	4b3c      	ldr	r3, [pc, #240]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 80012a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 80012a6:	2104      	movs	r1, #4
 80012a8:	430a      	orrs	r2, r1
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
 80012ac:	4b39      	ldr	r3, [pc, #228]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 80012ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b0:	2204      	movs	r2, #4
 80012b2:	4013      	ands	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR_1_FWD_Pin|MOTOR_1_REV_Pin;
 80012b8:	211c      	movs	r1, #28
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2206      	movs	r2, #6
 80012be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c0:	187b      	adds	r3, r7, r1
 80012c2:	2202      	movs	r2, #2
 80012c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	187b      	adds	r3, r7, r1
 80012c8:	2200      	movs	r2, #0
 80012ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80012d2:	187b      	adds	r3, r7, r1
 80012d4:	2202      	movs	r2, #2
 80012d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	187b      	adds	r3, r7, r1
 80012da:	4a2f      	ldr	r2, [pc, #188]	; (8001398 <HAL_TIM_MspPostInit+0x16c>)
 80012dc:	0019      	movs	r1, r3
 80012de:	0010      	movs	r0, r2
 80012e0:	f000 fba6 	bl	8001a30 <HAL_GPIO_Init>
}
 80012e4:	e050      	b.n	8001388 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a2d      	ldr	r2, [pc, #180]	; (80013a0 <HAL_TIM_MspPostInit+0x174>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d123      	bne.n	8001338 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b28      	ldr	r3, [pc, #160]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 80012f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012f4:	4b27      	ldr	r3, [pc, #156]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 80012f6:	2102      	movs	r1, #2
 80012f8:	430a      	orrs	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
 80012fc:	4b25      	ldr	r3, [pc, #148]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 80012fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001300:	2202      	movs	r2, #2
 8001302:	4013      	ands	r3, r2
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_2_REV_Pin;
 8001308:	211c      	movs	r1, #28
 800130a:	187b      	adds	r3, r7, r1
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	0052      	lsls	r2, r2, #1
 8001310:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001312:	187b      	adds	r3, r7, r1
 8001314:	2202      	movs	r2, #2
 8001316:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	187b      	adds	r3, r7, r1
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2202      	movs	r2, #2
 8001328:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_REV_GPIO_Port, &GPIO_InitStruct);
 800132a:	187b      	adds	r3, r7, r1
 800132c:	4a1d      	ldr	r2, [pc, #116]	; (80013a4 <HAL_TIM_MspPostInit+0x178>)
 800132e:	0019      	movs	r1, r3
 8001330:	0010      	movs	r0, r2
 8001332:	f000 fb7d 	bl	8001a30 <HAL_GPIO_Init>
}
 8001336:	e027      	b.n	8001388 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a1a      	ldr	r2, [pc, #104]	; (80013a8 <HAL_TIM_MspPostInit+0x17c>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d122      	bne.n	8001388 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 8001344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 8001348:	2102      	movs	r1, #2
 800134a:	430a      	orrs	r2, r1
 800134c:	635a      	str	r2, [r3, #52]	; 0x34
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <HAL_TIM_MspPostInit+0x168>)
 8001350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_2_FWD_Pin;
 800135a:	211c      	movs	r1, #28
 800135c:	187b      	adds	r3, r7, r1
 800135e:	2280      	movs	r2, #128	; 0x80
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001364:	187b      	adds	r3, r7, r1
 8001366:	2202      	movs	r2, #2
 8001368:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2202      	movs	r2, #2
 800137a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_FWD_GPIO_Port, &GPIO_InitStruct);
 800137c:	187b      	adds	r3, r7, r1
 800137e:	4a09      	ldr	r2, [pc, #36]	; (80013a4 <HAL_TIM_MspPostInit+0x178>)
 8001380:	0019      	movs	r1, r3
 8001382:	0010      	movs	r0, r2
 8001384:	f000 fb54 	bl	8001a30 <HAL_GPIO_Init>
}
 8001388:	46c0      	nop			; (mov r8, r8)
 800138a:	46bd      	mov	sp, r7
 800138c:	b00d      	add	sp, #52	; 0x34
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	40002000 	.word	0x40002000
 8001394:	40021000 	.word	0x40021000
 8001398:	50000800 	.word	0x50000800
 800139c:	40014000 	.word	0x40014000
 80013a0:	40014400 	.word	0x40014400
 80013a4:	50000400 	.word	0x50000400
 80013a8:	40014800 	.word	0x40014800

080013ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013b0:	4b23      	ldr	r3, [pc, #140]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013b2:	4a24      	ldr	r2, [pc, #144]	; (8001444 <MX_USART1_UART_Init+0x98>)
 80013b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013b6:	4b22      	ldr	r3, [pc, #136]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013b8:	22e1      	movs	r2, #225	; 0xe1
 80013ba:	0252      	lsls	r2, r2, #9
 80013bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013be:	4b20      	ldr	r3, [pc, #128]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013c4:	4b1e      	ldr	r3, [pc, #120]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ca:	4b1d      	ldr	r3, [pc, #116]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013d2:	220c      	movs	r2, #12
 80013d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013de:	2200      	movs	r2, #0
 80013e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013ee:	4b14      	ldr	r3, [pc, #80]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_USART1_UART_Init+0x94>)
 80013f6:	0018      	movs	r0, r3
 80013f8:	f002 fafa 	bl	80039f0 <HAL_UART_Init>
 80013fc:	1e03      	subs	r3, r0, #0
 80013fe:	d001      	beq.n	8001404 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001400:	f7ff f9f5 	bl	80007ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001404:	4b0e      	ldr	r3, [pc, #56]	; (8001440 <MX_USART1_UART_Init+0x94>)
 8001406:	2100      	movs	r1, #0
 8001408:	0018      	movs	r0, r3
 800140a:	f002 feef 	bl	80041ec <HAL_UARTEx_SetTxFifoThreshold>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d001      	beq.n	8001416 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001412:	f7ff f9ec 	bl	80007ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <MX_USART1_UART_Init+0x94>)
 8001418:	2100      	movs	r1, #0
 800141a:	0018      	movs	r0, r3
 800141c:	f002 ff26 	bl	800426c <HAL_UARTEx_SetRxFifoThreshold>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001424:	f7ff f9e3 	bl	80007ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <MX_USART1_UART_Init+0x94>)
 800142a:	0018      	movs	r0, r3
 800142c:	f002 fea4 	bl	8004178 <HAL_UARTEx_DisableFifoMode>
 8001430:	1e03      	subs	r3, r0, #0
 8001432:	d001      	beq.n	8001438 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001434:	f7ff f9db 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001438:	46c0      	nop			; (mov r8, r8)
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	200002e4 	.word	0x200002e4
 8001444:	40013800 	.word	0x40013800

08001448 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800144c:	4b23      	ldr	r3, [pc, #140]	; (80014dc <MX_USART2_UART_Init+0x94>)
 800144e:	4a24      	ldr	r2, [pc, #144]	; (80014e0 <MX_USART2_UART_Init+0x98>)
 8001450:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001454:	22e1      	movs	r2, #225	; 0xe1
 8001456:	0252      	lsls	r2, r2, #9
 8001458:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145a:	4b20      	ldr	r3, [pc, #128]	; (80014dc <MX_USART2_UART_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001466:	4b1d      	ldr	r3, [pc, #116]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800146c:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <MX_USART2_UART_Init+0x94>)
 800146e:	220c      	movs	r2, #12
 8001470:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <MX_USART2_UART_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001484:	4b15      	ldr	r3, [pc, #84]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <MX_USART2_UART_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001490:	4b12      	ldr	r3, [pc, #72]	; (80014dc <MX_USART2_UART_Init+0x94>)
 8001492:	0018      	movs	r0, r3
 8001494:	f002 faac 	bl	80039f0 <HAL_UART_Init>
 8001498:	1e03      	subs	r3, r0, #0
 800149a:	d001      	beq.n	80014a0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800149c:	f7ff f9a7 	bl	80007ee <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014a0:	4b0e      	ldr	r3, [pc, #56]	; (80014dc <MX_USART2_UART_Init+0x94>)
 80014a2:	2100      	movs	r1, #0
 80014a4:	0018      	movs	r0, r3
 80014a6:	f002 fea1 	bl	80041ec <HAL_UARTEx_SetTxFifoThreshold>
 80014aa:	1e03      	subs	r3, r0, #0
 80014ac:	d001      	beq.n	80014b2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014ae:	f7ff f99e 	bl	80007ee <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <MX_USART2_UART_Init+0x94>)
 80014b4:	2100      	movs	r1, #0
 80014b6:	0018      	movs	r0, r3
 80014b8:	f002 fed8 	bl	800426c <HAL_UARTEx_SetRxFifoThreshold>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014c0:	f7ff f995 	bl	80007ee <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014c4:	4b05      	ldr	r3, [pc, #20]	; (80014dc <MX_USART2_UART_Init+0x94>)
 80014c6:	0018      	movs	r0, r3
 80014c8:	f002 fe56 	bl	8004178 <HAL_UARTEx_DisableFifoMode>
 80014cc:	1e03      	subs	r3, r0, #0
 80014ce:	d001      	beq.n	80014d4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014d0:	f7ff f98d 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014d4:	46c0      	nop			; (mov r8, r8)
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	46c0      	nop			; (mov r8, r8)
 80014dc:	20000378 	.word	0x20000378
 80014e0:	40004400 	.word	0x40004400

080014e4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80014e8:	4b16      	ldr	r3, [pc, #88]	; (8001544 <MX_USART3_UART_Init+0x60>)
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <MX_USART3_UART_Init+0x64>)
 80014ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <MX_USART3_UART_Init+0x60>)
 80014f0:	2296      	movs	r2, #150	; 0x96
 80014f2:	0192      	lsls	r2, r2, #6
 80014f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART3_UART_Init+0x60>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART3_UART_Init+0x60>)
 80014fe:	2200      	movs	r2, #0
 8001500:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_USART3_UART_Init+0x60>)
 8001504:	2200      	movs	r2, #0
 8001506:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART3_UART_Init+0x60>)
 800150a:	220c      	movs	r2, #12
 800150c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MX_USART3_UART_Init+0x60>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001514:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART3_UART_Init+0x60>)
 8001516:	2200      	movs	r2, #0
 8001518:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_USART3_UART_Init+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART3_UART_Init+0x60>)
 8001522:	2200      	movs	r2, #0
 8001524:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_USART3_UART_Init+0x60>)
 8001528:	2200      	movs	r2, #0
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <MX_USART3_UART_Init+0x60>)
 800152e:	0018      	movs	r0, r3
 8001530:	f002 fa5e 	bl	80039f0 <HAL_UART_Init>
 8001534:	1e03      	subs	r3, r0, #0
 8001536:	d001      	beq.n	800153c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001538:	f7ff f959 	bl	80007ee <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	2000040c 	.word	0x2000040c
 8001548:	40004800 	.word	0x40004800

0800154c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b095      	sub	sp, #84	; 0x54
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001554:	233c      	movs	r3, #60	; 0x3c
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	0018      	movs	r0, r3
 800155a:	2314      	movs	r3, #20
 800155c:	001a      	movs	r2, r3
 800155e:	2100      	movs	r1, #0
 8001560:	f003 ff58 	bl	8005414 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001564:	2420      	movs	r4, #32
 8001566:	193b      	adds	r3, r7, r4
 8001568:	0018      	movs	r0, r3
 800156a:	231c      	movs	r3, #28
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f003 ff50 	bl	8005414 <memset>
  if(uartHandle->Instance==USART1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a60      	ldr	r2, [pc, #384]	; (80016fc <HAL_UART_MspInit+0x1b0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d13e      	bne.n	80015fc <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800157e:	193b      	adds	r3, r7, r4
 8001580:	2201      	movs	r2, #1
 8001582:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001584:	193b      	adds	r3, r7, r4
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	f001 fa5b 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 8001592:	1e03      	subs	r3, r0, #0
 8001594:	d001      	beq.n	800159a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001596:	f7ff f92a 	bl	80007ee <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159a:	4b59      	ldr	r3, [pc, #356]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 800159c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800159e:	4b58      	ldr	r3, [pc, #352]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	01c9      	lsls	r1, r1, #7
 80015a4:	430a      	orrs	r2, r1
 80015a6:	641a      	str	r2, [r3, #64]	; 0x40
 80015a8:	4b55      	ldr	r3, [pc, #340]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80015aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	01db      	lsls	r3, r3, #7
 80015b0:	4013      	ands	r3, r2
 80015b2:	61fb      	str	r3, [r7, #28]
 80015b4:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80015b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ba:	4b51      	ldr	r3, [pc, #324]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80015bc:	2102      	movs	r1, #2
 80015be:	430a      	orrs	r2, r1
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
 80015c2:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80015c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c6:	2202      	movs	r2, #2
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
 80015cc:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	213c      	movs	r1, #60	; 0x3c
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	22c0      	movs	r2, #192	; 0xc0
 80015d4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	187b      	adds	r3, r7, r1
 80015d8:	2202      	movs	r2, #2
 80015da:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	187b      	adds	r3, r7, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e2:	187b      	adds	r3, r7, r1
 80015e4:	2200      	movs	r2, #0
 80015e6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80015e8:	187b      	adds	r3, r7, r1
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ee:	187b      	adds	r3, r7, r1
 80015f0:	4a44      	ldr	r2, [pc, #272]	; (8001704 <HAL_UART_MspInit+0x1b8>)
 80015f2:	0019      	movs	r1, r3
 80015f4:	0010      	movs	r0, r2
 80015f6:	f000 fa1b 	bl	8001a30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80015fa:	e07a      	b.n	80016f2 <HAL_UART_MspInit+0x1a6>
  else if(uartHandle->Instance==USART2)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a41      	ldr	r2, [pc, #260]	; (8001708 <HAL_UART_MspInit+0x1bc>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d140      	bne.n	8001688 <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001606:	2120      	movs	r1, #32
 8001608:	187b      	adds	r3, r7, r1
 800160a:	2202      	movs	r2, #2
 800160c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800160e:	187b      	adds	r3, r7, r1
 8001610:	2200      	movs	r2, #0
 8001612:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001614:	187b      	adds	r3, r7, r1
 8001616:	0018      	movs	r0, r3
 8001618:	f001 fa16 	bl	8002a48 <HAL_RCCEx_PeriphCLKConfig>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001620:	f7ff f8e5 	bl	80007ee <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001624:	4b36      	ldr	r3, [pc, #216]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 8001626:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	0289      	lsls	r1, r1, #10
 800162e:	430a      	orrs	r2, r1
 8001630:	63da      	str	r2, [r3, #60]	; 0x3c
 8001632:	4b33      	ldr	r3, [pc, #204]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 8001634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	4013      	ands	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001640:	4b2f      	ldr	r3, [pc, #188]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 8001642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001644:	4b2e      	ldr	r3, [pc, #184]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 8001646:	2101      	movs	r1, #1
 8001648:	430a      	orrs	r2, r1
 800164a:	635a      	str	r2, [r3, #52]	; 0x34
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 800164e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001650:	2201      	movs	r2, #1
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001658:	213c      	movs	r1, #60	; 0x3c
 800165a:	187b      	adds	r3, r7, r1
 800165c:	220c      	movs	r2, #12
 800165e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	187b      	adds	r3, r7, r1
 8001662:	2202      	movs	r2, #2
 8001664:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	187b      	adds	r3, r7, r1
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800166c:	187b      	adds	r3, r7, r1
 800166e:	2200      	movs	r2, #0
 8001670:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2201      	movs	r2, #1
 8001676:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	187a      	adds	r2, r7, r1
 800167a:	23a0      	movs	r3, #160	; 0xa0
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f000 f9d5 	bl	8001a30 <HAL_GPIO_Init>
}
 8001686:	e034      	b.n	80016f2 <HAL_UART_MspInit+0x1a6>
  else if(uartHandle->Instance==USART3)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a1f      	ldr	r2, [pc, #124]	; (800170c <HAL_UART_MspInit+0x1c0>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d12f      	bne.n	80016f2 <HAL_UART_MspInit+0x1a6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001692:	4b1b      	ldr	r3, [pc, #108]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 8001694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 8001698:	2180      	movs	r1, #128	; 0x80
 800169a:	02c9      	lsls	r1, r1, #11
 800169c:	430a      	orrs	r2, r1
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c
 80016a0:	4b17      	ldr	r3, [pc, #92]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80016a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	02db      	lsls	r3, r3, #11
 80016a8:	4013      	ands	r3, r2
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ae:	4b14      	ldr	r3, [pc, #80]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80016b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b2:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80016b4:	2104      	movs	r1, #4
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	4b11      	ldr	r3, [pc, #68]	; (8001700 <HAL_UART_MspInit+0x1b4>)
 80016bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016be:	2204      	movs	r2, #4
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016c6:	213c      	movs	r1, #60	; 0x3c
 80016c8:	187b      	adds	r3, r7, r1
 80016ca:	2230      	movs	r2, #48	; 0x30
 80016cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	187b      	adds	r3, r7, r1
 80016d0:	2202      	movs	r2, #2
 80016d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	187b      	adds	r3, r7, r1
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2200      	movs	r2, #0
 80016de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e6:	187b      	adds	r3, r7, r1
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_UART_MspInit+0x1c4>)
 80016ea:	0019      	movs	r1, r3
 80016ec:	0010      	movs	r0, r2
 80016ee:	f000 f99f 	bl	8001a30 <HAL_GPIO_Init>
}
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	46bd      	mov	sp, r7
 80016f6:	b015      	add	sp, #84	; 0x54
 80016f8:	bd90      	pop	{r4, r7, pc}
 80016fa:	46c0      	nop			; (mov r8, r8)
 80016fc:	40013800 	.word	0x40013800
 8001700:	40021000 	.word	0x40021000
 8001704:	50000400 	.word	0x50000400
 8001708:	40004400 	.word	0x40004400
 800170c:	40004800 	.word	0x40004800
 8001710:	50000800 	.word	0x50000800

08001714 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001716:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001718:	f7ff f8df 	bl	80008da <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	; (8001760 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001742:	f003 fe6f 	bl	8005424 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001746:	f7fe ffe7 	bl	8000718 <main>

0800174a <LoopForever>:

LoopForever:
  b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   r0, =_estack
 800174c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001758:	080055b0 	.word	0x080055b0
  ldr r2, =_sbss
 800175c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001760:	20007df0 	.word	0x20007df0

08001764 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_IRQHandler>
	...

08001768 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800176e:	1dfb      	adds	r3, r7, #7
 8001770:	2200      	movs	r2, #0
 8001772:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <HAL_Init+0x3c>)
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <HAL_Init+0x3c>)
 800177a:	2180      	movs	r1, #128	; 0x80
 800177c:	0049      	lsls	r1, r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001782:	2003      	movs	r0, #3
 8001784:	f000 f810 	bl	80017a8 <HAL_InitTick>
 8001788:	1e03      	subs	r3, r0, #0
 800178a:	d003      	beq.n	8001794 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	2201      	movs	r2, #1
 8001790:	701a      	strb	r2, [r3, #0]
 8001792:	e001      	b.n	8001798 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff f830 	bl	80007f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
}
 800179c:	0018      	movs	r0, r3
 800179e:	46bd      	mov	sp, r7
 80017a0:	b002      	add	sp, #8
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40022000 	.word	0x40022000

080017a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a8:	b590      	push	{r4, r7, lr}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017b0:	230f      	movs	r3, #15
 80017b2:	18fb      	adds	r3, r7, r3
 80017b4:	2200      	movs	r2, #0
 80017b6:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80017b8:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_InitTick+0x88>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d02b      	beq.n	8001818 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <HAL_InitTick+0x8c>)
 80017c2:	681c      	ldr	r4, [r3, #0]
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_InitTick+0x88>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	0019      	movs	r1, r3
 80017ca:	23fa      	movs	r3, #250	; 0xfa
 80017cc:	0098      	lsls	r0, r3, #2
 80017ce:	f7fe fc9b 	bl	8000108 <__udivsi3>
 80017d2:	0003      	movs	r3, r0
 80017d4:	0019      	movs	r1, r3
 80017d6:	0020      	movs	r0, r4
 80017d8:	f7fe fc96 	bl	8000108 <__udivsi3>
 80017dc:	0003      	movs	r3, r0
 80017de:	0018      	movs	r0, r3
 80017e0:	f000 f919 	bl	8001a16 <HAL_SYSTICK_Config>
 80017e4:	1e03      	subs	r3, r0, #0
 80017e6:	d112      	bne.n	800180e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d80a      	bhi.n	8001804 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	2301      	movs	r3, #1
 80017f2:	425b      	negs	r3, r3
 80017f4:	2200      	movs	r2, #0
 80017f6:	0018      	movs	r0, r3
 80017f8:	f000 f8e8 	bl	80019cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_InitTick+0x90>)
 80017fe:	687a      	ldr	r2, [r7, #4]
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e00d      	b.n	8001820 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001804:	230f      	movs	r3, #15
 8001806:	18fb      	adds	r3, r7, r3
 8001808:	2201      	movs	r2, #1
 800180a:	701a      	strb	r2, [r3, #0]
 800180c:	e008      	b.n	8001820 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800180e:	230f      	movs	r3, #15
 8001810:	18fb      	adds	r3, r7, r3
 8001812:	2201      	movs	r2, #1
 8001814:	701a      	strb	r2, [r3, #0]
 8001816:	e003      	b.n	8001820 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001818:	230f      	movs	r3, #15
 800181a:	18fb      	adds	r3, r7, r3
 800181c:	2201      	movs	r2, #1
 800181e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001820:	230f      	movs	r3, #15
 8001822:	18fb      	adds	r3, r7, r3
 8001824:	781b      	ldrb	r3, [r3, #0]
}
 8001826:	0018      	movs	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	b005      	add	sp, #20
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	46c0      	nop			; (mov r8, r8)
 8001830:	20000008 	.word	0x20000008
 8001834:	20000000 	.word	0x20000000
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <HAL_IncTick+0x1c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	001a      	movs	r2, r3
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_IncTick+0x20>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	18d2      	adds	r2, r2, r3
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_IncTick+0x20>)
 800184e:	601a      	str	r2, [r3, #0]
}
 8001850:	46c0      	nop			; (mov r8, r8)
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	46c0      	nop			; (mov r8, r8)
 8001858:	20000008 	.word	0x20000008
 800185c:	200004a0 	.word	0x200004a0

08001860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  return uwTick;
 8001864:	4b02      	ldr	r3, [pc, #8]	; (8001870 <HAL_GetTick+0x10>)
 8001866:	681b      	ldr	r3, [r3, #0]
}
 8001868:	0018      	movs	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	200004a0 	.word	0x200004a0

08001874 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	0002      	movs	r2, r0
 800187c:	1dfb      	adds	r3, r7, #7
 800187e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001880:	1dfb      	adds	r3, r7, #7
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b7f      	cmp	r3, #127	; 0x7f
 8001886:	d809      	bhi.n	800189c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001888:	1dfb      	adds	r3, r7, #7
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	001a      	movs	r2, r3
 800188e:	231f      	movs	r3, #31
 8001890:	401a      	ands	r2, r3
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <__NVIC_EnableIRQ+0x30>)
 8001894:	2101      	movs	r1, #1
 8001896:	4091      	lsls	r1, r2
 8001898:	000a      	movs	r2, r1
 800189a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	b002      	add	sp, #8
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	e000e100 	.word	0xe000e100

080018a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a8:	b590      	push	{r4, r7, lr}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	0002      	movs	r2, r0
 80018b0:	6039      	str	r1, [r7, #0]
 80018b2:	1dfb      	adds	r3, r7, #7
 80018b4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80018b6:	1dfb      	adds	r3, r7, #7
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b7f      	cmp	r3, #127	; 0x7f
 80018bc:	d828      	bhi.n	8001910 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018be:	4a2f      	ldr	r2, [pc, #188]	; (800197c <__NVIC_SetPriority+0xd4>)
 80018c0:	1dfb      	adds	r3, r7, #7
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	089b      	lsrs	r3, r3, #2
 80018c8:	33c0      	adds	r3, #192	; 0xc0
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	589b      	ldr	r3, [r3, r2]
 80018ce:	1dfa      	adds	r2, r7, #7
 80018d0:	7812      	ldrb	r2, [r2, #0]
 80018d2:	0011      	movs	r1, r2
 80018d4:	2203      	movs	r2, #3
 80018d6:	400a      	ands	r2, r1
 80018d8:	00d2      	lsls	r2, r2, #3
 80018da:	21ff      	movs	r1, #255	; 0xff
 80018dc:	4091      	lsls	r1, r2
 80018de:	000a      	movs	r2, r1
 80018e0:	43d2      	mvns	r2, r2
 80018e2:	401a      	ands	r2, r3
 80018e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	019b      	lsls	r3, r3, #6
 80018ea:	22ff      	movs	r2, #255	; 0xff
 80018ec:	401a      	ands	r2, r3
 80018ee:	1dfb      	adds	r3, r7, #7
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	0018      	movs	r0, r3
 80018f4:	2303      	movs	r3, #3
 80018f6:	4003      	ands	r3, r0
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018fc:	481f      	ldr	r0, [pc, #124]	; (800197c <__NVIC_SetPriority+0xd4>)
 80018fe:	1dfb      	adds	r3, r7, #7
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	430a      	orrs	r2, r1
 8001908:	33c0      	adds	r3, #192	; 0xc0
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800190e:	e031      	b.n	8001974 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001910:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <__NVIC_SetPriority+0xd8>)
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	0019      	movs	r1, r3
 8001918:	230f      	movs	r3, #15
 800191a:	400b      	ands	r3, r1
 800191c:	3b08      	subs	r3, #8
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3306      	adds	r3, #6
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	18d3      	adds	r3, r2, r3
 8001926:	3304      	adds	r3, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	1dfa      	adds	r2, r7, #7
 800192c:	7812      	ldrb	r2, [r2, #0]
 800192e:	0011      	movs	r1, r2
 8001930:	2203      	movs	r2, #3
 8001932:	400a      	ands	r2, r1
 8001934:	00d2      	lsls	r2, r2, #3
 8001936:	21ff      	movs	r1, #255	; 0xff
 8001938:	4091      	lsls	r1, r2
 800193a:	000a      	movs	r2, r1
 800193c:	43d2      	mvns	r2, r2
 800193e:	401a      	ands	r2, r3
 8001940:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	22ff      	movs	r2, #255	; 0xff
 8001948:	401a      	ands	r2, r3
 800194a:	1dfb      	adds	r3, r7, #7
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	0018      	movs	r0, r3
 8001950:	2303      	movs	r3, #3
 8001952:	4003      	ands	r3, r0
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001958:	4809      	ldr	r0, [pc, #36]	; (8001980 <__NVIC_SetPriority+0xd8>)
 800195a:	1dfb      	adds	r3, r7, #7
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	001c      	movs	r4, r3
 8001960:	230f      	movs	r3, #15
 8001962:	4023      	ands	r3, r4
 8001964:	3b08      	subs	r3, #8
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	430a      	orrs	r2, r1
 800196a:	3306      	adds	r3, #6
 800196c:	009b      	lsls	r3, r3, #2
 800196e:	18c3      	adds	r3, r0, r3
 8001970:	3304      	adds	r3, #4
 8001972:	601a      	str	r2, [r3, #0]
}
 8001974:	46c0      	nop			; (mov r8, r8)
 8001976:	46bd      	mov	sp, r7
 8001978:	b003      	add	sp, #12
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	e000e100 	.word	0xe000e100
 8001980:	e000ed00 	.word	0xe000ed00

08001984 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	1e5a      	subs	r2, r3, #1
 8001990:	2380      	movs	r3, #128	; 0x80
 8001992:	045b      	lsls	r3, r3, #17
 8001994:	429a      	cmp	r2, r3
 8001996:	d301      	bcc.n	800199c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001998:	2301      	movs	r3, #1
 800199a:	e010      	b.n	80019be <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800199c:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <SysTick_Config+0x44>)
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	3a01      	subs	r2, #1
 80019a2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019a4:	2301      	movs	r3, #1
 80019a6:	425b      	negs	r3, r3
 80019a8:	2103      	movs	r1, #3
 80019aa:	0018      	movs	r0, r3
 80019ac:	f7ff ff7c 	bl	80018a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b0:	4b05      	ldr	r3, [pc, #20]	; (80019c8 <SysTick_Config+0x44>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019b6:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <SysTick_Config+0x44>)
 80019b8:	2207      	movs	r2, #7
 80019ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019bc:	2300      	movs	r3, #0
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	b002      	add	sp, #8
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	46c0      	nop			; (mov r8, r8)
 80019c8:	e000e010 	.word	0xe000e010

080019cc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	210f      	movs	r1, #15
 80019d8:	187b      	adds	r3, r7, r1
 80019da:	1c02      	adds	r2, r0, #0
 80019dc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	187b      	adds	r3, r7, r1
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	0011      	movs	r1, r2
 80019e8:	0018      	movs	r0, r3
 80019ea:	f7ff ff5d 	bl	80018a8 <__NVIC_SetPriority>
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b004      	add	sp, #16
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b082      	sub	sp, #8
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	0002      	movs	r2, r0
 80019fe:	1dfb      	adds	r3, r7, #7
 8001a00:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a02:	1dfb      	adds	r3, r7, #7
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	b25b      	sxtb	r3, r3
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f7ff ff33 	bl	8001874 <__NVIC_EnableIRQ>
}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b082      	sub	sp, #8
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	0018      	movs	r0, r3
 8001a22:	f7ff ffaf 	bl	8001984 <SysTick_Config>
 8001a26:	0003      	movs	r3, r0
}
 8001a28:	0018      	movs	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	b002      	add	sp, #8
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a3e:	e147      	b.n	8001cd0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2101      	movs	r1, #1
 8001a46:	697a      	ldr	r2, [r7, #20]
 8001a48:	4091      	lsls	r1, r2
 8001a4a:	000a      	movs	r2, r1
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d100      	bne.n	8001a58 <HAL_GPIO_Init+0x28>
 8001a56:	e138      	b.n	8001cca <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d005      	beq.n	8001a70 <HAL_GPIO_Init+0x40>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2203      	movs	r2, #3
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d130      	bne.n	8001ad2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	2203      	movs	r2, #3
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	43da      	mvns	r2, r3
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	4013      	ands	r3, r2
 8001a86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	005b      	lsls	r3, r3, #1
 8001a90:	409a      	lsls	r2, r3
 8001a92:	0013      	movs	r3, r2
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	693a      	ldr	r2, [r7, #16]
 8001a9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	409a      	lsls	r2, r3
 8001aac:	0013      	movs	r3, r2
 8001aae:	43da      	mvns	r2, r3
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	2201      	movs	r2, #1
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	693a      	ldr	r2, [r7, #16]
 8001ad0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2203      	movs	r2, #3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d017      	beq.n	8001b0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
 8001ae2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	005b      	lsls	r3, r3, #1
 8001ae8:	2203      	movs	r2, #3
 8001aea:	409a      	lsls	r2, r3
 8001aec:	0013      	movs	r3, r2
 8001aee:	43da      	mvns	r2, r3
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	689a      	ldr	r2, [r3, #8]
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	409a      	lsls	r2, r3
 8001b00:	0013      	movs	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	2203      	movs	r2, #3
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d123      	bne.n	8001b62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	08da      	lsrs	r2, r3, #3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3208      	adds	r2, #8
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	58d3      	ldr	r3, [r2, r3]
 8001b26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2207      	movs	r2, #7
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	220f      	movs	r2, #15
 8001b32:	409a      	lsls	r2, r3
 8001b34:	0013      	movs	r3, r2
 8001b36:	43da      	mvns	r2, r3
 8001b38:	693b      	ldr	r3, [r7, #16]
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2107      	movs	r1, #7
 8001b46:	400b      	ands	r3, r1
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	409a      	lsls	r2, r3
 8001b4c:	0013      	movs	r3, r2
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	08da      	lsrs	r2, r3, #3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3208      	adds	r2, #8
 8001b5c:	0092      	lsls	r2, r2, #2
 8001b5e:	6939      	ldr	r1, [r7, #16]
 8001b60:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	2203      	movs	r2, #3
 8001b6e:	409a      	lsls	r2, r3
 8001b70:	0013      	movs	r3, r2
 8001b72:	43da      	mvns	r2, r3
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	401a      	ands	r2, r3
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	409a      	lsls	r2, r3
 8001b88:	0013      	movs	r3, r2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	693a      	ldr	r2, [r7, #16]
 8001b94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	23c0      	movs	r3, #192	; 0xc0
 8001b9c:	029b      	lsls	r3, r3, #10
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d100      	bne.n	8001ba4 <HAL_GPIO_Init+0x174>
 8001ba2:	e092      	b.n	8001cca <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ba4:	4a50      	ldr	r2, [pc, #320]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3318      	adds	r3, #24
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	589b      	ldr	r3, [r3, r2]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2203      	movs	r2, #3
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	220f      	movs	r2, #15
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	23a0      	movs	r3, #160	; 0xa0
 8001bcc:	05db      	lsls	r3, r3, #23
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d013      	beq.n	8001bfa <HAL_GPIO_Init+0x1ca>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a45      	ldr	r2, [pc, #276]	; (8001cec <HAL_GPIO_Init+0x2bc>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00d      	beq.n	8001bf6 <HAL_GPIO_Init+0x1c6>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <HAL_GPIO_Init+0x2c0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x1c2>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a43      	ldr	r2, [pc, #268]	; (8001cf4 <HAL_GPIO_Init+0x2c4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d101      	bne.n	8001bee <HAL_GPIO_Init+0x1be>
 8001bea:	2303      	movs	r3, #3
 8001bec:	e006      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bee:	2305      	movs	r3, #5
 8001bf0:	e004      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	e002      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e000      	b.n	8001bfc <HAL_GPIO_Init+0x1cc>
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	2103      	movs	r1, #3
 8001c00:	400a      	ands	r2, r1
 8001c02:	00d2      	lsls	r2, r2, #3
 8001c04:	4093      	lsls	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001c0c:	4936      	ldr	r1, [pc, #216]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	089b      	lsrs	r3, r3, #2
 8001c12:	3318      	adds	r3, #24
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43da      	mvns	r2, r3
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685a      	ldr	r2, [r3, #4]
 8001c2e:	2380      	movs	r3, #128	; 0x80
 8001c30:	035b      	lsls	r3, r3, #13
 8001c32:	4013      	ands	r3, r2
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	43da      	mvns	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4013      	ands	r3, r2
 8001c52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	2380      	movs	r3, #128	; 0x80
 8001c5a:	039b      	lsls	r3, r3, #14
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d003      	beq.n	8001c68 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c70:	2384      	movs	r3, #132	; 0x84
 8001c72:	58d3      	ldr	r3, [r2, r3]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	2380      	movs	r3, #128	; 0x80
 8001c86:	029b      	lsls	r3, r3, #10
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c94:	4914      	ldr	r1, [pc, #80]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c96:	2284      	movs	r2, #132	; 0x84
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001c9c:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001c9e:	2380      	movs	r3, #128	; 0x80
 8001ca0:	58d3      	ldr	r3, [r2, r3]
 8001ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	43da      	mvns	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	4013      	ands	r3, r2
 8001cac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685a      	ldr	r2, [r3, #4]
 8001cb2:	2380      	movs	r3, #128	; 0x80
 8001cb4:	025b      	lsls	r3, r3, #9
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cc2:	4909      	ldr	r1, [pc, #36]	; (8001ce8 <HAL_GPIO_Init+0x2b8>)
 8001cc4:	2280      	movs	r2, #128	; 0x80
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	40da      	lsrs	r2, r3
 8001cd8:	1e13      	subs	r3, r2, #0
 8001cda:	d000      	beq.n	8001cde <HAL_GPIO_Init+0x2ae>
 8001cdc:	e6b0      	b.n	8001a40 <HAL_GPIO_Init+0x10>
  }
}
 8001cde:	46c0      	nop			; (mov r8, r8)
 8001ce0:	46c0      	nop			; (mov r8, r8)
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	b006      	add	sp, #24
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	50000400 	.word	0x50000400
 8001cf0:	50000800 	.word	0x50000800
 8001cf4:	50000c00 	.word	0x50000c00

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	0008      	movs	r0, r1
 8001d02:	0011      	movs	r1, r2
 8001d04:	1cbb      	adds	r3, r7, #2
 8001d06:	1c02      	adds	r2, r0, #0
 8001d08:	801a      	strh	r2, [r3, #0]
 8001d0a:	1c7b      	adds	r3, r7, #1
 8001d0c:	1c0a      	adds	r2, r1, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d10:	1c7b      	adds	r3, r7, #1
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d004      	beq.n	8001d22 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d18:	1cbb      	adds	r3, r7, #2
 8001d1a:	881a      	ldrh	r2, [r3, #0]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d20:	e003      	b.n	8001d2a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d22:	1cbb      	adds	r3, r7, #2
 8001d24:	881a      	ldrh	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	b002      	add	sp, #8
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b084      	sub	sp, #16
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	000a      	movs	r2, r1
 8001d3c:	1cbb      	adds	r3, r7, #2
 8001d3e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	695b      	ldr	r3, [r3, #20]
 8001d44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d46:	1cbb      	adds	r3, r7, #2
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	041a      	lsls	r2, r3, #16
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	1cb9      	adds	r1, r7, #2
 8001d56:	8809      	ldrh	r1, [r1, #0]
 8001d58:	400b      	ands	r3, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
}
 8001d60:	46c0      	nop			; (mov r8, r8)
 8001d62:	46bd      	mov	sp, r7
 8001d64:	b004      	add	sp, #16
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	0002      	movs	r2, r0
 8001d70:	1dbb      	adds	r3, r7, #6
 8001d72:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001d74:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	1dba      	adds	r2, r7, #6
 8001d7a:	8812      	ldrh	r2, [r2, #0]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	d008      	beq.n	8001d92 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001d80:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d82:	1dba      	adds	r2, r7, #6
 8001d84:	8812      	ldrh	r2, [r2, #0]
 8001d86:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001d88:	1dbb      	adds	r3, r7, #6
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f000 f815 	bl	8001dbc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001d92:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	1dba      	adds	r2, r7, #6
 8001d98:	8812      	ldrh	r2, [r2, #0]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d008      	beq.n	8001db0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001d9e:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001da0:	1dba      	adds	r2, r7, #6
 8001da2:	8812      	ldrh	r2, [r2, #0]
 8001da4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001da6:	1dbb      	adds	r3, r7, #6
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	0018      	movs	r0, r3
 8001dac:	f000 f810 	bl	8001dd0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001db0:	46c0      	nop			; (mov r8, r8)
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b002      	add	sp, #8
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021800 	.word	0x40021800

08001dbc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b082      	sub	sp, #8
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	1dbb      	adds	r3, r7, #6
 8001dc6:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	1dbb      	adds	r3, r7, #6
 8001dda:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001ddc:	46c0      	nop			; (mov r8, r8)
 8001dde:	46bd      	mov	sp, r7
 8001de0:	b002      	add	sp, #8
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e082      	b.n	8001efc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2241      	movs	r2, #65	; 0x41
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d107      	bne.n	8001e12 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2240      	movs	r2, #64	; 0x40
 8001e06:	2100      	movs	r1, #0
 8001e08:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7fe fc37 	bl	8000680 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2241      	movs	r2, #65	; 0x41
 8001e16:	2124      	movs	r1, #36	; 0x24
 8001e18:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	438a      	bics	r2, r1
 8001e28:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4934      	ldr	r1, [pc, #208]	; (8001f04 <HAL_I2C_Init+0x120>)
 8001e34:	400a      	ands	r2, r1
 8001e36:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689a      	ldr	r2, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4931      	ldr	r1, [pc, #196]	; (8001f08 <HAL_I2C_Init+0x124>)
 8001e44:	400a      	ands	r2, r1
 8001e46:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689a      	ldr	r2, [r3, #8]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2180      	movs	r1, #128	; 0x80
 8001e5a:	0209      	lsls	r1, r1, #8
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
 8001e60:	e007      	b.n	8001e72 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2184      	movs	r1, #132	; 0x84
 8001e6c:	0209      	lsls	r1, r1, #8
 8001e6e:	430a      	orrs	r2, r1
 8001e70:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d104      	bne.n	8001e84 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685a      	ldr	r2, [r3, #4]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	491f      	ldr	r1, [pc, #124]	; (8001f0c <HAL_I2C_Init+0x128>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	491a      	ldr	r1, [pc, #104]	; (8001f08 <HAL_I2C_Init+0x124>)
 8001ea0:	400a      	ands	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	691a      	ldr	r2, [r3, #16]
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	431a      	orrs	r2, r3
 8001eae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69d9      	ldr	r1, [r3, #28]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a1a      	ldr	r2, [r3, #32]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2241      	movs	r2, #65	; 0x41
 8001ee8:	2120      	movs	r1, #32
 8001eea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2242      	movs	r2, #66	; 0x42
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	0018      	movs	r0, r3
 8001efe:	46bd      	mov	sp, r7
 8001f00:	b002      	add	sp, #8
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	f0ffffff 	.word	0xf0ffffff
 8001f08:	ffff7fff 	.word	0xffff7fff
 8001f0c:	02008000 	.word	0x02008000

08001f10 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2241      	movs	r2, #65	; 0x41
 8001f1e:	5c9b      	ldrb	r3, [r3, r2]
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b20      	cmp	r3, #32
 8001f24:	d138      	bne.n	8001f98 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2240      	movs	r2, #64	; 0x40
 8001f2a:	5c9b      	ldrb	r3, [r3, r2]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e032      	b.n	8001f9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2240      	movs	r2, #64	; 0x40
 8001f38:	2101      	movs	r1, #1
 8001f3a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2241      	movs	r2, #65	; 0x41
 8001f40:	2124      	movs	r1, #36	; 0x24
 8001f42:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	2101      	movs	r1, #1
 8001f50:	438a      	bics	r2, r1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4911      	ldr	r1, [pc, #68]	; (8001fa4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001f60:	400a      	ands	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2241      	movs	r2, #65	; 0x41
 8001f88:	2120      	movs	r1, #32
 8001f8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2240      	movs	r2, #64	; 0x40
 8001f90:	2100      	movs	r1, #0
 8001f92:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	e000      	b.n	8001f9a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f98:	2302      	movs	r3, #2
  }
}
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	b002      	add	sp, #8
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	46c0      	nop			; (mov r8, r8)
 8001fa4:	ffffefff 	.word	0xffffefff

08001fa8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2241      	movs	r2, #65	; 0x41
 8001fb6:	5c9b      	ldrb	r3, [r3, r2]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	d139      	bne.n	8002032 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2240      	movs	r2, #64	; 0x40
 8001fc2:	5c9b      	ldrb	r3, [r3, r2]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e033      	b.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2240      	movs	r2, #64	; 0x40
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2241      	movs	r2, #65	; 0x41
 8001fd8:	2124      	movs	r1, #36	; 0x24
 8001fda:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	2101      	movs	r1, #1
 8001fe8:	438a      	bics	r2, r1
 8001fea:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	4313      	orrs	r3, r2
 8002004:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68fa      	ldr	r2, [r7, #12]
 800200c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2101      	movs	r1, #1
 800201a:	430a      	orrs	r2, r1
 800201c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2241      	movs	r2, #65	; 0x41
 8002022:	2120      	movs	r1, #32
 8002024:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2240      	movs	r2, #64	; 0x40
 800202a:	2100      	movs	r1, #0
 800202c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	e000      	b.n	8002034 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002032:	2302      	movs	r3, #2
  }
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b004      	add	sp, #16
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fffff0ff 	.word	0xfffff0ff

08002040 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002048:	4b19      	ldr	r3, [pc, #100]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a19      	ldr	r2, [pc, #100]	; (80020b4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800204e:	4013      	ands	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	2380      	movs	r3, #128	; 0x80
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	429a      	cmp	r2, r3
 8002062:	d11f      	bne.n	80020a4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002064:	4b14      	ldr	r3, [pc, #80]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	0013      	movs	r3, r2
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	189b      	adds	r3, r3, r2
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	4912      	ldr	r1, [pc, #72]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002072:	0018      	movs	r0, r3
 8002074:	f7fe f848 	bl	8000108 <__udivsi3>
 8002078:	0003      	movs	r3, r0
 800207a:	3301      	adds	r3, #1
 800207c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800207e:	e008      	b.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	3b01      	subs	r3, #1
 800208a:	60fb      	str	r3, [r7, #12]
 800208c:	e001      	b.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e009      	b.n	80020a6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002092:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002094:	695a      	ldr	r2, [r3, #20]
 8002096:	2380      	movs	r3, #128	; 0x80
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	401a      	ands	r2, r3
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d0ed      	beq.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	0018      	movs	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	b004      	add	sp, #16
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	40007000 	.word	0x40007000
 80020b4:	fffff9ff 	.word	0xfffff9ff
 80020b8:	20000000 	.word	0x20000000
 80020bc:	000f4240 	.word	0x000f4240

080020c0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	23e0      	movs	r3, #224	; 0xe0
 80020ca:	01db      	lsls	r3, r3, #7
 80020cc:	4013      	ands	r3, r2
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000

080020d8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e2f3      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	2201      	movs	r2, #1
 80020f0:	4013      	ands	r3, r2
 80020f2:	d100      	bne.n	80020f6 <HAL_RCC_OscConfig+0x1e>
 80020f4:	e07c      	b.n	80021f0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f6:	4bc3      	ldr	r3, [pc, #780]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2238      	movs	r2, #56	; 0x38
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002100:	4bc0      	ldr	r3, [pc, #768]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2203      	movs	r2, #3
 8002106:	4013      	ands	r3, r2
 8002108:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b10      	cmp	r3, #16
 800210e:	d102      	bne.n	8002116 <HAL_RCC_OscConfig+0x3e>
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	2b03      	cmp	r3, #3
 8002114:	d002      	beq.n	800211c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	2b08      	cmp	r3, #8
 800211a:	d10b      	bne.n	8002134 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800211c:	4bb9      	ldr	r3, [pc, #740]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	029b      	lsls	r3, r3, #10
 8002124:	4013      	ands	r3, r2
 8002126:	d062      	beq.n	80021ee <HAL_RCC_OscConfig+0x116>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d15e      	bne.n	80021ee <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e2ce      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	025b      	lsls	r3, r3, #9
 800213c:	429a      	cmp	r2, r3
 800213e:	d107      	bne.n	8002150 <HAL_RCC_OscConfig+0x78>
 8002140:	4bb0      	ldr	r3, [pc, #704]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4baf      	ldr	r3, [pc, #700]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002146:	2180      	movs	r1, #128	; 0x80
 8002148:	0249      	lsls	r1, r1, #9
 800214a:	430a      	orrs	r2, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e020      	b.n	8002192 <HAL_RCC_OscConfig+0xba>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	23a0      	movs	r3, #160	; 0xa0
 8002156:	02db      	lsls	r3, r3, #11
 8002158:	429a      	cmp	r2, r3
 800215a:	d10e      	bne.n	800217a <HAL_RCC_OscConfig+0xa2>
 800215c:	4ba9      	ldr	r3, [pc, #676]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4ba8      	ldr	r3, [pc, #672]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002162:	2180      	movs	r1, #128	; 0x80
 8002164:	02c9      	lsls	r1, r1, #11
 8002166:	430a      	orrs	r2, r1
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	4ba6      	ldr	r3, [pc, #664]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4ba5      	ldr	r3, [pc, #660]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	0249      	lsls	r1, r1, #9
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0xba>
 800217a:	4ba2      	ldr	r3, [pc, #648]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4ba1      	ldr	r3, [pc, #644]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002180:	49a1      	ldr	r1, [pc, #644]	; (8002408 <HAL_RCC_OscConfig+0x330>)
 8002182:	400a      	ands	r2, r1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	4b9f      	ldr	r3, [pc, #636]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b9e      	ldr	r3, [pc, #632]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800218c:	499f      	ldr	r1, [pc, #636]	; (800240c <HAL_RCC_OscConfig+0x334>)
 800218e:	400a      	ands	r2, r1
 8002190:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d014      	beq.n	80021c4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7ff fb61 	bl	8001860 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fb5c 	bl	8001860 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e28d      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021b6:	4b93      	ldr	r3, [pc, #588]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	029b      	lsls	r3, r3, #10
 80021be:	4013      	ands	r3, r2
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0xcc>
 80021c2:	e015      	b.n	80021f0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7ff fb4c 	bl	8001860 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021cc:	e008      	b.n	80021e0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ce:	f7ff fb47 	bl	8001860 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	2b64      	cmp	r3, #100	; 0x64
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e278      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021e0:	4b88      	ldr	r3, [pc, #544]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	681a      	ldr	r2, [r3, #0]
 80021e4:	2380      	movs	r3, #128	; 0x80
 80021e6:	029b      	lsls	r3, r3, #10
 80021e8:	4013      	ands	r3, r2
 80021ea:	d1f0      	bne.n	80021ce <HAL_RCC_OscConfig+0xf6>
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ee:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2202      	movs	r2, #2
 80021f6:	4013      	ands	r3, r2
 80021f8:	d100      	bne.n	80021fc <HAL_RCC_OscConfig+0x124>
 80021fa:	e099      	b.n	8002330 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021fc:	4b81      	ldr	r3, [pc, #516]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	2238      	movs	r2, #56	; 0x38
 8002202:	4013      	ands	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002206:	4b7f      	ldr	r3, [pc, #508]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2203      	movs	r2, #3
 800220c:	4013      	ands	r3, r2
 800220e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	2b10      	cmp	r3, #16
 8002214:	d102      	bne.n	800221c <HAL_RCC_OscConfig+0x144>
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d002      	beq.n	8002222 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d135      	bne.n	800228e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002222:	4b78      	ldr	r3, [pc, #480]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4013      	ands	r3, r2
 800222c:	d005      	beq.n	800223a <HAL_RCC_OscConfig+0x162>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d101      	bne.n	800223a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e24b      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223a:	4b72      	ldr	r3, [pc, #456]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4a74      	ldr	r2, [pc, #464]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 8002240:	4013      	ands	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	021a      	lsls	r2, r3, #8
 800224a:	4b6e      	ldr	r3, [pc, #440]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d112      	bne.n	800227c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002256:	4b6b      	ldr	r3, [pc, #428]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a6e      	ldr	r2, [pc, #440]	; (8002414 <HAL_RCC_OscConfig+0x33c>)
 800225c:	4013      	ands	r3, r2
 800225e:	0019      	movs	r1, r3
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b67      	ldr	r3, [pc, #412]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800226a:	4b66      	ldr	r3, [pc, #408]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	0adb      	lsrs	r3, r3, #11
 8002270:	2207      	movs	r2, #7
 8002272:	4013      	ands	r3, r2
 8002274:	4a68      	ldr	r2, [pc, #416]	; (8002418 <HAL_RCC_OscConfig+0x340>)
 8002276:	40da      	lsrs	r2, r3
 8002278:	4b68      	ldr	r3, [pc, #416]	; (800241c <HAL_RCC_OscConfig+0x344>)
 800227a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x348>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fa91 	bl	80017a8 <HAL_InitTick>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d051      	beq.n	800232e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e221      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d030      	beq.n	80022f8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002296:	4b5b      	ldr	r3, [pc, #364]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a5e      	ldr	r2, [pc, #376]	; (8002414 <HAL_RCC_OscConfig+0x33c>)
 800229c:	4013      	ands	r3, r2
 800229e:	0019      	movs	r1, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	4b57      	ldr	r3, [pc, #348]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022a6:	430a      	orrs	r2, r1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80022aa:	4b56      	ldr	r3, [pc, #344]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	4b55      	ldr	r3, [pc, #340]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022b0:	2180      	movs	r1, #128	; 0x80
 80022b2:	0049      	lsls	r1, r1, #1
 80022b4:	430a      	orrs	r2, r1
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff fad2 	bl	8001860 <HAL_GetTick>
 80022bc:	0003      	movs	r3, r0
 80022be:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7ff facd 	bl	8001860 <HAL_GetTick>
 80022c6:	0002      	movs	r2, r0
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e1fe      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022d4:	4b4b      	ldr	r3, [pc, #300]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4013      	ands	r3, r2
 80022de:	d0f0      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4a4a      	ldr	r2, [pc, #296]	; (8002410 <HAL_RCC_OscConfig+0x338>)
 80022e6:	4013      	ands	r3, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	021a      	lsls	r2, r3, #8
 80022f0:	4b44      	ldr	r3, [pc, #272]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	e01b      	b.n	8002330 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80022f8:	4b42      	ldr	r3, [pc, #264]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	4b41      	ldr	r3, [pc, #260]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80022fe:	4949      	ldr	r1, [pc, #292]	; (8002424 <HAL_RCC_OscConfig+0x34c>)
 8002300:	400a      	ands	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002304:	f7ff faac 	bl	8001860 <HAL_GetTick>
 8002308:	0003      	movs	r3, r0
 800230a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800230c:	e008      	b.n	8002320 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800230e:	f7ff faa7 	bl	8001860 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b02      	cmp	r3, #2
 800231a:	d901      	bls.n	8002320 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e1d8      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002320:	4b38      	ldr	r3, [pc, #224]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2380      	movs	r3, #128	; 0x80
 8002326:	00db      	lsls	r3, r3, #3
 8002328:	4013      	ands	r3, r2
 800232a:	d1f0      	bne.n	800230e <HAL_RCC_OscConfig+0x236>
 800232c:	e000      	b.n	8002330 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2208      	movs	r2, #8
 8002336:	4013      	ands	r3, r2
 8002338:	d047      	beq.n	80023ca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800233a:	4b32      	ldr	r3, [pc, #200]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2238      	movs	r2, #56	; 0x38
 8002340:	4013      	ands	r3, r2
 8002342:	2b18      	cmp	r3, #24
 8002344:	d10a      	bne.n	800235c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002346:	4b2f      	ldr	r3, [pc, #188]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002348:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800234a:	2202      	movs	r2, #2
 800234c:	4013      	ands	r3, r2
 800234e:	d03c      	beq.n	80023ca <HAL_RCC_OscConfig+0x2f2>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d138      	bne.n	80023ca <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e1ba      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d019      	beq.n	8002398 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 8002366:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002368:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800236a:	2101      	movs	r1, #1
 800236c:	430a      	orrs	r2, r1
 800236e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002370:	f7ff fa76 	bl	8001860 <HAL_GetTick>
 8002374:	0003      	movs	r3, r0
 8002376:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002378:	e008      	b.n	800238c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800237a:	f7ff fa71 	bl	8001860 <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b02      	cmp	r3, #2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e1a2      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800238c:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800238e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002390:	2202      	movs	r2, #2
 8002392:	4013      	ands	r3, r2
 8002394:	d0f1      	beq.n	800237a <HAL_RCC_OscConfig+0x2a2>
 8002396:	e018      	b.n	80023ca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002398:	4b1a      	ldr	r3, [pc, #104]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800239a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 800239e:	2101      	movs	r1, #1
 80023a0:	438a      	bics	r2, r1
 80023a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a4:	f7ff fa5c 	bl	8001860 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ae:	f7ff fa57 	bl	8001860 <HAL_GetTick>
 80023b2:	0002      	movs	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e188      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80023c0:	4b10      	ldr	r3, [pc, #64]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80023c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023c4:	2202      	movs	r2, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d1f1      	bne.n	80023ae <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2204      	movs	r2, #4
 80023d0:	4013      	ands	r3, r2
 80023d2:	d100      	bne.n	80023d6 <HAL_RCC_OscConfig+0x2fe>
 80023d4:	e0c6      	b.n	8002564 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023d6:	231f      	movs	r3, #31
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	2238      	movs	r2, #56	; 0x38
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b20      	cmp	r3, #32
 80023e8:	d11e      	bne.n	8002428 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_RCC_OscConfig+0x32c>)
 80023ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ee:	2202      	movs	r2, #2
 80023f0:	4013      	ands	r3, r2
 80023f2:	d100      	bne.n	80023f6 <HAL_RCC_OscConfig+0x31e>
 80023f4:	e0b6      	b.n	8002564 <HAL_RCC_OscConfig+0x48c>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d000      	beq.n	8002400 <HAL_RCC_OscConfig+0x328>
 80023fe:	e0b1      	b.n	8002564 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e166      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
 8002404:	40021000 	.word	0x40021000
 8002408:	fffeffff 	.word	0xfffeffff
 800240c:	fffbffff 	.word	0xfffbffff
 8002410:	ffff80ff 	.word	0xffff80ff
 8002414:	ffffc7ff 	.word	0xffffc7ff
 8002418:	00f42400 	.word	0x00f42400
 800241c:	20000000 	.word	0x20000000
 8002420:	20000004 	.word	0x20000004
 8002424:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002428:	4bac      	ldr	r3, [pc, #688]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800242a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	055b      	lsls	r3, r3, #21
 8002430:	4013      	ands	r3, r2
 8002432:	d101      	bne.n	8002438 <HAL_RCC_OscConfig+0x360>
 8002434:	2301      	movs	r3, #1
 8002436:	e000      	b.n	800243a <HAL_RCC_OscConfig+0x362>
 8002438:	2300      	movs	r3, #0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d011      	beq.n	8002462 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	4ba7      	ldr	r3, [pc, #668]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002440:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002442:	4ba6      	ldr	r3, [pc, #664]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002444:	2180      	movs	r1, #128	; 0x80
 8002446:	0549      	lsls	r1, r1, #21
 8002448:	430a      	orrs	r2, r1
 800244a:	63da      	str	r2, [r3, #60]	; 0x3c
 800244c:	4ba3      	ldr	r3, [pc, #652]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800244e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	055b      	lsls	r3, r3, #21
 8002454:	4013      	ands	r3, r2
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800245a:	231f      	movs	r3, #31
 800245c:	18fb      	adds	r3, r7, r3
 800245e:	2201      	movs	r2, #1
 8002460:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002462:	4b9f      	ldr	r3, [pc, #636]	; (80026e0 <HAL_RCC_OscConfig+0x608>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	2380      	movs	r3, #128	; 0x80
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	4013      	ands	r3, r2
 800246c:	d11a      	bne.n	80024a4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800246e:	4b9c      	ldr	r3, [pc, #624]	; (80026e0 <HAL_RCC_OscConfig+0x608>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b9b      	ldr	r3, [pc, #620]	; (80026e0 <HAL_RCC_OscConfig+0x608>)
 8002474:	2180      	movs	r1, #128	; 0x80
 8002476:	0049      	lsls	r1, r1, #1
 8002478:	430a      	orrs	r2, r1
 800247a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800247c:	f7ff f9f0 	bl	8001860 <HAL_GetTick>
 8002480:	0003      	movs	r3, r0
 8002482:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002486:	f7ff f9eb 	bl	8001860 <HAL_GetTick>
 800248a:	0002      	movs	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e11c      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002498:	4b91      	ldr	r3, [pc, #580]	; (80026e0 <HAL_RCC_OscConfig+0x608>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	2380      	movs	r3, #128	; 0x80
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4013      	ands	r3, r2
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d106      	bne.n	80024ba <HAL_RCC_OscConfig+0x3e2>
 80024ac:	4b8b      	ldr	r3, [pc, #556]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024b0:	4b8a      	ldr	r3, [pc, #552]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	430a      	orrs	r2, r1
 80024b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80024b8:	e01c      	b.n	80024f4 <HAL_RCC_OscConfig+0x41c>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b05      	cmp	r3, #5
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0x404>
 80024c2:	4b86      	ldr	r3, [pc, #536]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024c6:	4b85      	ldr	r3, [pc, #532]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024c8:	2104      	movs	r1, #4
 80024ca:	430a      	orrs	r2, r1
 80024cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80024ce:	4b83      	ldr	r3, [pc, #524]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024d2:	4b82      	ldr	r3, [pc, #520]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	430a      	orrs	r2, r1
 80024d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0x41c>
 80024dc:	4b7f      	ldr	r3, [pc, #508]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024e0:	4b7e      	ldr	r3, [pc, #504]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	438a      	bics	r2, r1
 80024e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80024e8:	4b7c      	ldr	r3, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024ec:	4b7b      	ldr	r3, [pc, #492]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80024ee:	2104      	movs	r1, #4
 80024f0:	438a      	bics	r2, r1
 80024f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d014      	beq.n	8002526 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff f9b0 	bl	8001860 <HAL_GetTick>
 8002500:	0003      	movs	r3, r0
 8002502:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002504:	e009      	b.n	800251a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002506:	f7ff f9ab 	bl	8001860 <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	4a74      	ldr	r2, [pc, #464]	; (80026e4 <HAL_RCC_OscConfig+0x60c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e0db      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	2202      	movs	r2, #2
 8002520:	4013      	ands	r3, r2
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x42e>
 8002524:	e013      	b.n	800254e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002526:	f7ff f99b 	bl	8001860 <HAL_GetTick>
 800252a:	0003      	movs	r3, r0
 800252c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800252e:	e009      	b.n	8002544 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002530:	f7ff f996 	bl	8001860 <HAL_GetTick>
 8002534:	0002      	movs	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	4a6a      	ldr	r2, [pc, #424]	; (80026e4 <HAL_RCC_OscConfig+0x60c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e0c6      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002544:	4b65      	ldr	r3, [pc, #404]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002548:	2202      	movs	r2, #2
 800254a:	4013      	ands	r3, r2
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800254e:	231f      	movs	r3, #31
 8002550:	18fb      	adds	r3, r7, r3
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d105      	bne.n	8002564 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002558:	4b60      	ldr	r3, [pc, #384]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800255a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800255c:	4b5f      	ldr	r3, [pc, #380]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800255e:	4962      	ldr	r1, [pc, #392]	; (80026e8 <HAL_RCC_OscConfig+0x610>)
 8002560:	400a      	ands	r2, r1
 8002562:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	69db      	ldr	r3, [r3, #28]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d100      	bne.n	800256e <HAL_RCC_OscConfig+0x496>
 800256c:	e0b0      	b.n	80026d0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800256e:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	2238      	movs	r2, #56	; 0x38
 8002574:	4013      	ands	r3, r2
 8002576:	2b10      	cmp	r3, #16
 8002578:	d100      	bne.n	800257c <HAL_RCC_OscConfig+0x4a4>
 800257a:	e078      	b.n	800266e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69db      	ldr	r3, [r3, #28]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d153      	bne.n	800262c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002584:	4b55      	ldr	r3, [pc, #340]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	4b54      	ldr	r3, [pc, #336]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800258a:	4958      	ldr	r1, [pc, #352]	; (80026ec <HAL_RCC_OscConfig+0x614>)
 800258c:	400a      	ands	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7ff f966 	bl	8001860 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff f961 	bl	8001860 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e092      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	4b4b      	ldr	r3, [pc, #300]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	049b      	lsls	r3, r3, #18
 80025b4:	4013      	ands	r3, r2
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b8:	4b48      	ldr	r3, [pc, #288]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a4c      	ldr	r2, [pc, #304]	; (80026f0 <HAL_RCC_OscConfig+0x618>)
 80025be:	4013      	ands	r3, r2
 80025c0:	0019      	movs	r1, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6a1a      	ldr	r2, [r3, #32]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	431a      	orrs	r2, r3
 80025e0:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025e2:	430a      	orrs	r2, r1
 80025e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e6:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025ec:	2180      	movs	r1, #128	; 0x80
 80025ee:	0449      	lsls	r1, r1, #17
 80025f0:	430a      	orrs	r2, r1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 80025f4:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 80025fa:	2180      	movs	r1, #128	; 0x80
 80025fc:	0549      	lsls	r1, r1, #21
 80025fe:	430a      	orrs	r2, r1
 8002600:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002602:	f7ff f92d 	bl	8001860 <HAL_GetTick>
 8002606:	0003      	movs	r3, r0
 8002608:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800260c:	f7ff f928 	bl	8001860 <HAL_GetTick>
 8002610:	0002      	movs	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e059      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261e:	4b2f      	ldr	r3, [pc, #188]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	049b      	lsls	r3, r3, #18
 8002626:	4013      	ands	r3, r2
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x534>
 800262a:	e051      	b.n	80026d0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002632:	492e      	ldr	r1, [pc, #184]	; (80026ec <HAL_RCC_OscConfig+0x614>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7ff f912 	bl	8001860 <HAL_GetTick>
 800263c:	0003      	movs	r3, r0
 800263e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002642:	f7ff f90d 	bl	8001860 <HAL_GetTick>
 8002646:	0002      	movs	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e03e      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002654:	4b21      	ldr	r3, [pc, #132]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	2380      	movs	r3, #128	; 0x80
 800265a:	049b      	lsls	r3, r3, #18
 800265c:	4013      	ands	r3, r2
 800265e:	d1f0      	bne.n	8002642 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 8002666:	4923      	ldr	r1, [pc, #140]	; (80026f4 <HAL_RCC_OscConfig+0x61c>)
 8002668:	400a      	ands	r2, r1
 800266a:	60da      	str	r2, [r3, #12]
 800266c:	e030      	b.n	80026d0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e02b      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <HAL_RCC_OscConfig+0x604>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2203      	movs	r2, #3
 8002684:	401a      	ands	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	429a      	cmp	r2, r3
 800268c:	d11e      	bne.n	80026cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2270      	movs	r2, #112	; 0x70
 8002692:	401a      	ands	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d117      	bne.n	80026cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	23fe      	movs	r3, #254	; 0xfe
 80026a0:	01db      	lsls	r3, r3, #7
 80026a2:	401a      	ands	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d10e      	bne.n	80026cc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	23f8      	movs	r3, #248	; 0xf8
 80026b2:	039b      	lsls	r3, r3, #14
 80026b4:	401a      	ands	r2, r3
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d106      	bne.n	80026cc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	0f5b      	lsrs	r3, r3, #29
 80026c2:	075a      	lsls	r2, r3, #29
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	0018      	movs	r0, r3
 80026d4:	46bd      	mov	sp, r7
 80026d6:	b008      	add	sp, #32
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	46c0      	nop			; (mov r8, r8)
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40007000 	.word	0x40007000
 80026e4:	00001388 	.word	0x00001388
 80026e8:	efffffff 	.word	0xefffffff
 80026ec:	feffffff 	.word	0xfeffffff
 80026f0:	1fc1808c 	.word	0x1fc1808c
 80026f4:	effefffc 	.word	0xeffefffc

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0e9      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b76      	ldr	r3, [pc, #472]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2207      	movs	r2, #7
 8002712:	4013      	ands	r3, r2
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d91e      	bls.n	8002758 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b73      	ldr	r3, [pc, #460]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2207      	movs	r2, #7
 8002720:	4393      	bics	r3, r2
 8002722:	0019      	movs	r1, r3
 8002724:	4b70      	ldr	r3, [pc, #448]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002726:	683a      	ldr	r2, [r7, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800272c:	f7ff f898 	bl	8001860 <HAL_GetTick>
 8002730:	0003      	movs	r3, r0
 8002732:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002734:	e009      	b.n	800274a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f7ff f893 	bl	8001860 <HAL_GetTick>
 800273a:	0002      	movs	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	4a6a      	ldr	r2, [pc, #424]	; (80028ec <HAL_RCC_ClockConfig+0x1f4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d901      	bls.n	800274a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e0ca      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800274a:	4b67      	ldr	r3, [pc, #412]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2207      	movs	r2, #7
 8002750:	4013      	ands	r3, r2
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	429a      	cmp	r2, r3
 8002756:	d1ee      	bne.n	8002736 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2202      	movs	r2, #2
 800275e:	4013      	ands	r3, r2
 8002760:	d015      	beq.n	800278e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2204      	movs	r2, #4
 8002768:	4013      	ands	r3, r2
 800276a:	d006      	beq.n	800277a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800276c:	4b60      	ldr	r3, [pc, #384]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002772:	21e0      	movs	r1, #224	; 0xe0
 8002774:	01c9      	lsls	r1, r1, #7
 8002776:	430a      	orrs	r2, r1
 8002778:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277a:	4b5d      	ldr	r3, [pc, #372]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	4a5d      	ldr	r2, [pc, #372]	; (80028f4 <HAL_RCC_ClockConfig+0x1fc>)
 8002780:	4013      	ands	r3, r2
 8002782:	0019      	movs	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	4b59      	ldr	r3, [pc, #356]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 800278a:	430a      	orrs	r2, r1
 800278c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	2201      	movs	r2, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d057      	beq.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	2b01      	cmp	r3, #1
 800279e:	d107      	bne.n	80027b0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	; 0x80
 80027a6:	029b      	lsls	r3, r3, #10
 80027a8:	4013      	ands	r3, r2
 80027aa:	d12b      	bne.n	8002804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e097      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	2b02      	cmp	r3, #2
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b8:	4b4d      	ldr	r3, [pc, #308]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	; 0x80
 80027be:	049b      	lsls	r3, r3, #18
 80027c0:	4013      	ands	r3, r2
 80027c2:	d11f      	bne.n	8002804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e08b      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d0:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	00db      	lsls	r3, r3, #3
 80027d8:	4013      	ands	r3, r2
 80027da:	d113      	bne.n	8002804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e07f      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d106      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027e8:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ec:	2202      	movs	r2, #2
 80027ee:	4013      	ands	r3, r2
 80027f0:	d108      	bne.n	8002804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e074      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027f6:	4b3e      	ldr	r3, [pc, #248]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d101      	bne.n	8002804 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e06d      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002804:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	2207      	movs	r2, #7
 800280a:	4393      	bics	r3, r2
 800280c:	0019      	movs	r1, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	4b37      	ldr	r3, [pc, #220]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002814:	430a      	orrs	r2, r1
 8002816:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7ff f822 	bl	8001860 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002820:	e009      	b.n	8002836 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7ff f81d 	bl	8001860 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a2f      	ldr	r2, [pc, #188]	; (80028ec <HAL_RCC_ClockConfig+0x1f4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e054      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	2238      	movs	r2, #56	; 0x38
 800283c:	401a      	ands	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	00db      	lsls	r3, r3, #3
 8002844:	429a      	cmp	r2, r3
 8002846:	d1ec      	bne.n	8002822 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002848:	4b27      	ldr	r3, [pc, #156]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2207      	movs	r2, #7
 800284e:	4013      	ands	r3, r2
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d21e      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b24      	ldr	r3, [pc, #144]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2207      	movs	r2, #7
 800285c:	4393      	bics	r3, r2
 800285e:	0019      	movs	r1, r3
 8002860:	4b21      	ldr	r3, [pc, #132]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002868:	f7fe fffa 	bl	8001860 <HAL_GetTick>
 800286c:	0003      	movs	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002870:	e009      	b.n	8002886 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002872:	f7fe fff5 	bl	8001860 <HAL_GetTick>
 8002876:	0002      	movs	r2, r0
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <HAL_RCC_ClockConfig+0x1f4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e02c      	b.n	80028e0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002886:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_RCC_ClockConfig+0x1f0>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	2207      	movs	r2, #7
 800288c:	4013      	ands	r3, r2
 800288e:	683a      	ldr	r2, [r7, #0]
 8002890:	429a      	cmp	r2, r3
 8002892:	d1ee      	bne.n	8002872 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2204      	movs	r2, #4
 800289a:	4013      	ands	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800289e:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	4a15      	ldr	r2, [pc, #84]	; (80028f8 <HAL_RCC_ClockConfig+0x200>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	68da      	ldr	r2, [r3, #12]
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80028b2:	f000 f829 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 80028b6:	0001      	movs	r1, r0
 80028b8:	4b0d      	ldr	r3, [pc, #52]	; (80028f0 <HAL_RCC_ClockConfig+0x1f8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	0a1b      	lsrs	r3, r3, #8
 80028be:	220f      	movs	r2, #15
 80028c0:	401a      	ands	r2, r3
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x204>)
 80028c4:	0092      	lsls	r2, r2, #2
 80028c6:	58d3      	ldr	r3, [r2, r3]
 80028c8:	221f      	movs	r2, #31
 80028ca:	4013      	ands	r3, r2
 80028cc:	000a      	movs	r2, r1
 80028ce:	40da      	lsrs	r2, r3
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <HAL_RCC_ClockConfig+0x208>)
 80028d2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80028d4:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <HAL_RCC_ClockConfig+0x20c>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	0018      	movs	r0, r3
 80028da:	f7fe ff65 	bl	80017a8 <HAL_InitTick>
 80028de:	0003      	movs	r3, r0
}
 80028e0:	0018      	movs	r0, r3
 80028e2:	46bd      	mov	sp, r7
 80028e4:	b004      	add	sp, #16
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40022000 	.word	0x40022000
 80028ec:	00001388 	.word	0x00001388
 80028f0:	40021000 	.word	0x40021000
 80028f4:	fffff0ff 	.word	0xfffff0ff
 80028f8:	ffff8fff 	.word	0xffff8fff
 80028fc:	080054cc 	.word	0x080054cc
 8002900:	20000000 	.word	0x20000000
 8002904:	20000004 	.word	0x20000004

08002908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800290e:	4b3c      	ldr	r3, [pc, #240]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2238      	movs	r2, #56	; 0x38
 8002914:	4013      	ands	r3, r2
 8002916:	d10f      	bne.n	8002938 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002918:	4b39      	ldr	r3, [pc, #228]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	0adb      	lsrs	r3, r3, #11
 800291e:	2207      	movs	r2, #7
 8002920:	4013      	ands	r3, r2
 8002922:	2201      	movs	r2, #1
 8002924:	409a      	lsls	r2, r3
 8002926:	0013      	movs	r3, r2
 8002928:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800292a:	6839      	ldr	r1, [r7, #0]
 800292c:	4835      	ldr	r0, [pc, #212]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 800292e:	f7fd fbeb 	bl	8000108 <__udivsi3>
 8002932:	0003      	movs	r3, r0
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e05d      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002938:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	2238      	movs	r2, #56	; 0x38
 800293e:	4013      	ands	r3, r2
 8002940:	2b08      	cmp	r3, #8
 8002942:	d102      	bne.n	800294a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002946:	613b      	str	r3, [r7, #16]
 8002948:	e054      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800294a:	4b2d      	ldr	r3, [pc, #180]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	2238      	movs	r2, #56	; 0x38
 8002950:	4013      	ands	r3, r2
 8002952:	2b10      	cmp	r3, #16
 8002954:	d138      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2203      	movs	r2, #3
 800295c:	4013      	ands	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002960:	4b27      	ldr	r3, [pc, #156]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	2207      	movs	r2, #7
 8002968:	4013      	ands	r3, r2
 800296a:	3301      	adds	r3, #1
 800296c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d10d      	bne.n	8002990 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002974:	68b9      	ldr	r1, [r7, #8]
 8002976:	4823      	ldr	r0, [pc, #140]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002978:	f7fd fbc6 	bl	8000108 <__udivsi3>
 800297c:	0003      	movs	r3, r0
 800297e:	0019      	movs	r1, r3
 8002980:	4b1f      	ldr	r3, [pc, #124]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	227f      	movs	r2, #127	; 0x7f
 8002988:	4013      	ands	r3, r2
 800298a:	434b      	muls	r3, r1
 800298c:	617b      	str	r3, [r7, #20]
        break;
 800298e:	e00d      	b.n	80029ac <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002990:	68b9      	ldr	r1, [r7, #8]
 8002992:	481c      	ldr	r0, [pc, #112]	; (8002a04 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002994:	f7fd fbb8 	bl	8000108 <__udivsi3>
 8002998:	0003      	movs	r3, r0
 800299a:	0019      	movs	r1, r3
 800299c:	4b18      	ldr	r3, [pc, #96]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	227f      	movs	r2, #127	; 0x7f
 80029a4:	4013      	ands	r3, r2
 80029a6:	434b      	muls	r3, r1
 80029a8:	617b      	str	r3, [r7, #20]
        break;
 80029aa:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	0f5b      	lsrs	r3, r3, #29
 80029b2:	2207      	movs	r2, #7
 80029b4:	4013      	ands	r3, r2
 80029b6:	3301      	adds	r3, #1
 80029b8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	6978      	ldr	r0, [r7, #20]
 80029be:	f7fd fba3 	bl	8000108 <__udivsi3>
 80029c2:	0003      	movs	r3, r0
 80029c4:	613b      	str	r3, [r7, #16]
 80029c6:	e015      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80029c8:	4b0d      	ldr	r3, [pc, #52]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2238      	movs	r2, #56	; 0x38
 80029ce:	4013      	ands	r3, r2
 80029d0:	2b20      	cmp	r3, #32
 80029d2:	d103      	bne.n	80029dc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	021b      	lsls	r3, r3, #8
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_RCC_GetSysClockFreq+0xf8>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2238      	movs	r2, #56	; 0x38
 80029e2:	4013      	ands	r3, r2
 80029e4:	2b18      	cmp	r3, #24
 80029e6:	d103      	bne.n	80029f0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80029e8:	23fa      	movs	r3, #250	; 0xfa
 80029ea:	01db      	lsls	r3, r3, #7
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	e001      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029f4:	693b      	ldr	r3, [r7, #16]
}
 80029f6:	0018      	movs	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b006      	add	sp, #24
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	46c0      	nop			; (mov r8, r8)
 8002a00:	40021000 	.word	0x40021000
 8002a04:	00f42400 	.word	0x00f42400

08002a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b02      	ldr	r3, [pc, #8]	; (8002a18 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	46c0      	nop			; (mov r8, r8)
 8002a18:	20000000 	.word	0x20000000

08002a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a1c:	b5b0      	push	{r4, r5, r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002a20:	f7ff fff2 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a24:	0004      	movs	r4, r0
 8002a26:	f7ff fb4b 	bl	80020c0 <LL_RCC_GetAPB1Prescaler>
 8002a2a:	0003      	movs	r3, r0
 8002a2c:	0b1a      	lsrs	r2, r3, #12
 8002a2e:	4b05      	ldr	r3, [pc, #20]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a30:	0092      	lsls	r2, r2, #2
 8002a32:	58d3      	ldr	r3, [r2, r3]
 8002a34:	221f      	movs	r2, #31
 8002a36:	4013      	ands	r3, r2
 8002a38:	40dc      	lsrs	r4, r3
 8002a3a:	0023      	movs	r3, r4
}
 8002a3c:	0018      	movs	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bdb0      	pop	{r4, r5, r7, pc}
 8002a42:	46c0      	nop			; (mov r8, r8)
 8002a44:	0800550c 	.word	0x0800550c

08002a48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a50:	2313      	movs	r3, #19
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a58:	2312      	movs	r3, #18
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	029b      	lsls	r3, r3, #10
 8002a68:	4013      	ands	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a6c:	e0a3      	b.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a6e:	2011      	movs	r0, #17
 8002a70:	183b      	adds	r3, r7, r0
 8002a72:	2200      	movs	r2, #0
 8002a74:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a76:	4b86      	ldr	r3, [pc, #536]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	055b      	lsls	r3, r3, #21
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d110      	bne.n	8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a82:	4b83      	ldr	r3, [pc, #524]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a86:	4b82      	ldr	r3, [pc, #520]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	0549      	lsls	r1, r1, #21
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a90:	4b7f      	ldr	r3, [pc, #508]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	055b      	lsls	r3, r3, #21
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
 8002a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a9e:	183b      	adds	r3, r7, r0
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aa4:	4b7b      	ldr	r3, [pc, #492]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	4b7a      	ldr	r3, [pc, #488]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002aaa:	2180      	movs	r1, #128	; 0x80
 8002aac:	0049      	lsls	r1, r1, #1
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ab2:	f7fe fed5 	bl	8001860 <HAL_GetTick>
 8002ab6:	0003      	movs	r3, r0
 8002ab8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002abc:	f7fe fed0 	bl	8001860 <HAL_GetTick>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d904      	bls.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002aca:	2313      	movs	r3, #19
 8002acc:	18fb      	adds	r3, r7, r3
 8002ace:	2203      	movs	r2, #3
 8002ad0:	701a      	strb	r2, [r3, #0]
        break;
 8002ad2:	e005      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ad4:	4b6f      	ldr	r3, [pc, #444]	; (8002c94 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	2380      	movs	r3, #128	; 0x80
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4013      	ands	r3, r2
 8002ade:	d0ed      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ae0:	2313      	movs	r3, #19
 8002ae2:	18fb      	adds	r3, r7, r3
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d154      	bne.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002aea:	4b69      	ldr	r3, [pc, #420]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002aee:	23c0      	movs	r3, #192	; 0xc0
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4013      	ands	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d019      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	699b      	ldr	r3, [r3, #24]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d014      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b06:	4b62      	ldr	r3, [pc, #392]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0a:	4a63      	ldr	r2, [pc, #396]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b10:	4b5f      	ldr	r3, [pc, #380]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b12:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b14:	4b5e      	ldr	r3, [pc, #376]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b16:	2180      	movs	r1, #128	; 0x80
 8002b18:	0249      	lsls	r1, r1, #9
 8002b1a:	430a      	orrs	r2, r1
 8002b1c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b1e:	4b5c      	ldr	r3, [pc, #368]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b20:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b22:	4b5b      	ldr	r3, [pc, #364]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b24:	495d      	ldr	r1, [pc, #372]	; (8002c9c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002b26:	400a      	ands	r2, r1
 8002b28:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b2a:	4b59      	ldr	r3, [pc, #356]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	2201      	movs	r2, #1
 8002b34:	4013      	ands	r3, r2
 8002b36:	d016      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b38:	f7fe fe92 	bl	8001860 <HAL_GetTick>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b40:	e00c      	b.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b42:	f7fe fe8d 	bl	8001860 <HAL_GetTick>
 8002b46:	0002      	movs	r2, r0
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	4a54      	ldr	r2, [pc, #336]	; (8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d904      	bls.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b52:	2313      	movs	r3, #19
 8002b54:	18fb      	adds	r3, r7, r3
 8002b56:	2203      	movs	r2, #3
 8002b58:	701a      	strb	r2, [r3, #0]
            break;
 8002b5a:	e004      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b5c:	4b4c      	ldr	r3, [pc, #304]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2202      	movs	r2, #2
 8002b62:	4013      	ands	r3, r2
 8002b64:	d0ed      	beq.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b66:	2313      	movs	r3, #19
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10a      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b70:	4b47      	ldr	r3, [pc, #284]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b74:	4a48      	ldr	r2, [pc, #288]	; (8002c98 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002b76:	4013      	ands	r3, r2
 8002b78:	0019      	movs	r1, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	4b44      	ldr	r3, [pc, #272]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002b80:	430a      	orrs	r2, r1
 8002b82:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b84:	e00c      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b86:	2312      	movs	r3, #18
 8002b88:	18fb      	adds	r3, r7, r3
 8002b8a:	2213      	movs	r2, #19
 8002b8c:	18ba      	adds	r2, r7, r2
 8002b8e:	7812      	ldrb	r2, [r2, #0]
 8002b90:	701a      	strb	r2, [r3, #0]
 8002b92:	e005      	b.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b94:	2312      	movs	r3, #18
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2213      	movs	r2, #19
 8002b9a:	18ba      	adds	r2, r7, r2
 8002b9c:	7812      	ldrb	r2, [r2, #0]
 8002b9e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba0:	2311      	movs	r3, #17
 8002ba2:	18fb      	adds	r3, r7, r3
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d105      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002baa:	4b39      	ldr	r3, [pc, #228]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bae:	4b38      	ldr	r3, [pc, #224]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bb0:	493c      	ldr	r1, [pc, #240]	; (8002ca4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002bb2:	400a      	ands	r2, r1
 8002bb4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d009      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc0:	4b33      	ldr	r3, [pc, #204]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	4b30      	ldr	r3, [pc, #192]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2202      	movs	r2, #2
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d009      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002bde:	4b2c      	ldr	r3, [pc, #176]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	220c      	movs	r2, #12
 8002be4:	4393      	bics	r3, r2
 8002be6:	0019      	movs	r1, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	4b28      	ldr	r3, [pc, #160]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfc:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c00:	4a29      	ldr	r2, [pc, #164]	; (8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c02:	4013      	ands	r3, r2
 8002c04:	0019      	movs	r1, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	4b21      	ldr	r3, [pc, #132]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	2380      	movs	r3, #128	; 0x80
 8002c16:	01db      	lsls	r3, r3, #7
 8002c18:	4013      	ands	r3, r2
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c1c:	4b1c      	ldr	r3, [pc, #112]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	0899      	lsrs	r1, r3, #2
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	695a      	ldr	r2, [r3, #20]
 8002c28:	4b19      	ldr	r3, [pc, #100]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	695a      	ldr	r2, [r3, #20]
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	05db      	lsls	r3, r3, #23
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d106      	bne.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c3c:	68da      	ldr	r2, [r3, #12]
 8002c3e:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c40:	2180      	movs	r1, #128	; 0x80
 8002c42:	0249      	lsls	r1, r1, #9
 8002c44:	430a      	orrs	r2, r1
 8002c46:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	2380      	movs	r3, #128	; 0x80
 8002c4e:	011b      	lsls	r3, r3, #4
 8002c50:	4013      	ands	r3, r2
 8002c52:	d016      	beq.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002c54:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	0019      	movs	r1, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	4b0b      	ldr	r3, [pc, #44]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c64:	430a      	orrs	r2, r1
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	01db      	lsls	r3, r3, #7
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d106      	bne.n	8002c82 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002c74:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c76:	68da      	ldr	r2, [r3, #12]
 8002c78:	4b05      	ldr	r3, [pc, #20]	; (8002c90 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002c7a:	2180      	movs	r1, #128	; 0x80
 8002c7c:	0249      	lsls	r1, r1, #9
 8002c7e:	430a      	orrs	r2, r1
 8002c80:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002c82:	2312      	movs	r3, #18
 8002c84:	18fb      	adds	r3, r7, r3
 8002c86:	781b      	ldrb	r3, [r3, #0]
}
 8002c88:	0018      	movs	r0, r3
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	b006      	add	sp, #24
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	40007000 	.word	0x40007000
 8002c98:	fffffcff 	.word	0xfffffcff
 8002c9c:	fffeffff 	.word	0xfffeffff
 8002ca0:	00001388 	.word	0x00001388
 8002ca4:	efffffff 	.word	0xefffffff
 8002ca8:	ffffcfff 	.word	0xffffcfff
 8002cac:	ffff3fff 	.word	0xffff3fff

08002cb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e04a      	b.n	8002d58 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	223d      	movs	r2, #61	; 0x3d
 8002cc6:	5c9b      	ldrb	r3, [r3, r2]
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d107      	bne.n	8002cde <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	223c      	movs	r2, #60	; 0x3c
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	0018      	movs	r0, r3
 8002cda:	f7fe fa13 	bl	8001104 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	223d      	movs	r2, #61	; 0x3d
 8002ce2:	2102      	movs	r1, #2
 8002ce4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	3304      	adds	r3, #4
 8002cee:	0019      	movs	r1, r3
 8002cf0:	0010      	movs	r0, r2
 8002cf2:	f000 fa35 	bl	8003160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2248      	movs	r2, #72	; 0x48
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	223e      	movs	r2, #62	; 0x3e
 8002d02:	2101      	movs	r1, #1
 8002d04:	5499      	strb	r1, [r3, r2]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	223f      	movs	r2, #63	; 0x3f
 8002d0a:	2101      	movs	r1, #1
 8002d0c:	5499      	strb	r1, [r3, r2]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2240      	movs	r2, #64	; 0x40
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2241      	movs	r2, #65	; 0x41
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	5499      	strb	r1, [r3, r2]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2242      	movs	r2, #66	; 0x42
 8002d22:	2101      	movs	r1, #1
 8002d24:	5499      	strb	r1, [r3, r2]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2243      	movs	r2, #67	; 0x43
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2244      	movs	r2, #68	; 0x44
 8002d32:	2101      	movs	r1, #1
 8002d34:	5499      	strb	r1, [r3, r2]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2245      	movs	r2, #69	; 0x45
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	5499      	strb	r1, [r3, r2]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2246      	movs	r2, #70	; 0x46
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2247      	movs	r2, #71	; 0x47
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	223d      	movs	r2, #61	; 0x3d
 8002d52:	2101      	movs	r1, #1
 8002d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e04a      	b.n	8002e08 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	223d      	movs	r2, #61	; 0x3d
 8002d76:	5c9b      	ldrb	r3, [r3, r2]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d107      	bne.n	8002d8e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	223c      	movs	r2, #60	; 0x3c
 8002d82:	2100      	movs	r1, #0
 8002d84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	0018      	movs	r0, r3
 8002d8a:	f7fe fa2f 	bl	80011ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	223d      	movs	r2, #61	; 0x3d
 8002d92:	2102      	movs	r1, #2
 8002d94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	0019      	movs	r1, r3
 8002da0:	0010      	movs	r0, r2
 8002da2:	f000 f9dd 	bl	8003160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2248      	movs	r2, #72	; 0x48
 8002daa:	2101      	movs	r1, #1
 8002dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	223e      	movs	r2, #62	; 0x3e
 8002db2:	2101      	movs	r1, #1
 8002db4:	5499      	strb	r1, [r3, r2]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	223f      	movs	r2, #63	; 0x3f
 8002dba:	2101      	movs	r1, #1
 8002dbc:	5499      	strb	r1, [r3, r2]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2240      	movs	r2, #64	; 0x40
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2241      	movs	r2, #65	; 0x41
 8002dca:	2101      	movs	r1, #1
 8002dcc:	5499      	strb	r1, [r3, r2]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2242      	movs	r2, #66	; 0x42
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	5499      	strb	r1, [r3, r2]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2243      	movs	r2, #67	; 0x43
 8002dda:	2101      	movs	r1, #1
 8002ddc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2244      	movs	r2, #68	; 0x44
 8002de2:	2101      	movs	r1, #1
 8002de4:	5499      	strb	r1, [r3, r2]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2245      	movs	r2, #69	; 0x45
 8002dea:	2101      	movs	r1, #1
 8002dec:	5499      	strb	r1, [r3, r2]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2246      	movs	r2, #70	; 0x46
 8002df2:	2101      	movs	r1, #1
 8002df4:	5499      	strb	r1, [r3, r2]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2247      	movs	r2, #71	; 0x47
 8002dfa:	2101      	movs	r1, #1
 8002dfc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223d      	movs	r2, #61	; 0x3d
 8002e02:	2101      	movs	r1, #1
 8002e04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	0018      	movs	r0, r3
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	b002      	add	sp, #8
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e090      	b.n	8002f46 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	223d      	movs	r2, #61	; 0x3d
 8002e28:	5c9b      	ldrb	r3, [r3, r2]
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d107      	bne.n	8002e40 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	223c      	movs	r2, #60	; 0x3c
 8002e34:	2100      	movs	r1, #0
 8002e36:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7fe f8e0 	bl	8001000 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	223d      	movs	r2, #61	; 0x3d
 8002e44:	2102      	movs	r1, #2
 8002e46:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	493f      	ldr	r1, [pc, #252]	; (8002f50 <HAL_TIM_Encoder_Init+0x140>)
 8002e54:	400a      	ands	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3304      	adds	r3, #4
 8002e60:	0019      	movs	r1, r3
 8002e62:	0010      	movs	r0, r2
 8002e64:	f000 f97c 	bl	8003160 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4a31      	ldr	r2, [pc, #196]	; (8002f54 <HAL_TIM_Encoder_Init+0x144>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	689a      	ldr	r2, [r3, #8]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	021b      	lsls	r3, r3, #8
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	693a      	ldr	r2, [r7, #16]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4a2c      	ldr	r2, [pc, #176]	; (8002f58 <HAL_TIM_Encoder_Init+0x148>)
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4a2b      	ldr	r2, [pc, #172]	; (8002f5c <HAL_TIM_Encoder_Init+0x14c>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	69db      	ldr	r3, [r3, #28]
 8002ebc:	021b      	lsls	r3, r3, #8
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	011a      	lsls	r2, r3, #4
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	031b      	lsls	r3, r3, #12
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2222      	movs	r2, #34	; 0x22
 8002ede:	4393      	bics	r3, r2
 8002ee0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2288      	movs	r2, #136	; 0x88
 8002ee6:	4393      	bics	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	011b      	lsls	r3, r3, #4
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	697a      	ldr	r2, [r7, #20]
 8002f02:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2248      	movs	r2, #72	; 0x48
 8002f18:	2101      	movs	r1, #1
 8002f1a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	223e      	movs	r2, #62	; 0x3e
 8002f20:	2101      	movs	r1, #1
 8002f22:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	223f      	movs	r2, #63	; 0x3f
 8002f28:	2101      	movs	r1, #1
 8002f2a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2244      	movs	r2, #68	; 0x44
 8002f30:	2101      	movs	r1, #1
 8002f32:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2245      	movs	r2, #69	; 0x45
 8002f38:	2101      	movs	r1, #1
 8002f3a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	223d      	movs	r2, #61	; 0x3d
 8002f40:	2101      	movs	r1, #1
 8002f42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	0018      	movs	r0, r3
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	b006      	add	sp, #24
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	46c0      	nop			; (mov r8, r8)
 8002f50:	fffebff8 	.word	0xfffebff8
 8002f54:	fffffcfc 	.word	0xfffffcfc
 8002f58:	fffff3f3 	.word	0xfffff3f3
 8002f5c:	ffff0f0f 	.word	0xffff0f0f

08002f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b086      	sub	sp, #24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6c:	2317      	movs	r3, #23
 8002f6e:	18fb      	adds	r3, r7, r3
 8002f70:	2200      	movs	r2, #0
 8002f72:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	223c      	movs	r2, #60	; 0x3c
 8002f78:	5c9b      	ldrb	r3, [r3, r2]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d101      	bne.n	8002f82 <HAL_TIM_PWM_ConfigChannel+0x22>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e0e5      	b.n	800314e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	223c      	movs	r2, #60	; 0x3c
 8002f86:	2101      	movs	r1, #1
 8002f88:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2b14      	cmp	r3, #20
 8002f8e:	d900      	bls.n	8002f92 <HAL_TIM_PWM_ConfigChannel+0x32>
 8002f90:	e0d1      	b.n	8003136 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	009a      	lsls	r2, r3, #2
 8002f96:	4b70      	ldr	r3, [pc, #448]	; (8003158 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8002f98:	18d3      	adds	r3, r2, r3
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	0011      	movs	r1, r2
 8002fa6:	0018      	movs	r0, r3
 8002fa8:	f000 f950 	bl	800324c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2108      	movs	r1, #8
 8002fb8:	430a      	orrs	r2, r1
 8002fba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2104      	movs	r1, #4
 8002fc8:	438a      	bics	r2, r1
 8002fca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6999      	ldr	r1, [r3, #24]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	619a      	str	r2, [r3, #24]
      break;
 8002fde:	e0af      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	0011      	movs	r1, r2
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 f9b9 	bl	8003360 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	699a      	ldr	r2, [r3, #24]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2180      	movs	r1, #128	; 0x80
 8002ffa:	0109      	lsls	r1, r1, #4
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	699a      	ldr	r2, [r3, #24]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4954      	ldr	r1, [pc, #336]	; (800315c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800300c:	400a      	ands	r2, r1
 800300e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6999      	ldr	r1, [r3, #24]
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	021a      	lsls	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	619a      	str	r2, [r3, #24]
      break;
 8003024:	e08c      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	0011      	movs	r1, r2
 800302e:	0018      	movs	r0, r3
 8003030:	f000 fa1a 	bl	8003468 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	69da      	ldr	r2, [r3, #28]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2108      	movs	r1, #8
 8003040:	430a      	orrs	r2, r1
 8003042:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	69da      	ldr	r2, [r3, #28]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2104      	movs	r1, #4
 8003050:	438a      	bics	r2, r1
 8003052:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69d9      	ldr	r1, [r3, #28]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	61da      	str	r2, [r3, #28]
      break;
 8003066:	e06b      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	0011      	movs	r1, r2
 8003070:	0018      	movs	r0, r3
 8003072:	f000 fa81 	bl	8003578 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69da      	ldr	r2, [r3, #28]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2180      	movs	r1, #128	; 0x80
 8003082:	0109      	lsls	r1, r1, #4
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	69da      	ldr	r2, [r3, #28]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4932      	ldr	r1, [pc, #200]	; (800315c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003094:	400a      	ands	r2, r1
 8003096:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	69d9      	ldr	r1, [r3, #28]
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	021a      	lsls	r2, r3, #8
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	61da      	str	r2, [r3, #28]
      break;
 80030ac:	e048      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	0011      	movs	r1, r2
 80030b6:	0018      	movs	r0, r3
 80030b8:	f000 fac8 	bl	800364c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2108      	movs	r1, #8
 80030c8:	430a      	orrs	r2, r1
 80030ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2104      	movs	r1, #4
 80030d8:	438a      	bics	r2, r1
 80030da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030ee:	e027      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	0011      	movs	r1, r2
 80030f8:	0018      	movs	r0, r3
 80030fa:	f000 fb07 	bl	800370c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2180      	movs	r1, #128	; 0x80
 800310a:	0109      	lsls	r1, r1, #4
 800310c:	430a      	orrs	r2, r1
 800310e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4910      	ldr	r1, [pc, #64]	; (800315c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800311c:	400a      	ands	r2, r1
 800311e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	691b      	ldr	r3, [r3, #16]
 800312a:	021a      	lsls	r2, r3, #8
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003134:	e004      	b.n	8003140 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003136:	2317      	movs	r3, #23
 8003138:	18fb      	adds	r3, r7, r3
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
      break;
 800313e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	223c      	movs	r2, #60	; 0x3c
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

  return status;
 8003148:	2317      	movs	r3, #23
 800314a:	18fb      	adds	r3, r7, r3
 800314c:	781b      	ldrb	r3, [r3, #0]
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b006      	add	sp, #24
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	0800552c 	.word	0x0800552c
 800315c:	fffffbff 	.word	0xfffffbff

08003160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	4a2f      	ldr	r2, [pc, #188]	; (8003230 <TIM_Base_SetConfig+0xd0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d003      	beq.n	8003180 <TIM_Base_SetConfig+0x20>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a2e      	ldr	r2, [pc, #184]	; (8003234 <TIM_Base_SetConfig+0xd4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d108      	bne.n	8003192 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2270      	movs	r2, #112	; 0x70
 8003184:	4393      	bics	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	4313      	orrs	r3, r2
 8003190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a26      	ldr	r2, [pc, #152]	; (8003230 <TIM_Base_SetConfig+0xd0>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d013      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a25      	ldr	r2, [pc, #148]	; (8003234 <TIM_Base_SetConfig+0xd4>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00f      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a24      	ldr	r2, [pc, #144]	; (8003238 <TIM_Base_SetConfig+0xd8>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d00b      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a23      	ldr	r2, [pc, #140]	; (800323c <TIM_Base_SetConfig+0xdc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d007      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a22      	ldr	r2, [pc, #136]	; (8003240 <TIM_Base_SetConfig+0xe0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d003      	beq.n	80031c2 <TIM_Base_SetConfig+0x62>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a21      	ldr	r2, [pc, #132]	; (8003244 <TIM_Base_SetConfig+0xe4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d108      	bne.n	80031d4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	4a20      	ldr	r2, [pc, #128]	; (8003248 <TIM_Base_SetConfig+0xe8>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2280      	movs	r2, #128	; 0x80
 80031d8:	4393      	bics	r3, r2
 80031da:	001a      	movs	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a0c      	ldr	r2, [pc, #48]	; (8003230 <TIM_Base_SetConfig+0xd0>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d00b      	beq.n	800321a <TIM_Base_SetConfig+0xba>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a0d      	ldr	r2, [pc, #52]	; (800323c <TIM_Base_SetConfig+0xdc>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d007      	beq.n	800321a <TIM_Base_SetConfig+0xba>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a0c      	ldr	r2, [pc, #48]	; (8003240 <TIM_Base_SetConfig+0xe0>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d003      	beq.n	800321a <TIM_Base_SetConfig+0xba>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a0b      	ldr	r2, [pc, #44]	; (8003244 <TIM_Base_SetConfig+0xe4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d103      	bne.n	8003222 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	691a      	ldr	r2, [r3, #16]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	615a      	str	r2, [r3, #20]
}
 8003228:	46c0      	nop			; (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b004      	add	sp, #16
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40000400 	.word	0x40000400
 8003238:	40002000 	.word	0x40002000
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400
 8003244:	40014800 	.word	0x40014800
 8003248:	fffffcff 	.word	0xfffffcff

0800324c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	2201      	movs	r2, #1
 800325c:	4393      	bics	r3, r2
 800325e:	001a      	movs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	4a32      	ldr	r2, [pc, #200]	; (8003344 <TIM_OC1_SetConfig+0xf8>)
 800327a:	4013      	ands	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2203      	movs	r2, #3
 8003282:	4393      	bics	r3, r2
 8003284:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	4313      	orrs	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2202      	movs	r2, #2
 8003294:	4393      	bics	r3, r2
 8003296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	697a      	ldr	r2, [r7, #20]
 800329e:	4313      	orrs	r3, r2
 80032a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a28      	ldr	r2, [pc, #160]	; (8003348 <TIM_OC1_SetConfig+0xfc>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <TIM_OC1_SetConfig+0x76>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <TIM_OC1_SetConfig+0x100>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d007      	beq.n	80032c2 <TIM_OC1_SetConfig+0x76>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a26      	ldr	r2, [pc, #152]	; (8003350 <TIM_OC1_SetConfig+0x104>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d003      	beq.n	80032c2 <TIM_OC1_SetConfig+0x76>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a25      	ldr	r2, [pc, #148]	; (8003354 <TIM_OC1_SetConfig+0x108>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10c      	bne.n	80032dc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2208      	movs	r2, #8
 80032c6:	4393      	bics	r3, r2
 80032c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2204      	movs	r2, #4
 80032d8:	4393      	bics	r3, r2
 80032da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a1a      	ldr	r2, [pc, #104]	; (8003348 <TIM_OC1_SetConfig+0xfc>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d00b      	beq.n	80032fc <TIM_OC1_SetConfig+0xb0>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	4a19      	ldr	r2, [pc, #100]	; (800334c <TIM_OC1_SetConfig+0x100>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d007      	beq.n	80032fc <TIM_OC1_SetConfig+0xb0>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	4a18      	ldr	r2, [pc, #96]	; (8003350 <TIM_OC1_SetConfig+0x104>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d003      	beq.n	80032fc <TIM_OC1_SetConfig+0xb0>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a17      	ldr	r2, [pc, #92]	; (8003354 <TIM_OC1_SetConfig+0x108>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d111      	bne.n	8003320 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	4a16      	ldr	r2, [pc, #88]	; (8003358 <TIM_OC1_SetConfig+0x10c>)
 8003300:	4013      	ands	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <TIM_OC1_SetConfig+0x110>)
 8003308:	4013      	ands	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4313      	orrs	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	621a      	str	r2, [r3, #32]
}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	46bd      	mov	sp, r7
 800333e:	b006      	add	sp, #24
 8003340:	bd80      	pop	{r7, pc}
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	fffeff8f 	.word	0xfffeff8f
 8003348:	40012c00 	.word	0x40012c00
 800334c:	40014000 	.word	0x40014000
 8003350:	40014400 	.word	0x40014400
 8003354:	40014800 	.word	0x40014800
 8003358:	fffffeff 	.word	0xfffffeff
 800335c:	fffffdff 	.word	0xfffffdff

08003360 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	2210      	movs	r2, #16
 8003370:	4393      	bics	r3, r2
 8003372:	001a      	movs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a1b      	ldr	r3, [r3, #32]
 800337c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4a2e      	ldr	r2, [pc, #184]	; (8003448 <TIM_OC2_SetConfig+0xe8>)
 800338e:	4013      	ands	r3, r2
 8003390:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	4a2d      	ldr	r2, [pc, #180]	; (800344c <TIM_OC2_SetConfig+0xec>)
 8003396:	4013      	ands	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	021b      	lsls	r3, r3, #8
 80033a0:	68fa      	ldr	r2, [r7, #12]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2220      	movs	r2, #32
 80033aa:	4393      	bics	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	697a      	ldr	r2, [r7, #20]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a24      	ldr	r2, [pc, #144]	; (8003450 <TIM_OC2_SetConfig+0xf0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10d      	bne.n	80033de <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2280      	movs	r2, #128	; 0x80
 80033c6:	4393      	bics	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	011b      	lsls	r3, r3, #4
 80033d0:	697a      	ldr	r2, [r7, #20]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2240      	movs	r2, #64	; 0x40
 80033da:	4393      	bics	r3, r2
 80033dc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <TIM_OC2_SetConfig+0xf0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d00b      	beq.n	80033fe <TIM_OC2_SetConfig+0x9e>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a1a      	ldr	r2, [pc, #104]	; (8003454 <TIM_OC2_SetConfig+0xf4>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d007      	beq.n	80033fe <TIM_OC2_SetConfig+0x9e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a19      	ldr	r2, [pc, #100]	; (8003458 <TIM_OC2_SetConfig+0xf8>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d003      	beq.n	80033fe <TIM_OC2_SetConfig+0x9e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a18      	ldr	r2, [pc, #96]	; (800345c <TIM_OC2_SetConfig+0xfc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d113      	bne.n	8003426 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	4a17      	ldr	r2, [pc, #92]	; (8003460 <TIM_OC2_SetConfig+0x100>)
 8003402:	4013      	ands	r3, r2
 8003404:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4a16      	ldr	r2, [pc, #88]	; (8003464 <TIM_OC2_SetConfig+0x104>)
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4313      	orrs	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4313      	orrs	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685a      	ldr	r2, [r3, #4]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	621a      	str	r2, [r3, #32]
}
 8003440:	46c0      	nop			; (mov r8, r8)
 8003442:	46bd      	mov	sp, r7
 8003444:	b006      	add	sp, #24
 8003446:	bd80      	pop	{r7, pc}
 8003448:	feff8fff 	.word	0xfeff8fff
 800344c:	fffffcff 	.word	0xfffffcff
 8003450:	40012c00 	.word	0x40012c00
 8003454:	40014000 	.word	0x40014000
 8003458:	40014400 	.word	0x40014400
 800345c:	40014800 	.word	0x40014800
 8003460:	fffffbff 	.word	0xfffffbff
 8003464:	fffff7ff 	.word	0xfffff7ff

08003468 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6a1b      	ldr	r3, [r3, #32]
 8003476:	4a35      	ldr	r2, [pc, #212]	; (800354c <TIM_OC3_SetConfig+0xe4>)
 8003478:	401a      	ands	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4a2f      	ldr	r2, [pc, #188]	; (8003550 <TIM_OC3_SetConfig+0xe8>)
 8003494:	4013      	ands	r3, r2
 8003496:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2203      	movs	r2, #3
 800349c:	4393      	bics	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	4a29      	ldr	r2, [pc, #164]	; (8003554 <TIM_OC3_SetConfig+0xec>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	021b      	lsls	r3, r3, #8
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a25      	ldr	r2, [pc, #148]	; (8003558 <TIM_OC3_SetConfig+0xf0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d10d      	bne.n	80034e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	4a24      	ldr	r2, [pc, #144]	; (800355c <TIM_OC3_SetConfig+0xf4>)
 80034ca:	4013      	ands	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	021b      	lsls	r3, r3, #8
 80034d4:	697a      	ldr	r2, [r7, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	4a20      	ldr	r2, [pc, #128]	; (8003560 <TIM_OC3_SetConfig+0xf8>)
 80034de:	4013      	ands	r3, r2
 80034e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <TIM_OC3_SetConfig+0xf0>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d00b      	beq.n	8003502 <TIM_OC3_SetConfig+0x9a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a1d      	ldr	r2, [pc, #116]	; (8003564 <TIM_OC3_SetConfig+0xfc>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d007      	beq.n	8003502 <TIM_OC3_SetConfig+0x9a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a1c      	ldr	r2, [pc, #112]	; (8003568 <TIM_OC3_SetConfig+0x100>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d003      	beq.n	8003502 <TIM_OC3_SetConfig+0x9a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a1b      	ldr	r2, [pc, #108]	; (800356c <TIM_OC3_SetConfig+0x104>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d113      	bne.n	800352a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	4a1a      	ldr	r2, [pc, #104]	; (8003570 <TIM_OC3_SetConfig+0x108>)
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	4a19      	ldr	r2, [pc, #100]	; (8003574 <TIM_OC3_SetConfig+0x10c>)
 800350e:	4013      	ands	r3, r2
 8003510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4313      	orrs	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685a      	ldr	r2, [r3, #4]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b006      	add	sp, #24
 800354a:	bd80      	pop	{r7, pc}
 800354c:	fffffeff 	.word	0xfffffeff
 8003550:	fffeff8f 	.word	0xfffeff8f
 8003554:	fffffdff 	.word	0xfffffdff
 8003558:	40012c00 	.word	0x40012c00
 800355c:	fffff7ff 	.word	0xfffff7ff
 8003560:	fffffbff 	.word	0xfffffbff
 8003564:	40014000 	.word	0x40014000
 8003568:	40014400 	.word	0x40014400
 800356c:	40014800 	.word	0x40014800
 8003570:	ffffefff 	.word	0xffffefff
 8003574:	ffffdfff 	.word	0xffffdfff

08003578 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a1b      	ldr	r3, [r3, #32]
 8003586:	4a28      	ldr	r2, [pc, #160]	; (8003628 <TIM_OC4_SetConfig+0xb0>)
 8003588:	401a      	ands	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4a22      	ldr	r2, [pc, #136]	; (800362c <TIM_OC4_SetConfig+0xb4>)
 80035a4:	4013      	ands	r3, r2
 80035a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	4a21      	ldr	r2, [pc, #132]	; (8003630 <TIM_OC4_SetConfig+0xb8>)
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	021b      	lsls	r3, r3, #8
 80035b6:	68fa      	ldr	r2, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4a1d      	ldr	r2, [pc, #116]	; (8003634 <TIM_OC4_SetConfig+0xbc>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	031b      	lsls	r3, r3, #12
 80035ca:	693a      	ldr	r2, [r7, #16]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a19      	ldr	r2, [pc, #100]	; (8003638 <TIM_OC4_SetConfig+0xc0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <TIM_OC4_SetConfig+0x78>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a18      	ldr	r2, [pc, #96]	; (800363c <TIM_OC4_SetConfig+0xc4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d007      	beq.n	80035f0 <TIM_OC4_SetConfig+0x78>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a17      	ldr	r2, [pc, #92]	; (8003640 <TIM_OC4_SetConfig+0xc8>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d003      	beq.n	80035f0 <TIM_OC4_SetConfig+0x78>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	4a16      	ldr	r2, [pc, #88]	; (8003644 <TIM_OC4_SetConfig+0xcc>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d109      	bne.n	8003604 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	4a15      	ldr	r2, [pc, #84]	; (8003648 <TIM_OC4_SetConfig+0xd0>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695b      	ldr	r3, [r3, #20]
 80035fc:	019b      	lsls	r3, r3, #6
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	621a      	str	r2, [r3, #32]
}
 800361e:	46c0      	nop			; (mov r8, r8)
 8003620:	46bd      	mov	sp, r7
 8003622:	b006      	add	sp, #24
 8003624:	bd80      	pop	{r7, pc}
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	ffffefff 	.word	0xffffefff
 800362c:	feff8fff 	.word	0xfeff8fff
 8003630:	fffffcff 	.word	0xfffffcff
 8003634:	ffffdfff 	.word	0xffffdfff
 8003638:	40012c00 	.word	0x40012c00
 800363c:	40014000 	.word	0x40014000
 8003640:	40014400 	.word	0x40014400
 8003644:	40014800 	.word	0x40014800
 8003648:	ffffbfff 	.word	0xffffbfff

0800364c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a25      	ldr	r2, [pc, #148]	; (80036f0 <TIM_OC5_SetConfig+0xa4>)
 800365c:	401a      	ands	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a1f      	ldr	r2, [pc, #124]	; (80036f4 <TIM_OC5_SetConfig+0xa8>)
 8003678:	4013      	ands	r3, r2
 800367a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	4313      	orrs	r3, r2
 8003684:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4a1b      	ldr	r2, [pc, #108]	; (80036f8 <TIM_OC5_SetConfig+0xac>)
 800368a:	4013      	ands	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	041b      	lsls	r3, r3, #16
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	4313      	orrs	r3, r2
 8003698:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a17      	ldr	r2, [pc, #92]	; (80036fc <TIM_OC5_SetConfig+0xb0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00b      	beq.n	80036ba <TIM_OC5_SetConfig+0x6e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <TIM_OC5_SetConfig+0xb4>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d007      	beq.n	80036ba <TIM_OC5_SetConfig+0x6e>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a15      	ldr	r2, [pc, #84]	; (8003704 <TIM_OC5_SetConfig+0xb8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d003      	beq.n	80036ba <TIM_OC5_SetConfig+0x6e>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a14      	ldr	r2, [pc, #80]	; (8003708 <TIM_OC5_SetConfig+0xbc>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d109      	bne.n	80036ce <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	4a0c      	ldr	r2, [pc, #48]	; (80036f0 <TIM_OC5_SetConfig+0xa4>)
 80036be:	4013      	ands	r3, r2
 80036c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	021b      	lsls	r3, r3, #8
 80036c8:	697a      	ldr	r2, [r7, #20]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	621a      	str	r2, [r3, #32]
}
 80036e8:	46c0      	nop			; (mov r8, r8)
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b006      	add	sp, #24
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	fffeffff 	.word	0xfffeffff
 80036f4:	fffeff8f 	.word	0xfffeff8f
 80036f8:	fffdffff 	.word	0xfffdffff
 80036fc:	40012c00 	.word	0x40012c00
 8003700:	40014000 	.word	0x40014000
 8003704:	40014400 	.word	0x40014400
 8003708:	40014800 	.word	0x40014800

0800370c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b086      	sub	sp, #24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a1b      	ldr	r3, [r3, #32]
 800371a:	4a26      	ldr	r2, [pc, #152]	; (80037b4 <TIM_OC6_SetConfig+0xa8>)
 800371c:	401a      	ands	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a20      	ldr	r2, [pc, #128]	; (80037b8 <TIM_OC6_SetConfig+0xac>)
 8003738:	4013      	ands	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	021b      	lsls	r3, r3, #8
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4313      	orrs	r3, r2
 8003746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <TIM_OC6_SetConfig+0xb0>)
 800374c:	4013      	ands	r3, r2
 800374e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	051b      	lsls	r3, r3, #20
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <TIM_OC6_SetConfig+0xb4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d00b      	beq.n	800377c <TIM_OC6_SetConfig+0x70>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a17      	ldr	r2, [pc, #92]	; (80037c4 <TIM_OC6_SetConfig+0xb8>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_OC6_SetConfig+0x70>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a16      	ldr	r2, [pc, #88]	; (80037c8 <TIM_OC6_SetConfig+0xbc>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_OC6_SetConfig+0x70>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a15      	ldr	r2, [pc, #84]	; (80037cc <TIM_OC6_SetConfig+0xc0>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d109      	bne.n	8003790 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	4a14      	ldr	r2, [pc, #80]	; (80037d0 <TIM_OC6_SetConfig+0xc4>)
 8003780:	4013      	ands	r3, r2
 8003782:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	029b      	lsls	r3, r3, #10
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	68fa      	ldr	r2, [r7, #12]
 800379a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	621a      	str	r2, [r3, #32]
}
 80037aa:	46c0      	nop			; (mov r8, r8)
 80037ac:	46bd      	mov	sp, r7
 80037ae:	b006      	add	sp, #24
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	ffefffff 	.word	0xffefffff
 80037b8:	feff8fff 	.word	0xfeff8fff
 80037bc:	ffdfffff 	.word	0xffdfffff
 80037c0:	40012c00 	.word	0x40012c00
 80037c4:	40014000 	.word	0x40014000
 80037c8:	40014400 	.word	0x40014400
 80037cc:	40014800 	.word	0x40014800
 80037d0:	fffbffff 	.word	0xfffbffff

080037d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	223c      	movs	r2, #60	; 0x3c
 80037e2:	5c9b      	ldrb	r3, [r3, r2]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80037e8:	2302      	movs	r3, #2
 80037ea:	e04f      	b.n	800388c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	223c      	movs	r2, #60	; 0x3c
 80037f0:	2101      	movs	r1, #1
 80037f2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	223d      	movs	r2, #61	; 0x3d
 80037f8:	2102      	movs	r1, #2
 80037fa:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689b      	ldr	r3, [r3, #8]
 800380a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a20      	ldr	r2, [pc, #128]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d108      	bne.n	8003828 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a1f      	ldr	r2, [pc, #124]	; (8003898 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800381a:	4013      	ands	r3, r2
 800381c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2270      	movs	r2, #112	; 0x70
 800382c:	4393      	bics	r3, r2
 800382e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	68fa      	ldr	r2, [r7, #12]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a13      	ldr	r2, [pc, #76]	; (8003894 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d009      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a12      	ldr	r2, [pc, #72]	; (800389c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a11      	ldr	r2, [pc, #68]	; (80038a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d10c      	bne.n	800387a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	2280      	movs	r2, #128	; 0x80
 8003864:	4393      	bics	r3, r2
 8003866:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	4313      	orrs	r3, r2
 8003870:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	223d      	movs	r2, #61	; 0x3d
 800387e:	2101      	movs	r1, #1
 8003880:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	223c      	movs	r2, #60	; 0x3c
 8003886:	2100      	movs	r1, #0
 8003888:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800388a:	2300      	movs	r3, #0
}
 800388c:	0018      	movs	r0, r3
 800388e:	46bd      	mov	sp, r7
 8003890:	b004      	add	sp, #16
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40012c00 	.word	0x40012c00
 8003898:	ff0fffff 	.word	0xff0fffff
 800389c:	40000400 	.word	0x40000400
 80038a0:	40014000 	.word	0x40014000

080038a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	223c      	movs	r2, #60	; 0x3c
 80038b6:	5c9b      	ldrb	r3, [r3, r2]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80038bc:	2302      	movs	r3, #2
 80038be:	e079      	b.n	80039b4 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	223c      	movs	r2, #60	; 0x3c
 80038c4:	2101      	movs	r1, #1
 80038c6:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22ff      	movs	r2, #255	; 0xff
 80038cc:	4393      	bics	r3, r2
 80038ce:	001a      	movs	r2, r3
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a38      	ldr	r2, [pc, #224]	; (80039bc <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80038dc:	401a      	ands	r2, r3
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a35      	ldr	r2, [pc, #212]	; (80039c0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80038ea:	401a      	ands	r2, r3
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	4a33      	ldr	r2, [pc, #204]	; (80039c4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80038f8:	401a      	ands	r2, r3
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	4a30      	ldr	r2, [pc, #192]	; (80039c8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003906:	401a      	ands	r2, r3
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4a2e      	ldr	r2, [pc, #184]	; (80039cc <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003914:	401a      	ands	r2, r3
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4a2b      	ldr	r2, [pc, #172]	; (80039d0 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003922:	401a      	ands	r2, r3
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	4a29      	ldr	r2, [pc, #164]	; (80039d4 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003930:	401a      	ands	r2, r3
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	041b      	lsls	r3, r3, #16
 8003938:	4313      	orrs	r3, r2
 800393a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d106      	bne.n	8003954 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800394a:	401a      	ands	r2, r3
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	69db      	ldr	r3, [r3, #28]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a1f      	ldr	r2, [pc, #124]	; (80039d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d121      	bne.n	80039a2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a1f      	ldr	r2, [pc, #124]	; (80039e0 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8003962:	401a      	ands	r2, r3
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	051b      	lsls	r3, r3, #20
 800396a:	4313      	orrs	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8003972:	401a      	ands	r2, r3
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6a1b      	ldr	r3, [r3, #32]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4a1a      	ldr	r2, [pc, #104]	; (80039e8 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8003980:	401a      	ands	r2, r3
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a12      	ldr	r2, [pc, #72]	; (80039d8 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d106      	bne.n	80039a2 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	4a15      	ldr	r2, [pc, #84]	; (80039ec <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8003998:	401a      	ands	r2, r3
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	68fa      	ldr	r2, [r7, #12]
 80039a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	223c      	movs	r2, #60	; 0x3c
 80039ae:	2100      	movs	r1, #0
 80039b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	0018      	movs	r0, r3
 80039b6:	46bd      	mov	sp, r7
 80039b8:	b004      	add	sp, #16
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	fffffcff 	.word	0xfffffcff
 80039c0:	fffffbff 	.word	0xfffffbff
 80039c4:	fffff7ff 	.word	0xfffff7ff
 80039c8:	ffffefff 	.word	0xffffefff
 80039cc:	ffffdfff 	.word	0xffffdfff
 80039d0:	ffffbfff 	.word	0xffffbfff
 80039d4:	fff0ffff 	.word	0xfff0ffff
 80039d8:	40012c00 	.word	0x40012c00
 80039dc:	efffffff 	.word	0xefffffff
 80039e0:	ff0fffff 	.word	0xff0fffff
 80039e4:	feffffff 	.word	0xfeffffff
 80039e8:	fdffffff 	.word	0xfdffffff
 80039ec:	dfffffff 	.word	0xdfffffff

080039f0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e046      	b.n	8003a90 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2288      	movs	r2, #136	; 0x88
 8003a06:	589b      	ldr	r3, [r3, r2]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d107      	bne.n	8003a1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2284      	movs	r2, #132	; 0x84
 8003a10:	2100      	movs	r1, #0
 8003a12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	0018      	movs	r0, r3
 8003a18:	f7fd fd98 	bl	800154c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2288      	movs	r2, #136	; 0x88
 8003a20:	2124      	movs	r1, #36	; 0x24
 8003a22:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	2101      	movs	r1, #1
 8003a30:	438a      	bics	r2, r1
 8003a32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	0018      	movs	r0, r3
 8003a38:	f000 f830 	bl	8003a9c <UART_SetConfig>
 8003a3c:	0003      	movs	r3, r0
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d101      	bne.n	8003a46 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e024      	b.n	8003a90 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d003      	beq.n	8003a56 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	0018      	movs	r0, r3
 8003a52:	f000 f9c7 	bl	8003de4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685a      	ldr	r2, [r3, #4]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	490d      	ldr	r1, [pc, #52]	; (8003a98 <HAL_UART_Init+0xa8>)
 8003a62:	400a      	ands	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	212a      	movs	r1, #42	; 0x2a
 8003a72:	438a      	bics	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2101      	movs	r1, #1
 8003a82:	430a      	orrs	r2, r1
 8003a84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	0018      	movs	r0, r3
 8003a8a:	f000 fa5f 	bl	8003f4c <UART_CheckIdleState>
 8003a8e:	0003      	movs	r3, r0
}
 8003a90:	0018      	movs	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	b002      	add	sp, #8
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	ffffb7ff 	.word	0xffffb7ff

08003a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aa4:	231a      	movs	r3, #26
 8003aa6:	18fb      	adds	r3, r7, r3
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69db      	ldr	r3, [r3, #28]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4abc      	ldr	r2, [pc, #752]	; (8003dbc <UART_SetConfig+0x320>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	4ab7      	ldr	r2, [pc, #732]	; (8003dc0 <UART_SetConfig+0x324>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	0019      	movs	r1, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4aae      	ldr	r2, [pc, #696]	; (8003dc4 <UART_SetConfig+0x328>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	220f      	movs	r2, #15
 8003b20:	4393      	bics	r3, r2
 8003b22:	0019      	movs	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4aa4      	ldr	r2, [pc, #656]	; (8003dc8 <UART_SetConfig+0x32c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d127      	bne.n	8003b8a <UART_SetConfig+0xee>
 8003b3a:	4ba4      	ldr	r3, [pc, #656]	; (8003dcc <UART_SetConfig+0x330>)
 8003b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b3e:	2203      	movs	r2, #3
 8003b40:	4013      	ands	r3, r2
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d017      	beq.n	8003b76 <UART_SetConfig+0xda>
 8003b46:	d81b      	bhi.n	8003b80 <UART_SetConfig+0xe4>
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d00a      	beq.n	8003b62 <UART_SetConfig+0xc6>
 8003b4c:	d818      	bhi.n	8003b80 <UART_SetConfig+0xe4>
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <UART_SetConfig+0xbc>
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d00a      	beq.n	8003b6c <UART_SetConfig+0xd0>
 8003b56:	e013      	b.n	8003b80 <UART_SetConfig+0xe4>
 8003b58:	231b      	movs	r3, #27
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	701a      	strb	r2, [r3, #0]
 8003b60:	e058      	b.n	8003c14 <UART_SetConfig+0x178>
 8003b62:	231b      	movs	r3, #27
 8003b64:	18fb      	adds	r3, r7, r3
 8003b66:	2202      	movs	r2, #2
 8003b68:	701a      	strb	r2, [r3, #0]
 8003b6a:	e053      	b.n	8003c14 <UART_SetConfig+0x178>
 8003b6c:	231b      	movs	r3, #27
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2204      	movs	r2, #4
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e04e      	b.n	8003c14 <UART_SetConfig+0x178>
 8003b76:	231b      	movs	r3, #27
 8003b78:	18fb      	adds	r3, r7, r3
 8003b7a:	2208      	movs	r2, #8
 8003b7c:	701a      	strb	r2, [r3, #0]
 8003b7e:	e049      	b.n	8003c14 <UART_SetConfig+0x178>
 8003b80:	231b      	movs	r3, #27
 8003b82:	18fb      	adds	r3, r7, r3
 8003b84:	2210      	movs	r2, #16
 8003b86:	701a      	strb	r2, [r3, #0]
 8003b88:	e044      	b.n	8003c14 <UART_SetConfig+0x178>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a90      	ldr	r2, [pc, #576]	; (8003dd0 <UART_SetConfig+0x334>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d127      	bne.n	8003be4 <UART_SetConfig+0x148>
 8003b94:	4b8d      	ldr	r3, [pc, #564]	; (8003dcc <UART_SetConfig+0x330>)
 8003b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b98:	220c      	movs	r2, #12
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d017      	beq.n	8003bd0 <UART_SetConfig+0x134>
 8003ba0:	d81b      	bhi.n	8003bda <UART_SetConfig+0x13e>
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d00a      	beq.n	8003bbc <UART_SetConfig+0x120>
 8003ba6:	d818      	bhi.n	8003bda <UART_SetConfig+0x13e>
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <UART_SetConfig+0x116>
 8003bac:	2b04      	cmp	r3, #4
 8003bae:	d00a      	beq.n	8003bc6 <UART_SetConfig+0x12a>
 8003bb0:	e013      	b.n	8003bda <UART_SetConfig+0x13e>
 8003bb2:	231b      	movs	r3, #27
 8003bb4:	18fb      	adds	r3, r7, r3
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
 8003bba:	e02b      	b.n	8003c14 <UART_SetConfig+0x178>
 8003bbc:	231b      	movs	r3, #27
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	701a      	strb	r2, [r3, #0]
 8003bc4:	e026      	b.n	8003c14 <UART_SetConfig+0x178>
 8003bc6:	231b      	movs	r3, #27
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	2204      	movs	r2, #4
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e021      	b.n	8003c14 <UART_SetConfig+0x178>
 8003bd0:	231b      	movs	r3, #27
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e01c      	b.n	8003c14 <UART_SetConfig+0x178>
 8003bda:	231b      	movs	r3, #27
 8003bdc:	18fb      	adds	r3, r7, r3
 8003bde:	2210      	movs	r2, #16
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	e017      	b.n	8003c14 <UART_SetConfig+0x178>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a7a      	ldr	r2, [pc, #488]	; (8003dd4 <UART_SetConfig+0x338>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d104      	bne.n	8003bf8 <UART_SetConfig+0x15c>
 8003bee:	231b      	movs	r3, #27
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	e00d      	b.n	8003c14 <UART_SetConfig+0x178>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a76      	ldr	r2, [pc, #472]	; (8003dd8 <UART_SetConfig+0x33c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d104      	bne.n	8003c0c <UART_SetConfig+0x170>
 8003c02:	231b      	movs	r3, #27
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
 8003c0a:	e003      	b.n	8003c14 <UART_SetConfig+0x178>
 8003c0c:	231b      	movs	r3, #27
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	2210      	movs	r2, #16
 8003c12:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	2380      	movs	r3, #128	; 0x80
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d000      	beq.n	8003c22 <UART_SetConfig+0x186>
 8003c20:	e065      	b.n	8003cee <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8003c22:	231b      	movs	r3, #27
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b08      	cmp	r3, #8
 8003c2a:	d015      	beq.n	8003c58 <UART_SetConfig+0x1bc>
 8003c2c:	dc18      	bgt.n	8003c60 <UART_SetConfig+0x1c4>
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d00d      	beq.n	8003c4e <UART_SetConfig+0x1b2>
 8003c32:	dc15      	bgt.n	8003c60 <UART_SetConfig+0x1c4>
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <UART_SetConfig+0x1a2>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d005      	beq.n	8003c48 <UART_SetConfig+0x1ac>
 8003c3c:	e010      	b.n	8003c60 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3e:	f7fe feed 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8003c42:	0003      	movs	r3, r0
 8003c44:	617b      	str	r3, [r7, #20]
        break;
 8003c46:	e012      	b.n	8003c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <UART_SetConfig+0x340>)
 8003c4a:	617b      	str	r3, [r7, #20]
        break;
 8003c4c:	e00f      	b.n	8003c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fe5b 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8003c52:	0003      	movs	r3, r0
 8003c54:	617b      	str	r3, [r7, #20]
        break;
 8003c56:	e00a      	b.n	8003c6e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c58:	2380      	movs	r3, #128	; 0x80
 8003c5a:	021b      	lsls	r3, r3, #8
 8003c5c:	617b      	str	r3, [r7, #20]
        break;
 8003c5e:	e006      	b.n	8003c6e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003c60:	2300      	movs	r3, #0
 8003c62:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003c64:	231a      	movs	r3, #26
 8003c66:	18fb      	adds	r3, r7, r3
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
        break;
 8003c6c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d100      	bne.n	8003c76 <UART_SetConfig+0x1da>
 8003c74:	e08d      	b.n	8003d92 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c7a:	4b59      	ldr	r3, [pc, #356]	; (8003de0 <UART_SetConfig+0x344>)
 8003c7c:	0052      	lsls	r2, r2, #1
 8003c7e:	5ad3      	ldrh	r3, [r2, r3]
 8003c80:	0019      	movs	r1, r3
 8003c82:	6978      	ldr	r0, [r7, #20]
 8003c84:	f7fc fa40 	bl	8000108 <__udivsi3>
 8003c88:	0003      	movs	r3, r0
 8003c8a:	005a      	lsls	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	18d2      	adds	r2, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0019      	movs	r1, r3
 8003c9a:	0010      	movs	r0, r2
 8003c9c:	f7fc fa34 	bl	8000108 <__udivsi3>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	2b0f      	cmp	r3, #15
 8003ca8:	d91c      	bls.n	8003ce4 <UART_SetConfig+0x248>
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	2380      	movs	r3, #128	; 0x80
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d217      	bcs.n	8003ce4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	200e      	movs	r0, #14
 8003cba:	183b      	adds	r3, r7, r0
 8003cbc:	210f      	movs	r1, #15
 8003cbe:	438a      	bics	r2, r1
 8003cc0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2207      	movs	r2, #7
 8003cca:	4013      	ands	r3, r2
 8003ccc:	b299      	uxth	r1, r3
 8003cce:	183b      	adds	r3, r7, r0
 8003cd0:	183a      	adds	r2, r7, r0
 8003cd2:	8812      	ldrh	r2, [r2, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	183a      	adds	r2, r7, r0
 8003cde:	8812      	ldrh	r2, [r2, #0]
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e056      	b.n	8003d92 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce4:	231a      	movs	r3, #26
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	2201      	movs	r2, #1
 8003cea:	701a      	strb	r2, [r3, #0]
 8003cec:	e051      	b.n	8003d92 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cee:	231b      	movs	r3, #27
 8003cf0:	18fb      	adds	r3, r7, r3
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	2b08      	cmp	r3, #8
 8003cf6:	d015      	beq.n	8003d24 <UART_SetConfig+0x288>
 8003cf8:	dc18      	bgt.n	8003d2c <UART_SetConfig+0x290>
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00d      	beq.n	8003d1a <UART_SetConfig+0x27e>
 8003cfe:	dc15      	bgt.n	8003d2c <UART_SetConfig+0x290>
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <UART_SetConfig+0x26e>
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d005      	beq.n	8003d14 <UART_SetConfig+0x278>
 8003d08:	e010      	b.n	8003d2c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0a:	f7fe fe87 	bl	8002a1c <HAL_RCC_GetPCLK1Freq>
 8003d0e:	0003      	movs	r3, r0
 8003d10:	617b      	str	r3, [r7, #20]
        break;
 8003d12:	e012      	b.n	8003d3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d14:	4b31      	ldr	r3, [pc, #196]	; (8003ddc <UART_SetConfig+0x340>)
 8003d16:	617b      	str	r3, [r7, #20]
        break;
 8003d18:	e00f      	b.n	8003d3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1a:	f7fe fdf5 	bl	8002908 <HAL_RCC_GetSysClockFreq>
 8003d1e:	0003      	movs	r3, r0
 8003d20:	617b      	str	r3, [r7, #20]
        break;
 8003d22:	e00a      	b.n	8003d3a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	617b      	str	r3, [r7, #20]
        break;
 8003d2a:	e006      	b.n	8003d3a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d30:	231a      	movs	r3, #26
 8003d32:	18fb      	adds	r3, r7, r3
 8003d34:	2201      	movs	r2, #1
 8003d36:	701a      	strb	r2, [r3, #0]
        break;
 8003d38:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d028      	beq.n	8003d92 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d44:	4b26      	ldr	r3, [pc, #152]	; (8003de0 <UART_SetConfig+0x344>)
 8003d46:	0052      	lsls	r2, r2, #1
 8003d48:	5ad3      	ldrh	r3, [r2, r3]
 8003d4a:	0019      	movs	r1, r3
 8003d4c:	6978      	ldr	r0, [r7, #20]
 8003d4e:	f7fc f9db 	bl	8000108 <__udivsi3>
 8003d52:	0003      	movs	r3, r0
 8003d54:	001a      	movs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	085b      	lsrs	r3, r3, #1
 8003d5c:	18d2      	adds	r2, r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	0019      	movs	r1, r3
 8003d64:	0010      	movs	r0, r2
 8003d66:	f7fc f9cf 	bl	8000108 <__udivsi3>
 8003d6a:	0003      	movs	r3, r0
 8003d6c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b0f      	cmp	r3, #15
 8003d72:	d90a      	bls.n	8003d8a <UART_SetConfig+0x2ee>
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	2380      	movs	r3, #128	; 0x80
 8003d78:	025b      	lsls	r3, r3, #9
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d205      	bcs.n	8003d8a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	60da      	str	r2, [r3, #12]
 8003d88:	e003      	b.n	8003d92 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8a:	231a      	movs	r3, #26
 8003d8c:	18fb      	adds	r3, r7, r3
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	226a      	movs	r2, #106	; 0x6a
 8003d96:	2101      	movs	r1, #1
 8003d98:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2268      	movs	r2, #104	; 0x68
 8003d9e:	2101      	movs	r1, #1
 8003da0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003dae:	231a      	movs	r3, #26
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	781b      	ldrb	r3, [r3, #0]
}
 8003db4:	0018      	movs	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b008      	add	sp, #32
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	cfff69f3 	.word	0xcfff69f3
 8003dc0:	ffffcfff 	.word	0xffffcfff
 8003dc4:	11fff4ff 	.word	0x11fff4ff
 8003dc8:	40013800 	.word	0x40013800
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	40004400 	.word	0x40004400
 8003dd4:	40004800 	.word	0x40004800
 8003dd8:	40004c00 	.word	0x40004c00
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	08005580 	.word	0x08005580

08003de4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	2201      	movs	r2, #1
 8003df2:	4013      	ands	r3, r2
 8003df4:	d00b      	beq.n	8003e0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	4a4a      	ldr	r2, [pc, #296]	; (8003f28 <UART_AdvFeatureConfig+0x144>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e12:	2202      	movs	r2, #2
 8003e14:	4013      	ands	r3, r2
 8003e16:	d00b      	beq.n	8003e30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	4a43      	ldr	r2, [pc, #268]	; (8003f2c <UART_AdvFeatureConfig+0x148>)
 8003e20:	4013      	ands	r3, r2
 8003e22:	0019      	movs	r1, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e34:	2204      	movs	r2, #4
 8003e36:	4013      	ands	r3, r2
 8003e38:	d00b      	beq.n	8003e52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	4a3b      	ldr	r2, [pc, #236]	; (8003f30 <UART_AdvFeatureConfig+0x14c>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	0019      	movs	r1, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e56:	2208      	movs	r2, #8
 8003e58:	4013      	ands	r3, r2
 8003e5a:	d00b      	beq.n	8003e74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <UART_AdvFeatureConfig+0x150>)
 8003e64:	4013      	ands	r3, r2
 8003e66:	0019      	movs	r1, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	430a      	orrs	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e78:	2210      	movs	r2, #16
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	d00b      	beq.n	8003e96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a2c      	ldr	r2, [pc, #176]	; (8003f38 <UART_AdvFeatureConfig+0x154>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e9a:	2220      	movs	r2, #32
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	d00b      	beq.n	8003eb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <UART_AdvFeatureConfig+0x158>)
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	0019      	movs	r1, r3
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ebc:	2240      	movs	r2, #64	; 0x40
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d01d      	beq.n	8003efe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	4a1d      	ldr	r2, [pc, #116]	; (8003f40 <UART_AdvFeatureConfig+0x15c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ede:	2380      	movs	r3, #128	; 0x80
 8003ee0:	035b      	lsls	r3, r3, #13
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d10b      	bne.n	8003efe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	4a15      	ldr	r2, [pc, #84]	; (8003f44 <UART_AdvFeatureConfig+0x160>)
 8003eee:	4013      	ands	r3, r2
 8003ef0:	0019      	movs	r1, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f02:	2280      	movs	r2, #128	; 0x80
 8003f04:	4013      	ands	r3, r2
 8003f06:	d00b      	beq.n	8003f20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4a0e      	ldr	r2, [pc, #56]	; (8003f48 <UART_AdvFeatureConfig+0x164>)
 8003f10:	4013      	ands	r3, r2
 8003f12:	0019      	movs	r1, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	605a      	str	r2, [r3, #4]
  }
}
 8003f20:	46c0      	nop			; (mov r8, r8)
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b002      	add	sp, #8
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	fffdffff 	.word	0xfffdffff
 8003f2c:	fffeffff 	.word	0xfffeffff
 8003f30:	fffbffff 	.word	0xfffbffff
 8003f34:	ffff7fff 	.word	0xffff7fff
 8003f38:	ffffefff 	.word	0xffffefff
 8003f3c:	ffffdfff 	.word	0xffffdfff
 8003f40:	ffefffff 	.word	0xffefffff
 8003f44:	ff9fffff 	.word	0xff9fffff
 8003f48:	fff7ffff 	.word	0xfff7ffff

08003f4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af02      	add	r7, sp, #8
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2290      	movs	r2, #144	; 0x90
 8003f58:	2100      	movs	r1, #0
 8003f5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f5c:	f7fd fc80 	bl	8001860 <HAL_GetTick>
 8003f60:	0003      	movs	r3, r0
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d10c      	bne.n	8003f8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2280      	movs	r2, #128	; 0x80
 8003f76:	0391      	lsls	r1, r2, #14
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	4a1a      	ldr	r2, [pc, #104]	; (8003fe4 <UART_CheckIdleState+0x98>)
 8003f7c:	9200      	str	r2, [sp, #0]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f000 f832 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003f84:	1e03      	subs	r3, r0, #0
 8003f86:	d001      	beq.n	8003f8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e026      	b.n	8003fda <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2204      	movs	r2, #4
 8003f94:	4013      	ands	r3, r2
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d10c      	bne.n	8003fb4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2280      	movs	r2, #128	; 0x80
 8003f9e:	03d1      	lsls	r1, r2, #15
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	4a10      	ldr	r2, [pc, #64]	; (8003fe4 <UART_CheckIdleState+0x98>)
 8003fa4:	9200      	str	r2, [sp, #0]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f000 f81e 	bl	8003fe8 <UART_WaitOnFlagUntilTimeout>
 8003fac:	1e03      	subs	r3, r0, #0
 8003fae:	d001      	beq.n	8003fb4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e012      	b.n	8003fda <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2288      	movs	r2, #136	; 0x88
 8003fb8:	2120      	movs	r1, #32
 8003fba:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	228c      	movs	r2, #140	; 0x8c
 8003fc0:	2120      	movs	r1, #32
 8003fc2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2284      	movs	r2, #132	; 0x84
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	01ffffff 	.word	0x01ffffff

08003fe8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b094      	sub	sp, #80	; 0x50
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	1dfb      	adds	r3, r7, #7
 8003ff6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ff8:	e0a7      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	d100      	bne.n	8004002 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004000:	e0a3      	b.n	800414a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004002:	f7fd fc2d 	bl	8001860 <HAL_GetTick>
 8004006:	0002      	movs	r2, r0
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800400e:	429a      	cmp	r2, r3
 8004010:	d302      	bcc.n	8004018 <UART_WaitOnFlagUntilTimeout+0x30>
 8004012:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004014:	2b00      	cmp	r3, #0
 8004016:	d13f      	bne.n	8004098 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004018:	f3ef 8310 	mrs	r3, PRIMASK
 800401c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
 8004022:	2301      	movs	r3, #1
 8004024:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004028:	f383 8810 	msr	PRIMASK, r3
}
 800402c:	46c0      	nop			; (mov r8, r8)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	494e      	ldr	r1, [pc, #312]	; (8004174 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800403a:	400a      	ands	r2, r1
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004040:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004044:	f383 8810 	msr	PRIMASK, r3
}
 8004048:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800404a:	f3ef 8310 	mrs	r3, PRIMASK
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	643b      	str	r3, [r7, #64]	; 0x40
 8004054:	2301      	movs	r3, #1
 8004056:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405a:	f383 8810 	msr	PRIMASK, r3
}
 800405e:	46c0      	nop			; (mov r8, r8)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2101      	movs	r1, #1
 800406c:	438a      	bics	r2, r1
 800406e:	609a      	str	r2, [r3, #8]
 8004070:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004076:	f383 8810 	msr	PRIMASK, r3
}
 800407a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2288      	movs	r2, #136	; 0x88
 8004080:	2120      	movs	r1, #32
 8004082:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	228c      	movs	r2, #140	; 0x8c
 8004088:	2120      	movs	r1, #32
 800408a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2284      	movs	r2, #132	; 0x84
 8004090:	2100      	movs	r1, #0
 8004092:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e069      	b.n	800416c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2204      	movs	r2, #4
 80040a0:	4013      	ands	r3, r2
 80040a2:	d052      	beq.n	800414a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	2380      	movs	r3, #128	; 0x80
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	401a      	ands	r2, r3
 80040b0:	2380      	movs	r3, #128	; 0x80
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d148      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2280      	movs	r2, #128	; 0x80
 80040be:	0112      	lsls	r2, r2, #4
 80040c0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c2:	f3ef 8310 	mrs	r3, PRIMASK
 80040c6:	613b      	str	r3, [r7, #16]
  return(result);
 80040c8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80040ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040cc:	2301      	movs	r3, #1
 80040ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4924      	ldr	r1, [pc, #144]	; (8004174 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80040e4:	400a      	ands	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ea:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	f383 8810 	msr	PRIMASK, r3
}
 80040f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80040fa:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80040fe:	2301      	movs	r3, #1
 8004100:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2101      	movs	r1, #1
 8004116:	438a      	bics	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
 800411a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2288      	movs	r2, #136	; 0x88
 800412a:	2120      	movs	r1, #32
 800412c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	228c      	movs	r2, #140	; 0x8c
 8004132:	2120      	movs	r1, #32
 8004134:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2290      	movs	r2, #144	; 0x90
 800413a:	2120      	movs	r1, #32
 800413c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2284      	movs	r2, #132	; 0x84
 8004142:	2100      	movs	r1, #0
 8004144:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004146:	2303      	movs	r3, #3
 8004148:	e010      	b.n	800416c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	425a      	negs	r2, r3
 800415a:	4153      	adcs	r3, r2
 800415c:	b2db      	uxtb	r3, r3
 800415e:	001a      	movs	r2, r3
 8004160:	1dfb      	adds	r3, r7, #7
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	429a      	cmp	r2, r3
 8004166:	d100      	bne.n	800416a <UART_WaitOnFlagUntilTimeout+0x182>
 8004168:	e747      	b.n	8003ffa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	0018      	movs	r0, r3
 800416e:	46bd      	mov	sp, r7
 8004170:	b014      	add	sp, #80	; 0x50
 8004172:	bd80      	pop	{r7, pc}
 8004174:	fffffe5f 	.word	0xfffffe5f

08004178 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2284      	movs	r2, #132	; 0x84
 8004184:	5c9b      	ldrb	r3, [r3, r2]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_UARTEx_DisableFifoMode+0x16>
 800418a:	2302      	movs	r3, #2
 800418c:	e027      	b.n	80041de <HAL_UARTEx_DisableFifoMode+0x66>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2284      	movs	r2, #132	; 0x84
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2288      	movs	r2, #136	; 0x88
 800419a:	2124      	movs	r1, #36	; 0x24
 800419c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2101      	movs	r1, #1
 80041b2:	438a      	bics	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	4a0b      	ldr	r2, [pc, #44]	; (80041e8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2288      	movs	r2, #136	; 0x88
 80041d0:	2120      	movs	r1, #32
 80041d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2284      	movs	r2, #132	; 0x84
 80041d8:	2100      	movs	r1, #0
 80041da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	0018      	movs	r0, r3
 80041e0:	46bd      	mov	sp, r7
 80041e2:	b004      	add	sp, #16
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	46c0      	nop			; (mov r8, r8)
 80041e8:	dfffffff 	.word	0xdfffffff

080041ec <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2284      	movs	r2, #132	; 0x84
 80041fa:	5c9b      	ldrb	r3, [r3, r2]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d101      	bne.n	8004204 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004200:	2302      	movs	r3, #2
 8004202:	e02e      	b.n	8004262 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2284      	movs	r2, #132	; 0x84
 8004208:	2101      	movs	r1, #1
 800420a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2288      	movs	r2, #136	; 0x88
 8004210:	2124      	movs	r1, #36	; 0x24
 8004212:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	2101      	movs	r1, #1
 8004228:	438a      	bics	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	08d9      	lsrs	r1, r3, #3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	430a      	orrs	r2, r1
 800423e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	0018      	movs	r0, r3
 8004244:	f000 f854 	bl	80042f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2288      	movs	r2, #136	; 0x88
 8004254:	2120      	movs	r1, #32
 8004256:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2284      	movs	r2, #132	; 0x84
 800425c:	2100      	movs	r1, #0
 800425e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b004      	add	sp, #16
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2284      	movs	r2, #132	; 0x84
 800427a:	5c9b      	ldrb	r3, [r3, r2]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004280:	2302      	movs	r3, #2
 8004282:	e02f      	b.n	80042e4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2284      	movs	r2, #132	; 0x84
 8004288:	2101      	movs	r1, #1
 800428a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2288      	movs	r2, #136	; 0x88
 8004290:	2124      	movs	r1, #36	; 0x24
 8004292:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	2101      	movs	r1, #1
 80042a8:	438a      	bics	r2, r1
 80042aa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4a0e      	ldr	r2, [pc, #56]	; (80042ec <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	683a      	ldr	r2, [r7, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	0018      	movs	r0, r3
 80042c6:	f000 f813 	bl	80042f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2288      	movs	r2, #136	; 0x88
 80042d6:	2120      	movs	r1, #32
 80042d8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2284      	movs	r2, #132	; 0x84
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	0018      	movs	r0, r3
 80042e6:	46bd      	mov	sp, r7
 80042e8:	b004      	add	sp, #16
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	f1ffffff 	.word	0xf1ffffff

080042f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80042f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042f2:	b085      	sub	sp, #20
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	226a      	movs	r2, #106	; 0x6a
 8004304:	2101      	movs	r1, #1
 8004306:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2268      	movs	r2, #104	; 0x68
 800430c:	2101      	movs	r1, #1
 800430e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004310:	e043      	b.n	800439a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004312:	260f      	movs	r6, #15
 8004314:	19bb      	adds	r3, r7, r6
 8004316:	2208      	movs	r2, #8
 8004318:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800431a:	200e      	movs	r0, #14
 800431c:	183b      	adds	r3, r7, r0
 800431e:	2208      	movs	r2, #8
 8004320:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	0e5b      	lsrs	r3, r3, #25
 800432a:	b2da      	uxtb	r2, r3
 800432c:	240d      	movs	r4, #13
 800432e:	193b      	adds	r3, r7, r4
 8004330:	2107      	movs	r1, #7
 8004332:	400a      	ands	r2, r1
 8004334:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	0f5b      	lsrs	r3, r3, #29
 800433e:	b2da      	uxtb	r2, r3
 8004340:	250c      	movs	r5, #12
 8004342:	197b      	adds	r3, r7, r5
 8004344:	2107      	movs	r1, #7
 8004346:	400a      	ands	r2, r1
 8004348:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800434a:	183b      	adds	r3, r7, r0
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	197a      	adds	r2, r7, r5
 8004350:	7812      	ldrb	r2, [r2, #0]
 8004352:	4914      	ldr	r1, [pc, #80]	; (80043a4 <UARTEx_SetNbDataToProcess+0xb4>)
 8004354:	5c8a      	ldrb	r2, [r1, r2]
 8004356:	435a      	muls	r2, r3
 8004358:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800435a:	197b      	adds	r3, r7, r5
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	4a12      	ldr	r2, [pc, #72]	; (80043a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004360:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004362:	0019      	movs	r1, r3
 8004364:	f7fb ff5a 	bl	800021c <__divsi3>
 8004368:	0003      	movs	r3, r0
 800436a:	b299      	uxth	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	226a      	movs	r2, #106	; 0x6a
 8004370:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004372:	19bb      	adds	r3, r7, r6
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	193a      	adds	r2, r7, r4
 8004378:	7812      	ldrb	r2, [r2, #0]
 800437a:	490a      	ldr	r1, [pc, #40]	; (80043a4 <UARTEx_SetNbDataToProcess+0xb4>)
 800437c:	5c8a      	ldrb	r2, [r1, r2]
 800437e:	435a      	muls	r2, r3
 8004380:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004382:	193b      	adds	r3, r7, r4
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <UARTEx_SetNbDataToProcess+0xb8>)
 8004388:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800438a:	0019      	movs	r1, r3
 800438c:	f7fb ff46 	bl	800021c <__divsi3>
 8004390:	0003      	movs	r3, r0
 8004392:	b299      	uxth	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2268      	movs	r2, #104	; 0x68
 8004398:	5299      	strh	r1, [r3, r2]
}
 800439a:	46c0      	nop			; (mov r8, r8)
 800439c:	46bd      	mov	sp, r7
 800439e:	b005      	add	sp, #20
 80043a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a2:	46c0      	nop			; (mov r8, r8)
 80043a4:	08005598 	.word	0x08005598
 80043a8:	080055a0 	.word	0x080055a0

080043ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b084      	sub	sp, #16
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	0002      	movs	r2, r0
 80043b4:	1dbb      	adds	r3, r7, #6
 80043b6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043bc:	1dbb      	adds	r3, r7, #6
 80043be:	2200      	movs	r2, #0
 80043c0:	5e9b      	ldrsh	r3, [r3, r2]
 80043c2:	2b84      	cmp	r3, #132	; 0x84
 80043c4:	d006      	beq.n	80043d4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80043c6:	1dbb      	adds	r3, r7, #6
 80043c8:	2200      	movs	r2, #0
 80043ca:	5e9a      	ldrsh	r2, [r3, r2]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	18d3      	adds	r3, r2, r3
 80043d0:	3303      	adds	r3, #3
 80043d2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043d4:	68fb      	ldr	r3, [r7, #12]
}
 80043d6:	0018      	movs	r0, r3
 80043d8:	46bd      	mov	sp, r7
 80043da:	b004      	add	sp, #16
 80043dc:	bd80      	pop	{r7, pc}

080043de <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043e2:	f000 fa3d 	bl	8004860 <vTaskStartScheduler>
  
  return osOK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043f0:	b087      	sub	sp, #28
 80043f2:	af02      	add	r7, sp, #8
 80043f4:	6078      	str	r0, [r7, #4]
 80043f6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685c      	ldr	r4, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004404:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2208      	movs	r2, #8
 800440a:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800440c:	0018      	movs	r0, r3
 800440e:	f7ff ffcd 	bl	80043ac <makeFreeRtosPriority>
 8004412:	0001      	movs	r1, r0
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	230c      	movs	r3, #12
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	9301      	str	r3, [sp, #4]
 800441c:	9100      	str	r1, [sp, #0]
 800441e:	0013      	movs	r3, r2
 8004420:	0032      	movs	r2, r6
 8004422:	0029      	movs	r1, r5
 8004424:	0020      	movs	r0, r4
 8004426:	f000 f8c7 	bl	80045b8 <xTaskCreate>
 800442a:	0003      	movs	r3, r0
 800442c:	2b01      	cmp	r3, #1
 800442e:	d001      	beq.n	8004434 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	e000      	b.n	8004436 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b005      	add	sp, #20
 800443c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800443e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b084      	sub	sp, #16
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <osDelay+0x16>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	e000      	b.n	8004456 <osDelay+0x18>
 8004454:	2301      	movs	r3, #1
 8004456:	0018      	movs	r0, r3
 8004458:	f000 f9dc 	bl	8004814 <vTaskDelay>
  
  return osOK;
 800445c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800445e:	0018      	movs	r0, r3
 8004460:	46bd      	mov	sp, r7
 8004462:	b004      	add	sp, #16
 8004464:	bd80      	pop	{r7, pc}

08004466 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b082      	sub	sp, #8
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	3308      	adds	r3, #8
 8004472:	001a      	movs	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	4252      	negs	r2, r2
 800447e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3308      	adds	r3, #8
 8004484:	001a      	movs	r2, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3308      	adds	r3, #8
 800448e:	001a      	movs	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	46bd      	mov	sp, r7
 800449e:	b002      	add	sp, #8
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044b0:	46c0      	nop			; (mov r8, r8)
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689a      	ldr	r2, [r3, #8]
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	683a      	ldr	r2, [r7, #0]
 80044dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
}
 80044f4:	46c0      	nop			; (mov r8, r8)
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b004      	add	sp, #16
 80044fa:	bd80      	pop	{r7, pc}

080044fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	3301      	adds	r3, #1
 8004510:	d103      	bne.n	800451a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	e00c      	b.n	8004534 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	3308      	adds	r3, #8
 800451e:	60fb      	str	r3, [r7, #12]
 8004520:	e002      	b.n	8004528 <vListInsert+0x2c>
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	60fb      	str	r3, [r7, #12]
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68ba      	ldr	r2, [r7, #8]
 8004530:	429a      	cmp	r2, r3
 8004532:	d2f6      	bcs.n	8004522 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	683a      	ldr	r2, [r7, #0]
 8004542:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1c5a      	adds	r2, r3, #1
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	601a      	str	r2, [r3, #0]
}
 8004560:	46c0      	nop			; (mov r8, r8)
 8004562:	46bd      	mov	sp, r7
 8004564:	b004      	add	sp, #16
 8004566:	bd80      	pop	{r7, pc}

08004568 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6892      	ldr	r2, [r2, #8]
 800457e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6852      	ldr	r2, [r2, #4]
 8004588:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	687a      	ldr	r2, [r7, #4]
 8004590:	429a      	cmp	r2, r3
 8004592:	d103      	bne.n	800459c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689a      	ldr	r2, [r3, #8]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
}
 80045b0:	0018      	movs	r0, r3
 80045b2:	46bd      	mov	sp, r7
 80045b4:	b004      	add	sp, #16
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045b8:	b590      	push	{r4, r7, lr}
 80045ba:	b08d      	sub	sp, #52	; 0x34
 80045bc:	af04      	add	r7, sp, #16
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	1dbb      	adds	r3, r7, #6
 80045c6:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045c8:	1dbb      	adds	r3, r7, #6
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	0018      	movs	r0, r3
 80045d0:	f000 fd6e 	bl	80050b0 <pvPortMalloc>
 80045d4:	0003      	movs	r3, r0
 80045d6:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d010      	beq.n	8004600 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045de:	2054      	movs	r0, #84	; 0x54
 80045e0:	f000 fd66 	bl	80050b0 <pvPortMalloc>
 80045e4:	0003      	movs	r3, r0
 80045e6:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d003      	beq.n	80045f6 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	631a      	str	r2, [r3, #48]	; 0x30
 80045f4:	e006      	b.n	8004604 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	0018      	movs	r0, r3
 80045fa:	f000 fe05 	bl	8005208 <vPortFree>
 80045fe:	e001      	b.n	8004604 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d016      	beq.n	8004638 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800460a:	1dbb      	adds	r3, r7, #6
 800460c:	881a      	ldrh	r2, [r3, #0]
 800460e:	683c      	ldr	r4, [r7, #0]
 8004610:	68b9      	ldr	r1, [r7, #8]
 8004612:	68f8      	ldr	r0, [r7, #12]
 8004614:	2300      	movs	r3, #0
 8004616:	9303      	str	r3, [sp, #12]
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	9302      	str	r3, [sp, #8]
 800461c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	0023      	movs	r3, r4
 8004626:	f000 f80f 	bl	8004648 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	0018      	movs	r0, r3
 800462e:	f000 f88d 	bl	800474c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004632:	2301      	movs	r3, #1
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e002      	b.n	800463e <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004638:	2301      	movs	r3, #1
 800463a:	425b      	negs	r3, r3
 800463c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800463e:	69bb      	ldr	r3, [r7, #24]
	}
 8004640:	0018      	movs	r0, r3
 8004642:	46bd      	mov	sp, r7
 8004644:	b009      	add	sp, #36	; 0x24
 8004646:	bd90      	pop	{r4, r7, pc}

08004648 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	493a      	ldr	r1, [pc, #232]	; (8004748 <prvInitialiseNewTask+0x100>)
 800465e:	468c      	mov	ip, r1
 8004660:	4463      	add	r3, ip
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	18d3      	adds	r3, r2, r3
 8004666:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	2207      	movs	r2, #7
 800466c:	4393      	bics	r3, r2
 800466e:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	2207      	movs	r2, #7
 8004674:	4013      	ands	r3, r2
 8004676:	d001      	beq.n	800467c <prvInitialiseNewTask+0x34>
 8004678:	b672      	cpsid	i
 800467a:	e7fe      	b.n	800467a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d020      	beq.n	80046c4 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	e013      	b.n	80046b0 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	18d3      	adds	r3, r2, r3
 800468e:	7818      	ldrb	r0, [r3, #0]
 8004690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004692:	2134      	movs	r1, #52	; 0x34
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	18d3      	adds	r3, r2, r3
 8004698:	185b      	adds	r3, r3, r1
 800469a:	1c02      	adds	r2, r0, #0
 800469c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	18d3      	adds	r3, r2, r3
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d006      	beq.n	80046b8 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	3301      	adds	r3, #1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	2b0f      	cmp	r3, #15
 80046b4:	d9e8      	bls.n	8004688 <prvInitialiseNewTask+0x40>
 80046b6:	e000      	b.n	80046ba <prvInitialiseNewTask+0x72>
			{
				break;
 80046b8:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	2243      	movs	r2, #67	; 0x43
 80046be:	2100      	movs	r1, #0
 80046c0:	5499      	strb	r1, [r3, r2]
 80046c2:	e003      	b.n	80046cc <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c6:	2234      	movs	r2, #52	; 0x34
 80046c8:	2100      	movs	r1, #0
 80046ca:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046cc:	6a3b      	ldr	r3, [r7, #32]
 80046ce:	2b06      	cmp	r3, #6
 80046d0:	d901      	bls.n	80046d6 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046d2:	2306      	movs	r3, #6
 80046d4:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	6a3a      	ldr	r2, [r7, #32]
 80046da:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	6a3a      	ldr	r2, [r7, #32]
 80046e0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	2200      	movs	r2, #0
 80046e6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	3304      	adds	r3, #4
 80046ec:	0018      	movs	r0, r3
 80046ee:	f7ff fed8 	bl	80044a2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	3318      	adds	r3, #24
 80046f6:	0018      	movs	r0, r3
 80046f8:	f7ff fed3 	bl	80044a2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004700:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004702:	6a3b      	ldr	r3, [r7, #32]
 8004704:	2207      	movs	r2, #7
 8004706:	1ad2      	subs	r2, r2, r3
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800470c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004710:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	2200      	movs	r2, #0
 8004716:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	2250      	movs	r2, #80	; 0x50
 800471c:	2100      	movs	r1, #0
 800471e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	68f9      	ldr	r1, [r7, #12]
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	0018      	movs	r0, r3
 8004728:	f000 fb8c 	bl	8004e44 <pxPortInitialiseStack>
 800472c:	0002      	movs	r2, r0
 800472e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004730:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800473c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800473e:	46c0      	nop			; (mov r8, r8)
 8004740:	46bd      	mov	sp, r7
 8004742:	b006      	add	sp, #24
 8004744:	bd80      	pop	{r7, pc}
 8004746:	46c0      	nop			; (mov r8, r8)
 8004748:	3fffffff 	.word	0x3fffffff

0800474c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004754:	f000 fc14 	bl	8004f80 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004758:	4b28      	ldr	r3, [pc, #160]	; (80047fc <prvAddNewTaskToReadyList+0xb0>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	1c5a      	adds	r2, r3, #1
 800475e:	4b27      	ldr	r3, [pc, #156]	; (80047fc <prvAddNewTaskToReadyList+0xb0>)
 8004760:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004762:	4b27      	ldr	r3, [pc, #156]	; (8004800 <prvAddNewTaskToReadyList+0xb4>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d109      	bne.n	800477e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800476a:	4b25      	ldr	r3, [pc, #148]	; (8004800 <prvAddNewTaskToReadyList+0xb4>)
 800476c:	687a      	ldr	r2, [r7, #4]
 800476e:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004770:	4b22      	ldr	r3, [pc, #136]	; (80047fc <prvAddNewTaskToReadyList+0xb0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d110      	bne.n	800479a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004778:	f000 fa52 	bl	8004c20 <prvInitialiseTaskLists>
 800477c:	e00d      	b.n	800479a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800477e:	4b21      	ldr	r3, [pc, #132]	; (8004804 <prvAddNewTaskToReadyList+0xb8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d109      	bne.n	800479a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004786:	4b1e      	ldr	r3, [pc, #120]	; (8004800 <prvAddNewTaskToReadyList+0xb4>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	429a      	cmp	r2, r3
 8004792:	d802      	bhi.n	800479a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004794:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <prvAddNewTaskToReadyList+0xb4>)
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800479a:	4b1b      	ldr	r3, [pc, #108]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <prvAddNewTaskToReadyList+0xbc>)
 80047a2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a8:	4b18      	ldr	r3, [pc, #96]	; (800480c <prvAddNewTaskToReadyList+0xc0>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d903      	bls.n	80047b8 <prvAddNewTaskToReadyList+0x6c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b15      	ldr	r3, [pc, #84]	; (800480c <prvAddNewTaskToReadyList+0xc0>)
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047bc:	0013      	movs	r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	189b      	adds	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <prvAddNewTaskToReadyList+0xc4>)
 80047c6:	189a      	adds	r2, r3, r2
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	3304      	adds	r3, #4
 80047cc:	0019      	movs	r1, r3
 80047ce:	0010      	movs	r0, r2
 80047d0:	f7ff fe72 	bl	80044b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047d4:	f000 fbe6 	bl	8004fa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047d8:	4b0a      	ldr	r3, [pc, #40]	; (8004804 <prvAddNewTaskToReadyList+0xb8>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d008      	beq.n	80047f2 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047e0:	4b07      	ldr	r3, [pc, #28]	; (8004800 <prvAddNewTaskToReadyList+0xb4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d201      	bcs.n	80047f2 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047ee:	f000 fbb7 	bl	8004f60 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047f2:	46c0      	nop			; (mov r8, r8)
 80047f4:	46bd      	mov	sp, r7
 80047f6:	b002      	add	sp, #8
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	200005a4 	.word	0x200005a4
 8004800:	200004a4 	.word	0x200004a4
 8004804:	200005b0 	.word	0x200005b0
 8004808:	200005c0 	.word	0x200005c0
 800480c:	200005ac 	.word	0x200005ac
 8004810:	200004a8 	.word	0x200004a8

08004814 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d010      	beq.n	8004848 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <vTaskDelay+0x48>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <vTaskDelay+0x1e>
 800482e:	b672      	cpsid	i
 8004830:	e7fe      	b.n	8004830 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004832:	f000 f84b 	bl	80048cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2100      	movs	r1, #0
 800483a:	0018      	movs	r0, r3
 800483c:	f000 faae 	bl	8004d9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004840:	f000 f850 	bl	80048e4 <xTaskResumeAll>
 8004844:	0003      	movs	r3, r0
 8004846:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800484e:	f000 fb87 	bl	8004f60 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	46bd      	mov	sp, r7
 8004856:	b004      	add	sp, #16
 8004858:	bd80      	pop	{r7, pc}
 800485a:	46c0      	nop			; (mov r8, r8)
 800485c:	200005cc 	.word	0x200005cc

08004860 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004866:	4913      	ldr	r1, [pc, #76]	; (80048b4 <vTaskStartScheduler+0x54>)
 8004868:	4813      	ldr	r0, [pc, #76]	; (80048b8 <vTaskStartScheduler+0x58>)
 800486a:	4b14      	ldr	r3, [pc, #80]	; (80048bc <vTaskStartScheduler+0x5c>)
 800486c:	9301      	str	r3, [sp, #4]
 800486e:	2300      	movs	r3, #0
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	2300      	movs	r3, #0
 8004874:	2280      	movs	r2, #128	; 0x80
 8004876:	f7ff fe9f 	bl	80045b8 <xTaskCreate>
 800487a:	0003      	movs	r3, r0
 800487c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2b01      	cmp	r3, #1
 8004882:	d10d      	bne.n	80048a0 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004884:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004886:	4b0e      	ldr	r3, [pc, #56]	; (80048c0 <vTaskStartScheduler+0x60>)
 8004888:	2201      	movs	r2, #1
 800488a:	4252      	negs	r2, r2
 800488c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800488e:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <vTaskStartScheduler+0x64>)
 8004890:	2201      	movs	r2, #1
 8004892:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <vTaskStartScheduler+0x68>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800489a:	f000 fb3d 	bl	8004f18 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800489e:	e004      	b.n	80048aa <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3301      	adds	r3, #1
 80048a4:	d101      	bne.n	80048aa <vTaskStartScheduler+0x4a>
 80048a6:	b672      	cpsid	i
 80048a8:	e7fe      	b.n	80048a8 <vTaskStartScheduler+0x48>
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	46bd      	mov	sp, r7
 80048ae:	b002      	add	sp, #8
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	46c0      	nop			; (mov r8, r8)
 80048b4:	080054c4 	.word	0x080054c4
 80048b8:	08004c01 	.word	0x08004c01
 80048bc:	200005c8 	.word	0x200005c8
 80048c0:	200005c4 	.word	0x200005c4
 80048c4:	200005b0 	.word	0x200005b0
 80048c8:	200005a8 	.word	0x200005a8

080048cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048d0:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <vTaskSuspendAll+0x14>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	4b02      	ldr	r3, [pc, #8]	; (80048e0 <vTaskSuspendAll+0x14>)
 80048d8:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048da:	46c0      	nop			; (mov r8, r8)
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	200005cc 	.word	0x200005cc

080048e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048ee:	2300      	movs	r3, #0
 80048f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048f2:	4b3a      	ldr	r3, [pc, #232]	; (80049dc <xTaskResumeAll+0xf8>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <xTaskResumeAll+0x1a>
 80048fa:	b672      	cpsid	i
 80048fc:	e7fe      	b.n	80048fc <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80048fe:	f000 fb3f 	bl	8004f80 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004902:	4b36      	ldr	r3, [pc, #216]	; (80049dc <xTaskResumeAll+0xf8>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	4b34      	ldr	r3, [pc, #208]	; (80049dc <xTaskResumeAll+0xf8>)
 800490a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800490c:	4b33      	ldr	r3, [pc, #204]	; (80049dc <xTaskResumeAll+0xf8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d15b      	bne.n	80049cc <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004914:	4b32      	ldr	r3, [pc, #200]	; (80049e0 <xTaskResumeAll+0xfc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d057      	beq.n	80049cc <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800491c:	e02f      	b.n	800497e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800491e:	4b31      	ldr	r3, [pc, #196]	; (80049e4 <xTaskResumeAll+0x100>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	68db      	ldr	r3, [r3, #12]
 8004924:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3318      	adds	r3, #24
 800492a:	0018      	movs	r0, r3
 800492c:	f7ff fe1c 	bl	8004568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3304      	adds	r3, #4
 8004934:	0018      	movs	r0, r3
 8004936:	f7ff fe17 	bl	8004568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800493e:	4b2a      	ldr	r3, [pc, #168]	; (80049e8 <xTaskResumeAll+0x104>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d903      	bls.n	800494e <xTaskResumeAll+0x6a>
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	4b27      	ldr	r3, [pc, #156]	; (80049e8 <xTaskResumeAll+0x104>)
 800494c:	601a      	str	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004952:	0013      	movs	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	189b      	adds	r3, r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4a24      	ldr	r2, [pc, #144]	; (80049ec <xTaskResumeAll+0x108>)
 800495c:	189a      	adds	r2, r3, r2
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	3304      	adds	r3, #4
 8004962:	0019      	movs	r1, r3
 8004964:	0010      	movs	r0, r2
 8004966:	f7ff fda7 	bl	80044b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800496e:	4b20      	ldr	r3, [pc, #128]	; (80049f0 <xTaskResumeAll+0x10c>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004974:	429a      	cmp	r2, r3
 8004976:	d302      	bcc.n	800497e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004978:	4b1e      	ldr	r3, [pc, #120]	; (80049f4 <xTaskResumeAll+0x110>)
 800497a:	2201      	movs	r2, #1
 800497c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800497e:	4b19      	ldr	r3, [pc, #100]	; (80049e4 <xTaskResumeAll+0x100>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1cb      	bne.n	800491e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d001      	beq.n	8004990 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800498c:	f000 f9cc 	bl	8004d28 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <xTaskResumeAll+0x114>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d00f      	beq.n	80049bc <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800499c:	f000 f82e 	bl	80049fc <xTaskIncrementTick>
 80049a0:	1e03      	subs	r3, r0, #0
 80049a2:	d002      	beq.n	80049aa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80049a4:	4b13      	ldr	r3, [pc, #76]	; (80049f4 <xTaskResumeAll+0x110>)
 80049a6:	2201      	movs	r2, #1
 80049a8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	3b01      	subs	r3, #1
 80049ae:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f2      	bne.n	800499c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <xTaskResumeAll+0x114>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <xTaskResumeAll+0x110>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049c4:	2301      	movs	r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049c8:	f000 faca 	bl	8004f60 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049cc:	f000 faea 	bl	8004fa4 <vPortExitCritical>

	return xAlreadyYielded;
 80049d0:	68bb      	ldr	r3, [r7, #8]
}
 80049d2:	0018      	movs	r0, r3
 80049d4:	46bd      	mov	sp, r7
 80049d6:	b004      	add	sp, #16
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	200005cc 	.word	0x200005cc
 80049e0:	200005a4 	.word	0x200005a4
 80049e4:	20000564 	.word	0x20000564
 80049e8:	200005ac 	.word	0x200005ac
 80049ec:	200004a8 	.word	0x200004a8
 80049f0:	200004a4 	.word	0x200004a4
 80049f4:	200005b8 	.word	0x200005b8
 80049f8:	200005b4 	.word	0x200005b4

080049fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b086      	sub	sp, #24
 8004a00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a02:	2300      	movs	r3, #0
 8004a04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a06:	4b4a      	ldr	r3, [pc, #296]	; (8004b30 <xTaskIncrementTick+0x134>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d000      	beq.n	8004a10 <xTaskIncrementTick+0x14>
 8004a0e:	e084      	b.n	8004b1a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a10:	4b48      	ldr	r3, [pc, #288]	; (8004b34 <xTaskIncrementTick+0x138>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a18:	4b46      	ldr	r3, [pc, #280]	; (8004b34 <xTaskIncrementTick+0x138>)
 8004a1a:	693a      	ldr	r2, [r7, #16]
 8004a1c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d117      	bne.n	8004a54 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a24:	4b44      	ldr	r3, [pc, #272]	; (8004b38 <xTaskIncrementTick+0x13c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d001      	beq.n	8004a32 <xTaskIncrementTick+0x36>
 8004a2e:	b672      	cpsid	i
 8004a30:	e7fe      	b.n	8004a30 <xTaskIncrementTick+0x34>
 8004a32:	4b41      	ldr	r3, [pc, #260]	; (8004b38 <xTaskIncrementTick+0x13c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	60fb      	str	r3, [r7, #12]
 8004a38:	4b40      	ldr	r3, [pc, #256]	; (8004b3c <xTaskIncrementTick+0x140>)
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	4b3e      	ldr	r3, [pc, #248]	; (8004b38 <xTaskIncrementTick+0x13c>)
 8004a3e:	601a      	str	r2, [r3, #0]
 8004a40:	4b3e      	ldr	r3, [pc, #248]	; (8004b3c <xTaskIncrementTick+0x140>)
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	601a      	str	r2, [r3, #0]
 8004a46:	4b3e      	ldr	r3, [pc, #248]	; (8004b40 <xTaskIncrementTick+0x144>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	1c5a      	adds	r2, r3, #1
 8004a4c:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <xTaskIncrementTick+0x144>)
 8004a4e:	601a      	str	r2, [r3, #0]
 8004a50:	f000 f96a 	bl	8004d28 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a54:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d349      	bcc.n	8004af2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a5e:	4b36      	ldr	r3, [pc, #216]	; (8004b38 <xTaskIncrementTick+0x13c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d104      	bne.n	8004a72 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a68:	4b36      	ldr	r3, [pc, #216]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	4252      	negs	r2, r2
 8004a6e:	601a      	str	r2, [r3, #0]
					break;
 8004a70:	e03f      	b.n	8004af2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a72:	4b31      	ldr	r3, [pc, #196]	; (8004b38 <xTaskIncrementTick+0x13c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d203      	bcs.n	8004a92 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a8a:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <xTaskIncrementTick+0x148>)
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a90:	e02f      	b.n	8004af2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	3304      	adds	r3, #4
 8004a96:	0018      	movs	r0, r3
 8004a98:	f7ff fd66 	bl	8004568 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d004      	beq.n	8004aae <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3318      	adds	r3, #24
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	f7ff fd5d 	bl	8004568 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	4b25      	ldr	r3, [pc, #148]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d903      	bls.n	8004ac2 <xTaskIncrementTick+0xc6>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004abe:	4b22      	ldr	r3, [pc, #136]	; (8004b48 <xTaskIncrementTick+0x14c>)
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac6:	0013      	movs	r3, r2
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <xTaskIncrementTick+0x150>)
 8004ad0:	189a      	adds	r2, r3, r2
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3304      	adds	r3, #4
 8004ad6:	0019      	movs	r1, r3
 8004ad8:	0010      	movs	r0, r2
 8004ada:	f7ff fced 	bl	80044b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ae2:	4b1b      	ldr	r3, [pc, #108]	; (8004b50 <xTaskIncrementTick+0x154>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d3b8      	bcc.n	8004a5e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004af0:	e7b5      	b.n	8004a5e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004af2:	4b17      	ldr	r3, [pc, #92]	; (8004b50 <xTaskIncrementTick+0x154>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	4914      	ldr	r1, [pc, #80]	; (8004b4c <xTaskIncrementTick+0x150>)
 8004afa:	0013      	movs	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	189b      	adds	r3, r3, r2
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	585b      	ldr	r3, [r3, r1]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d901      	bls.n	8004b0c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b0c:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <xTaskIncrementTick+0x158>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8004b14:	2301      	movs	r3, #1
 8004b16:	617b      	str	r3, [r7, #20]
 8004b18:	e004      	b.n	8004b24 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <xTaskIncrementTick+0x15c>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	4b0d      	ldr	r3, [pc, #52]	; (8004b58 <xTaskIncrementTick+0x15c>)
 8004b22:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b24:	697b      	ldr	r3, [r7, #20]
}
 8004b26:	0018      	movs	r0, r3
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	b006      	add	sp, #24
 8004b2c:	bd80      	pop	{r7, pc}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	200005cc 	.word	0x200005cc
 8004b34:	200005a8 	.word	0x200005a8
 8004b38:	2000055c 	.word	0x2000055c
 8004b3c:	20000560 	.word	0x20000560
 8004b40:	200005bc 	.word	0x200005bc
 8004b44:	200005c4 	.word	0x200005c4
 8004b48:	200005ac 	.word	0x200005ac
 8004b4c:	200004a8 	.word	0x200004a8
 8004b50:	200004a4 	.word	0x200004a4
 8004b54:	200005b8 	.word	0x200005b8
 8004b58:	200005b4 	.word	0x200005b4

08004b5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b62:	4b22      	ldr	r3, [pc, #136]	; (8004bec <vTaskSwitchContext+0x90>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b6a:	4b21      	ldr	r3, [pc, #132]	; (8004bf0 <vTaskSwitchContext+0x94>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b70:	e037      	b.n	8004be2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004b72:	4b1f      	ldr	r3, [pc, #124]	; (8004bf0 <vTaskSwitchContext+0x94>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b78:	4b1e      	ldr	r3, [pc, #120]	; (8004bf4 <vTaskSwitchContext+0x98>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e007      	b.n	8004b90 <vTaskSwitchContext+0x34>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <vTaskSwitchContext+0x2e>
 8004b86:	b672      	cpsid	i
 8004b88:	e7fe      	b.n	8004b88 <vTaskSwitchContext+0x2c>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	607b      	str	r3, [r7, #4]
 8004b90:	4919      	ldr	r1, [pc, #100]	; (8004bf8 <vTaskSwitchContext+0x9c>)
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	0013      	movs	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	189b      	adds	r3, r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	585b      	ldr	r3, [r3, r1]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0ee      	beq.n	8004b80 <vTaskSwitchContext+0x24>
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	0013      	movs	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4a12      	ldr	r2, [pc, #72]	; (8004bf8 <vTaskSwitchContext+0x9c>)
 8004bae:	189b      	adds	r3, r3, r2
 8004bb0:	603b      	str	r3, [r7, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	605a      	str	r2, [r3, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d104      	bne.n	8004bd2 <vTaskSwitchContext+0x76>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	68da      	ldr	r2, [r3, #12]
 8004bd8:	4b08      	ldr	r3, [pc, #32]	; (8004bfc <vTaskSwitchContext+0xa0>)
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <vTaskSwitchContext+0x98>)
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	601a      	str	r2, [r3, #0]
}
 8004be2:	46c0      	nop			; (mov r8, r8)
 8004be4:	46bd      	mov	sp, r7
 8004be6:	b002      	add	sp, #8
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	46c0      	nop			; (mov r8, r8)
 8004bec:	200005cc 	.word	0x200005cc
 8004bf0:	200005b8 	.word	0x200005b8
 8004bf4:	200005ac 	.word	0x200005ac
 8004bf8:	200004a8 	.word	0x200004a8
 8004bfc:	200004a4 	.word	0x200004a4

08004c00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c08:	f000 f84e 	bl	8004ca8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <prvIdleTask+0x1c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b01      	cmp	r3, #1
 8004c12:	d9f9      	bls.n	8004c08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c14:	f000 f9a4 	bl	8004f60 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004c18:	e7f6      	b.n	8004c08 <prvIdleTask+0x8>
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	200004a8 	.word	0x200004a8

08004c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c26:	2300      	movs	r3, #0
 8004c28:	607b      	str	r3, [r7, #4]
 8004c2a:	e00c      	b.n	8004c46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	0013      	movs	r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	189b      	adds	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4a14      	ldr	r2, [pc, #80]	; (8004c88 <prvInitialiseTaskLists+0x68>)
 8004c38:	189b      	adds	r3, r3, r2
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff fc13 	bl	8004466 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	3301      	adds	r3, #1
 8004c44:	607b      	str	r3, [r7, #4]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d9ef      	bls.n	8004c2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <prvInitialiseTaskLists+0x6c>)
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff fc09 	bl	8004466 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004c54:	4b0e      	ldr	r3, [pc, #56]	; (8004c90 <prvInitialiseTaskLists+0x70>)
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff fc05 	bl	8004466 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <prvInitialiseTaskLists+0x74>)
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f7ff fc01 	bl	8004466 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004c64:	4b0c      	ldr	r3, [pc, #48]	; (8004c98 <prvInitialiseTaskLists+0x78>)
 8004c66:	0018      	movs	r0, r3
 8004c68:	f7ff fbfd 	bl	8004466 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <prvInitialiseTaskLists+0x7c>)
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7ff fbf9 	bl	8004466 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004c74:	4b0a      	ldr	r3, [pc, #40]	; (8004ca0 <prvInitialiseTaskLists+0x80>)
 8004c76:	4a05      	ldr	r2, [pc, #20]	; (8004c8c <prvInitialiseTaskLists+0x6c>)
 8004c78:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <prvInitialiseTaskLists+0x84>)
 8004c7c:	4a04      	ldr	r2, [pc, #16]	; (8004c90 <prvInitialiseTaskLists+0x70>)
 8004c7e:	601a      	str	r2, [r3, #0]
}
 8004c80:	46c0      	nop			; (mov r8, r8)
 8004c82:	46bd      	mov	sp, r7
 8004c84:	b002      	add	sp, #8
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	200004a8 	.word	0x200004a8
 8004c8c:	20000534 	.word	0x20000534
 8004c90:	20000548 	.word	0x20000548
 8004c94:	20000564 	.word	0x20000564
 8004c98:	20000578 	.word	0x20000578
 8004c9c:	20000590 	.word	0x20000590
 8004ca0:	2000055c 	.word	0x2000055c
 8004ca4:	20000560 	.word	0x20000560

08004ca8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004cae:	e01a      	b.n	8004ce6 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004cb0:	f000 f966 	bl	8004f80 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cb4:	4b10      	ldr	r3, [pc, #64]	; (8004cf8 <prvCheckTasksWaitingTermination+0x50>)
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3304      	adds	r3, #4
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7ff fc51 	bl	8004568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004cc6:	4b0d      	ldr	r3, [pc, #52]	; (8004cfc <prvCheckTasksWaitingTermination+0x54>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	4b0b      	ldr	r3, [pc, #44]	; (8004cfc <prvCheckTasksWaitingTermination+0x54>)
 8004cce:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004cd0:	4b0b      	ldr	r3, [pc, #44]	; (8004d00 <prvCheckTasksWaitingTermination+0x58>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	1e5a      	subs	r2, r3, #1
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <prvCheckTasksWaitingTermination+0x58>)
 8004cd8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004cda:	f000 f963 	bl	8004fa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	0018      	movs	r0, r3
 8004ce2:	f000 f80f 	bl	8004d04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ce6:	4b06      	ldr	r3, [pc, #24]	; (8004d00 <prvCheckTasksWaitingTermination+0x58>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1e0      	bne.n	8004cb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46c0      	nop			; (mov r8, r8)
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	b002      	add	sp, #8
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20000578 	.word	0x20000578
 8004cfc:	200005a4 	.word	0x200005a4
 8004d00:	2000058c 	.word	0x2000058c

08004d04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	0018      	movs	r0, r3
 8004d12:	f000 fa79 	bl	8005208 <vPortFree>
			vPortFree( pxTCB );
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 fa75 	bl	8005208 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d1e:	46c0      	nop			; (mov r8, r8)
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b002      	add	sp, #8
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d2e:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <prvResetNextTaskUnblockTime+0x34>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d104      	bne.n	8004d42 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004d38:	4b09      	ldr	r3, [pc, #36]	; (8004d60 <prvResetNextTaskUnblockTime+0x38>)
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4252      	negs	r2, r2
 8004d3e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004d40:	e008      	b.n	8004d54 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d42:	4b06      	ldr	r3, [pc, #24]	; (8004d5c <prvResetNextTaskUnblockTime+0x34>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	4b03      	ldr	r3, [pc, #12]	; (8004d60 <prvResetNextTaskUnblockTime+0x38>)
 8004d52:	601a      	str	r2, [r3, #0]
}
 8004d54:	46c0      	nop			; (mov r8, r8)
 8004d56:	46bd      	mov	sp, r7
 8004d58:	b002      	add	sp, #8
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	2000055c 	.word	0x2000055c
 8004d60:	200005c4 	.word	0x200005c4

08004d64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d6a:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <xTaskGetSchedulerState+0x30>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d72:	2301      	movs	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	e008      	b.n	8004d8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <xTaskGetSchedulerState+0x34>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d102      	bne.n	8004d86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d80:	2302      	movs	r3, #2
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	e001      	b.n	8004d8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d8a:	687b      	ldr	r3, [r7, #4]
	}
 8004d8c:	0018      	movs	r0, r3
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	b002      	add	sp, #8
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	200005b0 	.word	0x200005b0
 8004d98:	200005cc 	.word	0x200005cc

08004d9c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004da6:	4b21      	ldr	r3, [pc, #132]	; (8004e2c <prvAddCurrentTaskToDelayedList+0x90>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	3304      	adds	r3, #4
 8004db2:	0018      	movs	r0, r3
 8004db4:	f7ff fbd8 	bl	8004568 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	d10b      	bne.n	8004dd6 <prvAddCurrentTaskToDelayedList+0x3a>
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d008      	beq.n	8004dd6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dc4:	4b1a      	ldr	r3, [pc, #104]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	1d1a      	adds	r2, r3, #4
 8004dca:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <prvAddCurrentTaskToDelayedList+0x98>)
 8004dcc:	0011      	movs	r1, r2
 8004dce:	0018      	movs	r0, r3
 8004dd0:	f7ff fb72 	bl	80044b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004dd4:	e026      	b.n	8004e24 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004dd6:	68fa      	ldr	r2, [r7, #12]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	18d3      	adds	r3, r2, r3
 8004ddc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004dde:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d209      	bcs.n	8004e02 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4b0f      	ldr	r3, [pc, #60]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3304      	adds	r3, #4
 8004df8:	0019      	movs	r1, r3
 8004dfa:	0010      	movs	r0, r2
 8004dfc:	f7ff fb7e 	bl	80044fc <vListInsert>
}
 8004e00:	e010      	b.n	8004e24 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e02:	4b0e      	ldr	r3, [pc, #56]	; (8004e3c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b0a      	ldr	r3, [pc, #40]	; (8004e30 <prvAddCurrentTaskToDelayedList+0x94>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	0019      	movs	r1, r3
 8004e0e:	0010      	movs	r0, r2
 8004e10:	f7ff fb74 	bl	80044fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d202      	bcs.n	8004e24 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004e1e:	4b08      	ldr	r3, [pc, #32]	; (8004e40 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004e20:	68ba      	ldr	r2, [r7, #8]
 8004e22:	601a      	str	r2, [r3, #0]
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	b004      	add	sp, #16
 8004e2a:	bd80      	pop	{r7, pc}
 8004e2c:	200005a8 	.word	0x200005a8
 8004e30:	200004a4 	.word	0x200004a4
 8004e34:	20000590 	.word	0x20000590
 8004e38:	20000560 	.word	0x20000560
 8004e3c:	2000055c 	.word	0x2000055c
 8004e40:	200005c4 	.word	0x200005c4

08004e44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3b04      	subs	r3, #4
 8004e54:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2280      	movs	r2, #128	; 0x80
 8004e5a:	0452      	lsls	r2, r2, #17
 8004e5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	3b04      	subs	r3, #4
 8004e62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3b04      	subs	r3, #4
 8004e6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004e70:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <pxPortInitialiseStack+0x50>)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b14      	subs	r3, #20
 8004e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	3b20      	subs	r3, #32
 8004e86:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004e88:	68fb      	ldr	r3, [r7, #12]
}
 8004e8a:	0018      	movs	r0, r3
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	b004      	add	sp, #16
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	46c0      	nop			; (mov r8, r8)
 8004e94:	08004e99 	.word	0x08004e99

08004e98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004ea2:	4b08      	ldr	r3, [pc, #32]	; (8004ec4 <prvTaskExitError+0x2c>)
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	d001      	beq.n	8004eae <prvTaskExitError+0x16>
 8004eaa:	b672      	cpsid	i
 8004eac:	e7fe      	b.n	8004eac <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004eae:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004eb0:	46c0      	nop			; (mov r8, r8)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d0fc      	beq.n	8004eb2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46c0      	nop			; (mov r8, r8)
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	2000000c 	.word	0x2000000c

08004ec8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004ecc:	46c0      	nop			; (mov r8, r8)
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}
	...

08004ee0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004ee0:	4a0b      	ldr	r2, [pc, #44]	; (8004f10 <pxCurrentTCBConst2>)
 8004ee2:	6813      	ldr	r3, [r2, #0]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	3020      	adds	r0, #32
 8004ee8:	f380 8809 	msr	PSP, r0
 8004eec:	2002      	movs	r0, #2
 8004eee:	f380 8814 	msr	CONTROL, r0
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004ef8:	46ae      	mov	lr, r5
 8004efa:	bc08      	pop	{r3}
 8004efc:	bc04      	pop	{r2}
 8004efe:	b662      	cpsie	i
 8004f00:	4718      	bx	r3
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46c0      	nop			; (mov r8, r8)
 8004f08:	46c0      	nop			; (mov r8, r8)
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	46c0      	nop			; (mov r8, r8)
 8004f0e:	46c0      	nop			; (mov r8, r8)

08004f10 <pxCurrentTCBConst2>:
 8004f10:	200004a4 	.word	0x200004a4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	46c0      	nop			; (mov r8, r8)

08004f18 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f1c:	4b0e      	ldr	r3, [pc, #56]	; (8004f58 <xPortStartScheduler+0x40>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <xPortStartScheduler+0x40>)
 8004f22:	21ff      	movs	r1, #255	; 0xff
 8004f24:	0409      	lsls	r1, r1, #16
 8004f26:	430a      	orrs	r2, r1
 8004f28:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f2a:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <xPortStartScheduler+0x40>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <xPortStartScheduler+0x40>)
 8004f30:	21ff      	movs	r1, #255	; 0xff
 8004f32:	0609      	lsls	r1, r1, #24
 8004f34:	430a      	orrs	r2, r1
 8004f36:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f38:	f000 f898 	bl	800506c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f3c:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <xPortStartScheduler+0x44>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004f42:	f7ff ffcd 	bl	8004ee0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f46:	f7ff fe09 	bl	8004b5c <vTaskSwitchContext>
	prvTaskExitError();
 8004f4a:	f7ff ffa5 	bl	8004e98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	0018      	movs	r0, r3
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	46c0      	nop			; (mov r8, r8)
 8004f58:	e000ed20 	.word	0xe000ed20
 8004f5c:	2000000c 	.word	0x2000000c

08004f60 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f64:	4b05      	ldr	r3, [pc, #20]	; (8004f7c <vPortYield+0x1c>)
 8004f66:	2280      	movs	r2, #128	; 0x80
 8004f68:	0552      	lsls	r2, r2, #21
 8004f6a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004f6c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004f70:	f3bf 8f6f 	isb	sy
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8004f84:	b672      	cpsid	i
	uxCriticalNesting++;
 8004f86:	4b06      	ldr	r3, [pc, #24]	; (8004fa0 <vPortEnterCritical+0x20>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	1c5a      	adds	r2, r3, #1
 8004f8c:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <vPortEnterCritical+0x20>)
 8004f8e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004f90:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004f94:	f3bf 8f6f 	isb	sy
}
 8004f98:	46c0      	nop			; (mov r8, r8)
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	46c0      	nop			; (mov r8, r8)
 8004fa0:	2000000c 	.word	0x2000000c

08004fa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004fa8:	4b09      	ldr	r3, [pc, #36]	; (8004fd0 <vPortExitCritical+0x2c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <vPortExitCritical+0x10>
 8004fb0:	b672      	cpsid	i
 8004fb2:	e7fe      	b.n	8004fb2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8004fb4:	4b06      	ldr	r3, [pc, #24]	; (8004fd0 <vPortExitCritical+0x2c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	1e5a      	subs	r2, r3, #1
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <vPortExitCritical+0x2c>)
 8004fbc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8004fbe:	4b04      	ldr	r3, [pc, #16]	; (8004fd0 <vPortExitCritical+0x2c>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d100      	bne.n	8004fc8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8004fc6:	b662      	cpsie	i
	}
}
 8004fc8:	46c0      	nop			; (mov r8, r8)
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	46c0      	nop			; (mov r8, r8)
 8004fd0:	2000000c 	.word	0x2000000c

08004fd4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004fd4:	f3ef 8010 	mrs	r0, PRIMASK
 8004fd8:	b672      	cpsid	i
 8004fda:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
 8004fde:	0018      	movs	r0, r3

08004fe0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004fe0:	f380 8810 	msr	PRIMASK, r0
 8004fe4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8004fe6:	46c0      	nop			; (mov r8, r8)
	...

08004ff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ff0:	f3ef 8009 	mrs	r0, PSP
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <pxCurrentTCBConst>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	3820      	subs	r0, #32
 8004ffa:	6010      	str	r0, [r2, #0]
 8004ffc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004ffe:	4644      	mov	r4, r8
 8005000:	464d      	mov	r5, r9
 8005002:	4656      	mov	r6, sl
 8005004:	465f      	mov	r7, fp
 8005006:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005008:	b508      	push	{r3, lr}
 800500a:	b672      	cpsid	i
 800500c:	f7ff fda6 	bl	8004b5c <vTaskSwitchContext>
 8005010:	b662      	cpsie	i
 8005012:	bc0c      	pop	{r2, r3}
 8005014:	6811      	ldr	r1, [r2, #0]
 8005016:	6808      	ldr	r0, [r1, #0]
 8005018:	3010      	adds	r0, #16
 800501a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800501c:	46a0      	mov	r8, r4
 800501e:	46a9      	mov	r9, r5
 8005020:	46b2      	mov	sl, r6
 8005022:	46bb      	mov	fp, r7
 8005024:	f380 8809 	msr	PSP, r0
 8005028:	3820      	subs	r0, #32
 800502a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800502c:	4718      	bx	r3
 800502e:	46c0      	nop			; (mov r8, r8)

08005030 <pxCurrentTCBConst>:
 8005030:	200004a4 	.word	0x200004a4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005034:	46c0      	nop			; (mov r8, r8)
 8005036:	46c0      	nop			; (mov r8, r8)

08005038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800503e:	f7ff ffc9 	bl	8004fd4 <ulSetInterruptMaskFromISR>
 8005042:	0003      	movs	r3, r0
 8005044:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005046:	f7ff fcd9 	bl	80049fc <xTaskIncrementTick>
 800504a:	1e03      	subs	r3, r0, #0
 800504c:	d003      	beq.n	8005056 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800504e:	4b06      	ldr	r3, [pc, #24]	; (8005068 <xPortSysTickHandler+0x30>)
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	0552      	lsls	r2, r2, #21
 8005054:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	0018      	movs	r0, r3
 800505a:	f7ff ffc1 	bl	8004fe0 <vClearInterruptMaskFromISR>
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b002      	add	sp, #8
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005070:	4b0b      	ldr	r3, [pc, #44]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005072:	2200      	movs	r2, #0
 8005074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005076:	4b0b      	ldr	r3, [pc, #44]	; (80050a4 <vPortSetupTimerInterrupt+0x38>)
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800507c:	4b0a      	ldr	r3, [pc, #40]	; (80050a8 <vPortSetupTimerInterrupt+0x3c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	22fa      	movs	r2, #250	; 0xfa
 8005082:	0091      	lsls	r1, r2, #2
 8005084:	0018      	movs	r0, r3
 8005086:	f7fb f83f 	bl	8000108 <__udivsi3>
 800508a:	0003      	movs	r3, r0
 800508c:	001a      	movs	r2, r3
 800508e:	4b07      	ldr	r3, [pc, #28]	; (80050ac <vPortSetupTimerInterrupt+0x40>)
 8005090:	3a01      	subs	r2, #1
 8005092:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8005094:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <vPortSetupTimerInterrupt+0x34>)
 8005096:	2207      	movs	r2, #7
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	e000e010 	.word	0xe000e010
 80050a4:	e000e018 	.word	0xe000e018
 80050a8:	20000000 	.word	0x20000000
 80050ac:	e000e014 	.word	0xe000e014

080050b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80050bc:	f7ff fc06 	bl	80048cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80050c0:	4b4b      	ldr	r3, [pc, #300]	; (80051f0 <pvPortMalloc+0x140>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d101      	bne.n	80050cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80050c8:	f000 f8ec 	bl	80052a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80050cc:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <pvPortMalloc+0x144>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	687a      	ldr	r2, [r7, #4]
 80050d2:	4013      	ands	r3, r2
 80050d4:	d000      	beq.n	80050d8 <pvPortMalloc+0x28>
 80050d6:	e07e      	b.n	80051d6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d012      	beq.n	8005104 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80050de:	2208      	movs	r2, #8
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	189b      	adds	r3, r3, r2
 80050e4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2207      	movs	r2, #7
 80050ea:	4013      	ands	r3, r2
 80050ec:	d00a      	beq.n	8005104 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2207      	movs	r2, #7
 80050f2:	4393      	bics	r3, r2
 80050f4:	3308      	adds	r3, #8
 80050f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2207      	movs	r2, #7
 80050fc:	4013      	ands	r3, r2
 80050fe:	d001      	beq.n	8005104 <pvPortMalloc+0x54>
 8005100:	b672      	cpsid	i
 8005102:	e7fe      	b.n	8005102 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d065      	beq.n	80051d6 <pvPortMalloc+0x126>
 800510a:	4b3b      	ldr	r3, [pc, #236]	; (80051f8 <pvPortMalloc+0x148>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	429a      	cmp	r2, r3
 8005112:	d860      	bhi.n	80051d6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005114:	4b39      	ldr	r3, [pc, #228]	; (80051fc <pvPortMalloc+0x14c>)
 8005116:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8005118:	4b38      	ldr	r3, [pc, #224]	; (80051fc <pvPortMalloc+0x14c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800511e:	e004      	b.n	800512a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d903      	bls.n	800513c <pvPortMalloc+0x8c>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1f1      	bne.n	8005120 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800513c:	4b2c      	ldr	r3, [pc, #176]	; (80051f0 <pvPortMalloc+0x140>)
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	429a      	cmp	r2, r3
 8005144:	d047      	beq.n	80051d6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2208      	movs	r2, #8
 800514c:	189b      	adds	r3, r3, r2
 800514e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	1ad2      	subs	r2, r2, r3
 8005160:	2308      	movs	r3, #8
 8005162:	005b      	lsls	r3, r3, #1
 8005164:	429a      	cmp	r2, r3
 8005166:	d916      	bls.n	8005196 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	18d3      	adds	r3, r2, r3
 800516e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2207      	movs	r2, #7
 8005174:	4013      	ands	r3, r2
 8005176:	d001      	beq.n	800517c <pvPortMalloc+0xcc>
 8005178:	b672      	cpsid	i
 800517a:	e7fe      	b.n	800517a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	1ad2      	subs	r2, r2, r3
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	0018      	movs	r0, r3
 8005192:	f000 f8e7 	bl	8005364 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005196:	4b18      	ldr	r3, [pc, #96]	; (80051f8 <pvPortMalloc+0x148>)
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	685b      	ldr	r3, [r3, #4]
 800519e:	1ad2      	subs	r2, r2, r3
 80051a0:	4b15      	ldr	r3, [pc, #84]	; (80051f8 <pvPortMalloc+0x148>)
 80051a2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80051a4:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <pvPortMalloc+0x148>)
 80051a6:	681a      	ldr	r2, [r3, #0]
 80051a8:	4b15      	ldr	r3, [pc, #84]	; (8005200 <pvPortMalloc+0x150>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d203      	bcs.n	80051b8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80051b0:	4b11      	ldr	r3, [pc, #68]	; (80051f8 <pvPortMalloc+0x148>)
 80051b2:	681a      	ldr	r2, [r3, #0]
 80051b4:	4b12      	ldr	r3, [pc, #72]	; (8005200 <pvPortMalloc+0x150>)
 80051b6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	4b0d      	ldr	r3, [pc, #52]	; (80051f4 <pvPortMalloc+0x144>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	431a      	orrs	r2, r3
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051c6:	697b      	ldr	r3, [r7, #20]
 80051c8:	2200      	movs	r2, #0
 80051ca:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051cc:	4b0d      	ldr	r3, [pc, #52]	; (8005204 <pvPortMalloc+0x154>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	1c5a      	adds	r2, r3, #1
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <pvPortMalloc+0x154>)
 80051d4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051d6:	f7ff fb85 	bl	80048e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2207      	movs	r2, #7
 80051de:	4013      	ands	r3, r2
 80051e0:	d001      	beq.n	80051e6 <pvPortMalloc+0x136>
 80051e2:	b672      	cpsid	i
 80051e4:	e7fe      	b.n	80051e4 <pvPortMalloc+0x134>
	return pvReturn;
 80051e6:	68fb      	ldr	r3, [r7, #12]
}
 80051e8:	0018      	movs	r0, r3
 80051ea:	46bd      	mov	sp, r7
 80051ec:	b006      	add	sp, #24
 80051ee:	bd80      	pop	{r7, pc}
 80051f0:	20007dd8 	.word	0x20007dd8
 80051f4:	20007dec 	.word	0x20007dec
 80051f8:	20007ddc 	.word	0x20007ddc
 80051fc:	20007dd0 	.word	0x20007dd0
 8005200:	20007de0 	.word	0x20007de0
 8005204:	20007de4 	.word	0x20007de4

08005208 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d03a      	beq.n	8005290 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800521a:	2308      	movs	r3, #8
 800521c:	425b      	negs	r3, r3
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	18d3      	adds	r3, r2, r3
 8005222:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	685a      	ldr	r2, [r3, #4]
 800522c:	4b1a      	ldr	r3, [pc, #104]	; (8005298 <vPortFree+0x90>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4013      	ands	r3, r2
 8005232:	d101      	bne.n	8005238 <vPortFree+0x30>
 8005234:	b672      	cpsid	i
 8005236:	e7fe      	b.n	8005236 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d001      	beq.n	8005244 <vPortFree+0x3c>
 8005240:	b672      	cpsid	i
 8005242:	e7fe      	b.n	8005242 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	685a      	ldr	r2, [r3, #4]
 8005248:	4b13      	ldr	r3, [pc, #76]	; (8005298 <vPortFree+0x90>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4013      	ands	r3, r2
 800524e:	d01f      	beq.n	8005290 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d11b      	bne.n	8005290 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	4b0e      	ldr	r3, [pc, #56]	; (8005298 <vPortFree+0x90>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005268:	f7ff fb30 	bl	80048cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	4b0a      	ldr	r3, [pc, #40]	; (800529c <vPortFree+0x94>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	18d2      	adds	r2, r2, r3
 8005276:	4b09      	ldr	r3, [pc, #36]	; (800529c <vPortFree+0x94>)
 8005278:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	0018      	movs	r0, r3
 800527e:	f000 f871 	bl	8005364 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005282:	4b07      	ldr	r3, [pc, #28]	; (80052a0 <vPortFree+0x98>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	1c5a      	adds	r2, r3, #1
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <vPortFree+0x98>)
 800528a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800528c:	f7ff fb2a 	bl	80048e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b004      	add	sp, #16
 8005296:	bd80      	pop	{r7, pc}
 8005298:	20007dec 	.word	0x20007dec
 800529c:	20007ddc 	.word	0x20007ddc
 80052a0:	20007de8 	.word	0x20007de8

080052a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b084      	sub	sp, #16
 80052a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052aa:	23f0      	movs	r3, #240	; 0xf0
 80052ac:	01db      	lsls	r3, r3, #7
 80052ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052b0:	4b26      	ldr	r3, [pc, #152]	; (800534c <prvHeapInit+0xa8>)
 80052b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2207      	movs	r2, #7
 80052b8:	4013      	ands	r3, r2
 80052ba:	d00c      	beq.n	80052d6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	3307      	adds	r3, #7
 80052c0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2207      	movs	r2, #7
 80052c6:	4393      	bics	r3, r2
 80052c8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ca:	68ba      	ldr	r2, [r7, #8]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	4b1e      	ldr	r3, [pc, #120]	; (800534c <prvHeapInit+0xa8>)
 80052d2:	18d3      	adds	r3, r2, r3
 80052d4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052da:	4b1d      	ldr	r3, [pc, #116]	; (8005350 <prvHeapInit+0xac>)
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <prvHeapInit+0xac>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	18d3      	adds	r3, r2, r3
 80052ec:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80052ee:	2208      	movs	r2, #8
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	1a9b      	subs	r3, r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2207      	movs	r2, #7
 80052fa:	4393      	bics	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	4b14      	ldr	r3, [pc, #80]	; (8005354 <prvHeapInit+0xb0>)
 8005302:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8005304:	4b13      	ldr	r3, [pc, #76]	; (8005354 <prvHeapInit+0xb0>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2200      	movs	r2, #0
 800530a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800530c:	4b11      	ldr	r3, [pc, #68]	; (8005354 <prvHeapInit+0xb0>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	1ad2      	subs	r2, r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005322:	4b0c      	ldr	r3, [pc, #48]	; (8005354 <prvHeapInit+0xb0>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	4b0a      	ldr	r3, [pc, #40]	; (8005358 <prvHeapInit+0xb4>)
 8005330:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <prvHeapInit+0xb8>)
 8005338:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800533a:	4b09      	ldr	r3, [pc, #36]	; (8005360 <prvHeapInit+0xbc>)
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	0612      	lsls	r2, r2, #24
 8005340:	601a      	str	r2, [r3, #0]
}
 8005342:	46c0      	nop			; (mov r8, r8)
 8005344:	46bd      	mov	sp, r7
 8005346:	b004      	add	sp, #16
 8005348:	bd80      	pop	{r7, pc}
 800534a:	46c0      	nop			; (mov r8, r8)
 800534c:	200005d0 	.word	0x200005d0
 8005350:	20007dd0 	.word	0x20007dd0
 8005354:	20007dd8 	.word	0x20007dd8
 8005358:	20007de0 	.word	0x20007de0
 800535c:	20007ddc 	.word	0x20007ddc
 8005360:	20007dec 	.word	0x20007dec

08005364 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800536c:	4b27      	ldr	r3, [pc, #156]	; (800540c <prvInsertBlockIntoFreeList+0xa8>)
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e002      	b.n	8005378 <prvInsertBlockIntoFreeList+0x14>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	429a      	cmp	r2, r3
 8005380:	d8f7      	bhi.n	8005372 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68ba      	ldr	r2, [r7, #8]
 800538c:	18d3      	adds	r3, r2, r3
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	429a      	cmp	r2, r3
 8005392:	d108      	bne.n	80053a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	685a      	ldr	r2, [r3, #4]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	18d2      	adds	r2, r2, r3
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	18d2      	adds	r2, r2, r3
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d118      	bne.n	80053ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b14      	ldr	r3, [pc, #80]	; (8005410 <prvInsertBlockIntoFreeList+0xac>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d00d      	beq.n	80053e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	18d2      	adds	r2, r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	601a      	str	r2, [r3, #0]
 80053e0:	e008      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80053e2:	4b0b      	ldr	r3, [pc, #44]	; (8005410 <prvInsertBlockIntoFreeList+0xac>)
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	601a      	str	r2, [r3, #0]
 80053ea:	e003      	b.n	80053f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	429a      	cmp	r2, r3
 80053fa:	d002      	beq.n	8005402 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005402:	46c0      	nop			; (mov r8, r8)
 8005404:	46bd      	mov	sp, r7
 8005406:	b004      	add	sp, #16
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	20007dd0 	.word	0x20007dd0
 8005410:	20007dd8 	.word	0x20007dd8

08005414 <memset>:
 8005414:	0003      	movs	r3, r0
 8005416:	1882      	adds	r2, r0, r2
 8005418:	4293      	cmp	r3, r2
 800541a:	d100      	bne.n	800541e <memset+0xa>
 800541c:	4770      	bx	lr
 800541e:	7019      	strb	r1, [r3, #0]
 8005420:	3301      	adds	r3, #1
 8005422:	e7f9      	b.n	8005418 <memset+0x4>

08005424 <__libc_init_array>:
 8005424:	b570      	push	{r4, r5, r6, lr}
 8005426:	2600      	movs	r6, #0
 8005428:	4c0c      	ldr	r4, [pc, #48]	; (800545c <__libc_init_array+0x38>)
 800542a:	4d0d      	ldr	r5, [pc, #52]	; (8005460 <__libc_init_array+0x3c>)
 800542c:	1b64      	subs	r4, r4, r5
 800542e:	10a4      	asrs	r4, r4, #2
 8005430:	42a6      	cmp	r6, r4
 8005432:	d109      	bne.n	8005448 <__libc_init_array+0x24>
 8005434:	2600      	movs	r6, #0
 8005436:	f000 f819 	bl	800546c <_init>
 800543a:	4c0a      	ldr	r4, [pc, #40]	; (8005464 <__libc_init_array+0x40>)
 800543c:	4d0a      	ldr	r5, [pc, #40]	; (8005468 <__libc_init_array+0x44>)
 800543e:	1b64      	subs	r4, r4, r5
 8005440:	10a4      	asrs	r4, r4, #2
 8005442:	42a6      	cmp	r6, r4
 8005444:	d105      	bne.n	8005452 <__libc_init_array+0x2e>
 8005446:	bd70      	pop	{r4, r5, r6, pc}
 8005448:	00b3      	lsls	r3, r6, #2
 800544a:	58eb      	ldr	r3, [r5, r3]
 800544c:	4798      	blx	r3
 800544e:	3601      	adds	r6, #1
 8005450:	e7ee      	b.n	8005430 <__libc_init_array+0xc>
 8005452:	00b3      	lsls	r3, r6, #2
 8005454:	58eb      	ldr	r3, [r5, r3]
 8005456:	4798      	blx	r3
 8005458:	3601      	adds	r6, #1
 800545a:	e7f2      	b.n	8005442 <__libc_init_array+0x1e>
 800545c:	080055a8 	.word	0x080055a8
 8005460:	080055a8 	.word	0x080055a8
 8005464:	080055ac 	.word	0x080055ac
 8005468:	080055a8 	.word	0x080055a8

0800546c <_init>:
 800546c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800546e:	46c0      	nop			; (mov r8, r8)
 8005470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005472:	bc08      	pop	{r3}
 8005474:	469e      	mov	lr, r3
 8005476:	4770      	bx	lr

08005478 <_fini>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	46c0      	nop			; (mov r8, r8)
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr
