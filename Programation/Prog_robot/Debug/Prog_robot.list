
Prog_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e08  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007ec8  08007ec8  00017ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ff8  08007ff8  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08007ff8  08007ff8  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007ff8  08007ff8  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ff8  08007ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ffc  08007ffc  00017ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08008000  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007dec  20000040  08008040  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e2c  08008040  00027e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a335  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004195  00000000  00000000  0003a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001810  00000000  00000000  0003e578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ce  00000000  00000000  0003fd88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019731  00000000  00000000  00041056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4ba  00000000  00000000  0005a787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000998ef  00000000  00000000  00079c41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000560c  00000000  00000000  00113530  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00118b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007eb0 	.word	0x08007eb0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	08007eb0 	.word	0x08007eb0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4a08      	ldr	r2, [pc, #32]	; (8000430 <MX_FREERTOS_Init+0x2c>)
 800040e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000410:	c313      	stmia	r3!, {r0, r1, r4}
 8000412:	ca03      	ldmia	r2!, {r0, r1}
 8000414:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f006 f80f 	bl	800643e <osThreadCreate>
 8000420:	0002      	movs	r2, r0
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <MX_FREERTOS_Init+0x30>)
 8000424:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b007      	add	sp, #28
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	08007ed4 	.word	0x08007ed4
 8000434:	2000005c 	.word	0x2000005c

08000438 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f006 f824 	bl	800648e <osDelay>
 8000446:	e7fb      	b.n	8000440 <StartDefaultTask+0x8>

08000448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b08b      	sub	sp, #44	; 0x2c
 800044c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	2414      	movs	r4, #20
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2314      	movs	r3, #20
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f007 fcf3 	bl	8007e44 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b68      	ldr	r3, [pc, #416]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000462:	4b67      	ldr	r3, [pc, #412]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000464:	2104      	movs	r1, #4
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
 800046a:	4b65      	ldr	r3, [pc, #404]	; (8000600 <MX_GPIO_Init+0x1b8>)
 800046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046e:	2204      	movs	r2, #4
 8000470:	4013      	ands	r3, r2
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000476:	4b62      	ldr	r3, [pc, #392]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047a:	4b61      	ldr	r3, [pc, #388]	; (8000600 <MX_GPIO_Init+0x1b8>)
 800047c:	2120      	movs	r1, #32
 800047e:	430a      	orrs	r2, r1
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
 8000482:	4b5f      	ldr	r3, [pc, #380]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	2220      	movs	r2, #32
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b5c      	ldr	r3, [pc, #368]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000492:	4b5b      	ldr	r3, [pc, #364]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
 800049a:	4b59      	ldr	r3, [pc, #356]	; (8000600 <MX_GPIO_Init+0x1b8>)
 800049c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049e:	2201      	movs	r2, #1
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	4b56      	ldr	r3, [pc, #344]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004aa:	4b55      	ldr	r3, [pc, #340]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004ac:	2102      	movs	r1, #2
 80004ae:	430a      	orrs	r2, r1
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
 80004b2:	4b53      	ldr	r3, [pc, #332]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b6:	2202      	movs	r2, #2
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004be:	4b50      	ldr	r3, [pc, #320]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c2:	4b4f      	ldr	r3, [pc, #316]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004c4:	2108      	movs	r1, #8
 80004c6:	430a      	orrs	r2, r1
 80004c8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ca:	4b4d      	ldr	r3, [pc, #308]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ce:	2208      	movs	r2, #8
 80004d0:	4013      	ands	r3, r2
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin, GPIO_PIN_RESET);
 80004d6:	23c0      	movs	r3, #192	; 0xc0
 80004d8:	01db      	lsls	r3, r3, #7
 80004da:	484a      	ldr	r0, [pc, #296]	; (8000604 <MX_GPIO_Init+0x1bc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	0019      	movs	r1, r3
 80004e0:	f002 f8c0 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	2103      	movs	r1, #3
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 f8b9 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	22c0      	movs	r2, #192	; 0xc0
 80004f6:	01d2      	lsls	r2, r2, #7
 80004f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050c:	193b      	adds	r3, r7, r4
 800050e:	4a3d      	ldr	r2, [pc, #244]	; (8000604 <MX_GPIO_Init+0x1bc>)
 8000510:	0019      	movs	r1, r3
 8000512:	0010      	movs	r0, r2
 8000514:	f001 ff42 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_ERROR_Pin;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2203      	movs	r2, #3
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2201      	movs	r2, #1
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 ff2f 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BORDURE_1_Pin|BORDURE_2_Pin|BORDURE_3_Pin;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	22e0      	movs	r2, #224	; 0xe0
 8000544:	0212      	lsls	r2, r2, #8
 8000546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2288      	movs	r2, #136	; 0x88
 800054c:	0352      	lsls	r2, r2, #13
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	000c      	movs	r4, r1
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	193b      	adds	r3, r7, r4
 800055a:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <MX_GPIO_Init+0x1c0>)
 800055c:	0019      	movs	r1, r3
 800055e:	0010      	movs	r0, r2
 8000560:	f001 ff1c 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUMPER_1_Pin|BUMPER_2_Pin;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	22c0      	movs	r2, #192	; 0xc0
 8000568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2288      	movs	r2, #136	; 0x88
 800056e:	0352      	lsls	r2, r2, #13
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <MX_GPIO_Init+0x1bc>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f001 ff0c 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BUMPER_3_Pin|BUMPER_4_Pin;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	22c0      	movs	r2, #192	; 0xc0
 8000588:	0092      	lsls	r2, r2, #2
 800058a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2288      	movs	r2, #136	; 0x88
 8000590:	0352      	lsls	r2, r2, #13
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059a:	193b      	adds	r3, r7, r4
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_GPIO_Init+0x1c4>)
 800059e:	0019      	movs	r1, r3
 80005a0:	0010      	movs	r0, r2
 80005a2:	f001 fefb 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	22e0      	movs	r2, #224	; 0xe0
 80005aa:	0152      	lsls	r2, r2, #5
 80005ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2288      	movs	r2, #136	; 0x88
 80005b2:	0352      	lsls	r2, r2, #13
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 fee9 	bl	800239c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	227f      	movs	r2, #127	; 0x7f
 80005ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	4a0b      	ldr	r2, [pc, #44]	; (800060c <MX_GPIO_Init+0x1c4>)
 80005e0:	0019      	movs	r1, r3
 80005e2:	0010      	movs	r0, r2
 80005e4:	f001 feda 	bl	800239c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2103      	movs	r1, #3
 80005ec:	2007      	movs	r0, #7
 80005ee:	f001 fdd7 	bl	80021a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005f2:	2007      	movs	r0, #7
 80005f4:	f001 fde9 	bl	80021ca <HAL_NVIC_EnableIRQ>

}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b00b      	add	sp, #44	; 0x2c
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	50000800 	.word	0x50000800
 8000608:	50000400 	.word	0x50000400
 800060c:	50000c00 	.word	0x50000c00

08000610 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_I2C2_Init+0x74>)
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_I2C2_Init+0x78>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_I2C2_Init+0x74>)
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <MX_I2C2_Init+0x7c>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_I2C2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_I2C2_Init+0x74>)
 8000628:	2201      	movs	r2, #1
 800062a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_I2C2_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_I2C2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C2_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C2_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C2_Init+0x74>)
 800064c:	0018      	movs	r0, r3
 800064e:	f002 f865 	bl	800271c <HAL_I2C_Init>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000656:	f000 f8f9 	bl	800084c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C2_Init+0x74>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f002 f8f2 	bl	8002848 <HAL_I2CEx_ConfigAnalogFilter>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8f0 	bl	800084c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_I2C2_Init+0x74>)
 800066e:	2100      	movs	r1, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f002 f935 	bl	80028e0 <HAL_I2CEx_ConfigDigitalFilter>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f8e7 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000060 	.word	0x20000060
 8000688:	40005800 	.word	0x40005800
 800068c:	00303d5b 	.word	0x00303d5b

08000690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08b      	sub	sp, #44	; 0x2c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	2414      	movs	r4, #20
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	2314      	movs	r3, #20
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f007 fbce 	bl	8007e44 <memset>
  if(i2cHandle->Instance==I2C2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <HAL_I2C_MspInit+0x8c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d130      	bne.n	8000714 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006b8:	2102      	movs	r1, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	2202      	movs	r2, #2
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	22c0      	movs	r2, #192	; 0xc0
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2212      	movs	r2, #18
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2206      	movs	r2, #6
 80006ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <HAL_I2C_MspInit+0x94>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f001 fe52 	bl	800239c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	03c9      	lsls	r1, r1, #15
 8000702:	430a      	orrs	r2, r1
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x90>)
 8000708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	03db      	lsls	r3, r3, #15
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b00b      	add	sp, #44	; 0x2c
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40005800 	.word	0x40005800
 8000720:	40021000 	.word	0x40021000
 8000724:	50000400 	.word	0x50000400

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f001 fc06 	bl	8001f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f84a 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff fe88 	bl	8000448 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000738:	f7ff ff6a 	bl	8000610 <MX_I2C2_Init>
  MX_TIM1_Init();
 800073c:	f000 f92e 	bl	800099c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000740:	f000 f996 	bl	8000a70 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000744:	f000 f9f8 	bl	8000b38 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000748:	f000 fa32 	bl	8000bb0 <MX_TIM7_Init>
  MX_TIM14_Init();
 800074c:	f000 fa6c 	bl	8000c28 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000750:	f000 faba 	bl	8000cc8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000754:	f000 fb5a 	bl	8000e0c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000758:	f000 fbde 	bl	8000f18 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800075c:	f000 fe38 	bl	80013d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000760:	f000 fed2 	bl	8001508 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000764:	f000 fe82 	bl	800146c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Create and start FreeRTOS tasks
  HAL_TIM_PWM_Start(left_motor.forward_htim,left_motor.forward_CHANNEL);
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0x98>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <main+0x98>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f002 ffe8 	bl	8003748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(left_motor.reverse_htim,left_motor.reverse_CHANNEL);
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <main+0x98>)
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <main+0x98>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f002 ffe0 	bl	8003748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(right_motor.forward_htim,right_motor.forward_CHANNEL);
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <main+0x9c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <main+0x9c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f002 ffd8 	bl	8003748 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(right_motor.reverse_htim,right_motor.reverse_CHANNEL);
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <main+0x9c>)
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <main+0x9c>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f002 ffd0 	bl	8003748 <HAL_TIM_PWM_Start>
  Start_HC05_Tasks();
 80007a8:	f001 f870 	bl	800188c <Start_HC05_Tasks>
  Start_motor_Tasks();
 80007ac:	f001 f8f2 	bl	8001994 <Start_motor_Tasks>
  // Start the scheduler
  vTaskStartScheduler();
 80007b0:	f006 fc2c 	bl	800700c <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007b4:	f7ff fe26 	bl	8000404 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007b8:	f005 fe39 	bl	800642e <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <main+0x94>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000014 	.word	0x20000014
 80007c4:	20000024 	.word	0x20000024

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b093      	sub	sp, #76	; 0x4c
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	2414      	movs	r4, #20
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2334      	movs	r3, #52	; 0x34
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f007 fb33 	bl	8007e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	0018      	movs	r0, r3
 80007e2:	2310      	movs	r3, #16
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f007 fb2c 	bl	8007e44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 f8c1 	bl	8002978 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	0252      	lsls	r2, r2, #9
 8000802:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f8ff 	bl	8002a10 <HAL_RCC_OscConfig>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000816:	f000 f819 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fbfa 	bl	8003030 <HAL_RCC_ClockConfig>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000840:	f000 f804 	bl	800084c <Error_Handler>
  }
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b013      	add	sp, #76	; 0x4c
 800084a:	bd90      	pop	{r4, r7, pc}

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x50>)
 8000860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_MspInit+0x50>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x50>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x50>)
 8000878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x50>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	430a      	orrs	r2, r1
 8000882:	63da      	str	r2, [r3, #60]	; 0x3c
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x50>)
 8000886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	055b      	lsls	r3, r3, #21
 800088c:	4013      	ands	r3, r2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000892:	2302      	movs	r3, #2
 8000894:	425b      	negs	r3, r3
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fc80 	bl	80021a0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f001 fba8 	bl	8002010 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008c0:	f006 ff0e 	bl	80076e0 <xTaskGetSchedulerState>
 80008c4:	0003      	movs	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d001      	beq.n	80008ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ca:	f007 f8cd 	bl	8007a68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUMPER_1_Pin);
 80008d8:	2040      	movs	r0, #64	; 0x40
 80008da:	f001 fee1 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_2_Pin);
 80008de:	2080      	movs	r0, #128	; 0x80
 80008e0:	f001 fede 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_3_Pin);
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fed9 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_4_Pin);
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 fed4 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 fecf 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	0018      	movs	r0, r3
 8000908:	f001 feca 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_3_Pin);
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fec5 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_1_Pin);
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	019b      	lsls	r3, r3, #6
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fec0 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_2_Pin);
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	01db      	lsls	r3, r3, #7
 8000924:	0018      	movs	r0, r3
 8000926:	f001 febb 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_3_Pin);
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	0018      	movs	r0, r3
 8000930:	f001 feb6 	bl	80026a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */
	BaseType_t higher_priority_task_woken=pdFALSE;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(q_read_BT,(void*)&buffer,&higher_priority_task_woken);
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <USART3_4_IRQHandler+0x44>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	490d      	ldr	r1, [pc, #52]	; (8000984 <USART3_4_IRQHandler+0x48>)
 800094e:	2300      	movs	r3, #0
 8000950:	f005 ffc2 	bl	80068d8 <xQueueGenericSendFromISR>

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <USART3_4_IRQHandler+0x4c>)
 8000956:	0018      	movs	r0, r3
 8000958:	f003 ff38 	bl	80047cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */
	HAL_UART_Receive_IT(&huart3,&buffer,1);
 800095c:	4909      	ldr	r1, [pc, #36]	; (8000984 <USART3_4_IRQHandler+0x48>)
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <USART3_4_IRQHandler+0x4c>)
 8000960:	2201      	movs	r2, #1
 8000962:	0018      	movs	r0, r3
 8000964:	f003 feda 	bl	800471c <HAL_UART_Receive_IT>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <USART3_4_IRQHandler+0x3a>
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <USART3_4_IRQHandler+0x50>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0552      	lsls	r2, r2, #21
 8000974:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_4_IRQn 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	200004d4 	.word	0x200004d4
 8000984:	200004d8 	.word	0x200004d8
 8000988:	2000043c 	.word	0x2000043c
 800098c:	e000ed04 	.word	0xe000ed04

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08d      	sub	sp, #52	; 0x34
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a2:	240c      	movs	r4, #12
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	0018      	movs	r0, r3
 80009a8:	2324      	movs	r3, #36	; 0x24
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f007 fa49 	bl	8007e44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	230c      	movs	r3, #12
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f007 fa42 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <MX_TIM1_Init+0xcc>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <MX_TIM1_Init+0xd0>)
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_TIM1_Init+0xc8>)
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 ff71 	bl	8003910 <HAL_TIM_Encoder_Init>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000a32:	f7ff ff0b 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	003b      	movs	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3c:	003b      	movs	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a48:	003a      	movs	r2, r7
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_TIM1_Init+0xc8>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 fc64 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a58:	f7ff fef8 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00d      	add	sp, #52	; 0x34
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	200000b4 	.word	0x200000b4
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	0000ffff 	.word	0x0000ffff

08000a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08d      	sub	sp, #52	; 0x34
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a76:	240c      	movs	r4, #12
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2324      	movs	r3, #36	; 0x24
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f007 f9df 	bl	8007e44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	003b      	movs	r3, r7
 8000a88:	0018      	movs	r0, r3
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f007 f9d8 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <MX_TIM3_Init+0xc0>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000aa8:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <MX_TIM3_Init+0xc4>)
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ab8:	0021      	movs	r1, r4
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2201      	movs	r2, #1
 8000aca:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000af0:	187a      	adds	r2, r7, r1
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000af4:	0011      	movs	r1, r2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 ff0a 	bl	8003910 <HAL_TIM_Encoder_Init>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b00:	f7ff fea4 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b10:	003a      	movs	r2, r7
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f003 fc00 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b20:	f7ff fe94 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b00d      	add	sp, #52	; 0x34
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000100 	.word	0x20000100
 8000b30:	40000400 	.word	0x40000400
 8000b34:	0000ffff 	.word	0x0000ffff

08000b38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	0018      	movs	r0, r3
 8000b42:	230c      	movs	r3, #12
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f007 f97c 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <MX_TIM6_Init+0x70>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_TIM6_Init+0x74>)
 8000b62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 fd3b 	bl	80035e8 <HAL_TIM_Base_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b76:	f7ff fe69 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b86:	1d3a      	adds	r2, r7, #4
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f003 fbc5 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b96:	f7ff fe59 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000014c 	.word	0x2000014c
 8000ba8:	40001000 	.word	0x40001000
 8000bac:	0000ffff 	.word	0x0000ffff

08000bb0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	230c      	movs	r3, #12
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f007 f940 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <MX_TIM7_Init+0x70>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_TIM7_Init+0x74>)
 8000bda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 fcff 	bl	80035e8 <HAL_TIM_Base_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000bee:	f7ff fe2d 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bfe:	1d3a      	adds	r2, r7, #4
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 fb89 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f7ff fe1d 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000198 	.word	0x20000198
 8000c20:	40001400 	.word	0x40001400
 8000c24:	0000ffff 	.word	0x0000ffff

08000c28 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	0018      	movs	r0, r3
 8000c32:	231c      	movs	r3, #28
 8000c34:	001a      	movs	r2, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	f007 f904 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <MX_TIM14_Init+0x98>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_TIM14_Init+0x9c>)
 8000c52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fcc0 	bl	80035e8 <HAL_TIM_Base_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000c6c:	f7ff fdee 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 fd10 	bl	8003698 <HAL_TIM_PWM_Init>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000c7c:	f7ff fde6 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2260      	movs	r2, #96	; 0x60
 8000c84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c98:	1d39      	adds	r1, r7, #4
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 fede 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000ca8:	f7ff fdd0 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 face 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b008      	add	sp, #32
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001e4 	.word	0x200001e4
 8000cc0:	40002000 	.word	0x40002000
 8000cc4:	0000ffff 	.word	0x0000ffff

08000cc8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b098      	sub	sp, #96	; 0x60
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	2354      	movs	r3, #84	; 0x54
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f007 f8b3 	bl	8007e44 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	2338      	movs	r3, #56	; 0x38
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	231c      	movs	r3, #28
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f007 f8ab 	bl	8007e44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2334      	movs	r3, #52	; 0x34
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f007 f8a4 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfc:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000cfe:	4a42      	ldr	r2, [pc, #264]	; (8000e08 <MX_TIM15_Init+0x140>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4;
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 127;
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d10:	227f      	movs	r2, #127	; 0x7f
 8000d12:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fcb5 	bl	8003698 <HAL_TIM_PWM_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f7ff fd8b 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2154      	movs	r1, #84	; 0x54
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 fae6 	bl	800431c <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000d54:	f7ff fd7a 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2138      	movs	r1, #56	; 0x38
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2260      	movs	r2, #96	; 0x60
 8000d5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 fe68 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000d94:	f7ff fd5a 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d98:	2338      	movs	r3, #56	; 0x38
 8000d9a:	18f9      	adds	r1, r7, r3
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	0018      	movs	r0, r3
 8000da2:	f002 fe5d 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8000daa:	f7ff fd4f 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f003 fb00 	bl	80043ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000df0:	f7ff fd2c 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fa2a 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b018      	add	sp, #96	; 0x60
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000230 	.word	0x20000230
 8000e08:	40014000 	.word	0x40014000

08000e0c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	; 0x50
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	2334      	movs	r3, #52	; 0x34
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	0018      	movs	r0, r3
 8000e18:	231c      	movs	r3, #28
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f007 f811 	bl	8007e44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e22:	003b      	movs	r3, r7
 8000e24:	0018      	movs	r0, r3
 8000e26:	2334      	movs	r3, #52	; 0x34
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f007 f80a 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e32:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <MX_TIM16_Init+0x108>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 127;
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e44:	227f      	movs	r2, #127	; 0x7f
 8000e46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f002 fbc3 	bl	80035e8 <HAL_TIM_Base_Init>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000e66:	f7ff fcf1 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 fc13 	bl	8003698 <HAL_TIM_PWM_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f7ff fce9 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2134      	movs	r1, #52	; 0x34
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2260      	movs	r2, #96	; 0x60
 8000e80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	1879      	adds	r1, r7, r1
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 fdd7 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000eb6:	f7ff fcc9 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0192      	lsls	r2, r2, #6
 8000ede:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000eec:	003a      	movs	r2, r7
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f003 fa7a 	bl	80043ec <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000efc:	f7ff fca6 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f9a4 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b014      	add	sp, #80	; 0x50
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000027c 	.word	0x2000027c
 8000f14:	40014400 	.word	0x40014400

08000f18 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	2334      	movs	r3, #52	; 0x34
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	0018      	movs	r0, r3
 8000f24:	231c      	movs	r3, #28
 8000f26:	001a      	movs	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f006 ff8b 	bl	8007e44 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2e:	003b      	movs	r3, r7
 8000f30:	0018      	movs	r0, r3
 8000f32:	2334      	movs	r3, #52	; 0x34
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f006 ff84 	bl	8007e44 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <MX_TIM17_Init+0x104>)
 8000f3e:	4a38      	ldr	r2, [pc, #224]	; (8001020 <MX_TIM17_Init+0x108>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <MX_TIM17_Init+0x104>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b34      	ldr	r3, [pc, #208]	; (800101c <MX_TIM17_Init+0x104>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 127;
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <MX_TIM17_Init+0x104>)
 8000f50:	227f      	movs	r2, #127	; 0x7f
 8000f52:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_TIM17_Init+0x104>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_TIM17_Init+0x104>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_TIM17_Init+0x104>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_TIM17_Init+0x104>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f002 fb3d 	bl	80035e8 <HAL_TIM_Base_Init>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000f72:	f7ff fc6b 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_TIM17_Init+0x104>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 fb8d 	bl	8003698 <HAL_TIM_PWM_Init>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f7ff fc63 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f86:	2134      	movs	r1, #52	; 0x34
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2260      	movs	r2, #96	; 0x60
 8000f8c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	1879      	adds	r1, r7, r1
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_TIM17_Init+0x104>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fd51 	bl	8003a60 <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000fc2:	f7ff fc43 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	0192      	lsls	r2, r2, #6
 8000fea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff8:	003a      	movs	r2, r7
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_TIM17_Init+0x104>)
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f003 f9f4 	bl	80043ec <HAL_TIMEx_ConfigBreakDeadTime>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001008:	f7ff fc20 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <MX_TIM17_Init+0x104>)
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f91e 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b014      	add	sp, #80	; 0x50
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200002c8 	.word	0x200002c8
 8001020:	40014800 	.word	0x40014800

08001024 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08d      	sub	sp, #52	; 0x34
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	241c      	movs	r4, #28
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	2314      	movs	r3, #20
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f006 ff04 	bl	8007e44 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a36      	ldr	r2, [pc, #216]	; (800111c <HAL_TIM_Encoder_MspInit+0xf8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d132      	bne.n	80010ac <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0109      	lsls	r1, r1, #4
 8001050:	430a      	orrs	r2, r1
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
 800106e:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_B_Pin|ENCODER_1_A_Pin;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	0021      	movs	r1, r4
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2202      	movs	r2, #2
 8001088:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2202      	movs	r2, #2
 800109a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	187a      	adds	r2, r7, r1
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 f979 	bl	800239c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010aa:	e033      	b.n	8001114 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_TIM_Encoder_MspInit+0x100>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12e      	bne.n	8001114 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010bc:	2102      	movs	r1, #2
 80010be:	430a      	orrs	r2, r1
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	2201      	movs	r2, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_2_A_Pin|ENCODER_2_B_Pin;
 80010e6:	211c      	movs	r1, #28
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	22c0      	movs	r2, #192	; 0xc0
 80010ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2201      	movs	r2, #1
 8001104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	187a      	adds	r2, r7, r1
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f001 f944 	bl	800239c <HAL_GPIO_Init>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b00d      	add	sp, #52	; 0x34
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	40012c00 	.word	0x40012c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40000400 	.word	0x40000400

08001128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <HAL_TIM_Base_MspInit+0xd0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10c      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 800113c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001140:	2110      	movs	r1, #16
 8001142:	430a      	orrs	r2, r1
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	2210      	movs	r2, #16
 800114c:	4013      	ands	r3, r2
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001152:	e04c      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <HAL_TIM_Base_MspInit+0xd8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10c      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001164:	2120      	movs	r1, #32
 8001166:	430a      	orrs	r2, r1
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 800116c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116e:	2220      	movs	r2, #32
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
}
 8001176:	e03a      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_TIM_Base_MspInit+0xdc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10e      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0209      	lsls	r1, r1, #8
 800118c:	430a      	orrs	r2, r1
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	4013      	ands	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
}
 800119e:	e026      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_TIM_Base_MspInit+0xe0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10e      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0289      	lsls	r1, r1, #10
 80011b4:	430a      	orrs	r2, r1
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
}
 80011c6:	e012      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM17)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_TIM_Base_MspInit+0xe4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10d      	bne.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	02c9      	lsls	r1, r1, #11
 80011dc:	430a      	orrs	r2, r1
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	02db      	lsls	r3, r3, #11
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b008      	add	sp, #32
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40001000 	.word	0x40001000
 80011fc:	40021000 	.word	0x40021000
 8001200:	40001400 	.word	0x40001400
 8001204:	40002000 	.word	0x40002000
 8001208:	40014400 	.word	0x40014400
 800120c:	40014800 	.word	0x40014800

08001210 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_TIM_PWM_MspInit+0x38>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10d      	bne.n	800123e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_PWM_MspInit+0x3c>)
 8001224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_TIM_PWM_MspInit+0x3c>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0249      	lsls	r1, r1, #9
 800122c:	430a      	orrs	r2, r1
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_TIM_PWM_MspInit+0x3c>)
 8001232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	025b      	lsls	r3, r3, #9
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40014000 	.word	0x40014000
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b08d      	sub	sp, #52	; 0x34
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	241c      	movs	r4, #28
 800125a:	193b      	adds	r3, r7, r4
 800125c:	0018      	movs	r0, r3
 800125e:	2314      	movs	r3, #20
 8001260:	001a      	movs	r2, r3
 8001262:	2100      	movs	r1, #0
 8001264:	f006 fdee 	bl	8007e44 <memset>
  if(timHandle->Instance==TIM14)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <HAL_TIM_MspPostInit+0x164>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d123      	bne.n	80012ba <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001278:	2104      	movs	r1, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	0152      	lsls	r2, r2, #5
 8001290:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	0021      	movs	r1, r4
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2202      	movs	r2, #2
 8001298:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2202      	movs	r2, #2
 80012aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	4a43      	ldr	r2, [pc, #268]	; (80013bc <HAL_TIM_MspPostInit+0x16c>)
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f001 f872 	bl	800239c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80012b8:	e078      	b.n	80013ac <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <HAL_TIM_MspPostInit+0x170>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d122      	bne.n	800130a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 80012c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	430a      	orrs	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	2204      	movs	r2, #4
 80012d6:	4013      	ands	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR_1_FWD_Pin|MOTOR_1_REV_Pin;
 80012dc:	211c      	movs	r1, #28
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2206      	movs	r2, #6
 80012e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2202      	movs	r2, #2
 80012e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2202      	movs	r2, #2
 80012fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <HAL_TIM_MspPostInit+0x16c>)
 8001300:	0019      	movs	r1, r3
 8001302:	0010      	movs	r0, r2
 8001304:	f001 f84a 	bl	800239c <HAL_GPIO_Init>
}
 8001308:	e050      	b.n	80013ac <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <HAL_TIM_MspPostInit+0x174>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d123      	bne.n	800135c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 800131a:	2102      	movs	r1, #2
 800131c:	430a      	orrs	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	2202      	movs	r2, #2
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_2_REV_Pin;
 800132c:	211c      	movs	r1, #28
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2202      	movs	r2, #2
 800133a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2202      	movs	r2, #2
 800134c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_REV_GPIO_Port, &GPIO_InitStruct);
 800134e:	187b      	adds	r3, r7, r1
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_TIM_MspPostInit+0x178>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f001 f821 	bl	800239c <HAL_GPIO_Init>
}
 800135a:	e027      	b.n	80013ac <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_TIM_MspPostInit+0x17c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d122      	bne.n	80013ac <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 800136c:	2102      	movs	r1, #2
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_2_FWD_Pin;
 800137e:	211c      	movs	r1, #28
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2202      	movs	r2, #2
 800138c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2202      	movs	r2, #2
 800139e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_FWD_GPIO_Port, &GPIO_InitStruct);
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_TIM_MspPostInit+0x178>)
 80013a4:	0019      	movs	r1, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	f000 fff8 	bl	800239c <HAL_GPIO_Init>
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b00d      	add	sp, #52	; 0x34
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	40002000 	.word	0x40002000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	50000800 	.word	0x50000800
 80013c0:	40014000 	.word	0x40014000
 80013c4:	40014400 	.word	0x40014400
 80013c8:	50000400 	.word	0x50000400
 80013cc:	40014800 	.word	0x40014800

080013d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013d6:	4a24      	ldr	r2, [pc, #144]	; (8001468 <MX_USART1_UART_Init+0x98>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013dc:	22e1      	movs	r2, #225	; 0xe1
 80013de:	0252      	lsls	r2, r2, #9
 80013e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_USART1_UART_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_USART1_UART_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USART1_UART_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800141a:	0018      	movs	r0, r3
 800141c:	f003 f88c 	bl	8004538 <HAL_UART_Init>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001424:	f7ff fa12 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800142a:	2100      	movs	r1, #0
 800142c:	0018      	movs	r0, r3
 800142e:	f004 ff05 	bl	800623c <HAL_UARTEx_SetTxFifoThreshold>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001436:	f7ff fa09 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800143c:	2100      	movs	r1, #0
 800143e:	0018      	movs	r0, r3
 8001440:	f004 ff3c 	bl	80062bc <HAL_UARTEx_SetRxFifoThreshold>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001448:	f7ff fa00 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800144e:	0018      	movs	r0, r3
 8001450:	f004 feba 	bl	80061c8 <HAL_UARTEx_DisableFifoMode>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001458:	f7ff f9f8 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	20000314 	.word	0x20000314
 8001468:	40013800 	.word	0x40013800

0800146c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <MX_USART2_UART_Init+0x98>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001478:	22e1      	movs	r2, #225	; 0xe1
 800147a:	0252      	lsls	r2, r2, #9
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_USART2_UART_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_USART2_UART_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f003 f83e 	bl	8004538 <HAL_UART_Init>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f7ff f9c4 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	0018      	movs	r0, r3
 80014ca:	f004 feb7 	bl	800623c <HAL_UARTEx_SetTxFifoThreshold>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f7ff f9bb 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014d8:	2100      	movs	r1, #0
 80014da:	0018      	movs	r0, r3
 80014dc:	f004 feee 	bl	80062bc <HAL_UARTEx_SetRxFifoThreshold>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f7ff f9b2 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f004 fe6c 	bl	80061c8 <HAL_UARTEx_DisableFifoMode>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f7ff f9aa 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	200003a8 	.word	0x200003a8
 8001504:	40004400 	.word	0x40004400

08001508 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <MX_USART3_UART_Init+0x64>)
 8001510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001514:	2296      	movs	r2, #150	; 0x96
 8001516:	0192      	lsls	r2, r2, #6
 8001518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800154c:	2200      	movs	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001552:	0018      	movs	r0, r3
 8001554:	f002 fff0 	bl	8004538 <HAL_UART_Init>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800155c:	f7ff f976 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	2000043c 	.word	0x2000043c
 800156c:	40004800 	.word	0x40004800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b095      	sub	sp, #84	; 0x54
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	233c      	movs	r3, #60	; 0x3c
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	0018      	movs	r0, r3
 800157e:	2314      	movs	r3, #20
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f006 fc5e 	bl	8007e44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	2420      	movs	r4, #32
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	231c      	movs	r3, #28
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f006 fc56 	bl	8007e44 <memset>
  if(uartHandle->Instance==USART1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a64      	ldr	r2, [pc, #400]	; (8001730 <HAL_UART_MspInit+0x1c0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d13e      	bne.n	8001620 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	0018      	movs	r0, r3
 80015b2:	f001 fee5 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ba:	f7ff f947 	bl	800084c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	01c9      	lsls	r1, r1, #7
 80015c8:	430a      	orrs	r2, r1
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	4b55      	ldr	r3, [pc, #340]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015e0:	2102      	movs	r1, #2
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f2:	213c      	movs	r1, #60	; 0x3c
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	22c0      	movs	r2, #192	; 0xc0
 80015f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2202      	movs	r2, #2
 80015fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	187b      	adds	r3, r7, r1
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_UART_MspInit+0x1c8>)
 8001616:	0019      	movs	r1, r3
 8001618:	0010      	movs	r0, r2
 800161a:	f000 febf 	bl	800239c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800161e:	e082      	b.n	8001726 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a45      	ldr	r2, [pc, #276]	; (800173c <HAL_UART_MspInit+0x1cc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d140      	bne.n	80016ac <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800162a:	2120      	movs	r1, #32
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	187b      	adds	r3, r7, r1
 800163a:	0018      	movs	r0, r3
 800163c:	f001 fea0 	bl	8003380 <HAL_RCCEx_PeriphCLKConfig>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001644:	f7ff f902 	bl	800084c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 800164a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	0289      	lsls	r1, r1, #10
 8001652:	430a      	orrs	r2, r1
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 8001658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	4013      	ands	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 8001666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800167c:	213c      	movs	r1, #60	; 0x3c
 800167e:	187b      	adds	r3, r7, r1
 8001680:	220c      	movs	r2, #12
 8001682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2202      	movs	r2, #2
 8001688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2201      	movs	r2, #1
 800169a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	187a      	adds	r2, r7, r1
 800169e:	23a0      	movs	r3, #160	; 0xa0
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 fe79 	bl	800239c <HAL_GPIO_Init>
}
 80016aa:	e03c      	b.n	8001726 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_UART_MspInit+0x1d0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d137      	bne.n	8001726 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	02c9      	lsls	r1, r1, #11
 80016c0:	430a      	orrs	r2, r1
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016d8:	2104      	movs	r1, #4
 80016da:	430a      	orrs	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ea:	213c      	movs	r1, #60	; 0x3c
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2202      	movs	r2, #2
 80016f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	187b      	adds	r3, r7, r1
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_UART_MspInit+0x1d4>)
 800170e:	0019      	movs	r1, r3
 8001710:	0010      	movs	r0, r2
 8001712:	f000 fe43 	bl	800239c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2103      	movs	r1, #3
 800171a:	201d      	movs	r0, #29
 800171c:	f000 fd40 	bl	80021a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001720:	201d      	movs	r0, #29
 8001722:	f000 fd52 	bl	80021ca <HAL_NVIC_EnableIRQ>
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b015      	add	sp, #84	; 0x54
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	40013800 	.word	0x40013800
 8001734:	40021000 	.word	0x40021000
 8001738:	50000400 	.word	0x50000400
 800173c:	40004400 	.word	0x40004400
 8001740:	40004800 	.word	0x40004800
 8001744:	50000800 	.word	0x50000800

08001748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800174a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800174c:	f7ff f920 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopForever+0xe>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopForever+0x16>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001776:	f006 fb6d 	bl	8007e54 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800177a:	f7fe ffd5 	bl	8000728 <main>

0800177e <LoopForever>:

LoopForever:
  b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
  ldr   r0, =_estack
 8001780:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800178c:	08008000 	.word	0x08008000
  ldr r2, =_sbss
 8001790:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001794:	20007e2c 	.word	0x20007e2c

08001798 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_IRQHandler>
	...

0800179c <print_BT_Task>:

QueueHandle_t q_print_BT=NULL;
QueueHandle_t q_read_BT=NULL;
uint8_t buffer;

void print_BT_Task(void *pvParameters){
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	uint8_t char_to_send;

	for(;;){
		xQueueReceive(q_print_BT,(void*)&char_to_send,portMAX_DELAY);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <print_BT_Task+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4252      	negs	r2, r2
 80017ac:	240f      	movs	r4, #15
 80017ae:	1939      	adds	r1, r7, r4
 80017b0:	0018      	movs	r0, r3
 80017b2:	f005 f905 	bl	80069c0 <xQueueReceive>
		HAL_UART_Transmit(&huart3, (uint8_t *)&char_to_send, 1, 0xFFFF);
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <print_BT_Task+0x2c>)
 80017b8:	1939      	adds	r1, r7, r4
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <print_BT_Task+0x30>)
 80017bc:	2201      	movs	r2, #1
 80017be:	f002 ff11 	bl	80045e4 <HAL_UART_Transmit>
		xQueueReceive(q_print_BT,(void*)&char_to_send,portMAX_DELAY);
 80017c2:	e7ef      	b.n	80017a4 <print_BT_Task+0x8>
 80017c4:	200004d0 	.word	0x200004d0
 80017c8:	0000ffff 	.word	0x0000ffff
 80017cc:	2000043c 	.word	0x2000043c

080017d0 <send_text>:
	}
}

void send_text(void *pvParameters){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	static char input_char[]="Hello World\r\n";
	for(;;){
		fill_queue(q_print_BT,input_char);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <send_text+0x20>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <send_text+0x24>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f000 f80b 	bl	80017fc <fill_queue>
		vTaskDelay(10000);
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <send_text+0x28>)
 80017e8:	0018      	movs	r0, r3
 80017ea:	f005 fbe9 	bl	8006fc0 <vTaskDelay>
		fill_queue(q_print_BT,input_char);
 80017ee:	e7f3      	b.n	80017d8 <send_text+0x8>
 80017f0:	200004d0 	.word	0x200004d0
 80017f4:	20000004 	.word	0x20000004
 80017f8:	00002710 	.word	0x00002710

080017fc <fill_queue>:
	}
}

void fill_queue(QueueHandle_t queue, const char* text){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	for(int i=0;i<strlen(text);i++){
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e00c      	b.n	8001826 <fill_queue+0x2a>
		xQueueSend(q_print_BT,&text[i],portMAX_DELAY);
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <fill_queue+0x44>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	18d1      	adds	r1, r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	425a      	negs	r2, r3
 800181a:	2300      	movs	r3, #0
 800181c:	f004 ff98 	bl	8006750 <xQueueGenericSend>
	for(int i=0;i<strlen(text);i++){
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3301      	adds	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	0018      	movs	r0, r3
 800182a:	f7fe fc6d 	bl	8000108 <strlen>
 800182e:	0002      	movs	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8ea      	bhi.n	800180c <fill_queue+0x10>
	}
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200004d0 	.word	0x200004d0

08001844 <renvoie>:
		HAL_UART_Receive(&huart3,&buffer,1,portMAX_DELAY);
		xQueueSend(q_read_BT,&buffer,portMAX_DELAY);
	}
}

void renvoie(void *pvParameters){
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	uint8_t char_to_send;
	HAL_UART_Receive_IT(&huart3,&buffer,1);
 800184c:	490a      	ldr	r1, [pc, #40]	; (8001878 <renvoie+0x34>)
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <renvoie+0x38>)
 8001850:	2201      	movs	r2, #1
 8001852:	0018      	movs	r0, r3
 8001854:	f002 ff62 	bl	800471c <HAL_UART_Receive_IT>
	for(;;){
		xQueueReceive(q_read_BT,(uint8_t*)&char_to_send,portMAX_DELAY);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <renvoie+0x3c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4252      	negs	r2, r2
 8001860:	240f      	movs	r4, #15
 8001862:	1939      	adds	r1, r7, r4
 8001864:	0018      	movs	r0, r3
 8001866:	f005 f8ab 	bl	80069c0 <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t *)&char_to_send, 1, 0xFFFF);
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <renvoie+0x40>)
 800186c:	1939      	adds	r1, r7, r4
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <renvoie+0x44>)
 8001870:	2201      	movs	r2, #1
 8001872:	f002 feb7 	bl	80045e4 <HAL_UART_Transmit>
		xQueueReceive(q_read_BT,(uint8_t*)&char_to_send,portMAX_DELAY);
 8001876:	e7ef      	b.n	8001858 <renvoie+0x14>
 8001878:	200004d8 	.word	0x200004d8
 800187c:	2000043c 	.word	0x2000043c
 8001880:	200004d4 	.word	0x200004d4
 8001884:	0000ffff 	.word	0x0000ffff
 8001888:	20000314 	.word	0x20000314

0800188c <Start_HC05_Tasks>:
	}
}


void Start_HC05_Tasks(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
	TaskHandle_t TaskHandle_print_BT;
	TaskHandle_t TaskHandle_send_text;
	//TaskHandle_t TaskHandle_read_BT;
	TaskHandle_t TaskHandle_renvoie;

	q_print_BT=xQueueCreate(Q_PRINT_BT_LENGTH,Q_PRINT_BT_SIZE);
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f004 ff0a 	bl	80066b0 <xQueueGenericCreate>
 800189c:	0002      	movs	r2, r0
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <Start_HC05_Tasks+0x70>)
 80018a0:	601a      	str	r2, [r3, #0]
	q_read_BT=xQueueCreate(Q_PRINT_BT_LENGTH,Q_PRINT_BT_SIZE);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2101      	movs	r1, #1
 80018a6:	2064      	movs	r0, #100	; 0x64
 80018a8:	f004 ff02 	bl	80066b0 <xQueueGenericCreate>
 80018ac:	0002      	movs	r2, r0
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <Start_HC05_Tasks+0x74>)
 80018b0:	601a      	str	r2, [r3, #0]

    xTaskCreate(print_BT_Task,"print_BT_Task",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_print_BT);
 80018b2:	4914      	ldr	r1, [pc, #80]	; (8001904 <Start_HC05_Tasks+0x78>)
 80018b4:	4814      	ldr	r0, [pc, #80]	; (8001908 <Start_HC05_Tasks+0x7c>)
 80018b6:	230c      	movs	r3, #12
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2301      	movs	r3, #1
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	f005 fa4e 	bl	8006d64 <xTaskCreate>
    xTaskCreate(send_text,"send_text",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_send_text);
 80018c8:	4910      	ldr	r1, [pc, #64]	; (800190c <Start_HC05_Tasks+0x80>)
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <Start_HC05_Tasks+0x84>)
 80018cc:	2308      	movs	r3, #8
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	f005 fa43 	bl	8006d64 <xTaskCreate>
    //xTaskCreate(read_BT,"read_BT",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_read_BT);
    xTaskCreate(renvoie,"renvoie",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_renvoie);
 80018de:	490d      	ldr	r1, [pc, #52]	; (8001914 <Start_HC05_Tasks+0x88>)
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <Start_HC05_Tasks+0x8c>)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	f005 fa39 	bl	8006d64 <xTaskCreate>
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	200004d0 	.word	0x200004d0
 8001900:	200004d4 	.word	0x200004d4
 8001904:	08007ee8 	.word	0x08007ee8
 8001908:	0800179d 	.word	0x0800179d
 800190c:	08007ef8 	.word	0x08007ef8
 8001910:	080017d1 	.word	0x080017d1
 8001914:	08007f04 	.word	0x08007f04
 8001918:	08001845 	.word	0x08001845

0800191c <test2>:
		stop();
		vTaskDelay(2000);
	}
}

void test2(){
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
	for(int i=0;i<50;i++){
 8001922:	2300      	movs	r3, #0
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	e00d      	b.n	8001944 <test2+0x28>
		move_straight(2*i);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	b29b      	uxth	r3, r3
 800192c:	18db      	adds	r3, r3, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	b21b      	sxth	r3, r3
 8001932:	0018      	movs	r0, r3
 8001934:	f000 fac0 	bl	8001eb8 <move_straight>
		vTaskDelay(pdMS_TO_TICKS(1));
 8001938:	2001      	movs	r0, #1
 800193a:	f005 fb41 	bl	8006fc0 <vTaskDelay>
	for(int i=0;i<50;i++){
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3301      	adds	r3, #1
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2b31      	cmp	r3, #49	; 0x31
 8001948:	ddee      	ble.n	8001928 <test2+0xc>
	}
	vTaskDelay(pdMS_TO_TICKS(2000));
 800194a:	23fa      	movs	r3, #250	; 0xfa
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	0018      	movs	r0, r3
 8001950:	f005 fb36 	bl	8006fc0 <vTaskDelay>
	for(int i=50;i>-1;i--){
 8001954:	2332      	movs	r3, #50	; 0x32
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	e00d      	b.n	8001976 <test2+0x5a>
		move_straight(2*i);
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	b29b      	uxth	r3, r3
 800195e:	18db      	adds	r3, r3, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	b21b      	sxth	r3, r3
 8001964:	0018      	movs	r0, r3
 8001966:	f000 faa7 	bl	8001eb8 <move_straight>
		vTaskDelay(pdMS_TO_TICKS(1));
 800196a:	2001      	movs	r0, #1
 800196c:	f005 fb28 	bl	8006fc0 <vTaskDelay>
	for(int i=50;i>-1;i--){
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	3b01      	subs	r3, #1
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	daee      	bge.n	800195a <test2+0x3e>
	}
	stop();
 800197c:	f000 fac0 	bl	8001f00 <stop>
	vTaskDelay(2000);
 8001980:	23fa      	movs	r3, #250	; 0xfa
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	0018      	movs	r0, r3
 8001986:	f005 fb1b 	bl	8006fc0 <vTaskDelay>
}
 800198a:	46c0      	nop			; (mov r8, r8)
 800198c:	46bd      	mov	sp, r7
 800198e:	b002      	add	sp, #8
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <Start_motor_Tasks>:

void Start_motor_Tasks(){
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af02      	add	r7, sp, #8
	//TaskHandle_t TaskHandle_test1;
	TaskHandle_t TaskHandle_test2;

	//xTaskCreate(test1,"test1",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_test1);
	xTaskCreate((void*)test2,"test2",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_test2);
 800199a:	4907      	ldr	r1, [pc, #28]	; (80019b8 <Start_motor_Tasks+0x24>)
 800199c:	4807      	ldr	r0, [pc, #28]	; (80019bc <Start_motor_Tasks+0x28>)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	9301      	str	r3, [sp, #4]
 80019a2:	2301      	movs	r3, #1
 80019a4:	9300      	str	r3, [sp, #0]
 80019a6:	2300      	movs	r3, #0
 80019a8:	2280      	movs	r2, #128	; 0x80
 80019aa:	f005 f9db 	bl	8006d64 <xTaskCreate>
}
 80019ae:	46c0      	nop			; (mov r8, r8)
 80019b0:	46bd      	mov	sp, r7
 80019b2:	b002      	add	sp, #8
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	46c0      	nop			; (mov r8, r8)
 80019b8:	08007f0c 	.word	0x08007f0c
 80019bc:	0800191d 	.word	0x0800191d

080019c0 <forward_mode>:
// fonctions de bas niveau

void forward_mode(uint16_t speed,struct driver_motor_t motor)
{
 80019c0:	b084      	sub	sp, #16
 80019c2:	b5b0      	push	{r4, r5, r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	0004      	movs	r4, r0
 80019ca:	2004      	movs	r0, #4
 80019cc:	2520      	movs	r5, #32
 80019ce:	1940      	adds	r0, r0, r5
 80019d0:	19c0      	adds	r0, r0, r7
 80019d2:	6001      	str	r1, [r0, #0]
 80019d4:	6042      	str	r2, [r0, #4]
 80019d6:	6083      	str	r3, [r0, #8]
 80019d8:	1dbb      	adds	r3, r7, #6
 80019da:	1c22      	adds	r2, r4, #0
 80019dc:	801a      	strh	r2, [r3, #0]
	if (speed>MAX_SPEED){speed=MAX_SPEED;}
 80019de:	1dbb      	adds	r3, r7, #6
 80019e0:	881b      	ldrh	r3, [r3, #0]
 80019e2:	2b64      	cmp	r3, #100	; 0x64
 80019e4:	d902      	bls.n	80019ec <forward_mode+0x2c>
 80019e6:	1dbb      	adds	r3, r7, #6
 80019e8:	2264      	movs	r2, #100	; 0x64
 80019ea:	801a      	strh	r2, [r3, #0]
	uint16_t compare=speed*MAX_COMPTEUR/MAX_SPEED;
 80019ec:	1dbb      	adds	r3, r7, #6
 80019ee:	881a      	ldrh	r2, [r3, #0]
 80019f0:	0013      	movs	r3, r2
 80019f2:	01db      	lsls	r3, r3, #7
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	2164      	movs	r1, #100	; 0x64
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7fe fc17 	bl	800022c <__divsi3>
 80019fe:	0003      	movs	r3, r0
 8001a00:	001a      	movs	r2, r3
 8001a02:	230e      	movs	r3, #14
 8001a04:	18fb      	adds	r3, r7, r3
 8001a06:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, 0);
 8001a08:	2304      	movs	r3, #4
 8001a0a:	2220      	movs	r2, #32
 8001a0c:	189b      	adds	r3, r3, r2
 8001a0e:	19db      	adds	r3, r3, r7
 8001a10:	68db      	ldr	r3, [r3, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d107      	bne.n	8001a26 <forward_mode+0x66>
 8001a16:	2304      	movs	r3, #4
 8001a18:	189b      	adds	r3, r3, r2
 8001a1a:	19db      	adds	r3, r3, r7
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2200      	movs	r2, #0
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
 8001a24:	e043      	b.n	8001aae <forward_mode+0xee>
 8001a26:	2304      	movs	r3, #4
 8001a28:	2220      	movs	r2, #32
 8001a2a:	189b      	adds	r3, r3, r2
 8001a2c:	19db      	adds	r3, r3, r7
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b04      	cmp	r3, #4
 8001a32:	d107      	bne.n	8001a44 <forward_mode+0x84>
 8001a34:	2304      	movs	r3, #4
 8001a36:	189b      	adds	r3, r3, r2
 8001a38:	19db      	adds	r3, r3, r7
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	6393      	str	r3, [r2, #56]	; 0x38
 8001a42:	e034      	b.n	8001aae <forward_mode+0xee>
 8001a44:	2304      	movs	r3, #4
 8001a46:	2220      	movs	r2, #32
 8001a48:	189b      	adds	r3, r3, r2
 8001a4a:	19db      	adds	r3, r3, r7
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	2b08      	cmp	r3, #8
 8001a50:	d107      	bne.n	8001a62 <forward_mode+0xa2>
 8001a52:	2304      	movs	r3, #4
 8001a54:	189b      	adds	r3, r3, r2
 8001a56:	19db      	adds	r3, r3, r7
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a60:	e025      	b.n	8001aae <forward_mode+0xee>
 8001a62:	2304      	movs	r3, #4
 8001a64:	2220      	movs	r2, #32
 8001a66:	189b      	adds	r3, r3, r2
 8001a68:	19db      	adds	r3, r3, r7
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d107      	bne.n	8001a80 <forward_mode+0xc0>
 8001a70:	2304      	movs	r3, #4
 8001a72:	189b      	adds	r3, r3, r2
 8001a74:	19db      	adds	r3, r3, r7
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7e:	e016      	b.n	8001aae <forward_mode+0xee>
 8001a80:	2304      	movs	r3, #4
 8001a82:	2220      	movs	r2, #32
 8001a84:	189b      	adds	r3, r3, r2
 8001a86:	19db      	adds	r3, r3, r7
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	2b10      	cmp	r3, #16
 8001a8c:	d107      	bne.n	8001a9e <forward_mode+0xde>
 8001a8e:	2304      	movs	r3, #4
 8001a90:	189b      	adds	r3, r3, r2
 8001a92:	19db      	adds	r3, r3, r7
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2300      	movs	r3, #0
 8001a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a9c:	e007      	b.n	8001aae <forward_mode+0xee>
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	19db      	adds	r3, r3, r7
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001aae:	2304      	movs	r3, #4
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	189b      	adds	r3, r3, r2
 8001ab4:	19db      	adds	r3, r3, r7
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d109      	bne.n	8001ad0 <forward_mode+0x110>
 8001abc:	2304      	movs	r3, #4
 8001abe:	189b      	adds	r3, r3, r2
 8001ac0:	19db      	adds	r3, r3, r7
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	220e      	movs	r2, #14
 8001ac8:	18ba      	adds	r2, r7, r2
 8001aca:	8812      	ldrh	r2, [r2, #0]
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001ace:	e04d      	b.n	8001b6c <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	2220      	movs	r2, #32
 8001ad4:	189b      	adds	r3, r3, r2
 8001ad6:	19db      	adds	r3, r3, r7
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	d109      	bne.n	8001af2 <forward_mode+0x132>
 8001ade:	2304      	movs	r3, #4
 8001ae0:	189b      	adds	r3, r3, r2
 8001ae2:	19db      	adds	r3, r3, r7
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	230e      	movs	r3, #14
 8001aea:	18fb      	adds	r3, r7, r3
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001af0:	e03c      	b.n	8001b6c <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001af2:	2304      	movs	r3, #4
 8001af4:	2220      	movs	r2, #32
 8001af6:	189b      	adds	r3, r3, r2
 8001af8:	19db      	adds	r3, r3, r7
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	2b08      	cmp	r3, #8
 8001afe:	d109      	bne.n	8001b14 <forward_mode+0x154>
 8001b00:	2304      	movs	r3, #4
 8001b02:	189b      	adds	r3, r3, r2
 8001b04:	19db      	adds	r3, r3, r7
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	230e      	movs	r3, #14
 8001b0c:	18fb      	adds	r3, r7, r3
 8001b0e:	881b      	ldrh	r3, [r3, #0]
 8001b10:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001b12:	e02b      	b.n	8001b6c <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001b14:	2304      	movs	r3, #4
 8001b16:	2220      	movs	r2, #32
 8001b18:	189b      	adds	r3, r3, r2
 8001b1a:	19db      	adds	r3, r3, r7
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	2b0c      	cmp	r3, #12
 8001b20:	d109      	bne.n	8001b36 <forward_mode+0x176>
 8001b22:	2304      	movs	r3, #4
 8001b24:	189b      	adds	r3, r3, r2
 8001b26:	19db      	adds	r3, r3, r7
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	230e      	movs	r3, #14
 8001b2e:	18fb      	adds	r3, r7, r3
 8001b30:	881b      	ldrh	r3, [r3, #0]
 8001b32:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001b34:	e01a      	b.n	8001b6c <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001b36:	2304      	movs	r3, #4
 8001b38:	2220      	movs	r2, #32
 8001b3a:	189b      	adds	r3, r3, r2
 8001b3c:	19db      	adds	r3, r3, r7
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	2b10      	cmp	r3, #16
 8001b42:	d109      	bne.n	8001b58 <forward_mode+0x198>
 8001b44:	2304      	movs	r3, #4
 8001b46:	189b      	adds	r3, r3, r2
 8001b48:	19db      	adds	r3, r3, r7
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	230e      	movs	r3, #14
 8001b50:	18fb      	adds	r3, r7, r3
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001b56:	e009      	b.n	8001b6c <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001b58:	2304      	movs	r3, #4
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	189b      	adds	r3, r3, r2
 8001b5e:	19db      	adds	r3, r3, r7
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	230e      	movs	r3, #14
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001b6c:	46c0      	nop			; (mov r8, r8)
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b004      	add	sp, #16
 8001b72:	bcb0      	pop	{r4, r5, r7}
 8001b74:	bc08      	pop	{r3}
 8001b76:	b004      	add	sp, #16
 8001b78:	4718      	bx	r3

08001b7a <reverse_mode>:

void reverse_mode(uint16_t speed,struct driver_motor_t motor)
{
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	b5b0      	push	{r4, r5, r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	0004      	movs	r4, r0
 8001b84:	2004      	movs	r0, #4
 8001b86:	2520      	movs	r5, #32
 8001b88:	1940      	adds	r0, r0, r5
 8001b8a:	19c0      	adds	r0, r0, r7
 8001b8c:	6001      	str	r1, [r0, #0]
 8001b8e:	6042      	str	r2, [r0, #4]
 8001b90:	6083      	str	r3, [r0, #8]
 8001b92:	1dbb      	adds	r3, r7, #6
 8001b94:	1c22      	adds	r2, r4, #0
 8001b96:	801a      	strh	r2, [r3, #0]
	if (speed>MAX_SPEED){speed=MAX_SPEED;}
 8001b98:	1dbb      	adds	r3, r7, #6
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	2b64      	cmp	r3, #100	; 0x64
 8001b9e:	d902      	bls.n	8001ba6 <reverse_mode+0x2c>
 8001ba0:	1dbb      	adds	r3, r7, #6
 8001ba2:	2264      	movs	r2, #100	; 0x64
 8001ba4:	801a      	strh	r2, [r3, #0]
	uint16_t compare=speed*MAX_COMPTEUR/MAX_SPEED;
 8001ba6:	1dbb      	adds	r3, r7, #6
 8001ba8:	881a      	ldrh	r2, [r3, #0]
 8001baa:	0013      	movs	r3, r2
 8001bac:	01db      	lsls	r3, r3, #7
 8001bae:	1a9b      	subs	r3, r3, r2
 8001bb0:	2164      	movs	r1, #100	; 0x64
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f7fe fb3a 	bl	800022c <__divsi3>
 8001bb8:	0003      	movs	r3, r0
 8001bba:	001a      	movs	r2, r3
 8001bbc:	230e      	movs	r3, #14
 8001bbe:	18fb      	adds	r3, r7, r3
 8001bc0:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, 0);
 8001bc2:	2304      	movs	r3, #4
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	189b      	adds	r3, r3, r2
 8001bc8:	19db      	adds	r3, r3, r7
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d107      	bne.n	8001be0 <reverse_mode+0x66>
 8001bd0:	2304      	movs	r3, #4
 8001bd2:	189b      	adds	r3, r3, r2
 8001bd4:	19db      	adds	r3, r3, r7
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bde:	e043      	b.n	8001c68 <reverse_mode+0xee>
 8001be0:	2304      	movs	r3, #4
 8001be2:	2220      	movs	r2, #32
 8001be4:	189b      	adds	r3, r3, r2
 8001be6:	19db      	adds	r3, r3, r7
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d107      	bne.n	8001bfe <reverse_mode+0x84>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	189b      	adds	r3, r3, r2
 8001bf2:	19db      	adds	r3, r3, r7
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	6393      	str	r3, [r2, #56]	; 0x38
 8001bfc:	e034      	b.n	8001c68 <reverse_mode+0xee>
 8001bfe:	2304      	movs	r3, #4
 8001c00:	2220      	movs	r2, #32
 8001c02:	189b      	adds	r3, r3, r2
 8001c04:	19db      	adds	r3, r3, r7
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2b08      	cmp	r3, #8
 8001c0a:	d107      	bne.n	8001c1c <reverse_mode+0xa2>
 8001c0c:	2304      	movs	r3, #4
 8001c0e:	189b      	adds	r3, r3, r2
 8001c10:	19db      	adds	r3, r3, r7
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2300      	movs	r3, #0
 8001c18:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001c1a:	e025      	b.n	8001c68 <reverse_mode+0xee>
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	2220      	movs	r2, #32
 8001c20:	189b      	adds	r3, r3, r2
 8001c22:	19db      	adds	r3, r3, r7
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d107      	bne.n	8001c3a <reverse_mode+0xc0>
 8001c2a:	2304      	movs	r3, #4
 8001c2c:	189b      	adds	r3, r3, r2
 8001c2e:	19db      	adds	r3, r3, r7
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2300      	movs	r3, #0
 8001c36:	6413      	str	r3, [r2, #64]	; 0x40
 8001c38:	e016      	b.n	8001c68 <reverse_mode+0xee>
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	189b      	adds	r3, r3, r2
 8001c40:	19db      	adds	r3, r3, r7
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b10      	cmp	r3, #16
 8001c46:	d107      	bne.n	8001c58 <reverse_mode+0xde>
 8001c48:	2304      	movs	r3, #4
 8001c4a:	189b      	adds	r3, r3, r2
 8001c4c:	19db      	adds	r3, r3, r7
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	2300      	movs	r3, #0
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
 8001c56:	e007      	b.n	8001c68 <reverse_mode+0xee>
 8001c58:	2304      	movs	r3, #4
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	19db      	adds	r3, r3, r7
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	2300      	movs	r3, #0
 8001c66:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c68:	2304      	movs	r3, #4
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	189b      	adds	r3, r3, r2
 8001c6e:	19db      	adds	r3, r3, r7
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d109      	bne.n	8001c8a <reverse_mode+0x110>
 8001c76:	2304      	movs	r3, #4
 8001c78:	189b      	adds	r3, r3, r2
 8001c7a:	19db      	adds	r3, r3, r7
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	220e      	movs	r2, #14
 8001c82:	18ba      	adds	r2, r7, r2
 8001c84:	8812      	ldrh	r2, [r2, #0]
 8001c86:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c88:	e04d      	b.n	8001d26 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	189b      	adds	r3, r3, r2
 8001c90:	19db      	adds	r3, r3, r7
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d109      	bne.n	8001cac <reverse_mode+0x132>
 8001c98:	2304      	movs	r3, #4
 8001c9a:	189b      	adds	r3, r3, r2
 8001c9c:	19db      	adds	r3, r3, r7
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	230e      	movs	r3, #14
 8001ca4:	18fb      	adds	r3, r7, r3
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001caa:	e03c      	b.n	8001d26 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001cac:	2304      	movs	r3, #4
 8001cae:	2220      	movs	r2, #32
 8001cb0:	189b      	adds	r3, r3, r2
 8001cb2:	19db      	adds	r3, r3, r7
 8001cb4:	68db      	ldr	r3, [r3, #12]
 8001cb6:	2b08      	cmp	r3, #8
 8001cb8:	d109      	bne.n	8001cce <reverse_mode+0x154>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	189b      	adds	r3, r3, r2
 8001cbe:	19db      	adds	r3, r3, r7
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	230e      	movs	r3, #14
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	881b      	ldrh	r3, [r3, #0]
 8001cca:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001ccc:	e02b      	b.n	8001d26 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001cce:	2304      	movs	r3, #4
 8001cd0:	2220      	movs	r2, #32
 8001cd2:	189b      	adds	r3, r3, r2
 8001cd4:	19db      	adds	r3, r3, r7
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2b0c      	cmp	r3, #12
 8001cda:	d109      	bne.n	8001cf0 <reverse_mode+0x176>
 8001cdc:	2304      	movs	r3, #4
 8001cde:	189b      	adds	r3, r3, r2
 8001ce0:	19db      	adds	r3, r3, r7
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	230e      	movs	r3, #14
 8001ce8:	18fb      	adds	r3, r7, r3
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001cee:	e01a      	b.n	8001d26 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	189b      	adds	r3, r3, r2
 8001cf6:	19db      	adds	r3, r3, r7
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	2b10      	cmp	r3, #16
 8001cfc:	d109      	bne.n	8001d12 <reverse_mode+0x198>
 8001cfe:	2304      	movs	r3, #4
 8001d00:	189b      	adds	r3, r3, r2
 8001d02:	19db      	adds	r3, r3, r7
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	230e      	movs	r3, #14
 8001d0a:	18fb      	adds	r3, r7, r3
 8001d0c:	881b      	ldrh	r3, [r3, #0]
 8001d0e:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001d10:	e009      	b.n	8001d26 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001d12:	2304      	movs	r3, #4
 8001d14:	2220      	movs	r2, #32
 8001d16:	189b      	adds	r3, r3, r2
 8001d18:	19db      	adds	r3, r3, r7
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	230e      	movs	r3, #14
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001d26:	46c0      	nop			; (mov r8, r8)
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	b004      	add	sp, #16
 8001d2c:	bcb0      	pop	{r4, r5, r7}
 8001d2e:	bc08      	pop	{r3}
 8001d30:	b004      	add	sp, #16
 8001d32:	4718      	bx	r3

08001d34 <brake_mode>:
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, 0);
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, 0);
}

void brake_mode(struct driver_motor_t motor)
{
 8001d34:	b590      	push	{r4, r7, lr}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	003c      	movs	r4, r7
 8001d3c:	6020      	str	r0, [r4, #0]
 8001d3e:	6061      	str	r1, [r4, #4]
 8001d40:	60a2      	str	r2, [r4, #8]
 8001d42:	60e3      	str	r3, [r4, #12]
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, MAX_COMPTEUR);
 8001d44:	003b      	movs	r3, r7
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d105      	bne.n	8001d58 <brake_mode+0x24>
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	227f      	movs	r2, #127	; 0x7f
 8001d54:	635a      	str	r2, [r3, #52]	; 0x34
 8001d56:	e02c      	b.n	8001db2 <brake_mode+0x7e>
 8001d58:	003b      	movs	r3, r7
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	2b04      	cmp	r3, #4
 8001d5e:	d105      	bne.n	8001d6c <brake_mode+0x38>
 8001d60:	003b      	movs	r3, r7
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	237f      	movs	r3, #127	; 0x7f
 8001d68:	6393      	str	r3, [r2, #56]	; 0x38
 8001d6a:	e022      	b.n	8001db2 <brake_mode+0x7e>
 8001d6c:	003b      	movs	r3, r7
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d105      	bne.n	8001d80 <brake_mode+0x4c>
 8001d74:	003b      	movs	r3, r7
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	681a      	ldr	r2, [r3, #0]
 8001d7a:	237f      	movs	r3, #127	; 0x7f
 8001d7c:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d7e:	e018      	b.n	8001db2 <brake_mode+0x7e>
 8001d80:	003b      	movs	r3, r7
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d105      	bne.n	8001d94 <brake_mode+0x60>
 8001d88:	003b      	movs	r3, r7
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	237f      	movs	r3, #127	; 0x7f
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	e00e      	b.n	8001db2 <brake_mode+0x7e>
 8001d94:	003b      	movs	r3, r7
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	2b10      	cmp	r3, #16
 8001d9a:	d105      	bne.n	8001da8 <brake_mode+0x74>
 8001d9c:	003b      	movs	r3, r7
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	237f      	movs	r3, #127	; 0x7f
 8001da4:	6593      	str	r3, [r2, #88]	; 0x58
 8001da6:	e004      	b.n	8001db2 <brake_mode+0x7e>
 8001da8:	003b      	movs	r3, r7
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	237f      	movs	r3, #127	; 0x7f
 8001db0:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001db2:	003b      	movs	r3, r7
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d105      	bne.n	8001dc6 <brake_mode+0x92>
 8001dba:	003b      	movs	r3, r7
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	227f      	movs	r2, #127	; 0x7f
 8001dc2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001dc4:	e02c      	b.n	8001e20 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001dc6:	003b      	movs	r3, r7
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b04      	cmp	r3, #4
 8001dcc:	d105      	bne.n	8001dda <brake_mode+0xa6>
 8001dce:	003b      	movs	r3, r7
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	237f      	movs	r3, #127	; 0x7f
 8001dd6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001dd8:	e022      	b.n	8001e20 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001dda:	003b      	movs	r3, r7
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b08      	cmp	r3, #8
 8001de0:	d105      	bne.n	8001dee <brake_mode+0xba>
 8001de2:	003b      	movs	r3, r7
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	237f      	movs	r3, #127	; 0x7f
 8001dea:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001dec:	e018      	b.n	8001e20 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001dee:	003b      	movs	r3, r7
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b0c      	cmp	r3, #12
 8001df4:	d105      	bne.n	8001e02 <brake_mode+0xce>
 8001df6:	003b      	movs	r3, r7
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	237f      	movs	r3, #127	; 0x7f
 8001dfe:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001e00:	e00e      	b.n	8001e20 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001e02:	003b      	movs	r3, r7
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b10      	cmp	r3, #16
 8001e08:	d105      	bne.n	8001e16 <brake_mode+0xe2>
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	237f      	movs	r3, #127	; 0x7f
 8001e12:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001e14:	e004      	b.n	8001e20 <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001e16:	003b      	movs	r3, r7
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	237f      	movs	r3, #127	; 0x7f
 8001e1e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001e20:	46c0      	nop			; (mov r8, r8)
 8001e22:	46bd      	mov	sp, r7
 8001e24:	b005      	add	sp, #20
 8001e26:	bd90      	pop	{r4, r7, pc}

08001e28 <set_speed>:

void set_speed(uint16_t speed,struct driver_motor_t motor){
 8001e28:	b084      	sub	sp, #16
 8001e2a:	b5b0      	push	{r4, r5, r7, lr}
 8001e2c:	b084      	sub	sp, #16
 8001e2e:	af02      	add	r7, sp, #8
 8001e30:	0004      	movs	r4, r0
 8001e32:	2004      	movs	r0, #4
 8001e34:	2518      	movs	r5, #24
 8001e36:	1940      	adds	r0, r0, r5
 8001e38:	19c0      	adds	r0, r0, r7
 8001e3a:	6001      	str	r1, [r0, #0]
 8001e3c:	6042      	str	r2, [r0, #4]
 8001e3e:	6083      	str	r3, [r0, #8]
 8001e40:	1dbb      	adds	r3, r7, #6
 8001e42:	1c22      	adds	r2, r4, #0
 8001e44:	801a      	strh	r2, [r3, #0]
	if(speed==0){brake_mode(motor);}
 8001e46:	1dbb      	adds	r3, r7, #6
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d109      	bne.n	8001e62 <set_speed+0x3a>
 8001e4e:	2304      	movs	r3, #4
 8001e50:	195b      	adds	r3, r3, r5
 8001e52:	19db      	adds	r3, r3, r7
 8001e54:	6818      	ldr	r0, [r3, #0]
 8001e56:	6859      	ldr	r1, [r3, #4]
 8001e58:	689a      	ldr	r2, [r3, #8]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f7ff ff6a 	bl	8001d34 <brake_mode>
	else if(speed>0){forward_mode(speed,motor);}
	else {reverse_mode(-speed,motor);}
}
 8001e60:	e022      	b.n	8001ea8 <set_speed+0x80>
	else if(speed>0){forward_mode(speed,motor);}
 8001e62:	1dbb      	adds	r3, r7, #6
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00e      	beq.n	8001e88 <set_speed+0x60>
 8001e6a:	2304      	movs	r3, #4
 8001e6c:	2218      	movs	r2, #24
 8001e6e:	189b      	adds	r3, r3, r2
 8001e70:	19db      	adds	r3, r3, r7
 8001e72:	1dba      	adds	r2, r7, #6
 8001e74:	8810      	ldrh	r0, [r2, #0]
 8001e76:	466a      	mov	r2, sp
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	6011      	str	r1, [r2, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f7ff fd9d 	bl	80019c0 <forward_mode>
}
 8001e86:	e00f      	b.n	8001ea8 <set_speed+0x80>
	else {reverse_mode(-speed,motor);}
 8001e88:	1dbb      	adds	r3, r7, #6
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	425b      	negs	r3, r3
 8001e8e:	b298      	uxth	r0, r3
 8001e90:	2304      	movs	r3, #4
 8001e92:	2218      	movs	r2, #24
 8001e94:	189b      	adds	r3, r3, r2
 8001e96:	19db      	adds	r3, r3, r7
 8001e98:	466a      	mov	r2, sp
 8001e9a:	68d9      	ldr	r1, [r3, #12]
 8001e9c:	6011      	str	r1, [r2, #0]
 8001e9e:	6819      	ldr	r1, [r3, #0]
 8001ea0:	685a      	ldr	r2, [r3, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f7ff fe69 	bl	8001b7a <reverse_mode>
}
 8001ea8:	46c0      	nop			; (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bcb0      	pop	{r4, r5, r7}
 8001eb0:	bc08      	pop	{r3}
 8001eb2:	b004      	add	sp, #16
 8001eb4:	4718      	bx	r3
	...

08001eb8 <move_straight>:
	set_speed(speed_R,right_motor);
	set_speed(speed_L,left_motor);
}

void move_straight(int16_t speed)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af02      	add	r7, sp, #8
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	1dbb      	adds	r3, r7, #6
 8001ec2:	801a      	strh	r2, [r3, #0]
	set_speed(speed,right_motor);
 8001ec4:	1dbb      	adds	r3, r7, #6
 8001ec6:	8818      	ldrh	r0, [r3, #0]
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <move_straight+0x40>)
 8001eca:	466a      	mov	r2, sp
 8001ecc:	68d9      	ldr	r1, [r3, #12]
 8001ece:	6011      	str	r1, [r2, #0]
 8001ed0:	6819      	ldr	r1, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	f7ff ffa7 	bl	8001e28 <set_speed>
	set_speed(speed,left_motor);
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	8818      	ldrh	r0, [r3, #0]
 8001ede:	4b07      	ldr	r3, [pc, #28]	; (8001efc <move_straight+0x44>)
 8001ee0:	466a      	mov	r2, sp
 8001ee2:	68d9      	ldr	r1, [r3, #12]
 8001ee4:	6011      	str	r1, [r2, #0]
 8001ee6:	6819      	ldr	r1, [r3, #0]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f7ff ff9c 	bl	8001e28 <set_speed>
}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b002      	add	sp, #8
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	20000024 	.word	0x20000024
 8001efc:	20000014 	.word	0x20000014

08001f00 <stop>:

void stop(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af02      	add	r7, sp, #8
	set_speed(0,right_motor);
 8001f06:	4b0b      	ldr	r3, [pc, #44]	; (8001f34 <stop+0x34>)
 8001f08:	466a      	mov	r2, sp
 8001f0a:	68d9      	ldr	r1, [r3, #12]
 8001f0c:	6011      	str	r1, [r2, #0]
 8001f0e:	6819      	ldr	r1, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2000      	movs	r0, #0
 8001f16:	f7ff ff87 	bl	8001e28 <set_speed>
	set_speed(0,left_motor);
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <stop+0x38>)
 8001f1c:	466a      	mov	r2, sp
 8001f1e:	68d9      	ldr	r1, [r3, #12]
 8001f20:	6011      	str	r1, [r2, #0]
 8001f22:	6819      	ldr	r1, [r3, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2000      	movs	r0, #0
 8001f2a:	f7ff ff7d 	bl	8001e28 <set_speed>
}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20000024 	.word	0x20000024
 8001f38:	20000014 	.word	0x20000014

08001f3c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f42:	1dfb      	adds	r3, r7, #7
 8001f44:	2200      	movs	r2, #0
 8001f46:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_Init+0x3c>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_Init+0x3c>)
 8001f4e:	2180      	movs	r1, #128	; 0x80
 8001f50:	0049      	lsls	r1, r1, #1
 8001f52:	430a      	orrs	r2, r1
 8001f54:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f56:	2003      	movs	r0, #3
 8001f58:	f000 f810 	bl	8001f7c <HAL_InitTick>
 8001f5c:	1e03      	subs	r3, r0, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f60:	1dfb      	adds	r3, r7, #7
 8001f62:	2201      	movs	r2, #1
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	e001      	b.n	8001f6c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f68:	f7fe fc76 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f6c:	1dfb      	adds	r3, r7, #7
 8001f6e:	781b      	ldrb	r3, [r3, #0]
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b002      	add	sp, #8
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40022000 	.word	0x40022000

08001f7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <HAL_InitTick+0x88>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d02b      	beq.n	8001fec <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f94:	4b1c      	ldr	r3, [pc, #112]	; (8002008 <HAL_InitTick+0x8c>)
 8001f96:	681c      	ldr	r4, [r3, #0]
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_InitTick+0x88>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	0019      	movs	r1, r3
 8001f9e:	23fa      	movs	r3, #250	; 0xfa
 8001fa0:	0098      	lsls	r0, r3, #2
 8001fa2:	f7fe f8b9 	bl	8000118 <__udivsi3>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	0019      	movs	r1, r3
 8001faa:	0020      	movs	r0, r4
 8001fac:	f7fe f8b4 	bl	8000118 <__udivsi3>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f000 f919 	bl	80021ea <HAL_SYSTICK_Config>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d112      	bne.n	8001fe2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b03      	cmp	r3, #3
 8001fc0:	d80a      	bhi.n	8001fd8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	2200      	movs	r2, #0
 8001fca:	0018      	movs	r0, r3
 8001fcc:	f000 f8e8 	bl	80021a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001fd0:	4b0e      	ldr	r3, [pc, #56]	; (800200c <HAL_InitTick+0x90>)
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e00d      	b.n	8001ff4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001fd8:	230f      	movs	r3, #15
 8001fda:	18fb      	adds	r3, r7, r3
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
 8001fe0:	e008      	b.n	8001ff4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001fe2:	230f      	movs	r3, #15
 8001fe4:	18fb      	adds	r3, r7, r3
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	701a      	strb	r2, [r3, #0]
 8001fea:	e003      	b.n	8001ff4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001fec:	230f      	movs	r3, #15
 8001fee:	18fb      	adds	r3, r7, r3
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001ff4:	230f      	movs	r3, #15
 8001ff6:	18fb      	adds	r3, r7, r3
 8001ff8:	781b      	ldrb	r3, [r3, #0]
}
 8001ffa:	0018      	movs	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	b005      	add	sp, #20
 8002000:	bd90      	pop	{r4, r7, pc}
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	20000038 	.word	0x20000038
 8002008:	20000000 	.word	0x20000000
 800200c:	20000034 	.word	0x20000034

08002010 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <HAL_IncTick+0x1c>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	001a      	movs	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <HAL_IncTick+0x20>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	18d2      	adds	r2, r2, r3
 8002020:	4b03      	ldr	r3, [pc, #12]	; (8002030 <HAL_IncTick+0x20>)
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	46c0      	nop			; (mov r8, r8)
 800202c:	20000038 	.word	0x20000038
 8002030:	200004dc 	.word	0x200004dc

08002034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  return uwTick;
 8002038:	4b02      	ldr	r3, [pc, #8]	; (8002044 <HAL_GetTick+0x10>)
 800203a:	681b      	ldr	r3, [r3, #0]
}
 800203c:	0018      	movs	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	46c0      	nop			; (mov r8, r8)
 8002044:	200004dc 	.word	0x200004dc

08002048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	0002      	movs	r2, r0
 8002050:	1dfb      	adds	r3, r7, #7
 8002052:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002054:	1dfb      	adds	r3, r7, #7
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	2b7f      	cmp	r3, #127	; 0x7f
 800205a:	d809      	bhi.n	8002070 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205c:	1dfb      	adds	r3, r7, #7
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	001a      	movs	r2, r3
 8002062:	231f      	movs	r3, #31
 8002064:	401a      	ands	r2, r3
 8002066:	4b04      	ldr	r3, [pc, #16]	; (8002078 <__NVIC_EnableIRQ+0x30>)
 8002068:	2101      	movs	r1, #1
 800206a:	4091      	lsls	r1, r2
 800206c:	000a      	movs	r2, r1
 800206e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002070:	46c0      	nop			; (mov r8, r8)
 8002072:	46bd      	mov	sp, r7
 8002074:	b002      	add	sp, #8
 8002076:	bd80      	pop	{r7, pc}
 8002078:	e000e100 	.word	0xe000e100

0800207c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	0002      	movs	r2, r0
 8002084:	6039      	str	r1, [r7, #0]
 8002086:	1dfb      	adds	r3, r7, #7
 8002088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800208a:	1dfb      	adds	r3, r7, #7
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b7f      	cmp	r3, #127	; 0x7f
 8002090:	d828      	bhi.n	80020e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002092:	4a2f      	ldr	r2, [pc, #188]	; (8002150 <__NVIC_SetPriority+0xd4>)
 8002094:	1dfb      	adds	r3, r7, #7
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	b25b      	sxtb	r3, r3
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	33c0      	adds	r3, #192	; 0xc0
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	589b      	ldr	r3, [r3, r2]
 80020a2:	1dfa      	adds	r2, r7, #7
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	0011      	movs	r1, r2
 80020a8:	2203      	movs	r2, #3
 80020aa:	400a      	ands	r2, r1
 80020ac:	00d2      	lsls	r2, r2, #3
 80020ae:	21ff      	movs	r1, #255	; 0xff
 80020b0:	4091      	lsls	r1, r2
 80020b2:	000a      	movs	r2, r1
 80020b4:	43d2      	mvns	r2, r2
 80020b6:	401a      	ands	r2, r3
 80020b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	019b      	lsls	r3, r3, #6
 80020be:	22ff      	movs	r2, #255	; 0xff
 80020c0:	401a      	ands	r2, r3
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	0018      	movs	r0, r3
 80020c8:	2303      	movs	r3, #3
 80020ca:	4003      	ands	r3, r0
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d0:	481f      	ldr	r0, [pc, #124]	; (8002150 <__NVIC_SetPriority+0xd4>)
 80020d2:	1dfb      	adds	r3, r7, #7
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	b25b      	sxtb	r3, r3
 80020d8:	089b      	lsrs	r3, r3, #2
 80020da:	430a      	orrs	r2, r1
 80020dc:	33c0      	adds	r3, #192	; 0xc0
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020e2:	e031      	b.n	8002148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020e4:	4a1b      	ldr	r2, [pc, #108]	; (8002154 <__NVIC_SetPriority+0xd8>)
 80020e6:	1dfb      	adds	r3, r7, #7
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	0019      	movs	r1, r3
 80020ec:	230f      	movs	r3, #15
 80020ee:	400b      	ands	r3, r1
 80020f0:	3b08      	subs	r3, #8
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3306      	adds	r3, #6
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	18d3      	adds	r3, r2, r3
 80020fa:	3304      	adds	r3, #4
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	1dfa      	adds	r2, r7, #7
 8002100:	7812      	ldrb	r2, [r2, #0]
 8002102:	0011      	movs	r1, r2
 8002104:	2203      	movs	r2, #3
 8002106:	400a      	ands	r2, r1
 8002108:	00d2      	lsls	r2, r2, #3
 800210a:	21ff      	movs	r1, #255	; 0xff
 800210c:	4091      	lsls	r1, r2
 800210e:	000a      	movs	r2, r1
 8002110:	43d2      	mvns	r2, r2
 8002112:	401a      	ands	r2, r3
 8002114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	22ff      	movs	r2, #255	; 0xff
 800211c:	401a      	ands	r2, r3
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	0018      	movs	r0, r3
 8002124:	2303      	movs	r3, #3
 8002126:	4003      	ands	r3, r0
 8002128:	00db      	lsls	r3, r3, #3
 800212a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800212c:	4809      	ldr	r0, [pc, #36]	; (8002154 <__NVIC_SetPriority+0xd8>)
 800212e:	1dfb      	adds	r3, r7, #7
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	001c      	movs	r4, r3
 8002134:	230f      	movs	r3, #15
 8002136:	4023      	ands	r3, r4
 8002138:	3b08      	subs	r3, #8
 800213a:	089b      	lsrs	r3, r3, #2
 800213c:	430a      	orrs	r2, r1
 800213e:	3306      	adds	r3, #6
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	18c3      	adds	r3, r0, r3
 8002144:	3304      	adds	r3, #4
 8002146:	601a      	str	r2, [r3, #0]
}
 8002148:	46c0      	nop			; (mov r8, r8)
 800214a:	46bd      	mov	sp, r7
 800214c:	b003      	add	sp, #12
 800214e:	bd90      	pop	{r4, r7, pc}
 8002150:	e000e100 	.word	0xe000e100
 8002154:	e000ed00 	.word	0xe000ed00

08002158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1e5a      	subs	r2, r3, #1
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	045b      	lsls	r3, r3, #17
 8002168:	429a      	cmp	r2, r3
 800216a:	d301      	bcc.n	8002170 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216c:	2301      	movs	r3, #1
 800216e:	e010      	b.n	8002192 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002170:	4b0a      	ldr	r3, [pc, #40]	; (800219c <SysTick_Config+0x44>)
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	3a01      	subs	r2, #1
 8002176:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002178:	2301      	movs	r3, #1
 800217a:	425b      	negs	r3, r3
 800217c:	2103      	movs	r1, #3
 800217e:	0018      	movs	r0, r3
 8002180:	f7ff ff7c 	bl	800207c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	; (800219c <SysTick_Config+0x44>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	; (800219c <SysTick_Config+0x44>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b002      	add	sp, #8
 8002198:	bd80      	pop	{r7, pc}
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	210f      	movs	r1, #15
 80021ac:	187b      	adds	r3, r7, r1
 80021ae:	1c02      	adds	r2, r0, #0
 80021b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	187b      	adds	r3, r7, r1
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	b25b      	sxtb	r3, r3
 80021ba:	0011      	movs	r1, r2
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff ff5d 	bl	800207c <__NVIC_SetPriority>
}
 80021c2:	46c0      	nop			; (mov r8, r8)
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bd80      	pop	{r7, pc}

080021ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b082      	sub	sp, #8
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	0002      	movs	r2, r0
 80021d2:	1dfb      	adds	r3, r7, #7
 80021d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021d6:	1dfb      	adds	r3, r7, #7
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b25b      	sxtb	r3, r3
 80021dc:	0018      	movs	r0, r3
 80021de:	f7ff ff33 	bl	8002048 <__NVIC_EnableIRQ>
}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	b002      	add	sp, #8
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b082      	sub	sp, #8
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	0018      	movs	r0, r3
 80021f6:	f7ff ffaf 	bl	8002158 <SysTick_Config>
 80021fa:	0003      	movs	r3, r0
}
 80021fc:	0018      	movs	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	b002      	add	sp, #8
 8002202:	bd80      	pop	{r7, pc}

08002204 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d101      	bne.n	8002216 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e050      	b.n	80022b8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2225      	movs	r2, #37	; 0x25
 800221a:	5c9b      	ldrb	r3, [r3, r2]
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b02      	cmp	r3, #2
 8002220:	d008      	beq.n	8002234 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2204      	movs	r2, #4
 8002226:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2224      	movs	r2, #36	; 0x24
 800222c:	2100      	movs	r1, #0
 800222e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e041      	b.n	80022b8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	210e      	movs	r1, #14
 8002240:	438a      	bics	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	491c      	ldr	r1, [pc, #112]	; (80022c0 <HAL_DMA_Abort+0xbc>)
 8002250:	400a      	ands	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681a      	ldr	r2, [r3, #0]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2101      	movs	r1, #1
 8002260:	438a      	bics	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002264:	4b17      	ldr	r3, [pc, #92]	; (80022c4 <HAL_DMA_Abort+0xc0>)
 8002266:	6859      	ldr	r1, [r3, #4]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	221c      	movs	r2, #28
 800226e:	4013      	ands	r3, r2
 8002270:	2201      	movs	r2, #1
 8002272:	409a      	lsls	r2, r3
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <HAL_DMA_Abort+0xc0>)
 8002276:	430a      	orrs	r2, r1
 8002278:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002282:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00c      	beq.n	80022a6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002296:	490a      	ldr	r1, [pc, #40]	; (80022c0 <HAL_DMA_Abort+0xbc>)
 8002298:	400a      	ands	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80022a4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2225      	movs	r2, #37	; 0x25
 80022aa:	2101      	movs	r1, #1
 80022ac:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2224      	movs	r2, #36	; 0x24
 80022b2:	2100      	movs	r1, #0
 80022b4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	0018      	movs	r0, r3
 80022ba:	46bd      	mov	sp, r7
 80022bc:	b002      	add	sp, #8
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	fffffeff 	.word	0xfffffeff
 80022c4:	40020000 	.word	0x40020000

080022c8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022d0:	210f      	movs	r1, #15
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	2200      	movs	r2, #0
 80022d6:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2225      	movs	r2, #37	; 0x25
 80022dc:	5c9b      	ldrb	r3, [r3, r2]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d006      	beq.n	80022f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2204      	movs	r2, #4
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80022ea:	187b      	adds	r3, r7, r1
 80022ec:	2201      	movs	r2, #1
 80022ee:	701a      	strb	r2, [r3, #0]
 80022f0:	e049      	b.n	8002386 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	210e      	movs	r1, #14
 80022fe:	438a      	bics	r2, r1
 8002300:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2101      	movs	r1, #1
 800230e:	438a      	bics	r2, r1
 8002310:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800231c:	491d      	ldr	r1, [pc, #116]	; (8002394 <HAL_DMA_Abort_IT+0xcc>)
 800231e:	400a      	ands	r2, r1
 8002320:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002322:	4b1d      	ldr	r3, [pc, #116]	; (8002398 <HAL_DMA_Abort_IT+0xd0>)
 8002324:	6859      	ldr	r1, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232a:	221c      	movs	r2, #28
 800232c:	4013      	ands	r3, r2
 800232e:	2201      	movs	r2, #1
 8002330:	409a      	lsls	r2, r3
 8002332:	4b19      	ldr	r3, [pc, #100]	; (8002398 <HAL_DMA_Abort_IT+0xd0>)
 8002334:	430a      	orrs	r2, r1
 8002336:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002340:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002346:	2b00      	cmp	r3, #0
 8002348:	d00c      	beq.n	8002364 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002354:	490f      	ldr	r1, [pc, #60]	; (8002394 <HAL_DMA_Abort_IT+0xcc>)
 8002356:	400a      	ands	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002362:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2225      	movs	r2, #37	; 0x25
 8002368:	2101      	movs	r1, #1
 800236a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2224      	movs	r2, #36	; 0x24
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	2b00      	cmp	r3, #0
 800237a:	d004      	beq.n	8002386 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	0010      	movs	r0, r2
 8002384:	4798      	blx	r3
    }
  }
  return status;
 8002386:	230f      	movs	r3, #15
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	781b      	ldrb	r3, [r3, #0]
}
 800238c:	0018      	movs	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	b004      	add	sp, #16
 8002392:	bd80      	pop	{r7, pc}
 8002394:	fffffeff 	.word	0xfffffeff
 8002398:	40020000 	.word	0x40020000

0800239c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023aa:	e147      	b.n	800263c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2101      	movs	r1, #1
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4091      	lsls	r1, r2
 80023b6:	000a      	movs	r2, r1
 80023b8:	4013      	ands	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d100      	bne.n	80023c4 <HAL_GPIO_Init+0x28>
 80023c2:	e138      	b.n	8002636 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2203      	movs	r2, #3
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d005      	beq.n	80023dc <HAL_GPIO_Init+0x40>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	2203      	movs	r2, #3
 80023d6:	4013      	ands	r3, r2
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d130      	bne.n	800243e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	2203      	movs	r2, #3
 80023e8:	409a      	lsls	r2, r3
 80023ea:	0013      	movs	r3, r2
 80023ec:	43da      	mvns	r2, r3
 80023ee:	693b      	ldr	r3, [r7, #16]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68da      	ldr	r2, [r3, #12]
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	409a      	lsls	r2, r3
 80023fe:	0013      	movs	r3, r2
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002412:	2201      	movs	r2, #1
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	43da      	mvns	r2, r3
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	2201      	movs	r2, #1
 800242a:	401a      	ands	r2, r3
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	409a      	lsls	r2, r3
 8002430:	0013      	movs	r3, r2
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2203      	movs	r2, #3
 8002444:	4013      	ands	r3, r2
 8002446:	2b03      	cmp	r3, #3
 8002448:	d017      	beq.n	800247a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	409a      	lsls	r2, r3
 8002458:	0013      	movs	r3, r2
 800245a:	43da      	mvns	r2, r3
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689a      	ldr	r2, [r3, #8]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	409a      	lsls	r2, r3
 800246c:	0013      	movs	r3, r2
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	2203      	movs	r2, #3
 8002480:	4013      	ands	r3, r2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d123      	bne.n	80024ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	0092      	lsls	r2, r2, #2
 8002490:	58d3      	ldr	r3, [r2, r3]
 8002492:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	2207      	movs	r2, #7
 8002498:	4013      	ands	r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	220f      	movs	r2, #15
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	43da      	mvns	r2, r3
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	4013      	ands	r3, r2
 80024a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	691a      	ldr	r2, [r3, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	2107      	movs	r1, #7
 80024b2:	400b      	ands	r3, r1
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	409a      	lsls	r2, r3
 80024b8:	0013      	movs	r3, r2
 80024ba:	693a      	ldr	r2, [r7, #16]
 80024bc:	4313      	orrs	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	0092      	lsls	r2, r2, #2
 80024ca:	6939      	ldr	r1, [r7, #16]
 80024cc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	43da      	mvns	r2, r3
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2203      	movs	r2, #3
 80024ec:	401a      	ands	r2, r3
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	005b      	lsls	r3, r3, #1
 80024f2:	409a      	lsls	r2, r3
 80024f4:	0013      	movs	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	693a      	ldr	r2, [r7, #16]
 8002500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	23c0      	movs	r3, #192	; 0xc0
 8002508:	029b      	lsls	r3, r3, #10
 800250a:	4013      	ands	r3, r2
 800250c:	d100      	bne.n	8002510 <HAL_GPIO_Init+0x174>
 800250e:	e092      	b.n	8002636 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002510:	4a50      	ldr	r2, [pc, #320]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	089b      	lsrs	r3, r3, #2
 8002516:	3318      	adds	r3, #24
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	589b      	ldr	r3, [r3, r2]
 800251c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2203      	movs	r2, #3
 8002522:	4013      	ands	r3, r2
 8002524:	00db      	lsls	r3, r3, #3
 8002526:	220f      	movs	r2, #15
 8002528:	409a      	lsls	r2, r3
 800252a:	0013      	movs	r3, r2
 800252c:	43da      	mvns	r2, r3
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	23a0      	movs	r3, #160	; 0xa0
 8002538:	05db      	lsls	r3, r3, #23
 800253a:	429a      	cmp	r2, r3
 800253c:	d013      	beq.n	8002566 <HAL_GPIO_Init+0x1ca>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a45      	ldr	r2, [pc, #276]	; (8002658 <HAL_GPIO_Init+0x2bc>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d00d      	beq.n	8002562 <HAL_GPIO_Init+0x1c6>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a44      	ldr	r2, [pc, #272]	; (800265c <HAL_GPIO_Init+0x2c0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d007      	beq.n	800255e <HAL_GPIO_Init+0x1c2>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a43      	ldr	r2, [pc, #268]	; (8002660 <HAL_GPIO_Init+0x2c4>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d101      	bne.n	800255a <HAL_GPIO_Init+0x1be>
 8002556:	2303      	movs	r3, #3
 8002558:	e006      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 800255a:	2305      	movs	r3, #5
 800255c:	e004      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 800255e:	2302      	movs	r3, #2
 8002560:	e002      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <HAL_GPIO_Init+0x1cc>
 8002566:	2300      	movs	r3, #0
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	2103      	movs	r1, #3
 800256c:	400a      	ands	r2, r1
 800256e:	00d2      	lsls	r2, r2, #3
 8002570:	4093      	lsls	r3, r2
 8002572:	693a      	ldr	r2, [r7, #16]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002578:	4936      	ldr	r1, [pc, #216]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	089b      	lsrs	r3, r3, #2
 800257e:	3318      	adds	r3, #24
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	43da      	mvns	r2, r3
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4013      	ands	r3, r2
 8002594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	685a      	ldr	r2, [r3, #4]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	035b      	lsls	r3, r3, #13
 800259e:	4013      	ands	r3, r2
 80025a0:	d003      	beq.n	80025aa <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	43da      	mvns	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4013      	ands	r3, r2
 80025be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685a      	ldr	r2, [r3, #4]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	039b      	lsls	r3, r3, #14
 80025c8:	4013      	ands	r3, r2
 80025ca:	d003      	beq.n	80025d4 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80025d4:	4b1f      	ldr	r3, [pc, #124]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80025da:	4a1e      	ldr	r2, [pc, #120]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 80025dc:	2384      	movs	r3, #132	; 0x84
 80025de:	58d3      	ldr	r3, [r2, r3]
 80025e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	43da      	mvns	r2, r3
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4013      	ands	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	4013      	ands	r3, r2
 80025f6:	d003      	beq.n	8002600 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002600:	4914      	ldr	r1, [pc, #80]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 8002602:	2284      	movs	r2, #132	; 0x84
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002608:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 800260a:	2380      	movs	r3, #128	; 0x80
 800260c:	58d3      	ldr	r3, [r2, r3]
 800260e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	43da      	mvns	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	4013      	ands	r3, r2
 8002618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685a      	ldr	r2, [r3, #4]
 800261e:	2380      	movs	r3, #128	; 0x80
 8002620:	025b      	lsls	r3, r3, #9
 8002622:	4013      	ands	r3, r2
 8002624:	d003      	beq.n	800262e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4313      	orrs	r3, r2
 800262c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800262e:	4909      	ldr	r1, [pc, #36]	; (8002654 <HAL_GPIO_Init+0x2b8>)
 8002630:	2280      	movs	r2, #128	; 0x80
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	3301      	adds	r3, #1
 800263a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	40da      	lsrs	r2, r3
 8002644:	1e13      	subs	r3, r2, #0
 8002646:	d000      	beq.n	800264a <HAL_GPIO_Init+0x2ae>
 8002648:	e6b0      	b.n	80023ac <HAL_GPIO_Init+0x10>
  }
}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	46c0      	nop			; (mov r8, r8)
 800264e:	46bd      	mov	sp, r7
 8002650:	b006      	add	sp, #24
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021800 	.word	0x40021800
 8002658:	50000400 	.word	0x50000400
 800265c:	50000800 	.word	0x50000800
 8002660:	50000c00 	.word	0x50000c00

08002664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	0008      	movs	r0, r1
 800266e:	0011      	movs	r1, r2
 8002670:	1cbb      	adds	r3, r7, #2
 8002672:	1c02      	adds	r2, r0, #0
 8002674:	801a      	strh	r2, [r3, #0]
 8002676:	1c7b      	adds	r3, r7, #1
 8002678:	1c0a      	adds	r2, r1, #0
 800267a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800267c:	1c7b      	adds	r3, r7, #1
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002684:	1cbb      	adds	r3, r7, #2
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800268c:	e003      	b.n	8002696 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800268e:	1cbb      	adds	r3, r7, #2
 8002690:	881a      	ldrh	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	0002      	movs	r2, r0
 80026a8:	1dbb      	adds	r3, r7, #6
 80026aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80026ac:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	1dba      	adds	r2, r7, #6
 80026b2:	8812      	ldrh	r2, [r2, #0]
 80026b4:	4013      	ands	r3, r2
 80026b6:	d008      	beq.n	80026ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80026b8:	4b0d      	ldr	r3, [pc, #52]	; (80026f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026ba:	1dba      	adds	r2, r7, #6
 80026bc:	8812      	ldrh	r2, [r2, #0]
 80026be:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80026c0:	1dbb      	adds	r3, r7, #6
 80026c2:	881b      	ldrh	r3, [r3, #0]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f815 	bl	80026f4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80026ca:	4b09      	ldr	r3, [pc, #36]	; (80026f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026cc:	691b      	ldr	r3, [r3, #16]
 80026ce:	1dba      	adds	r2, r7, #6
 80026d0:	8812      	ldrh	r2, [r2, #0]
 80026d2:	4013      	ands	r3, r2
 80026d4:	d008      	beq.n	80026e8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80026d8:	1dba      	adds	r2, r7, #6
 80026da:	8812      	ldrh	r2, [r2, #0]
 80026dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80026de:	1dbb      	adds	r3, r7, #6
 80026e0:	881b      	ldrh	r3, [r3, #0]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f000 f810 	bl	8002708 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80026e8:	46c0      	nop			; (mov r8, r8)
 80026ea:	46bd      	mov	sp, r7
 80026ec:	b002      	add	sp, #8
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021800 	.word	0x40021800

080026f4 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	0002      	movs	r2, r0
 80026fc:	1dbb      	adds	r3, r7, #6
 80026fe:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8002700:	46c0      	nop			; (mov r8, r8)
 8002702:	46bd      	mov	sp, r7
 8002704:	b002      	add	sp, #8
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	0002      	movs	r2, r0
 8002710:	1dbb      	adds	r3, r7, #6
 8002712:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e082      	b.n	8002834 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2241      	movs	r2, #65	; 0x41
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	2b00      	cmp	r3, #0
 8002738:	d107      	bne.n	800274a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2240      	movs	r2, #64	; 0x40
 800273e:	2100      	movs	r1, #0
 8002740:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	0018      	movs	r0, r3
 8002746:	f7fd ffa3 	bl	8000690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2241      	movs	r2, #65	; 0x41
 800274e:	2124      	movs	r1, #36	; 0x24
 8002750:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2101      	movs	r1, #1
 800275e:	438a      	bics	r2, r1
 8002760:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685a      	ldr	r2, [r3, #4]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4934      	ldr	r1, [pc, #208]	; (800283c <HAL_I2C_Init+0x120>)
 800276c:	400a      	ands	r2, r1
 800276e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689a      	ldr	r2, [r3, #8]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4931      	ldr	r1, [pc, #196]	; (8002840 <HAL_I2C_Init+0x124>)
 800277c:	400a      	ands	r2, r1
 800277e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d108      	bne.n	800279a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0209      	lsls	r1, r1, #8
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
 8002798:	e007      	b.n	80027aa <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689a      	ldr	r2, [r3, #8]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2184      	movs	r1, #132	; 0x84
 80027a4:	0209      	lsls	r1, r1, #8
 80027a6:	430a      	orrs	r2, r1
 80027a8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68db      	ldr	r3, [r3, #12]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d104      	bne.n	80027bc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2280      	movs	r2, #128	; 0x80
 80027b8:	0112      	lsls	r2, r2, #4
 80027ba:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	491f      	ldr	r1, [pc, #124]	; (8002844 <HAL_I2C_Init+0x128>)
 80027c8:	430a      	orrs	r2, r1
 80027ca:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	491a      	ldr	r1, [pc, #104]	; (8002840 <HAL_I2C_Init+0x124>)
 80027d8:	400a      	ands	r2, r1
 80027da:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	691a      	ldr	r2, [r3, #16]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	431a      	orrs	r2, r3
 80027e6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	699b      	ldr	r3, [r3, #24]
 80027ec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	430a      	orrs	r2, r1
 80027f4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	69d9      	ldr	r1, [r3, #28]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2101      	movs	r1, #1
 8002812:	430a      	orrs	r2, r1
 8002814:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2241      	movs	r2, #65	; 0x41
 8002820:	2120      	movs	r1, #32
 8002822:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2242      	movs	r2, #66	; 0x42
 800282e:	2100      	movs	r1, #0
 8002830:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b002      	add	sp, #8
 800283a:	bd80      	pop	{r7, pc}
 800283c:	f0ffffff 	.word	0xf0ffffff
 8002840:	ffff7fff 	.word	0xffff7fff
 8002844:	02008000 	.word	0x02008000

08002848 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
 8002850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2241      	movs	r2, #65	; 0x41
 8002856:	5c9b      	ldrb	r3, [r3, r2]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	2b20      	cmp	r3, #32
 800285c:	d138      	bne.n	80028d0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2240      	movs	r2, #64	; 0x40
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d101      	bne.n	800286c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002868:	2302      	movs	r3, #2
 800286a:	e032      	b.n	80028d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2240      	movs	r2, #64	; 0x40
 8002870:	2101      	movs	r1, #1
 8002872:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2241      	movs	r2, #65	; 0x41
 8002878:	2124      	movs	r1, #36	; 0x24
 800287a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2101      	movs	r1, #1
 8002888:	438a      	bics	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4911      	ldr	r1, [pc, #68]	; (80028dc <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002898:	400a      	ands	r2, r1
 800289a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6819      	ldr	r1, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	430a      	orrs	r2, r1
 80028aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2101      	movs	r1, #1
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2241      	movs	r2, #65	; 0x41
 80028c0:	2120      	movs	r1, #32
 80028c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2240      	movs	r2, #64	; 0x40
 80028c8:	2100      	movs	r1, #0
 80028ca:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80028cc:	2300      	movs	r3, #0
 80028ce:	e000      	b.n	80028d2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028d0:	2302      	movs	r3, #2
  }
}
 80028d2:	0018      	movs	r0, r3
 80028d4:	46bd      	mov	sp, r7
 80028d6:	b002      	add	sp, #8
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	ffffefff 	.word	0xffffefff

080028e0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2241      	movs	r2, #65	; 0x41
 80028ee:	5c9b      	ldrb	r3, [r3, r2]
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d139      	bne.n	800296a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	5c9b      	ldrb	r3, [r3, r2]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d101      	bne.n	8002904 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002900:	2302      	movs	r3, #2
 8002902:	e033      	b.n	800296c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2240      	movs	r2, #64	; 0x40
 8002908:	2101      	movs	r1, #1
 800290a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2241      	movs	r2, #65	; 0x41
 8002910:	2124      	movs	r1, #36	; 0x24
 8002912:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	4a11      	ldr	r2, [pc, #68]	; (8002974 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002930:	4013      	ands	r3, r2
 8002932:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2101      	movs	r1, #1
 8002952:	430a      	orrs	r2, r1
 8002954:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2241      	movs	r2, #65	; 0x41
 800295a:	2120      	movs	r1, #32
 800295c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2240      	movs	r2, #64	; 0x40
 8002962:	2100      	movs	r1, #0
 8002964:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002966:	2300      	movs	r3, #0
 8002968:	e000      	b.n	800296c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800296a:	2302      	movs	r3, #2
  }
}
 800296c:	0018      	movs	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}
 8002974:	fffff0ff 	.word	0xfffff0ff

08002978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002980:	4b19      	ldr	r3, [pc, #100]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	; (80029ec <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002986:	4013      	ands	r3, r2
 8002988:	0019      	movs	r1, r3
 800298a:	4b17      	ldr	r3, [pc, #92]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	430a      	orrs	r2, r1
 8002990:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	2380      	movs	r3, #128	; 0x80
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	429a      	cmp	r2, r3
 800299a:	d11f      	bne.n	80029dc <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800299c:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	0013      	movs	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	189b      	adds	r3, r3, r2
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	4912      	ldr	r1, [pc, #72]	; (80029f4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80029aa:	0018      	movs	r0, r3
 80029ac:	f7fd fbb4 	bl	8000118 <__udivsi3>
 80029b0:	0003      	movs	r3, r0
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029b6:	e008      	b.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	3b01      	subs	r3, #1
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	e001      	b.n	80029ca <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e009      	b.n	80029de <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80029ca:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80029cc:	695a      	ldr	r2, [r3, #20]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	401a      	ands	r2, r3
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	429a      	cmp	r2, r3
 80029da:	d0ed      	beq.n	80029b8 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	0018      	movs	r0, r3
 80029e0:	46bd      	mov	sp, r7
 80029e2:	b004      	add	sp, #16
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	46c0      	nop			; (mov r8, r8)
 80029e8:	40007000 	.word	0x40007000
 80029ec:	fffff9ff 	.word	0xfffff9ff
 80029f0:	20000000 	.word	0x20000000
 80029f4:	000f4240 	.word	0x000f4240

080029f8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <LL_RCC_GetAPB1Prescaler+0x14>)
 80029fe:	689a      	ldr	r2, [r3, #8]
 8002a00:	23e0      	movs	r3, #224	; 0xe0
 8002a02:	01db      	lsls	r3, r3, #7
 8002a04:	4013      	ands	r3, r2
}
 8002a06:	0018      	movs	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	40021000 	.word	0x40021000

08002a10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e2f3      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2201      	movs	r2, #1
 8002a28:	4013      	ands	r3, r2
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_OscConfig+0x1e>
 8002a2c:	e07c      	b.n	8002b28 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a2e:	4bc3      	ldr	r3, [pc, #780]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2238      	movs	r2, #56	; 0x38
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a38:	4bc0      	ldr	r3, [pc, #768]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	2203      	movs	r2, #3
 8002a3e:	4013      	ands	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d102      	bne.n	8002a4e <HAL_RCC_OscConfig+0x3e>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d002      	beq.n	8002a54 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d10b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a54:	4bb9      	ldr	r3, [pc, #740]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	2380      	movs	r3, #128	; 0x80
 8002a5a:	029b      	lsls	r3, r3, #10
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	d062      	beq.n	8002b26 <HAL_RCC_OscConfig+0x116>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d15e      	bne.n	8002b26 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e2ce      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	025b      	lsls	r3, r3, #9
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d107      	bne.n	8002a88 <HAL_RCC_OscConfig+0x78>
 8002a78:	4bb0      	ldr	r3, [pc, #704]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4baf      	ldr	r3, [pc, #700]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	0249      	lsls	r1, r1, #9
 8002a82:	430a      	orrs	r2, r1
 8002a84:	601a      	str	r2, [r3, #0]
 8002a86:	e020      	b.n	8002aca <HAL_RCC_OscConfig+0xba>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	23a0      	movs	r3, #160	; 0xa0
 8002a8e:	02db      	lsls	r3, r3, #11
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10e      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xa2>
 8002a94:	4ba9      	ldr	r3, [pc, #676]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4ba8      	ldr	r3, [pc, #672]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002a9a:	2180      	movs	r1, #128	; 0x80
 8002a9c:	02c9      	lsls	r1, r1, #11
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	4ba6      	ldr	r3, [pc, #664]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	4ba5      	ldr	r3, [pc, #660]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0249      	lsls	r1, r1, #9
 8002aac:	430a      	orrs	r2, r1
 8002aae:	601a      	str	r2, [r3, #0]
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0xba>
 8002ab2:	4ba2      	ldr	r3, [pc, #648]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4ba1      	ldr	r3, [pc, #644]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002ab8:	49a1      	ldr	r1, [pc, #644]	; (8002d40 <HAL_RCC_OscConfig+0x330>)
 8002aba:	400a      	ands	r2, r1
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	4b9f      	ldr	r3, [pc, #636]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b9e      	ldr	r3, [pc, #632]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002ac4:	499f      	ldr	r1, [pc, #636]	; (8002d44 <HAL_RCC_OscConfig+0x334>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d014      	beq.n	8002afc <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad2:	f7ff faaf 	bl	8002034 <HAL_GetTick>
 8002ad6:	0003      	movs	r3, r0
 8002ad8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7ff faaa 	bl	8002034 <HAL_GetTick>
 8002ae0:	0002      	movs	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	; 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e28d      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aee:	4b93      	ldr	r3, [pc, #588]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4013      	ands	r3, r2
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0xcc>
 8002afa:	e015      	b.n	8002b28 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff fa9a 	bl	8002034 <HAL_GetTick>
 8002b00:	0003      	movs	r3, r0
 8002b02:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b04:	e008      	b.n	8002b18 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b06:	f7ff fa95 	bl	8002034 <HAL_GetTick>
 8002b0a:	0002      	movs	r2, r0
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	2b64      	cmp	r3, #100	; 0x64
 8002b12:	d901      	bls.n	8002b18 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002b14:	2303      	movs	r3, #3
 8002b16:	e278      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b18:	4b88      	ldr	r3, [pc, #544]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	2380      	movs	r3, #128	; 0x80
 8002b1e:	029b      	lsls	r3, r3, #10
 8002b20:	4013      	ands	r3, r2
 8002b22:	d1f0      	bne.n	8002b06 <HAL_RCC_OscConfig+0xf6>
 8002b24:	e000      	b.n	8002b28 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b26:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2202      	movs	r2, #2
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d100      	bne.n	8002b34 <HAL_RCC_OscConfig+0x124>
 8002b32:	e099      	b.n	8002c68 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b34:	4b81      	ldr	r3, [pc, #516]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2238      	movs	r2, #56	; 0x38
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b3e:	4b7f      	ldr	r3, [pc, #508]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b40:	68db      	ldr	r3, [r3, #12]
 8002b42:	2203      	movs	r2, #3
 8002b44:	4013      	ands	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	2b10      	cmp	r3, #16
 8002b4c:	d102      	bne.n	8002b54 <HAL_RCC_OscConfig+0x144>
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d002      	beq.n	8002b5a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d135      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5a:	4b78      	ldr	r3, [pc, #480]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	2380      	movs	r3, #128	; 0x80
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4013      	ands	r3, r2
 8002b64:	d005      	beq.n	8002b72 <HAL_RCC_OscConfig+0x162>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e24b      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a74      	ldr	r2, [pc, #464]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002b78:	4013      	ands	r3, r2
 8002b7a:	0019      	movs	r1, r3
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	021a      	lsls	r2, r3, #8
 8002b82:	4b6e      	ldr	r3, [pc, #440]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b84:	430a      	orrs	r2, r1
 8002b86:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d112      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b8e:	4b6b      	ldr	r3, [pc, #428]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a6e      	ldr	r2, [pc, #440]	; (8002d4c <HAL_RCC_OscConfig+0x33c>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	0019      	movs	r1, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	4b67      	ldr	r3, [pc, #412]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002ba2:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	0adb      	lsrs	r3, r3, #11
 8002ba8:	2207      	movs	r2, #7
 8002baa:	4013      	ands	r3, r2
 8002bac:	4a68      	ldr	r2, [pc, #416]	; (8002d50 <HAL_RCC_OscConfig+0x340>)
 8002bae:	40da      	lsrs	r2, r3
 8002bb0:	4b68      	ldr	r3, [pc, #416]	; (8002d54 <HAL_RCC_OscConfig+0x344>)
 8002bb2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002bb4:	4b68      	ldr	r3, [pc, #416]	; (8002d58 <HAL_RCC_OscConfig+0x348>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	0018      	movs	r0, r3
 8002bba:	f7ff f9df 	bl	8001f7c <HAL_InitTick>
 8002bbe:	1e03      	subs	r3, r0, #0
 8002bc0:	d051      	beq.n	8002c66 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e221      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d030      	beq.n	8002c30 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002bce:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a5e      	ldr	r2, [pc, #376]	; (8002d4c <HAL_RCC_OscConfig+0x33c>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	0019      	movs	r1, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	691a      	ldr	r2, [r3, #16]
 8002bdc:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002bde:	430a      	orrs	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002be2:	4b56      	ldr	r3, [pc, #344]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	4b55      	ldr	r3, [pc, #340]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002be8:	2180      	movs	r1, #128	; 0x80
 8002bea:	0049      	lsls	r1, r1, #1
 8002bec:	430a      	orrs	r2, r1
 8002bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff fa20 	bl	8002034 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bfa:	f7ff fa1b 	bl	8002034 <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e1fe      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c0c:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	4013      	ands	r3, r2
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c18:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a4a      	ldr	r2, [pc, #296]	; (8002d48 <HAL_RCC_OscConfig+0x338>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	021a      	lsls	r2, r3, #8
 8002c28:	4b44      	ldr	r3, [pc, #272]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c2a:	430a      	orrs	r2, r1
 8002c2c:	605a      	str	r2, [r3, #4]
 8002c2e:	e01b      	b.n	8002c68 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002c30:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c36:	4949      	ldr	r1, [pc, #292]	; (8002d5c <HAL_RCC_OscConfig+0x34c>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7ff f9fa 	bl	8002034 <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c44:	e008      	b.n	8002c58 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c46:	f7ff f9f5 	bl	8002034 <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e1d8      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c58:	4b38      	ldr	r3, [pc, #224]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	4013      	ands	r3, r2
 8002c62:	d1f0      	bne.n	8002c46 <HAL_RCC_OscConfig+0x236>
 8002c64:	e000      	b.n	8002c68 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	4013      	ands	r3, r2
 8002c70:	d047      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c72:	4b32      	ldr	r3, [pc, #200]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2238      	movs	r2, #56	; 0x38
 8002c78:	4013      	ands	r3, r2
 8002c7a:	2b18      	cmp	r3, #24
 8002c7c:	d10a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c7e:	4b2f      	ldr	r3, [pc, #188]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	2202      	movs	r2, #2
 8002c84:	4013      	ands	r3, r2
 8002c86:	d03c      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d138      	bne.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e1ba      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	699b      	ldr	r3, [r3, #24]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d019      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c9c:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002c9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002ca0:	4b26      	ldr	r3, [pc, #152]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca8:	f7ff f9c4 	bl	8002034 <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cb0:	e008      	b.n	8002cc4 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cb2:	f7ff f9bf 	bl	8002034 <HAL_GetTick>
 8002cb6:	0002      	movs	r2, r0
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e1a2      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cc8:	2202      	movs	r2, #2
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d0f1      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x2a2>
 8002cce:	e018      	b.n	8002d02 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002cd0:	4b1a      	ldr	r3, [pc, #104]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002cd2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	438a      	bics	r2, r1
 8002cda:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cdc:	f7ff f9aa 	bl	8002034 <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce6:	f7ff f9a5 	bl	8002034 <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e188      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cf8:	4b10      	ldr	r3, [pc, #64]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	4013      	ands	r3, r2
 8002d00:	d1f1      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d100      	bne.n	8002d0e <HAL_RCC_OscConfig+0x2fe>
 8002d0c:	e0c6      	b.n	8002e9c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d0e:	231f      	movs	r3, #31
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	2200      	movs	r2, #0
 8002d14:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002d16:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	2238      	movs	r2, #56	; 0x38
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b20      	cmp	r3, #32
 8002d20:	d11e      	bne.n	8002d60 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_RCC_OscConfig+0x32c>)
 8002d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d26:	2202      	movs	r2, #2
 8002d28:	4013      	ands	r3, r2
 8002d2a:	d100      	bne.n	8002d2e <HAL_RCC_OscConfig+0x31e>
 8002d2c:	e0b6      	b.n	8002e9c <HAL_RCC_OscConfig+0x48c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d000      	beq.n	8002d38 <HAL_RCC_OscConfig+0x328>
 8002d36:	e0b1      	b.n	8002e9c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e166      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	fffeffff 	.word	0xfffeffff
 8002d44:	fffbffff 	.word	0xfffbffff
 8002d48:	ffff80ff 	.word	0xffff80ff
 8002d4c:	ffffc7ff 	.word	0xffffc7ff
 8002d50:	00f42400 	.word	0x00f42400
 8002d54:	20000000 	.word	0x20000000
 8002d58:	20000034 	.word	0x20000034
 8002d5c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d60:	4bac      	ldr	r3, [pc, #688]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d64:	2380      	movs	r3, #128	; 0x80
 8002d66:	055b      	lsls	r3, r3, #21
 8002d68:	4013      	ands	r3, r2
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_OscConfig+0x360>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x362>
 8002d70:	2300      	movs	r3, #0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d011      	beq.n	8002d9a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4ba7      	ldr	r3, [pc, #668]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002d78:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7a:	4ba6      	ldr	r3, [pc, #664]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002d7c:	2180      	movs	r1, #128	; 0x80
 8002d7e:	0549      	lsls	r1, r1, #21
 8002d80:	430a      	orrs	r2, r1
 8002d82:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d84:	4ba3      	ldr	r3, [pc, #652]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002d86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d88:	2380      	movs	r3, #128	; 0x80
 8002d8a:	055b      	lsls	r3, r3, #21
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	60fb      	str	r3, [r7, #12]
 8002d90:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d92:	231f      	movs	r3, #31
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9a:	4b9f      	ldr	r3, [pc, #636]	; (8003018 <HAL_RCC_OscConfig+0x608>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4013      	ands	r3, r2
 8002da4:	d11a      	bne.n	8002ddc <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002da6:	4b9c      	ldr	r3, [pc, #624]	; (8003018 <HAL_RCC_OscConfig+0x608>)
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	4b9b      	ldr	r3, [pc, #620]	; (8003018 <HAL_RCC_OscConfig+0x608>)
 8002dac:	2180      	movs	r1, #128	; 0x80
 8002dae:	0049      	lsls	r1, r1, #1
 8002db0:	430a      	orrs	r2, r1
 8002db2:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002db4:	f7ff f93e 	bl	8002034 <HAL_GetTick>
 8002db8:	0003      	movs	r3, r0
 8002dba:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7ff f939 	bl	8002034 <HAL_GetTick>
 8002dc2:	0002      	movs	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e11c      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd0:	4b91      	ldr	r3, [pc, #580]	; (8003018 <HAL_RCC_OscConfig+0x608>)
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	2380      	movs	r3, #128	; 0x80
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x3e2>
 8002de4:	4b8b      	ldr	r3, [pc, #556]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002de6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002de8:	4b8a      	ldr	r3, [pc, #552]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	430a      	orrs	r2, r1
 8002dee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002df0:	e01c      	b.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b05      	cmp	r3, #5
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x404>
 8002dfa:	4b86      	ldr	r3, [pc, #536]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002dfc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dfe:	4b85      	ldr	r3, [pc, #532]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e00:	2104      	movs	r1, #4
 8002e02:	430a      	orrs	r2, r1
 8002e04:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e06:	4b83      	ldr	r3, [pc, #524]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e0a:	4b82      	ldr	r3, [pc, #520]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e12:	e00b      	b.n	8002e2c <HAL_RCC_OscConfig+0x41c>
 8002e14:	4b7f      	ldr	r3, [pc, #508]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e18:	4b7e      	ldr	r3, [pc, #504]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e1a:	2101      	movs	r1, #1
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e20:	4b7c      	ldr	r3, [pc, #496]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002e24:	4b7b      	ldr	r3, [pc, #492]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e26:	2104      	movs	r1, #4
 8002e28:	438a      	bics	r2, r1
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d014      	beq.n	8002e5e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e34:	f7ff f8fe 	bl	8002034 <HAL_GetTick>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e3c:	e009      	b.n	8002e52 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e3e:	f7ff f8f9 	bl	8002034 <HAL_GetTick>
 8002e42:	0002      	movs	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	4a74      	ldr	r2, [pc, #464]	; (800301c <HAL_RCC_OscConfig+0x60c>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d901      	bls.n	8002e52 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002e4e:	2303      	movs	r3, #3
 8002e50:	e0db      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e52:	4b70      	ldr	r3, [pc, #448]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e56:	2202      	movs	r2, #2
 8002e58:	4013      	ands	r3, r2
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x42e>
 8002e5c:	e013      	b.n	8002e86 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e5e:	f7ff f8e9 	bl	8002034 <HAL_GetTick>
 8002e62:	0003      	movs	r3, r0
 8002e64:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e66:	e009      	b.n	8002e7c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7ff f8e4 	bl	8002034 <HAL_GetTick>
 8002e6c:	0002      	movs	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	4a6a      	ldr	r2, [pc, #424]	; (800301c <HAL_RCC_OscConfig+0x60c>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0c6      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e7c:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e80:	2202      	movs	r2, #2
 8002e82:	4013      	ands	r3, r2
 8002e84:	d1f0      	bne.n	8002e68 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e86:	231f      	movs	r3, #31
 8002e88:	18fb      	adds	r3, r7, r3
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e90:	4b60      	ldr	r3, [pc, #384]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e94:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002e96:	4962      	ldr	r1, [pc, #392]	; (8003020 <HAL_RCC_OscConfig+0x610>)
 8002e98:	400a      	ands	r2, r1
 8002e9a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d100      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x496>
 8002ea4:	e0b0      	b.n	8003008 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ea6:	4b5b      	ldr	r3, [pc, #364]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2238      	movs	r2, #56	; 0x38
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b10      	cmp	r3, #16
 8002eb0:	d100      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x4a4>
 8002eb2:	e078      	b.n	8002fa6 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	69db      	ldr	r3, [r3, #28]
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d153      	bne.n	8002f64 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebc:	4b55      	ldr	r3, [pc, #340]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	4b54      	ldr	r3, [pc, #336]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002ec2:	4958      	ldr	r1, [pc, #352]	; (8003024 <HAL_RCC_OscConfig+0x614>)
 8002ec4:	400a      	ands	r2, r1
 8002ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7ff f8b4 	bl	8002034 <HAL_GetTick>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed0:	e008      	b.n	8002ee4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed2:	f7ff f8af 	bl	8002034 <HAL_GetTick>
 8002ed6:	0002      	movs	r2, r0
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	1ad3      	subs	r3, r2, r3
 8002edc:	2b02      	cmp	r3, #2
 8002ede:	d901      	bls.n	8002ee4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	e092      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	049b      	lsls	r3, r3, #18
 8002eec:	4013      	ands	r3, r2
 8002eee:	d1f0      	bne.n	8002ed2 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ef0:	4b48      	ldr	r3, [pc, #288]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	4a4c      	ldr	r2, [pc, #304]	; (8003028 <HAL_RCC_OscConfig+0x618>)
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	0019      	movs	r1, r3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1a      	ldr	r2, [r3, #32]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	431a      	orrs	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f08:	021b      	lsls	r3, r3, #8
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f10:	431a      	orrs	r2, r3
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	431a      	orrs	r2, r3
 8002f18:	4b3e      	ldr	r3, [pc, #248]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f1a:	430a      	orrs	r2, r1
 8002f1c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f1e:	4b3d      	ldr	r3, [pc, #244]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	4b3c      	ldr	r3, [pc, #240]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f24:	2180      	movs	r1, #128	; 0x80
 8002f26:	0449      	lsls	r1, r1, #17
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002f2c:	4b39      	ldr	r3, [pc, #228]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f2e:	68da      	ldr	r2, [r3, #12]
 8002f30:	4b38      	ldr	r3, [pc, #224]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	0549      	lsls	r1, r1, #21
 8002f36:	430a      	orrs	r2, r1
 8002f38:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7ff f87b 	bl	8002034 <HAL_GetTick>
 8002f3e:	0003      	movs	r3, r0
 8002f40:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f44:	f7ff f876 	bl	8002034 <HAL_GetTick>
 8002f48:	0002      	movs	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e059      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f56:	4b2f      	ldr	r3, [pc, #188]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	2380      	movs	r3, #128	; 0x80
 8002f5c:	049b      	lsls	r3, r3, #18
 8002f5e:	4013      	ands	r3, r2
 8002f60:	d0f0      	beq.n	8002f44 <HAL_RCC_OscConfig+0x534>
 8002f62:	e051      	b.n	8003008 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f64:	4b2b      	ldr	r3, [pc, #172]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	4b2a      	ldr	r3, [pc, #168]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f6a:	492e      	ldr	r1, [pc, #184]	; (8003024 <HAL_RCC_OscConfig+0x614>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7ff f860 	bl	8002034 <HAL_GetTick>
 8002f74:	0003      	movs	r3, r0
 8002f76:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f78:	e008      	b.n	8002f8c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f7a:	f7ff f85b 	bl	8002034 <HAL_GetTick>
 8002f7e:	0002      	movs	r2, r0
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e03e      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f8c:	4b21      	ldr	r3, [pc, #132]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	; 0x80
 8002f92:	049b      	lsls	r3, r3, #18
 8002f94:	4013      	ands	r3, r2
 8002f96:	d1f0      	bne.n	8002f7a <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002f98:	4b1e      	ldr	r3, [pc, #120]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002f9e:	4923      	ldr	r1, [pc, #140]	; (800302c <HAL_RCC_OscConfig+0x61c>)
 8002fa0:	400a      	ands	r2, r1
 8002fa2:	60da      	str	r2, [r3, #12]
 8002fa4:	e030      	b.n	8003008 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e02b      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_RCC_OscConfig+0x604>)
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	2203      	movs	r2, #3
 8002fbc:	401a      	ands	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d11e      	bne.n	8003004 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	2270      	movs	r2, #112	; 0x70
 8002fca:	401a      	ands	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d117      	bne.n	8003004 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	23fe      	movs	r3, #254	; 0xfe
 8002fd8:	01db      	lsls	r3, r3, #7
 8002fda:	401a      	ands	r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d10e      	bne.n	8003004 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fe6:	697a      	ldr	r2, [r7, #20]
 8002fe8:	23f8      	movs	r3, #248	; 0xf8
 8002fea:	039b      	lsls	r3, r3, #14
 8002fec:	401a      	ands	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d106      	bne.n	8003004 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	0f5b      	lsrs	r3, r3, #29
 8002ffa:	075a      	lsls	r2, r3, #29
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d001      	beq.n	8003008 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e000      	b.n	800300a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	0018      	movs	r0, r3
 800300c:	46bd      	mov	sp, r7
 800300e:	b008      	add	sp, #32
 8003010:	bd80      	pop	{r7, pc}
 8003012:	46c0      	nop			; (mov r8, r8)
 8003014:	40021000 	.word	0x40021000
 8003018:	40007000 	.word	0x40007000
 800301c:	00001388 	.word	0x00001388
 8003020:	efffffff 	.word	0xefffffff
 8003024:	feffffff 	.word	0xfeffffff
 8003028:	1fc1808c 	.word	0x1fc1808c
 800302c:	effefffc 	.word	0xeffefffc

08003030 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d101      	bne.n	8003044 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e0e9      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003044:	4b76      	ldr	r3, [pc, #472]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2207      	movs	r2, #7
 800304a:	4013      	ands	r3, r2
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	429a      	cmp	r2, r3
 8003050:	d91e      	bls.n	8003090 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003052:	4b73      	ldr	r3, [pc, #460]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2207      	movs	r2, #7
 8003058:	4393      	bics	r3, r2
 800305a:	0019      	movs	r1, r3
 800305c:	4b70      	ldr	r3, [pc, #448]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	430a      	orrs	r2, r1
 8003062:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003064:	f7fe ffe6 	bl	8002034 <HAL_GetTick>
 8003068:	0003      	movs	r3, r0
 800306a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800306c:	e009      	b.n	8003082 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800306e:	f7fe ffe1 	bl	8002034 <HAL_GetTick>
 8003072:	0002      	movs	r2, r0
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <HAL_RCC_ClockConfig+0x1f4>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e0ca      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003082:	4b67      	ldr	r3, [pc, #412]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2207      	movs	r2, #7
 8003088:	4013      	ands	r3, r2
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d1ee      	bne.n	800306e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2202      	movs	r2, #2
 8003096:	4013      	ands	r3, r2
 8003098:	d015      	beq.n	80030c6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2204      	movs	r2, #4
 80030a0:	4013      	ands	r3, r2
 80030a2:	d006      	beq.n	80030b2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80030a4:	4b60      	ldr	r3, [pc, #384]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	4b5f      	ldr	r3, [pc, #380]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80030aa:	21e0      	movs	r1, #224	; 0xe0
 80030ac:	01c9      	lsls	r1, r1, #7
 80030ae:	430a      	orrs	r2, r1
 80030b0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b2:	4b5d      	ldr	r3, [pc, #372]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4a5d      	ldr	r2, [pc, #372]	; (800322c <HAL_RCC_ClockConfig+0x1fc>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	0019      	movs	r1, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	4b59      	ldr	r3, [pc, #356]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80030c2:	430a      	orrs	r2, r1
 80030c4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	4013      	ands	r3, r2
 80030ce:	d057      	beq.n	8003180 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d107      	bne.n	80030e8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030d8:	4b53      	ldr	r3, [pc, #332]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	2380      	movs	r3, #128	; 0x80
 80030de:	029b      	lsls	r3, r3, #10
 80030e0:	4013      	ands	r3, r2
 80030e2:	d12b      	bne.n	800313c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e097      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d107      	bne.n	8003100 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030f0:	4b4d      	ldr	r3, [pc, #308]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	049b      	lsls	r3, r3, #18
 80030f8:	4013      	ands	r3, r2
 80030fa:	d11f      	bne.n	800313c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e08b      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003108:	4b47      	ldr	r3, [pc, #284]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	2380      	movs	r3, #128	; 0x80
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	4013      	ands	r3, r2
 8003112:	d113      	bne.n	800313c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e07f      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d106      	bne.n	800312e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003120:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 8003122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003124:	2202      	movs	r2, #2
 8003126:	4013      	ands	r3, r2
 8003128:	d108      	bne.n	800313c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e074      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800312e:	4b3e      	ldr	r3, [pc, #248]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 8003130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003132:	2202      	movs	r2, #2
 8003134:	4013      	ands	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e06d      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800313c:	4b3a      	ldr	r3, [pc, #232]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2207      	movs	r2, #7
 8003142:	4393      	bics	r3, r2
 8003144:	0019      	movs	r1, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	4b37      	ldr	r3, [pc, #220]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003150:	f7fe ff70 	bl	8002034 <HAL_GetTick>
 8003154:	0003      	movs	r3, r0
 8003156:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003158:	e009      	b.n	800316e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800315a:	f7fe ff6b 	bl	8002034 <HAL_GetTick>
 800315e:	0002      	movs	r2, r0
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	4a2f      	ldr	r2, [pc, #188]	; (8003224 <HAL_RCC_ClockConfig+0x1f4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e054      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800316e:	4b2e      	ldr	r3, [pc, #184]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	2238      	movs	r2, #56	; 0x38
 8003174:	401a      	ands	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	429a      	cmp	r2, r3
 800317e:	d1ec      	bne.n	800315a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003180:	4b27      	ldr	r3, [pc, #156]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2207      	movs	r2, #7
 8003186:	4013      	ands	r3, r2
 8003188:	683a      	ldr	r2, [r7, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d21e      	bcs.n	80031cc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800318e:	4b24      	ldr	r3, [pc, #144]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2207      	movs	r2, #7
 8003194:	4393      	bics	r3, r2
 8003196:	0019      	movs	r1, r3
 8003198:	4b21      	ldr	r3, [pc, #132]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80031a0:	f7fe ff48 	bl	8002034 <HAL_GetTick>
 80031a4:	0003      	movs	r3, r0
 80031a6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031a8:	e009      	b.n	80031be <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031aa:	f7fe ff43 	bl	8002034 <HAL_GetTick>
 80031ae:	0002      	movs	r2, r0
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <HAL_RCC_ClockConfig+0x1f4>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d901      	bls.n	80031be <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80031ba:	2303      	movs	r3, #3
 80031bc:	e02c      	b.n	8003218 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80031be:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_RCC_ClockConfig+0x1f0>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2207      	movs	r2, #7
 80031c4:	4013      	ands	r3, r2
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2204      	movs	r2, #4
 80031d2:	4013      	ands	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80031d6:	4b14      	ldr	r3, [pc, #80]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <HAL_RCC_ClockConfig+0x200>)
 80031dc:	4013      	ands	r3, r2
 80031de:	0019      	movs	r1, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	68da      	ldr	r2, [r3, #12]
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80031e6:	430a      	orrs	r2, r1
 80031e8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80031ea:	f000 f829 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80031ee:	0001      	movs	r1, r0
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <HAL_RCC_ClockConfig+0x1f8>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	0a1b      	lsrs	r3, r3, #8
 80031f6:	220f      	movs	r2, #15
 80031f8:	401a      	ands	r2, r3
 80031fa:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_RCC_ClockConfig+0x204>)
 80031fc:	0092      	lsls	r2, r2, #2
 80031fe:	58d3      	ldr	r3, [r2, r3]
 8003200:	221f      	movs	r2, #31
 8003202:	4013      	ands	r3, r2
 8003204:	000a      	movs	r2, r1
 8003206:	40da      	lsrs	r2, r3
 8003208:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <HAL_RCC_ClockConfig+0x208>)
 800320a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_ClockConfig+0x20c>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0018      	movs	r0, r3
 8003212:	f7fe feb3 	bl	8001f7c <HAL_InitTick>
 8003216:	0003      	movs	r3, r0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b004      	add	sp, #16
 800321e:	bd80      	pop	{r7, pc}
 8003220:	40022000 	.word	0x40022000
 8003224:	00001388 	.word	0x00001388
 8003228:	40021000 	.word	0x40021000
 800322c:	fffff0ff 	.word	0xfffff0ff
 8003230:	ffff8fff 	.word	0xffff8fff
 8003234:	08007f1c 	.word	0x08007f1c
 8003238:	20000000 	.word	0x20000000
 800323c:	20000034 	.word	0x20000034

08003240 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003246:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	2238      	movs	r2, #56	; 0x38
 800324c:	4013      	ands	r3, r2
 800324e:	d10f      	bne.n	8003270 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003250:	4b39      	ldr	r3, [pc, #228]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	0adb      	lsrs	r3, r3, #11
 8003256:	2207      	movs	r2, #7
 8003258:	4013      	ands	r3, r2
 800325a:	2201      	movs	r2, #1
 800325c:	409a      	lsls	r2, r3
 800325e:	0013      	movs	r3, r2
 8003260:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003262:	6839      	ldr	r1, [r7, #0]
 8003264:	4835      	ldr	r0, [pc, #212]	; (800333c <HAL_RCC_GetSysClockFreq+0xfc>)
 8003266:	f7fc ff57 	bl	8000118 <__udivsi3>
 800326a:	0003      	movs	r3, r0
 800326c:	613b      	str	r3, [r7, #16]
 800326e:	e05d      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003270:	4b31      	ldr	r3, [pc, #196]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2238      	movs	r2, #56	; 0x38
 8003276:	4013      	ands	r3, r2
 8003278:	2b08      	cmp	r3, #8
 800327a:	d102      	bne.n	8003282 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800327c:	4b2f      	ldr	r3, [pc, #188]	; (800333c <HAL_RCC_GetSysClockFreq+0xfc>)
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e054      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003282:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2238      	movs	r2, #56	; 0x38
 8003288:	4013      	ands	r3, r2
 800328a:	2b10      	cmp	r3, #16
 800328c:	d138      	bne.n	8003300 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800328e:	4b2a      	ldr	r3, [pc, #168]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2203      	movs	r2, #3
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003298:	4b27      	ldr	r3, [pc, #156]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	091b      	lsrs	r3, r3, #4
 800329e:	2207      	movs	r2, #7
 80032a0:	4013      	ands	r3, r2
 80032a2:	3301      	adds	r3, #1
 80032a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d10d      	bne.n	80032c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80032ac:	68b9      	ldr	r1, [r7, #8]
 80032ae:	4823      	ldr	r0, [pc, #140]	; (800333c <HAL_RCC_GetSysClockFreq+0xfc>)
 80032b0:	f7fc ff32 	bl	8000118 <__udivsi3>
 80032b4:	0003      	movs	r3, r0
 80032b6:	0019      	movs	r1, r3
 80032b8:	4b1f      	ldr	r3, [pc, #124]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	0a1b      	lsrs	r3, r3, #8
 80032be:	227f      	movs	r2, #127	; 0x7f
 80032c0:	4013      	ands	r3, r2
 80032c2:	434b      	muls	r3, r1
 80032c4:	617b      	str	r3, [r7, #20]
        break;
 80032c6:	e00d      	b.n	80032e4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80032c8:	68b9      	ldr	r1, [r7, #8]
 80032ca:	481c      	ldr	r0, [pc, #112]	; (800333c <HAL_RCC_GetSysClockFreq+0xfc>)
 80032cc:	f7fc ff24 	bl	8000118 <__udivsi3>
 80032d0:	0003      	movs	r3, r0
 80032d2:	0019      	movs	r1, r3
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	0a1b      	lsrs	r3, r3, #8
 80032da:	227f      	movs	r2, #127	; 0x7f
 80032dc:	4013      	ands	r3, r2
 80032de:	434b      	muls	r3, r1
 80032e0:	617b      	str	r3, [r7, #20]
        break;
 80032e2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80032e4:	4b14      	ldr	r3, [pc, #80]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	0f5b      	lsrs	r3, r3, #29
 80032ea:	2207      	movs	r2, #7
 80032ec:	4013      	ands	r3, r2
 80032ee:	3301      	adds	r3, #1
 80032f0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	6978      	ldr	r0, [r7, #20]
 80032f6:	f7fc ff0f 	bl	8000118 <__udivsi3>
 80032fa:	0003      	movs	r3, r0
 80032fc:	613b      	str	r3, [r7, #16]
 80032fe:	e015      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003300:	4b0d      	ldr	r3, [pc, #52]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2238      	movs	r2, #56	; 0x38
 8003306:	4013      	ands	r3, r2
 8003308:	2b20      	cmp	r3, #32
 800330a:	d103      	bne.n	8003314 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	021b      	lsls	r3, r3, #8
 8003310:	613b      	str	r3, [r7, #16]
 8003312:	e00b      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2238      	movs	r2, #56	; 0x38
 800331a:	4013      	ands	r3, r2
 800331c:	2b18      	cmp	r3, #24
 800331e:	d103      	bne.n	8003328 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003320:	23fa      	movs	r3, #250	; 0xfa
 8003322:	01db      	lsls	r3, r3, #7
 8003324:	613b      	str	r3, [r7, #16]
 8003326:	e001      	b.n	800332c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800332c:	693b      	ldr	r3, [r7, #16]
}
 800332e:	0018      	movs	r0, r3
 8003330:	46bd      	mov	sp, r7
 8003332:	b006      	add	sp, #24
 8003334:	bd80      	pop	{r7, pc}
 8003336:	46c0      	nop			; (mov r8, r8)
 8003338:	40021000 	.word	0x40021000
 800333c:	00f42400 	.word	0x00f42400

08003340 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003344:	4b02      	ldr	r3, [pc, #8]	; (8003350 <HAL_RCC_GetHCLKFreq+0x10>)
 8003346:	681b      	ldr	r3, [r3, #0]
}
 8003348:	0018      	movs	r0, r3
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	46c0      	nop			; (mov r8, r8)
 8003350:	20000000 	.word	0x20000000

08003354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003358:	f7ff fff2 	bl	8003340 <HAL_RCC_GetHCLKFreq>
 800335c:	0004      	movs	r4, r0
 800335e:	f7ff fb4b 	bl	80029f8 <LL_RCC_GetAPB1Prescaler>
 8003362:	0003      	movs	r3, r0
 8003364:	0b1a      	lsrs	r2, r3, #12
 8003366:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003368:	0092      	lsls	r2, r2, #2
 800336a:	58d3      	ldr	r3, [r2, r3]
 800336c:	221f      	movs	r2, #31
 800336e:	4013      	ands	r3, r2
 8003370:	40dc      	lsrs	r4, r3
 8003372:	0023      	movs	r3, r4
}
 8003374:	0018      	movs	r0, r3
 8003376:	46bd      	mov	sp, r7
 8003378:	bdb0      	pop	{r4, r5, r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	08007f5c 	.word	0x08007f5c

08003380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003388:	2313      	movs	r3, #19
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	2200      	movs	r2, #0
 800338e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003390:	2312      	movs	r3, #18
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	029b      	lsls	r3, r3, #10
 80033a0:	4013      	ands	r3, r2
 80033a2:	d100      	bne.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80033a4:	e0a3      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a6:	2011      	movs	r0, #17
 80033a8:	183b      	adds	r3, r7, r0
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033ae:	4b86      	ldr	r3, [pc, #536]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033b2:	2380      	movs	r3, #128	; 0x80
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	4013      	ands	r3, r2
 80033b8:	d110      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	4b83      	ldr	r3, [pc, #524]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033be:	4b82      	ldr	r3, [pc, #520]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033c0:	2180      	movs	r1, #128	; 0x80
 80033c2:	0549      	lsls	r1, r1, #21
 80033c4:	430a      	orrs	r2, r1
 80033c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80033c8:	4b7f      	ldr	r3, [pc, #508]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033cc:	2380      	movs	r3, #128	; 0x80
 80033ce:	055b      	lsls	r3, r3, #21
 80033d0:	4013      	ands	r3, r2
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d6:	183b      	adds	r3, r7, r0
 80033d8:	2201      	movs	r2, #1
 80033da:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033dc:	4b7b      	ldr	r3, [pc, #492]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	4b7a      	ldr	r3, [pc, #488]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033e2:	2180      	movs	r1, #128	; 0x80
 80033e4:	0049      	lsls	r1, r1, #1
 80033e6:	430a      	orrs	r2, r1
 80033e8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033ea:	f7fe fe23 	bl	8002034 <HAL_GetTick>
 80033ee:	0003      	movs	r3, r0
 80033f0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033f2:	e00b      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033f4:	f7fe fe1e 	bl	8002034 <HAL_GetTick>
 80033f8:	0002      	movs	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d904      	bls.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003402:	2313      	movs	r3, #19
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	2203      	movs	r2, #3
 8003408:	701a      	strb	r2, [r3, #0]
        break;
 800340a:	e005      	b.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800340c:	4b6f      	ldr	r3, [pc, #444]	; (80035cc <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	; 0x80
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4013      	ands	r3, r2
 8003416:	d0ed      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003418:	2313      	movs	r3, #19
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d154      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003422:	4b69      	ldr	r3, [pc, #420]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003426:	23c0      	movs	r3, #192	; 0xc0
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	4013      	ands	r3, r2
 800342c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d019      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	429a      	cmp	r2, r3
 800343c:	d014      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800343e:	4b62      	ldr	r3, [pc, #392]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003442:	4a63      	ldr	r2, [pc, #396]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8003444:	4013      	ands	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003448:	4b5f      	ldr	r3, [pc, #380]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800344a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800344e:	2180      	movs	r1, #128	; 0x80
 8003450:	0249      	lsls	r1, r1, #9
 8003452:	430a      	orrs	r2, r1
 8003454:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003456:	4b5c      	ldr	r3, [pc, #368]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003458:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800345a:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800345c:	495d      	ldr	r1, [pc, #372]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800345e:	400a      	ands	r2, r1
 8003460:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003462:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	2201      	movs	r2, #1
 800346c:	4013      	ands	r3, r2
 800346e:	d016      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe fde0 	bl	8002034 <HAL_GetTick>
 8003474:	0003      	movs	r3, r0
 8003476:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003478:	e00c      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800347a:	f7fe fddb 	bl	8002034 <HAL_GetTick>
 800347e:	0002      	movs	r2, r0
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	4a54      	ldr	r2, [pc, #336]	; (80035d8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d904      	bls.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800348a:	2313      	movs	r3, #19
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2203      	movs	r2, #3
 8003490:	701a      	strb	r2, [r3, #0]
            break;
 8003492:	e004      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003494:	4b4c      	ldr	r3, [pc, #304]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003498:	2202      	movs	r2, #2
 800349a:	4013      	ands	r3, r2
 800349c:	d0ed      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800349e:	2313      	movs	r3, #19
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10a      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a8:	4b47      	ldr	r3, [pc, #284]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ac:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80034ae:	4013      	ands	r3, r2
 80034b0:	0019      	movs	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	699a      	ldr	r2, [r3, #24]
 80034b6:	4b44      	ldr	r3, [pc, #272]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034b8:	430a      	orrs	r2, r1
 80034ba:	65da      	str	r2, [r3, #92]	; 0x5c
 80034bc:	e00c      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034be:	2312      	movs	r3, #18
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	2213      	movs	r2, #19
 80034c4:	18ba      	adds	r2, r7, r2
 80034c6:	7812      	ldrb	r2, [r2, #0]
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	e005      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034cc:	2312      	movs	r3, #18
 80034ce:	18fb      	adds	r3, r7, r3
 80034d0:	2213      	movs	r2, #19
 80034d2:	18ba      	adds	r2, r7, r2
 80034d4:	7812      	ldrb	r2, [r2, #0]
 80034d6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034d8:	2311      	movs	r3, #17
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d105      	bne.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e2:	4b39      	ldr	r3, [pc, #228]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e6:	4b38      	ldr	r3, [pc, #224]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034e8:	493c      	ldr	r1, [pc, #240]	; (80035dc <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80034ea:	400a      	ands	r2, r1
 80034ec:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2201      	movs	r2, #1
 80034f4:	4013      	ands	r3, r2
 80034f6:	d009      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f8:	4b33      	ldr	r3, [pc, #204]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	2203      	movs	r2, #3
 80034fe:	4393      	bics	r3, r2
 8003500:	0019      	movs	r1, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	4b30      	ldr	r3, [pc, #192]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003508:	430a      	orrs	r2, r1
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2202      	movs	r2, #2
 8003512:	4013      	ands	r3, r2
 8003514:	d009      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003516:	4b2c      	ldr	r3, [pc, #176]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	220c      	movs	r2, #12
 800351c:	4393      	bics	r3, r2
 800351e:	0019      	movs	r1, r3
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	4b28      	ldr	r3, [pc, #160]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003526:	430a      	orrs	r2, r1
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2220      	movs	r2, #32
 8003530:	4013      	ands	r3, r2
 8003532:	d009      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	4013      	ands	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	4b21      	ldr	r3, [pc, #132]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003544:	430a      	orrs	r2, r1
 8003546:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	2380      	movs	r3, #128	; 0x80
 800354e:	01db      	lsls	r3, r3, #7
 8003550:	4013      	ands	r3, r2
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003554:	4b1c      	ldr	r3, [pc, #112]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	0899      	lsrs	r1, r3, #2
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	695a      	ldr	r2, [r3, #20]
 8003560:	4b19      	ldr	r3, [pc, #100]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003562:	430a      	orrs	r2, r1
 8003564:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	2380      	movs	r3, #128	; 0x80
 800356c:	05db      	lsls	r3, r3, #23
 800356e:	429a      	cmp	r2, r3
 8003570:	d106      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	4b14      	ldr	r3, [pc, #80]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	0249      	lsls	r1, r1, #9
 800357c:	430a      	orrs	r2, r1
 800357e:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	2380      	movs	r3, #128	; 0x80
 8003586:	011b      	lsls	r3, r3, #4
 8003588:	4013      	ands	r3, r2
 800358a:	d016      	beq.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800358c:	4b0e      	ldr	r3, [pc, #56]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800358e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003590:	4a14      	ldr	r2, [pc, #80]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003592:	4013      	ands	r3, r2
 8003594:	0019      	movs	r1, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	691a      	ldr	r2, [r3, #16]
 800359a:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800359c:	430a      	orrs	r2, r1
 800359e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	01db      	lsls	r3, r3, #7
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d106      	bne.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80035ac:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035ae:	68da      	ldr	r2, [r3, #12]
 80035b0:	4b05      	ldr	r3, [pc, #20]	; (80035c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035b2:	2180      	movs	r1, #128	; 0x80
 80035b4:	0249      	lsls	r1, r1, #9
 80035b6:	430a      	orrs	r2, r1
 80035b8:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80035ba:	2312      	movs	r3, #18
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	781b      	ldrb	r3, [r3, #0]
}
 80035c0:	0018      	movs	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	b006      	add	sp, #24
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40007000 	.word	0x40007000
 80035d0:	fffffcff 	.word	0xfffffcff
 80035d4:	fffeffff 	.word	0xfffeffff
 80035d8:	00001388 	.word	0x00001388
 80035dc:	efffffff 	.word	0xefffffff
 80035e0:	ffffcfff 	.word	0xffffcfff
 80035e4:	ffff3fff 	.word	0xffff3fff

080035e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e04a      	b.n	8003690 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	223d      	movs	r2, #61	; 0x3d
 80035fe:	5c9b      	ldrb	r3, [r3, r2]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d107      	bne.n	8003616 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	223c      	movs	r2, #60	; 0x3c
 800360a:	2100      	movs	r1, #0
 800360c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0018      	movs	r0, r3
 8003612:	f7fd fd89 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	223d      	movs	r2, #61	; 0x3d
 800361a:	2102      	movs	r1, #2
 800361c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	3304      	adds	r3, #4
 8003626:	0019      	movs	r1, r3
 8003628:	0010      	movs	r0, r2
 800362a:	f000 fb19 	bl	8003c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2248      	movs	r2, #72	; 0x48
 8003632:	2101      	movs	r1, #1
 8003634:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	223e      	movs	r2, #62	; 0x3e
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	223f      	movs	r2, #63	; 0x3f
 8003642:	2101      	movs	r1, #1
 8003644:	5499      	strb	r1, [r3, r2]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2240      	movs	r2, #64	; 0x40
 800364a:	2101      	movs	r1, #1
 800364c:	5499      	strb	r1, [r3, r2]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2241      	movs	r2, #65	; 0x41
 8003652:	2101      	movs	r1, #1
 8003654:	5499      	strb	r1, [r3, r2]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2242      	movs	r2, #66	; 0x42
 800365a:	2101      	movs	r1, #1
 800365c:	5499      	strb	r1, [r3, r2]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2243      	movs	r2, #67	; 0x43
 8003662:	2101      	movs	r1, #1
 8003664:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2244      	movs	r2, #68	; 0x44
 800366a:	2101      	movs	r1, #1
 800366c:	5499      	strb	r1, [r3, r2]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2245      	movs	r2, #69	; 0x45
 8003672:	2101      	movs	r1, #1
 8003674:	5499      	strb	r1, [r3, r2]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2246      	movs	r2, #70	; 0x46
 800367a:	2101      	movs	r1, #1
 800367c:	5499      	strb	r1, [r3, r2]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2247      	movs	r2, #71	; 0x47
 8003682:	2101      	movs	r1, #1
 8003684:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	223d      	movs	r2, #61	; 0x3d
 800368a:	2101      	movs	r1, #1
 800368c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	0018      	movs	r0, r3
 8003692:	46bd      	mov	sp, r7
 8003694:	b002      	add	sp, #8
 8003696:	bd80      	pop	{r7, pc}

08003698 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e04a      	b.n	8003740 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	223d      	movs	r2, #61	; 0x3d
 80036ae:	5c9b      	ldrb	r3, [r3, r2]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d107      	bne.n	80036c6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	223c      	movs	r2, #60	; 0x3c
 80036ba:	2100      	movs	r1, #0
 80036bc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	0018      	movs	r0, r3
 80036c2:	f7fd fda5 	bl	8001210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	223d      	movs	r2, #61	; 0x3d
 80036ca:	2102      	movs	r1, #2
 80036cc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	3304      	adds	r3, #4
 80036d6:	0019      	movs	r1, r3
 80036d8:	0010      	movs	r0, r2
 80036da:	f000 fac1 	bl	8003c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2248      	movs	r2, #72	; 0x48
 80036e2:	2101      	movs	r1, #1
 80036e4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	223e      	movs	r2, #62	; 0x3e
 80036ea:	2101      	movs	r1, #1
 80036ec:	5499      	strb	r1, [r3, r2]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	223f      	movs	r2, #63	; 0x3f
 80036f2:	2101      	movs	r1, #1
 80036f4:	5499      	strb	r1, [r3, r2]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2240      	movs	r2, #64	; 0x40
 80036fa:	2101      	movs	r1, #1
 80036fc:	5499      	strb	r1, [r3, r2]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2241      	movs	r2, #65	; 0x41
 8003702:	2101      	movs	r1, #1
 8003704:	5499      	strb	r1, [r3, r2]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2242      	movs	r2, #66	; 0x42
 800370a:	2101      	movs	r1, #1
 800370c:	5499      	strb	r1, [r3, r2]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2243      	movs	r2, #67	; 0x43
 8003712:	2101      	movs	r1, #1
 8003714:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2244      	movs	r2, #68	; 0x44
 800371a:	2101      	movs	r1, #1
 800371c:	5499      	strb	r1, [r3, r2]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2245      	movs	r2, #69	; 0x45
 8003722:	2101      	movs	r1, #1
 8003724:	5499      	strb	r1, [r3, r2]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2246      	movs	r2, #70	; 0x46
 800372a:	2101      	movs	r1, #1
 800372c:	5499      	strb	r1, [r3, r2]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2247      	movs	r2, #71	; 0x47
 8003732:	2101      	movs	r1, #1
 8003734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	223d      	movs	r2, #61	; 0x3d
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	0018      	movs	r0, r3
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d108      	bne.n	800376a <HAL_TIM_PWM_Start+0x22>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	223e      	movs	r2, #62	; 0x3e
 800375c:	5c9b      	ldrb	r3, [r3, r2]
 800375e:	b2db      	uxtb	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	1e5a      	subs	r2, r3, #1
 8003764:	4193      	sbcs	r3, r2
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e037      	b.n	80037da <HAL_TIM_PWM_Start+0x92>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b04      	cmp	r3, #4
 800376e:	d108      	bne.n	8003782 <HAL_TIM_PWM_Start+0x3a>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	223f      	movs	r2, #63	; 0x3f
 8003774:	5c9b      	ldrb	r3, [r3, r2]
 8003776:	b2db      	uxtb	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	1e5a      	subs	r2, r3, #1
 800377c:	4193      	sbcs	r3, r2
 800377e:	b2db      	uxtb	r3, r3
 8003780:	e02b      	b.n	80037da <HAL_TIM_PWM_Start+0x92>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d108      	bne.n	800379a <HAL_TIM_PWM_Start+0x52>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2240      	movs	r2, #64	; 0x40
 800378c:	5c9b      	ldrb	r3, [r3, r2]
 800378e:	b2db      	uxtb	r3, r3
 8003790:	3b01      	subs	r3, #1
 8003792:	1e5a      	subs	r2, r3, #1
 8003794:	4193      	sbcs	r3, r2
 8003796:	b2db      	uxtb	r3, r3
 8003798:	e01f      	b.n	80037da <HAL_TIM_PWM_Start+0x92>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b0c      	cmp	r3, #12
 800379e:	d108      	bne.n	80037b2 <HAL_TIM_PWM_Start+0x6a>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2241      	movs	r2, #65	; 0x41
 80037a4:	5c9b      	ldrb	r3, [r3, r2]
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	1e5a      	subs	r2, r3, #1
 80037ac:	4193      	sbcs	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	e013      	b.n	80037da <HAL_TIM_PWM_Start+0x92>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b10      	cmp	r3, #16
 80037b6:	d108      	bne.n	80037ca <HAL_TIM_PWM_Start+0x82>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2242      	movs	r2, #66	; 0x42
 80037bc:	5c9b      	ldrb	r3, [r3, r2]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	3b01      	subs	r3, #1
 80037c2:	1e5a      	subs	r2, r3, #1
 80037c4:	4193      	sbcs	r3, r2
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	e007      	b.n	80037da <HAL_TIM_PWM_Start+0x92>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2243      	movs	r2, #67	; 0x43
 80037ce:	5c9b      	ldrb	r3, [r3, r2]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	1e5a      	subs	r2, r3, #1
 80037d6:	4193      	sbcs	r3, r2
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d001      	beq.n	80037e2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e085      	b.n	80038ee <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Start+0xaa>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	223e      	movs	r2, #62	; 0x3e
 80037ec:	2102      	movs	r1, #2
 80037ee:	5499      	strb	r1, [r3, r2]
 80037f0:	e023      	b.n	800383a <HAL_TIM_PWM_Start+0xf2>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Start+0xba>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	223f      	movs	r2, #63	; 0x3f
 80037fc:	2102      	movs	r1, #2
 80037fe:	5499      	strb	r1, [r3, r2]
 8003800:	e01b      	b.n	800383a <HAL_TIM_PWM_Start+0xf2>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	2b08      	cmp	r3, #8
 8003806:	d104      	bne.n	8003812 <HAL_TIM_PWM_Start+0xca>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2240      	movs	r2, #64	; 0x40
 800380c:	2102      	movs	r1, #2
 800380e:	5499      	strb	r1, [r3, r2]
 8003810:	e013      	b.n	800383a <HAL_TIM_PWM_Start+0xf2>
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	2b0c      	cmp	r3, #12
 8003816:	d104      	bne.n	8003822 <HAL_TIM_PWM_Start+0xda>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2241      	movs	r2, #65	; 0x41
 800381c:	2102      	movs	r1, #2
 800381e:	5499      	strb	r1, [r3, r2]
 8003820:	e00b      	b.n	800383a <HAL_TIM_PWM_Start+0xf2>
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	2b10      	cmp	r3, #16
 8003826:	d104      	bne.n	8003832 <HAL_TIM_PWM_Start+0xea>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2242      	movs	r2, #66	; 0x42
 800382c:	2102      	movs	r1, #2
 800382e:	5499      	strb	r1, [r3, r2]
 8003830:	e003      	b.n	800383a <HAL_TIM_PWM_Start+0xf2>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2243      	movs	r2, #67	; 0x43
 8003836:	2102      	movs	r1, #2
 8003838:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6839      	ldr	r1, [r7, #0]
 8003840:	2201      	movs	r2, #1
 8003842:	0018      	movs	r0, r3
 8003844:	f000 fd46 	bl	80042d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a2a      	ldr	r2, [pc, #168]	; (80038f8 <HAL_TIM_PWM_Start+0x1b0>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d00e      	beq.n	8003870 <HAL_TIM_PWM_Start+0x128>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a29      	ldr	r2, [pc, #164]	; (80038fc <HAL_TIM_PWM_Start+0x1b4>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d009      	beq.n	8003870 <HAL_TIM_PWM_Start+0x128>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a27      	ldr	r2, [pc, #156]	; (8003900 <HAL_TIM_PWM_Start+0x1b8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d004      	beq.n	8003870 <HAL_TIM_PWM_Start+0x128>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a26      	ldr	r2, [pc, #152]	; (8003904 <HAL_TIM_PWM_Start+0x1bc>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d101      	bne.n	8003874 <HAL_TIM_PWM_Start+0x12c>
 8003870:	2301      	movs	r3, #1
 8003872:	e000      	b.n	8003876 <HAL_TIM_PWM_Start+0x12e>
 8003874:	2300      	movs	r3, #0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	0209      	lsls	r1, r1, #8
 8003888:	430a      	orrs	r2, r1
 800388a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a19      	ldr	r2, [pc, #100]	; (80038f8 <HAL_TIM_PWM_Start+0x1b0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d009      	beq.n	80038aa <HAL_TIM_PWM_Start+0x162>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a1b      	ldr	r2, [pc, #108]	; (8003908 <HAL_TIM_PWM_Start+0x1c0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d004      	beq.n	80038aa <HAL_TIM_PWM_Start+0x162>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a15      	ldr	r2, [pc, #84]	; (80038fc <HAL_TIM_PWM_Start+0x1b4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d116      	bne.n	80038d8 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <HAL_TIM_PWM_Start+0x1c4>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b06      	cmp	r3, #6
 80038ba:	d016      	beq.n	80038ea <HAL_TIM_PWM_Start+0x1a2>
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	2380      	movs	r3, #128	; 0x80
 80038c0:	025b      	lsls	r3, r3, #9
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d011      	beq.n	80038ea <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2101      	movs	r1, #1
 80038d2:	430a      	orrs	r2, r1
 80038d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d6:	e008      	b.n	80038ea <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2101      	movs	r1, #1
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	e000      	b.n	80038ec <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	0018      	movs	r0, r3
 80038f0:	46bd      	mov	sp, r7
 80038f2:	b004      	add	sp, #16
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	46c0      	nop			; (mov r8, r8)
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40014000 	.word	0x40014000
 8003900:	40014400 	.word	0x40014400
 8003904:	40014800 	.word	0x40014800
 8003908:	40000400 	.word	0x40000400
 800390c:	00010007 	.word	0x00010007

08003910 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d101      	bne.n	8003924 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e090      	b.n	8003a46 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	223d      	movs	r2, #61	; 0x3d
 8003928:	5c9b      	ldrb	r3, [r3, r2]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	223c      	movs	r2, #60	; 0x3c
 8003934:	2100      	movs	r1, #0
 8003936:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f7fd fb72 	bl	8001024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	223d      	movs	r2, #61	; 0x3d
 8003944:	2102      	movs	r1, #2
 8003946:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	493f      	ldr	r1, [pc, #252]	; (8003a50 <HAL_TIM_Encoder_Init+0x140>)
 8003954:	400a      	ands	r2, r1
 8003956:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3304      	adds	r3, #4
 8003960:	0019      	movs	r1, r3
 8003962:	0010      	movs	r0, r2
 8003964:	f000 f97c 	bl	8003c60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4a31      	ldr	r2, [pc, #196]	; (8003a54 <HAL_TIM_Encoder_Init+0x144>)
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	021b      	lsls	r3, r3, #8
 800399c:	4313      	orrs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <HAL_TIM_Encoder_Init+0x148>)
 80039a8:	4013      	ands	r3, r2
 80039aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <HAL_TIM_Encoder_Init+0x14c>)
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	69db      	ldr	r3, [r3, #28]
 80039bc:	021b      	lsls	r3, r3, #8
 80039be:	4313      	orrs	r3, r2
 80039c0:	693a      	ldr	r2, [r7, #16]
 80039c2:	4313      	orrs	r3, r2
 80039c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	011a      	lsls	r2, r3, #4
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	031b      	lsls	r3, r3, #12
 80039d2:	4313      	orrs	r3, r2
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2222      	movs	r2, #34	; 0x22
 80039de:	4393      	bics	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2288      	movs	r2, #136	; 0x88
 80039e6:	4393      	bics	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	4313      	orrs	r3, r2
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2248      	movs	r2, #72	; 0x48
 8003a18:	2101      	movs	r1, #1
 8003a1a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	223e      	movs	r2, #62	; 0x3e
 8003a20:	2101      	movs	r1, #1
 8003a22:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	223f      	movs	r2, #63	; 0x3f
 8003a28:	2101      	movs	r1, #1
 8003a2a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2244      	movs	r2, #68	; 0x44
 8003a30:	2101      	movs	r1, #1
 8003a32:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2245      	movs	r2, #69	; 0x45
 8003a38:	2101      	movs	r1, #1
 8003a3a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	223d      	movs	r2, #61	; 0x3d
 8003a40:	2101      	movs	r1, #1
 8003a42:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a44:	2300      	movs	r3, #0
}
 8003a46:	0018      	movs	r0, r3
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	b006      	add	sp, #24
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	fffebff8 	.word	0xfffebff8
 8003a54:	fffffcfc 	.word	0xfffffcfc
 8003a58:	fffff3f3 	.word	0xfffff3f3
 8003a5c:	ffff0f0f 	.word	0xffff0f0f

08003a60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6c:	2317      	movs	r3, #23
 8003a6e:	18fb      	adds	r3, r7, r3
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	223c      	movs	r2, #60	; 0x3c
 8003a78:	5c9b      	ldrb	r3, [r3, r2]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d101      	bne.n	8003a82 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a7e:	2302      	movs	r3, #2
 8003a80:	e0e5      	b.n	8003c4e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	223c      	movs	r2, #60	; 0x3c
 8003a86:	2101      	movs	r1, #1
 8003a88:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b14      	cmp	r3, #20
 8003a8e:	d900      	bls.n	8003a92 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a90:	e0d1      	b.n	8003c36 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	009a      	lsls	r2, r3, #2
 8003a96:	4b70      	ldr	r3, [pc, #448]	; (8003c58 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a98:	18d3      	adds	r3, r2, r3
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	68ba      	ldr	r2, [r7, #8]
 8003aa4:	0011      	movs	r1, r2
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 f950 	bl	8003d4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2108      	movs	r1, #8
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2104      	movs	r1, #4
 8003ac8:	438a      	bics	r2, r1
 8003aca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	691a      	ldr	r2, [r3, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	619a      	str	r2, [r3, #24]
      break;
 8003ade:	e0af      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	0011      	movs	r1, r2
 8003ae8:	0018      	movs	r0, r3
 8003aea:	f000 f9b9 	bl	8003e60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	699a      	ldr	r2, [r3, #24]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2180      	movs	r1, #128	; 0x80
 8003afa:	0109      	lsls	r1, r1, #4
 8003afc:	430a      	orrs	r2, r1
 8003afe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699a      	ldr	r2, [r3, #24]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4954      	ldr	r1, [pc, #336]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6999      	ldr	r1, [r3, #24]
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	021a      	lsls	r2, r3, #8
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	619a      	str	r2, [r3, #24]
      break;
 8003b24:	e08c      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	0011      	movs	r1, r2
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 fa1a 	bl	8003f68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2108      	movs	r1, #8
 8003b40:	430a      	orrs	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69da      	ldr	r2, [r3, #28]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2104      	movs	r1, #4
 8003b50:	438a      	bics	r2, r1
 8003b52:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	69d9      	ldr	r1, [r3, #28]
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	430a      	orrs	r2, r1
 8003b64:	61da      	str	r2, [r3, #28]
      break;
 8003b66:	e06b      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	0011      	movs	r1, r2
 8003b70:	0018      	movs	r0, r3
 8003b72:	f000 fa81 	bl	8004078 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	0109      	lsls	r1, r1, #4
 8003b84:	430a      	orrs	r2, r1
 8003b86:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69da      	ldr	r2, [r3, #28]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4932      	ldr	r1, [pc, #200]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b94:	400a      	ands	r2, r1
 8003b96:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69d9      	ldr	r1, [r3, #28]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	691b      	ldr	r3, [r3, #16]
 8003ba2:	021a      	lsls	r2, r3, #8
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	61da      	str	r2, [r3, #28]
      break;
 8003bac:	e048      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	0011      	movs	r1, r2
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f000 fac8 	bl	800414c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2108      	movs	r1, #8
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	438a      	bics	r2, r1
 8003bda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	691a      	ldr	r2, [r3, #16]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	430a      	orrs	r2, r1
 8003bec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003bee:	e027      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	0011      	movs	r1, r2
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	f000 fb07 	bl	800420c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2180      	movs	r1, #128	; 0x80
 8003c0a:	0109      	lsls	r1, r1, #4
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4910      	ldr	r1, [pc, #64]	; (8003c5c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003c1c:	400a      	ands	r2, r1
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	021a      	lsls	r2, r3, #8
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c34:	e004      	b.n	8003c40 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003c36:	2317      	movs	r3, #23
 8003c38:	18fb      	adds	r3, r7, r3
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	701a      	strb	r2, [r3, #0]
      break;
 8003c3e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	223c      	movs	r2, #60	; 0x3c
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

  return status;
 8003c48:	2317      	movs	r3, #23
 8003c4a:	18fb      	adds	r3, r7, r3
 8003c4c:	781b      	ldrb	r3, [r3, #0]
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b006      	add	sp, #24
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	46c0      	nop			; (mov r8, r8)
 8003c58:	08007f7c 	.word	0x08007f7c
 8003c5c:	fffffbff 	.word	0xfffffbff

08003c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
 8003c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <TIM_Base_SetConfig+0xd0>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_Base_SetConfig+0x20>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a2e      	ldr	r2, [pc, #184]	; (8003d34 <TIM_Base_SetConfig+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d108      	bne.n	8003c92 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2270      	movs	r2, #112	; 0x70
 8003c84:	4393      	bics	r3, r2
 8003c86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a26      	ldr	r2, [pc, #152]	; (8003d30 <TIM_Base_SetConfig+0xd0>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d013      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a25      	ldr	r2, [pc, #148]	; (8003d34 <TIM_Base_SetConfig+0xd4>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d00f      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a24      	ldr	r2, [pc, #144]	; (8003d38 <TIM_Base_SetConfig+0xd8>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d00b      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a23      	ldr	r2, [pc, #140]	; (8003d3c <TIM_Base_SetConfig+0xdc>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d007      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <TIM_Base_SetConfig+0xe0>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_Base_SetConfig+0x62>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a21      	ldr	r2, [pc, #132]	; (8003d44 <TIM_Base_SetConfig+0xe4>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d108      	bne.n	8003cd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <TIM_Base_SetConfig+0xe8>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2280      	movs	r2, #128	; 0x80
 8003cd8:	4393      	bics	r3, r2
 8003cda:	001a      	movs	r2, r3
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <TIM_Base_SetConfig+0xd0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00b      	beq.n	8003d1a <TIM_Base_SetConfig+0xba>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a0d      	ldr	r2, [pc, #52]	; (8003d3c <TIM_Base_SetConfig+0xdc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <TIM_Base_SetConfig+0xba>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <TIM_Base_SetConfig+0xe0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d003      	beq.n	8003d1a <TIM_Base_SetConfig+0xba>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a0b      	ldr	r2, [pc, #44]	; (8003d44 <TIM_Base_SetConfig+0xe4>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d103      	bne.n	8003d22 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	615a      	str	r2, [r3, #20]
}
 8003d28:	46c0      	nop			; (mov r8, r8)
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	b004      	add	sp, #16
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40012c00 	.word	0x40012c00
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40002000 	.word	0x40002000
 8003d3c:	40014000 	.word	0x40014000
 8003d40:	40014400 	.word	0x40014400
 8003d44:	40014800 	.word	0x40014800
 8003d48:	fffffcff 	.word	0xfffffcff

08003d4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b086      	sub	sp, #24
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	4393      	bics	r3, r2
 8003d5e:	001a      	movs	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6a1b      	ldr	r3, [r3, #32]
 8003d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	4a32      	ldr	r2, [pc, #200]	; (8003e44 <TIM_OC1_SetConfig+0xf8>)
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2203      	movs	r2, #3
 8003d82:	4393      	bics	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	2202      	movs	r2, #2
 8003d94:	4393      	bics	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	4a28      	ldr	r2, [pc, #160]	; (8003e48 <TIM_OC1_SetConfig+0xfc>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d00b      	beq.n	8003dc2 <TIM_OC1_SetConfig+0x76>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a27      	ldr	r2, [pc, #156]	; (8003e4c <TIM_OC1_SetConfig+0x100>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d007      	beq.n	8003dc2 <TIM_OC1_SetConfig+0x76>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a26      	ldr	r2, [pc, #152]	; (8003e50 <TIM_OC1_SetConfig+0x104>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d003      	beq.n	8003dc2 <TIM_OC1_SetConfig+0x76>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <TIM_OC1_SetConfig+0x108>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d10c      	bne.n	8003ddc <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	2208      	movs	r2, #8
 8003dc6:	4393      	bics	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	68db      	ldr	r3, [r3, #12]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	2204      	movs	r2, #4
 8003dd8:	4393      	bics	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a1a      	ldr	r2, [pc, #104]	; (8003e48 <TIM_OC1_SetConfig+0xfc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <TIM_OC1_SetConfig+0xb0>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a19      	ldr	r2, [pc, #100]	; (8003e4c <TIM_OC1_SetConfig+0x100>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d007      	beq.n	8003dfc <TIM_OC1_SetConfig+0xb0>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a18      	ldr	r2, [pc, #96]	; (8003e50 <TIM_OC1_SetConfig+0x104>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d003      	beq.n	8003dfc <TIM_OC1_SetConfig+0xb0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a17      	ldr	r2, [pc, #92]	; (8003e54 <TIM_OC1_SetConfig+0x108>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d111      	bne.n	8003e20 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	4a16      	ldr	r2, [pc, #88]	; (8003e58 <TIM_OC1_SetConfig+0x10c>)
 8003e00:	4013      	ands	r3, r2
 8003e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <TIM_OC1_SetConfig+0x110>)
 8003e08:	4013      	ands	r3, r2
 8003e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	b006      	add	sp, #24
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	46c0      	nop			; (mov r8, r8)
 8003e44:	fffeff8f 	.word	0xfffeff8f
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40014000 	.word	0x40014000
 8003e50:	40014400 	.word	0x40014400
 8003e54:	40014800 	.word	0x40014800
 8003e58:	fffffeff 	.word	0xfffffeff
 8003e5c:	fffffdff 	.word	0xfffffdff

08003e60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a1b      	ldr	r3, [r3, #32]
 8003e6e:	2210      	movs	r2, #16
 8003e70:	4393      	bics	r3, r2
 8003e72:	001a      	movs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	4a2e      	ldr	r2, [pc, #184]	; (8003f48 <TIM_OC2_SetConfig+0xe8>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4a2d      	ldr	r2, [pc, #180]	; (8003f4c <TIM_OC2_SetConfig+0xec>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	021b      	lsls	r3, r3, #8
 8003ea0:	68fa      	ldr	r2, [r7, #12]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2220      	movs	r2, #32
 8003eaa:	4393      	bics	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	4a24      	ldr	r2, [pc, #144]	; (8003f50 <TIM_OC2_SetConfig+0xf0>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d10d      	bne.n	8003ede <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	2280      	movs	r2, #128	; 0x80
 8003ec6:	4393      	bics	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2240      	movs	r2, #64	; 0x40
 8003eda:	4393      	bics	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a1b      	ldr	r2, [pc, #108]	; (8003f50 <TIM_OC2_SetConfig+0xf0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00b      	beq.n	8003efe <TIM_OC2_SetConfig+0x9e>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a1a      	ldr	r2, [pc, #104]	; (8003f54 <TIM_OC2_SetConfig+0xf4>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d007      	beq.n	8003efe <TIM_OC2_SetConfig+0x9e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	; (8003f58 <TIM_OC2_SetConfig+0xf8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d003      	beq.n	8003efe <TIM_OC2_SetConfig+0x9e>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a18      	ldr	r2, [pc, #96]	; (8003f5c <TIM_OC2_SetConfig+0xfc>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d113      	bne.n	8003f26 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4a17      	ldr	r2, [pc, #92]	; (8003f60 <TIM_OC2_SetConfig+0x100>)
 8003f02:	4013      	ands	r3, r2
 8003f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	4a16      	ldr	r2, [pc, #88]	; (8003f64 <TIM_OC2_SetConfig+0x104>)
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	693a      	ldr	r2, [r7, #16]
 8003f2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	621a      	str	r2, [r3, #32]
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b006      	add	sp, #24
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	feff8fff 	.word	0xfeff8fff
 8003f4c:	fffffcff 	.word	0xfffffcff
 8003f50:	40012c00 	.word	0x40012c00
 8003f54:	40014000 	.word	0x40014000
 8003f58:	40014400 	.word	0x40014400
 8003f5c:	40014800 	.word	0x40014800
 8003f60:	fffffbff 	.word	0xfffffbff
 8003f64:	fffff7ff 	.word	0xfffff7ff

08003f68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	4a35      	ldr	r2, [pc, #212]	; (800404c <TIM_OC3_SetConfig+0xe4>)
 8003f78:	401a      	ands	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a1b      	ldr	r3, [r3, #32]
 8003f82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	4a2f      	ldr	r2, [pc, #188]	; (8004050 <TIM_OC3_SetConfig+0xe8>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	4393      	bics	r3, r2
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	4a29      	ldr	r2, [pc, #164]	; (8004054 <TIM_OC3_SetConfig+0xec>)
 8003fae:	4013      	ands	r3, r2
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a25      	ldr	r2, [pc, #148]	; (8004058 <TIM_OC3_SetConfig+0xf0>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d10d      	bne.n	8003fe2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	4a24      	ldr	r2, [pc, #144]	; (800405c <TIM_OC3_SetConfig+0xf4>)
 8003fca:	4013      	ands	r3, r2
 8003fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	021b      	lsls	r3, r3, #8
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <TIM_OC3_SetConfig+0xf8>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <TIM_OC3_SetConfig+0xf0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d00b      	beq.n	8004002 <TIM_OC3_SetConfig+0x9a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a1d      	ldr	r2, [pc, #116]	; (8004064 <TIM_OC3_SetConfig+0xfc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d007      	beq.n	8004002 <TIM_OC3_SetConfig+0x9a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1c      	ldr	r2, [pc, #112]	; (8004068 <TIM_OC3_SetConfig+0x100>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d003      	beq.n	8004002 <TIM_OC3_SetConfig+0x9a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1b      	ldr	r2, [pc, #108]	; (800406c <TIM_OC3_SetConfig+0x104>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d113      	bne.n	800402a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <TIM_OC3_SetConfig+0x108>)
 8004006:	4013      	ands	r3, r2
 8004008:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4a19      	ldr	r2, [pc, #100]	; (8004074 <TIM_OC3_SetConfig+0x10c>)
 800400e:	4013      	ands	r3, r2
 8004010:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	011b      	lsls	r3, r3, #4
 8004024:	693a      	ldr	r2, [r7, #16]
 8004026:	4313      	orrs	r3, r2
 8004028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	621a      	str	r2, [r3, #32]
}
 8004044:	46c0      	nop			; (mov r8, r8)
 8004046:	46bd      	mov	sp, r7
 8004048:	b006      	add	sp, #24
 800404a:	bd80      	pop	{r7, pc}
 800404c:	fffffeff 	.word	0xfffffeff
 8004050:	fffeff8f 	.word	0xfffeff8f
 8004054:	fffffdff 	.word	0xfffffdff
 8004058:	40012c00 	.word	0x40012c00
 800405c:	fffff7ff 	.word	0xfffff7ff
 8004060:	fffffbff 	.word	0xfffffbff
 8004064:	40014000 	.word	0x40014000
 8004068:	40014400 	.word	0x40014400
 800406c:	40014800 	.word	0x40014800
 8004070:	ffffefff 	.word	0xffffefff
 8004074:	ffffdfff 	.word	0xffffdfff

08004078 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b086      	sub	sp, #24
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4a28      	ldr	r2, [pc, #160]	; (8004128 <TIM_OC4_SetConfig+0xb0>)
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	69db      	ldr	r3, [r3, #28]
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4a22      	ldr	r2, [pc, #136]	; (800412c <TIM_OC4_SetConfig+0xb4>)
 80040a4:	4013      	ands	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a21      	ldr	r2, [pc, #132]	; (8004130 <TIM_OC4_SetConfig+0xb8>)
 80040ac:	4013      	ands	r3, r2
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	021b      	lsls	r3, r3, #8
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4a1d      	ldr	r2, [pc, #116]	; (8004134 <TIM_OC4_SetConfig+0xbc>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	031b      	lsls	r3, r3, #12
 80040ca:	693a      	ldr	r2, [r7, #16]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	4a19      	ldr	r2, [pc, #100]	; (8004138 <TIM_OC4_SetConfig+0xc0>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d00b      	beq.n	80040f0 <TIM_OC4_SetConfig+0x78>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a18      	ldr	r2, [pc, #96]	; (800413c <TIM_OC4_SetConfig+0xc4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d007      	beq.n	80040f0 <TIM_OC4_SetConfig+0x78>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	4a17      	ldr	r2, [pc, #92]	; (8004140 <TIM_OC4_SetConfig+0xc8>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	d003      	beq.n	80040f0 <TIM_OC4_SetConfig+0x78>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <TIM_OC4_SetConfig+0xcc>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d109      	bne.n	8004104 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	4a15      	ldr	r2, [pc, #84]	; (8004148 <TIM_OC4_SetConfig+0xd0>)
 80040f4:	4013      	ands	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	019b      	lsls	r3, r3, #6
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	4313      	orrs	r3, r2
 8004102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	685a      	ldr	r2, [r3, #4]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	621a      	str	r2, [r3, #32]
}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	46bd      	mov	sp, r7
 8004122:	b006      	add	sp, #24
 8004124:	bd80      	pop	{r7, pc}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	ffffefff 	.word	0xffffefff
 800412c:	feff8fff 	.word	0xfeff8fff
 8004130:	fffffcff 	.word	0xfffffcff
 8004134:	ffffdfff 	.word	0xffffdfff
 8004138:	40012c00 	.word	0x40012c00
 800413c:	40014000 	.word	0x40014000
 8004140:	40014400 	.word	0x40014400
 8004144:	40014800 	.word	0x40014800
 8004148:	ffffbfff 	.word	0xffffbfff

0800414c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a25      	ldr	r2, [pc, #148]	; (80041f0 <TIM_OC5_SetConfig+0xa4>)
 800415c:	401a      	ands	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4a1f      	ldr	r2, [pc, #124]	; (80041f4 <TIM_OC5_SetConfig+0xa8>)
 8004178:	4013      	ands	r3, r2
 800417a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	68fa      	ldr	r2, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	4a1b      	ldr	r2, [pc, #108]	; (80041f8 <TIM_OC5_SetConfig+0xac>)
 800418a:	4013      	ands	r3, r2
 800418c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	041b      	lsls	r3, r3, #16
 8004194:	693a      	ldr	r2, [r7, #16]
 8004196:	4313      	orrs	r3, r2
 8004198:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4a17      	ldr	r2, [pc, #92]	; (80041fc <TIM_OC5_SetConfig+0xb0>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d00b      	beq.n	80041ba <TIM_OC5_SetConfig+0x6e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	4a16      	ldr	r2, [pc, #88]	; (8004200 <TIM_OC5_SetConfig+0xb4>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d007      	beq.n	80041ba <TIM_OC5_SetConfig+0x6e>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a15      	ldr	r2, [pc, #84]	; (8004204 <TIM_OC5_SetConfig+0xb8>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d003      	beq.n	80041ba <TIM_OC5_SetConfig+0x6e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a14      	ldr	r2, [pc, #80]	; (8004208 <TIM_OC5_SetConfig+0xbc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d109      	bne.n	80041ce <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	4a0c      	ldr	r2, [pc, #48]	; (80041f0 <TIM_OC5_SetConfig+0xa4>)
 80041be:	4013      	ands	r3, r2
 80041c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	021b      	lsls	r3, r3, #8
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	685a      	ldr	r2, [r3, #4]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	621a      	str	r2, [r3, #32]
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b006      	add	sp, #24
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	fffeffff 	.word	0xfffeffff
 80041f4:	fffeff8f 	.word	0xfffeff8f
 80041f8:	fffdffff 	.word	0xfffdffff
 80041fc:	40012c00 	.word	0x40012c00
 8004200:	40014000 	.word	0x40014000
 8004204:	40014400 	.word	0x40014400
 8004208:	40014800 	.word	0x40014800

0800420c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	4a26      	ldr	r2, [pc, #152]	; (80042b4 <TIM_OC6_SetConfig+0xa8>)
 800421c:	401a      	ands	r2, r3
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a1b      	ldr	r3, [r3, #32]
 8004226:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	4a20      	ldr	r2, [pc, #128]	; (80042b8 <TIM_OC6_SetConfig+0xac>)
 8004238:	4013      	ands	r3, r2
 800423a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	021b      	lsls	r3, r3, #8
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4313      	orrs	r3, r2
 8004246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	4a1c      	ldr	r2, [pc, #112]	; (80042bc <TIM_OC6_SetConfig+0xb0>)
 800424c:	4013      	ands	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	051b      	lsls	r3, r3, #20
 8004256:	693a      	ldr	r2, [r7, #16]
 8004258:	4313      	orrs	r3, r2
 800425a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a18      	ldr	r2, [pc, #96]	; (80042c0 <TIM_OC6_SetConfig+0xb4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d00b      	beq.n	800427c <TIM_OC6_SetConfig+0x70>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <TIM_OC6_SetConfig+0xb8>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d007      	beq.n	800427c <TIM_OC6_SetConfig+0x70>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <TIM_OC6_SetConfig+0xbc>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d003      	beq.n	800427c <TIM_OC6_SetConfig+0x70>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	4a15      	ldr	r2, [pc, #84]	; (80042cc <TIM_OC6_SetConfig+0xc0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d109      	bne.n	8004290 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4a14      	ldr	r2, [pc, #80]	; (80042d0 <TIM_OC6_SetConfig+0xc4>)
 8004280:	4013      	ands	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	029b      	lsls	r3, r3, #10
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	685a      	ldr	r2, [r3, #4]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	693a      	ldr	r2, [r7, #16]
 80042a8:	621a      	str	r2, [r3, #32]
}
 80042aa:	46c0      	nop			; (mov r8, r8)
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b006      	add	sp, #24
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	ffefffff 	.word	0xffefffff
 80042b8:	feff8fff 	.word	0xfeff8fff
 80042bc:	ffdfffff 	.word	0xffdfffff
 80042c0:	40012c00 	.word	0x40012c00
 80042c4:	40014000 	.word	0x40014000
 80042c8:	40014400 	.word	0x40014400
 80042cc:	40014800 	.word	0x40014800
 80042d0:	fffbffff 	.word	0xfffbffff

080042d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	221f      	movs	r2, #31
 80042e4:	4013      	ands	r3, r2
 80042e6:	2201      	movs	r2, #1
 80042e8:	409a      	lsls	r2, r3
 80042ea:	0013      	movs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a1b      	ldr	r3, [r3, #32]
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	43d2      	mvns	r2, r2
 80042f6:	401a      	ands	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	211f      	movs	r1, #31
 8004304:	400b      	ands	r3, r1
 8004306:	6879      	ldr	r1, [r7, #4]
 8004308:	4099      	lsls	r1, r3
 800430a:	000b      	movs	r3, r1
 800430c:	431a      	orrs	r2, r3
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	46bd      	mov	sp, r7
 8004316:	b006      	add	sp, #24
 8004318:	bd80      	pop	{r7, pc}
	...

0800431c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	223c      	movs	r2, #60	; 0x3c
 800432a:	5c9b      	ldrb	r3, [r3, r2]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d101      	bne.n	8004334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004330:	2302      	movs	r3, #2
 8004332:	e04f      	b.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	223c      	movs	r2, #60	; 0x3c
 8004338:	2101      	movs	r1, #1
 800433a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	223d      	movs	r2, #61	; 0x3d
 8004340:	2102      	movs	r1, #2
 8004342:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a20      	ldr	r2, [pc, #128]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d108      	bne.n	8004370 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4a1f      	ldr	r2, [pc, #124]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004362:	4013      	ands	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	68fa      	ldr	r2, [r7, #12]
 800436c:	4313      	orrs	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2270      	movs	r2, #112	; 0x70
 8004374:	4393      	bics	r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	4313      	orrs	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a13      	ldr	r2, [pc, #76]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d009      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4a12      	ldr	r2, [pc, #72]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d004      	beq.n	80043a8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a11      	ldr	r2, [pc, #68]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80043a4:	4293      	cmp	r3, r2
 80043a6:	d10c      	bne.n	80043c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2280      	movs	r2, #128	; 0x80
 80043ac:	4393      	bics	r3, r2
 80043ae:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	68ba      	ldr	r2, [r7, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	223d      	movs	r2, #61	; 0x3d
 80043c6:	2101      	movs	r1, #1
 80043c8:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	223c      	movs	r2, #60	; 0x3c
 80043ce:	2100      	movs	r1, #0
 80043d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	0018      	movs	r0, r3
 80043d6:	46bd      	mov	sp, r7
 80043d8:	b004      	add	sp, #16
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	40012c00 	.word	0x40012c00
 80043e0:	ff0fffff 	.word	0xff0fffff
 80043e4:	40000400 	.word	0x40000400
 80043e8:	40014000 	.word	0x40014000

080043ec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	223c      	movs	r2, #60	; 0x3c
 80043fe:	5c9b      	ldrb	r3, [r3, r2]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d101      	bne.n	8004408 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004404:	2302      	movs	r3, #2
 8004406:	e079      	b.n	80044fc <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	223c      	movs	r2, #60	; 0x3c
 800440c:	2101      	movs	r1, #1
 800440e:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	22ff      	movs	r2, #255	; 0xff
 8004414:	4393      	bics	r3, r2
 8004416:	001a      	movs	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a38      	ldr	r2, [pc, #224]	; (8004504 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8004424:	401a      	ands	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	4a35      	ldr	r2, [pc, #212]	; (8004508 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004432:	401a      	ands	r2, r3
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	4313      	orrs	r3, r2
 800443a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4a33      	ldr	r2, [pc, #204]	; (800450c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004440:	401a      	ands	r2, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a30      	ldr	r2, [pc, #192]	; (8004510 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800444e:	401a      	ands	r2, r3
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	691b      	ldr	r3, [r3, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a2e      	ldr	r2, [pc, #184]	; (8004514 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800445c:	401a      	ands	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4a2b      	ldr	r2, [pc, #172]	; (8004518 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800446a:	401a      	ands	r2, r3
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4313      	orrs	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004478:	401a      	ands	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	4313      	orrs	r3, r2
 8004482:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a25      	ldr	r2, [pc, #148]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d106      	bne.n	800449c <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	4a24      	ldr	r2, [pc, #144]	; (8004524 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004492:	401a      	ands	r2, r3
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d121      	bne.n	80044ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	4a1f      	ldr	r2, [pc, #124]	; (8004528 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80044aa:	401a      	ands	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b0:	051b      	lsls	r3, r3, #20
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	4a1c      	ldr	r2, [pc, #112]	; (800452c <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80044ba:	401a      	ands	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6a1b      	ldr	r3, [r3, #32]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a1a      	ldr	r2, [pc, #104]	; (8004530 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80044c8:	401a      	ands	r2, r3
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d106      	bne.n	80044ea <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a15      	ldr	r2, [pc, #84]	; (8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80044e0:	401a      	ands	r2, r3
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	223c      	movs	r2, #60	; 0x3c
 80044f6:	2100      	movs	r1, #0
 80044f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	0018      	movs	r0, r3
 80044fe:	46bd      	mov	sp, r7
 8004500:	b004      	add	sp, #16
 8004502:	bd80      	pop	{r7, pc}
 8004504:	fffffcff 	.word	0xfffffcff
 8004508:	fffffbff 	.word	0xfffffbff
 800450c:	fffff7ff 	.word	0xfffff7ff
 8004510:	ffffefff 	.word	0xffffefff
 8004514:	ffffdfff 	.word	0xffffdfff
 8004518:	ffffbfff 	.word	0xffffbfff
 800451c:	fff0ffff 	.word	0xfff0ffff
 8004520:	40012c00 	.word	0x40012c00
 8004524:	efffffff 	.word	0xefffffff
 8004528:	ff0fffff 	.word	0xff0fffff
 800452c:	feffffff 	.word	0xfeffffff
 8004530:	fdffffff 	.word	0xfdffffff
 8004534:	dfffffff 	.word	0xdfffffff

08004538 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e046      	b.n	80045d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2288      	movs	r2, #136	; 0x88
 800454e:	589b      	ldr	r3, [r3, r2]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d107      	bne.n	8004564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2284      	movs	r2, #132	; 0x84
 8004558:	2100      	movs	r1, #0
 800455a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	0018      	movs	r0, r3
 8004560:	f7fd f806 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2288      	movs	r2, #136	; 0x88
 8004568:	2124      	movs	r1, #36	; 0x24
 800456a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2101      	movs	r1, #1
 8004578:	438a      	bics	r2, r1
 800457a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	0018      	movs	r0, r3
 8004580:	f000 fc6e 	bl	8004e60 <UART_SetConfig>
 8004584:	0003      	movs	r3, r0
 8004586:	2b01      	cmp	r3, #1
 8004588:	d101      	bne.n	800458e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e024      	b.n	80045d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	0018      	movs	r0, r3
 800459a:	f000 fe05 	bl	80051a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685a      	ldr	r2, [r3, #4]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	490d      	ldr	r1, [pc, #52]	; (80045e0 <HAL_UART_Init+0xa8>)
 80045aa:	400a      	ands	r2, r1
 80045ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	689a      	ldr	r2, [r3, #8]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	212a      	movs	r1, #42	; 0x2a
 80045ba:	438a      	bics	r2, r1
 80045bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2101      	movs	r1, #1
 80045ca:	430a      	orrs	r2, r1
 80045cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 fe9d 	bl	8005310 <UART_CheckIdleState>
 80045d6:	0003      	movs	r3, r0
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b002      	add	sp, #8
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	ffffb7ff 	.word	0xffffb7ff

080045e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	; 0x28
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	1dbb      	adds	r3, r7, #6
 80045f2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2288      	movs	r2, #136	; 0x88
 80045f8:	589b      	ldr	r3, [r3, r2]
 80045fa:	2b20      	cmp	r3, #32
 80045fc:	d000      	beq.n	8004600 <HAL_UART_Transmit+0x1c>
 80045fe:	e088      	b.n	8004712 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_Transmit+0x2a>
 8004606:	1dbb      	adds	r3, r7, #6
 8004608:	881b      	ldrh	r3, [r3, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d101      	bne.n	8004612 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e080      	b.n	8004714 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	689a      	ldr	r2, [r3, #8]
 8004616:	2380      	movs	r3, #128	; 0x80
 8004618:	015b      	lsls	r3, r3, #5
 800461a:	429a      	cmp	r2, r3
 800461c:	d109      	bne.n	8004632 <HAL_UART_Transmit+0x4e>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d105      	bne.n	8004632 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	2201      	movs	r2, #1
 800462a:	4013      	ands	r3, r2
 800462c:	d001      	beq.n	8004632 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e070      	b.n	8004714 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2290      	movs	r2, #144	; 0x90
 8004636:	2100      	movs	r1, #0
 8004638:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2288      	movs	r2, #136	; 0x88
 800463e:	2121      	movs	r1, #33	; 0x21
 8004640:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004642:	f7fd fcf7 	bl	8002034 <HAL_GetTick>
 8004646:	0003      	movs	r3, r0
 8004648:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1dba      	adds	r2, r7, #6
 800464e:	2154      	movs	r1, #84	; 0x54
 8004650:	8812      	ldrh	r2, [r2, #0]
 8004652:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	1dba      	adds	r2, r7, #6
 8004658:	2156      	movs	r1, #86	; 0x56
 800465a:	8812      	ldrh	r2, [r2, #0]
 800465c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	689a      	ldr	r2, [r3, #8]
 8004662:	2380      	movs	r3, #128	; 0x80
 8004664:	015b      	lsls	r3, r3, #5
 8004666:	429a      	cmp	r2, r3
 8004668:	d108      	bne.n	800467c <HAL_UART_Transmit+0x98>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d104      	bne.n	800467c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	61bb      	str	r3, [r7, #24]
 800467a:	e003      	b.n	8004684 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004680:	2300      	movs	r3, #0
 8004682:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004684:	e02c      	b.n	80046e0 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	68f8      	ldr	r0, [r7, #12]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	0013      	movs	r3, r2
 8004690:	2200      	movs	r2, #0
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	f000 fe8a 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8004698:	1e03      	subs	r3, r0, #0
 800469a:	d001      	beq.n	80046a0 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 800469c:	2303      	movs	r3, #3
 800469e:	e039      	b.n	8004714 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80046a0:	69fb      	ldr	r3, [r7, #28]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10b      	bne.n	80046be <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	881b      	ldrh	r3, [r3, #0]
 80046aa:	001a      	movs	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	05d2      	lsls	r2, r2, #23
 80046b2:	0dd2      	lsrs	r2, r2, #23
 80046b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	3302      	adds	r3, #2
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	e007      	b.n	80046ce <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	781a      	ldrb	r2, [r3, #0]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	3301      	adds	r3, #1
 80046cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2256      	movs	r2, #86	; 0x56
 80046d2:	5a9b      	ldrh	r3, [r3, r2]
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b299      	uxth	r1, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2256      	movs	r2, #86	; 0x56
 80046de:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2256      	movs	r2, #86	; 0x56
 80046e4:	5a9b      	ldrh	r3, [r3, r2]
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1cc      	bne.n	8004686 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	9300      	str	r3, [sp, #0]
 80046f4:	0013      	movs	r3, r2
 80046f6:	2200      	movs	r2, #0
 80046f8:	2140      	movs	r1, #64	; 0x40
 80046fa:	f000 fe57 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 80046fe:	1e03      	subs	r3, r0, #0
 8004700:	d001      	beq.n	8004706 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e006      	b.n	8004714 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2288      	movs	r2, #136	; 0x88
 800470a:	2120      	movs	r1, #32
 800470c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	e000      	b.n	8004714 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
  }
}
 8004714:	0018      	movs	r0, r3
 8004716:	46bd      	mov	sp, r7
 8004718:	b008      	add	sp, #32
 800471a:	bd80      	pop	{r7, pc}

0800471c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b088      	sub	sp, #32
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	1dbb      	adds	r3, r7, #6
 8004728:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	228c      	movs	r2, #140	; 0x8c
 800472e:	589b      	ldr	r3, [r3, r2]
 8004730:	2b20      	cmp	r3, #32
 8004732:	d145      	bne.n	80047c0 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d003      	beq.n	8004742 <HAL_UART_Receive_IT+0x26>
 800473a:	1dbb      	adds	r3, r7, #6
 800473c:	881b      	ldrh	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e03d      	b.n	80047c2 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	689a      	ldr	r2, [r3, #8]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	015b      	lsls	r3, r3, #5
 800474e:	429a      	cmp	r2, r3
 8004750:	d109      	bne.n	8004766 <HAL_UART_Receive_IT+0x4a>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d105      	bne.n	8004766 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2201      	movs	r2, #1
 800475e:	4013      	ands	r3, r2
 8004760:	d001      	beq.n	8004766 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e02d      	b.n	80047c2 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	4013      	ands	r3, r2
 8004778:	d019      	beq.n	80047ae <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800477a:	f3ef 8310 	mrs	r3, PRIMASK
 800477e:	613b      	str	r3, [r7, #16]
  return(result);
 8004780:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004782:	61fb      	str	r3, [r7, #28]
 8004784:	2301      	movs	r3, #1
 8004786:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f383 8810 	msr	PRIMASK, r3
}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2180      	movs	r1, #128	; 0x80
 800479c:	04c9      	lsls	r1, r1, #19
 800479e:	430a      	orrs	r2, r1
 80047a0:	601a      	str	r2, [r3, #0]
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	f383 8810 	msr	PRIMASK, r3
}
 80047ac:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80047ae:	1dbb      	adds	r3, r7, #6
 80047b0:	881a      	ldrh	r2, [r3, #0]
 80047b2:	68b9      	ldr	r1, [r7, #8]
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	0018      	movs	r0, r3
 80047b8:	f000 fec0 	bl	800553c <UART_Start_Receive_IT>
 80047bc:	0003      	movs	r3, r0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b008      	add	sp, #32
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	b0aa      	sub	sp, #168	; 0xa8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	69db      	ldr	r3, [r3, #28]
 80047da:	22a4      	movs	r2, #164	; 0xa4
 80047dc:	18b9      	adds	r1, r7, r2
 80047de:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	20a0      	movs	r0, #160	; 0xa0
 80047e8:	1839      	adds	r1, r7, r0
 80047ea:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	249c      	movs	r4, #156	; 0x9c
 80047f4:	1939      	adds	r1, r7, r4
 80047f6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047f8:	0011      	movs	r1, r2
 80047fa:	18bb      	adds	r3, r7, r2
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4aa2      	ldr	r2, [pc, #648]	; (8004a88 <HAL_UART_IRQHandler+0x2bc>)
 8004800:	4013      	ands	r3, r2
 8004802:	2298      	movs	r2, #152	; 0x98
 8004804:	18bd      	adds	r5, r7, r2
 8004806:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8004808:	18bb      	adds	r3, r7, r2
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11a      	bne.n	8004846 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004810:	187b      	adds	r3, r7, r1
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2220      	movs	r2, #32
 8004816:	4013      	ands	r3, r2
 8004818:	d015      	beq.n	8004846 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800481a:	183b      	adds	r3, r7, r0
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2220      	movs	r2, #32
 8004820:	4013      	ands	r3, r2
 8004822:	d105      	bne.n	8004830 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004824:	193b      	adds	r3, r7, r4
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	2380      	movs	r3, #128	; 0x80
 800482a:	055b      	lsls	r3, r3, #21
 800482c:	4013      	ands	r3, r2
 800482e:	d00a      	beq.n	8004846 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	2b00      	cmp	r3, #0
 8004836:	d100      	bne.n	800483a <HAL_UART_IRQHandler+0x6e>
 8004838:	e2dc      	b.n	8004df4 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	0010      	movs	r0, r2
 8004842:	4798      	blx	r3
      }
      return;
 8004844:	e2d6      	b.n	8004df4 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004846:	2398      	movs	r3, #152	; 0x98
 8004848:	18fb      	adds	r3, r7, r3
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d100      	bne.n	8004852 <HAL_UART_IRQHandler+0x86>
 8004850:	e122      	b.n	8004a98 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004852:	239c      	movs	r3, #156	; 0x9c
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a8c      	ldr	r2, [pc, #560]	; (8004a8c <HAL_UART_IRQHandler+0x2c0>)
 800485a:	4013      	ands	r3, r2
 800485c:	d106      	bne.n	800486c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800485e:	23a0      	movs	r3, #160	; 0xa0
 8004860:	18fb      	adds	r3, r7, r3
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a8a      	ldr	r2, [pc, #552]	; (8004a90 <HAL_UART_IRQHandler+0x2c4>)
 8004866:	4013      	ands	r3, r2
 8004868:	d100      	bne.n	800486c <HAL_UART_IRQHandler+0xa0>
 800486a:	e115      	b.n	8004a98 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800486c:	23a4      	movs	r3, #164	; 0xa4
 800486e:	18fb      	adds	r3, r7, r3
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2201      	movs	r2, #1
 8004874:	4013      	ands	r3, r2
 8004876:	d012      	beq.n	800489e <HAL_UART_IRQHandler+0xd2>
 8004878:	23a0      	movs	r3, #160	; 0xa0
 800487a:	18fb      	adds	r3, r7, r3
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	2380      	movs	r3, #128	; 0x80
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	4013      	ands	r3, r2
 8004884:	d00b      	beq.n	800489e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2201      	movs	r2, #1
 800488c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2290      	movs	r2, #144	; 0x90
 8004892:	589b      	ldr	r3, [r3, r2]
 8004894:	2201      	movs	r2, #1
 8004896:	431a      	orrs	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2190      	movs	r1, #144	; 0x90
 800489c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489e:	23a4      	movs	r3, #164	; 0xa4
 80048a0:	18fb      	adds	r3, r7, r3
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d011      	beq.n	80048ce <HAL_UART_IRQHandler+0x102>
 80048aa:	239c      	movs	r3, #156	; 0x9c
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2201      	movs	r2, #1
 80048b2:	4013      	ands	r3, r2
 80048b4:	d00b      	beq.n	80048ce <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2202      	movs	r2, #2
 80048bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2290      	movs	r2, #144	; 0x90
 80048c2:	589b      	ldr	r3, [r3, r2]
 80048c4:	2204      	movs	r2, #4
 80048c6:	431a      	orrs	r2, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2190      	movs	r1, #144	; 0x90
 80048cc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048ce:	23a4      	movs	r3, #164	; 0xa4
 80048d0:	18fb      	adds	r3, r7, r3
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2204      	movs	r2, #4
 80048d6:	4013      	ands	r3, r2
 80048d8:	d011      	beq.n	80048fe <HAL_UART_IRQHandler+0x132>
 80048da:	239c      	movs	r3, #156	; 0x9c
 80048dc:	18fb      	adds	r3, r7, r3
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2201      	movs	r2, #1
 80048e2:	4013      	ands	r3, r2
 80048e4:	d00b      	beq.n	80048fe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2204      	movs	r2, #4
 80048ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2290      	movs	r2, #144	; 0x90
 80048f2:	589b      	ldr	r3, [r3, r2]
 80048f4:	2202      	movs	r2, #2
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2190      	movs	r1, #144	; 0x90
 80048fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048fe:	23a4      	movs	r3, #164	; 0xa4
 8004900:	18fb      	adds	r3, r7, r3
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2208      	movs	r2, #8
 8004906:	4013      	ands	r3, r2
 8004908:	d017      	beq.n	800493a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800490a:	23a0      	movs	r3, #160	; 0xa0
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2220      	movs	r2, #32
 8004912:	4013      	ands	r3, r2
 8004914:	d105      	bne.n	8004922 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004916:	239c      	movs	r3, #156	; 0x9c
 8004918:	18fb      	adds	r3, r7, r3
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a5b      	ldr	r2, [pc, #364]	; (8004a8c <HAL_UART_IRQHandler+0x2c0>)
 800491e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004920:	d00b      	beq.n	800493a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2208      	movs	r2, #8
 8004928:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2290      	movs	r2, #144	; 0x90
 800492e:	589b      	ldr	r3, [r3, r2]
 8004930:	2208      	movs	r2, #8
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2190      	movs	r1, #144	; 0x90
 8004938:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800493a:	23a4      	movs	r3, #164	; 0xa4
 800493c:	18fb      	adds	r3, r7, r3
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	2380      	movs	r3, #128	; 0x80
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	4013      	ands	r3, r2
 8004946:	d013      	beq.n	8004970 <HAL_UART_IRQHandler+0x1a4>
 8004948:	23a0      	movs	r3, #160	; 0xa0
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	04db      	lsls	r3, r3, #19
 8004952:	4013      	ands	r3, r2
 8004954:	d00c      	beq.n	8004970 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2280      	movs	r2, #128	; 0x80
 800495c:	0112      	lsls	r2, r2, #4
 800495e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2290      	movs	r2, #144	; 0x90
 8004964:	589b      	ldr	r3, [r3, r2]
 8004966:	2220      	movs	r2, #32
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2190      	movs	r1, #144	; 0x90
 800496e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2290      	movs	r2, #144	; 0x90
 8004974:	589b      	ldr	r3, [r3, r2]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d100      	bne.n	800497c <HAL_UART_IRQHandler+0x1b0>
 800497a:	e23d      	b.n	8004df8 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800497c:	23a4      	movs	r3, #164	; 0xa4
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2220      	movs	r2, #32
 8004984:	4013      	ands	r3, r2
 8004986:	d015      	beq.n	80049b4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004988:	23a0      	movs	r3, #160	; 0xa0
 800498a:	18fb      	adds	r3, r7, r3
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2220      	movs	r2, #32
 8004990:	4013      	ands	r3, r2
 8004992:	d106      	bne.n	80049a2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004994:	239c      	movs	r3, #156	; 0x9c
 8004996:	18fb      	adds	r3, r7, r3
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	2380      	movs	r3, #128	; 0x80
 800499c:	055b      	lsls	r3, r3, #21
 800499e:	4013      	ands	r3, r2
 80049a0:	d008      	beq.n	80049b4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d004      	beq.n	80049b4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	0010      	movs	r0, r2
 80049b2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2290      	movs	r2, #144	; 0x90
 80049b8:	589b      	ldr	r3, [r3, r2]
 80049ba:	2194      	movs	r1, #148	; 0x94
 80049bc:	187a      	adds	r2, r7, r1
 80049be:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2240      	movs	r2, #64	; 0x40
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d004      	beq.n	80049d8 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80049ce:	187b      	adds	r3, r7, r1
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2228      	movs	r2, #40	; 0x28
 80049d4:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80049d6:	d04c      	beq.n	8004a72 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	0018      	movs	r0, r3
 80049dc:	f000 fed2 	bl	8005784 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2240      	movs	r2, #64	; 0x40
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d13c      	bne.n	8004a68 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049ee:	f3ef 8310 	mrs	r3, PRIMASK
 80049f2:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80049f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049f6:	2090      	movs	r0, #144	; 0x90
 80049f8:	183a      	adds	r2, r7, r0
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	2301      	movs	r3, #1
 80049fe:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a02:	f383 8810 	msr	PRIMASK, r3
}
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689a      	ldr	r2, [r3, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2140      	movs	r1, #64	; 0x40
 8004a14:	438a      	bics	r2, r1
 8004a16:	609a      	str	r2, [r3, #8]
 8004a18:	183b      	adds	r3, r7, r0
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a20:	f383 8810 	msr	PRIMASK, r3
}
 8004a24:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2280      	movs	r2, #128	; 0x80
 8004a2a:	589b      	ldr	r3, [r3, r2]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d016      	beq.n	8004a5e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2280      	movs	r2, #128	; 0x80
 8004a34:	589b      	ldr	r3, [r3, r2]
 8004a36:	4a17      	ldr	r2, [pc, #92]	; (8004a94 <HAL_UART_IRQHandler+0x2c8>)
 8004a38:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	589b      	ldr	r3, [r3, r2]
 8004a40:	0018      	movs	r0, r3
 8004a42:	f7fd fc41 	bl	80022c8 <HAL_DMA_Abort_IT>
 8004a46:	1e03      	subs	r3, r0, #0
 8004a48:	d01c      	beq.n	8004a84 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2280      	movs	r2, #128	; 0x80
 8004a4e:	589b      	ldr	r3, [r3, r2]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	2180      	movs	r1, #128	; 0x80
 8004a56:	5852      	ldr	r2, [r2, r1]
 8004a58:	0010      	movs	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e012      	b.n	8004a84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	0018      	movs	r0, r3
 8004a62:	f000 f9e9 	bl	8004e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a66:	e00d      	b.n	8004a84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f000 f9e4 	bl	8004e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a70:	e008      	b.n	8004a84 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	0018      	movs	r0, r3
 8004a76:	f000 f9df 	bl	8004e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2290      	movs	r2, #144	; 0x90
 8004a7e:	2100      	movs	r1, #0
 8004a80:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004a82:	e1b9      	b.n	8004df8 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	46c0      	nop			; (mov r8, r8)
    return;
 8004a86:	e1b7      	b.n	8004df8 <HAL_UART_IRQHandler+0x62c>
 8004a88:	0000080f 	.word	0x0000080f
 8004a8c:	10000001 	.word	0x10000001
 8004a90:	04000120 	.word	0x04000120
 8004a94:	08005851 	.word	0x08005851

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d000      	beq.n	8004aa2 <HAL_UART_IRQHandler+0x2d6>
 8004aa0:	e13e      	b.n	8004d20 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aa2:	23a4      	movs	r3, #164	; 0xa4
 8004aa4:	18fb      	adds	r3, r7, r3
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	4013      	ands	r3, r2
 8004aac:	d100      	bne.n	8004ab0 <HAL_UART_IRQHandler+0x2e4>
 8004aae:	e137      	b.n	8004d20 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004ab0:	23a0      	movs	r3, #160	; 0xa0
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	4013      	ands	r3, r2
 8004aba:	d100      	bne.n	8004abe <HAL_UART_IRQHandler+0x2f2>
 8004abc:	e130      	b.n	8004d20 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2210      	movs	r2, #16
 8004ac4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2240      	movs	r2, #64	; 0x40
 8004ace:	4013      	ands	r3, r2
 8004ad0:	2b40      	cmp	r3, #64	; 0x40
 8004ad2:	d000      	beq.n	8004ad6 <HAL_UART_IRQHandler+0x30a>
 8004ad4:	e0a4      	b.n	8004c20 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	589b      	ldr	r3, [r3, r2]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	217e      	movs	r1, #126	; 0x7e
 8004ae2:	187b      	adds	r3, r7, r1
 8004ae4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004ae6:	187b      	adds	r3, r7, r1
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d100      	bne.n	8004af0 <HAL_UART_IRQHandler+0x324>
 8004aee:	e185      	b.n	8004dfc <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	225c      	movs	r2, #92	; 0x5c
 8004af4:	5a9b      	ldrh	r3, [r3, r2]
 8004af6:	187a      	adds	r2, r7, r1
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d300      	bcc.n	8004b00 <HAL_UART_IRQHandler+0x334>
 8004afe:	e17d      	b.n	8004dfc <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	187a      	adds	r2, r7, r1
 8004b04:	215e      	movs	r1, #94	; 0x5e
 8004b06:	8812      	ldrh	r2, [r2, #0]
 8004b08:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	589b      	ldr	r3, [r3, r2]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2220      	movs	r2, #32
 8004b16:	4013      	ands	r3, r2
 8004b18:	d170      	bne.n	8004bfc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b1e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b22:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b24:	2301      	movs	r3, #1
 8004b26:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b2a:	f383 8810 	msr	PRIMASK, r3
}
 8004b2e:	46c0      	nop			; (mov r8, r8)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681a      	ldr	r2, [r3, #0]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	49b4      	ldr	r1, [pc, #720]	; (8004e0c <HAL_UART_IRQHandler+0x640>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
 8004b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b42:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b46:	f383 8810 	msr	PRIMASK, r3
}
 8004b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b54:	677b      	str	r3, [r7, #116]	; 0x74
 8004b56:	2301      	movs	r3, #1
 8004b58:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b5c:	f383 8810 	msr	PRIMASK, r3
}
 8004b60:	46c0      	nop			; (mov r8, r8)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	438a      	bics	r2, r1
 8004b70:	609a      	str	r2, [r3, #8]
 8004b72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b74:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b78:	f383 8810 	msr	PRIMASK, r3
}
 8004b7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004b82:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004b84:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b86:	673b      	str	r3, [r7, #112]	; 0x70
 8004b88:	2301      	movs	r3, #1
 8004b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b8e:	f383 8810 	msr	PRIMASK, r3
}
 8004b92:	46c0      	nop			; (mov r8, r8)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689a      	ldr	r2, [r3, #8]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2140      	movs	r1, #64	; 0x40
 8004ba0:	438a      	bics	r2, r1
 8004ba2:	609a      	str	r2, [r3, #8]
 8004ba4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ba6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	228c      	movs	r2, #140	; 0x8c
 8004bb4:	2120      	movs	r1, #32
 8004bb6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004bc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bc8:	2301      	movs	r3, #1
 8004bca:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bce:	f383 8810 	msr	PRIMASK, r3
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2110      	movs	r1, #16
 8004be0:	438a      	bics	r2, r1
 8004be2:	601a      	str	r2, [r3, #0]
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	589b      	ldr	r3, [r3, r2]
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fd fb04 	bl	8002204 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	225c      	movs	r2, #92	; 0x5c
 8004c06:	5a9a      	ldrh	r2, [r3, r2]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	215e      	movs	r1, #94	; 0x5e
 8004c0c:	5a5b      	ldrh	r3, [r3, r1]
 8004c0e:	b29b      	uxth	r3, r3
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	0011      	movs	r1, r2
 8004c18:	0018      	movs	r0, r3
 8004c1a:	f000 f915 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c1e:	e0ed      	b.n	8004dfc <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	225c      	movs	r2, #92	; 0x5c
 8004c24:	5a99      	ldrh	r1, [r3, r2]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	225e      	movs	r2, #94	; 0x5e
 8004c2a:	5a9b      	ldrh	r3, [r3, r2]
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	208e      	movs	r0, #142	; 0x8e
 8004c30:	183b      	adds	r3, r7, r0
 8004c32:	1a8a      	subs	r2, r1, r2
 8004c34:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	225e      	movs	r2, #94	; 0x5e
 8004c3a:	5a9b      	ldrh	r3, [r3, r2]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d100      	bne.n	8004c44 <HAL_UART_IRQHandler+0x478>
 8004c42:	e0dd      	b.n	8004e00 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004c44:	183b      	adds	r3, r7, r0
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d100      	bne.n	8004c4e <HAL_UART_IRQHandler+0x482>
 8004c4c:	e0d8      	b.n	8004e00 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c52:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c54:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c56:	2488      	movs	r4, #136	; 0x88
 8004c58:	193a      	adds	r2, r7, r4
 8004c5a:	6013      	str	r3, [r2, #0]
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	f383 8810 	msr	PRIMASK, r3
}
 8004c66:	46c0      	nop			; (mov r8, r8)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4967      	ldr	r1, [pc, #412]	; (8004e10 <HAL_UART_IRQHandler+0x644>)
 8004c74:	400a      	ands	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	193b      	adds	r3, r7, r4
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	f383 8810 	msr	PRIMASK, r3
}
 8004c84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c86:	f3ef 8310 	mrs	r3, PRIMASK
 8004c8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c8c:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c8e:	2484      	movs	r4, #132	; 0x84
 8004c90:	193a      	adds	r2, r7, r4
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	2301      	movs	r3, #1
 8004c96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	f383 8810 	msr	PRIMASK, r3
}
 8004c9e:	46c0      	nop			; (mov r8, r8)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	689a      	ldr	r2, [r3, #8]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	495a      	ldr	r1, [pc, #360]	; (8004e14 <HAL_UART_IRQHandler+0x648>)
 8004cac:	400a      	ands	r2, r1
 8004cae:	609a      	str	r2, [r3, #8]
 8004cb0:	193b      	adds	r3, r7, r4
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	228c      	movs	r2, #140	; 0x8c
 8004cc2:	2120      	movs	r1, #32
 8004cc4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cd2:	f3ef 8310 	mrs	r3, PRIMASK
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cda:	2480      	movs	r4, #128	; 0x80
 8004cdc:	193a      	adds	r2, r7, r4
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce6:	f383 8810 	msr	PRIMASK, r3
}
 8004cea:	46c0      	nop			; (mov r8, r8)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	681a      	ldr	r2, [r3, #0]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2110      	movs	r1, #16
 8004cf8:	438a      	bics	r2, r1
 8004cfa:	601a      	str	r2, [r3, #0]
 8004cfc:	193b      	adds	r3, r7, r4
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d04:	f383 8810 	msr	PRIMASK, r3
}
 8004d08:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2202      	movs	r2, #2
 8004d0e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d10:	183b      	adds	r3, r7, r0
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	0011      	movs	r1, r2
 8004d18:	0018      	movs	r0, r3
 8004d1a:	f000 f895 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d1e:	e06f      	b.n	8004e00 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004d20:	23a4      	movs	r3, #164	; 0xa4
 8004d22:	18fb      	adds	r3, r7, r3
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	2380      	movs	r3, #128	; 0x80
 8004d28:	035b      	lsls	r3, r3, #13
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d010      	beq.n	8004d50 <HAL_UART_IRQHandler+0x584>
 8004d2e:	239c      	movs	r3, #156	; 0x9c
 8004d30:	18fb      	adds	r3, r7, r3
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	03db      	lsls	r3, r3, #15
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d009      	beq.n	8004d50 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2280      	movs	r2, #128	; 0x80
 8004d42:	0352      	lsls	r2, r2, #13
 8004d44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0018      	movs	r0, r3
 8004d4a:	f001 fa25 	bl	8006198 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d4e:	e05a      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004d50:	23a4      	movs	r3, #164	; 0xa4
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2280      	movs	r2, #128	; 0x80
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d016      	beq.n	8004d8a <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d5c:	23a0      	movs	r3, #160	; 0xa0
 8004d5e:	18fb      	adds	r3, r7, r3
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2280      	movs	r2, #128	; 0x80
 8004d64:	4013      	ands	r3, r2
 8004d66:	d106      	bne.n	8004d76 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d68:	239c      	movs	r3, #156	; 0x9c
 8004d6a:	18fb      	adds	r3, r7, r3
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	2380      	movs	r3, #128	; 0x80
 8004d70:	041b      	lsls	r3, r3, #16
 8004d72:	4013      	ands	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d042      	beq.n	8004e04 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	0010      	movs	r0, r2
 8004d86:	4798      	blx	r3
    }
    return;
 8004d88:	e03c      	b.n	8004e04 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d8a:	23a4      	movs	r3, #164	; 0xa4
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	4013      	ands	r3, r2
 8004d94:	d00a      	beq.n	8004dac <HAL_UART_IRQHandler+0x5e0>
 8004d96:	23a0      	movs	r3, #160	; 0xa0
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2240      	movs	r2, #64	; 0x40
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d004      	beq.n	8004dac <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fd6a 	bl	800587e <UART_EndTransmit_IT>
    return;
 8004daa:	e02c      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004dac:	23a4      	movs	r3, #164	; 0xa4
 8004dae:	18fb      	adds	r3, r7, r3
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	2380      	movs	r3, #128	; 0x80
 8004db4:	041b      	lsls	r3, r3, #16
 8004db6:	4013      	ands	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x606>
 8004dba:	23a0      	movs	r3, #160	; 0xa0
 8004dbc:	18fb      	adds	r3, r7, r3
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	2380      	movs	r3, #128	; 0x80
 8004dc2:	05db      	lsls	r3, r3, #23
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	f001 f9f4 	bl	80061b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004dd0:	e019      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004dd2:	23a4      	movs	r3, #164	; 0xa4
 8004dd4:	18fb      	adds	r3, r7, r3
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	2380      	movs	r3, #128	; 0x80
 8004dda:	045b      	lsls	r3, r3, #17
 8004ddc:	4013      	ands	r3, r2
 8004dde:	d012      	beq.n	8004e06 <HAL_UART_IRQHandler+0x63a>
 8004de0:	23a0      	movs	r3, #160	; 0xa0
 8004de2:	18fb      	adds	r3, r7, r3
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	da0d      	bge.n	8004e06 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0018      	movs	r0, r3
 8004dee:	f001 f9db 	bl	80061a8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004df2:	e008      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
      return;
 8004df4:	46c0      	nop			; (mov r8, r8)
 8004df6:	e006      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
    return;
 8004df8:	46c0      	nop			; (mov r8, r8)
 8004dfa:	e004      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
      return;
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	e002      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
      return;
 8004e00:	46c0      	nop			; (mov r8, r8)
 8004e02:	e000      	b.n	8004e06 <HAL_UART_IRQHandler+0x63a>
    return;
 8004e04:	46c0      	nop			; (mov r8, r8)
  }
}
 8004e06:	46bd      	mov	sp, r7
 8004e08:	b02a      	add	sp, #168	; 0xa8
 8004e0a:	bdb0      	pop	{r4, r5, r7, pc}
 8004e0c:	fffffeff 	.word	0xfffffeff
 8004e10:	fffffedf 	.word	0xfffffedf
 8004e14:	effffffe 	.word	0xeffffffe

08004e18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004e20:	46c0      	nop			; (mov r8, r8)
 8004e22:	46bd      	mov	sp, r7
 8004e24:	b002      	add	sp, #8
 8004e26:	bd80      	pop	{r7, pc}

08004e28 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004e30:	46c0      	nop			; (mov r8, r8)
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b002      	add	sp, #8
 8004e36:	bd80      	pop	{r7, pc}

08004e38 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004e40:	46c0      	nop			; (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b002      	add	sp, #8
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	000a      	movs	r2, r1
 8004e52:	1cbb      	adds	r3, r7, #2
 8004e54:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b002      	add	sp, #8
 8004e5c:	bd80      	pop	{r7, pc}
	...

08004e60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b088      	sub	sp, #32
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e68:	231a      	movs	r3, #26
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689a      	ldr	r2, [r3, #8]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	431a      	orrs	r2, r3
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4abc      	ldr	r2, [pc, #752]	; (8005180 <UART_SetConfig+0x320>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69fa      	ldr	r2, [r7, #28]
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	4ab7      	ldr	r2, [pc, #732]	; (8005184 <UART_SetConfig+0x324>)
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	0019      	movs	r1, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	68da      	ldr	r2, [r3, #12]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	699b      	ldr	r3, [r3, #24]
 8004eba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	69fa      	ldr	r2, [r7, #28]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	4aae      	ldr	r2, [pc, #696]	; (8005188 <UART_SetConfig+0x328>)
 8004ece:	4013      	ands	r3, r2
 8004ed0:	0019      	movs	r1, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee2:	220f      	movs	r2, #15
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	430a      	orrs	r2, r1
 8004ef2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4aa4      	ldr	r2, [pc, #656]	; (800518c <UART_SetConfig+0x32c>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d127      	bne.n	8004f4e <UART_SetConfig+0xee>
 8004efe:	4ba4      	ldr	r3, [pc, #656]	; (8005190 <UART_SetConfig+0x330>)
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	2203      	movs	r2, #3
 8004f04:	4013      	ands	r3, r2
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	d017      	beq.n	8004f3a <UART_SetConfig+0xda>
 8004f0a:	d81b      	bhi.n	8004f44 <UART_SetConfig+0xe4>
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d00a      	beq.n	8004f26 <UART_SetConfig+0xc6>
 8004f10:	d818      	bhi.n	8004f44 <UART_SetConfig+0xe4>
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <UART_SetConfig+0xbc>
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d00a      	beq.n	8004f30 <UART_SetConfig+0xd0>
 8004f1a:	e013      	b.n	8004f44 <UART_SetConfig+0xe4>
 8004f1c:	231b      	movs	r3, #27
 8004f1e:	18fb      	adds	r3, r7, r3
 8004f20:	2200      	movs	r2, #0
 8004f22:	701a      	strb	r2, [r3, #0]
 8004f24:	e058      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f26:	231b      	movs	r3, #27
 8004f28:	18fb      	adds	r3, r7, r3
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	701a      	strb	r2, [r3, #0]
 8004f2e:	e053      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f30:	231b      	movs	r3, #27
 8004f32:	18fb      	adds	r3, r7, r3
 8004f34:	2204      	movs	r2, #4
 8004f36:	701a      	strb	r2, [r3, #0]
 8004f38:	e04e      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f3a:	231b      	movs	r3, #27
 8004f3c:	18fb      	adds	r3, r7, r3
 8004f3e:	2208      	movs	r2, #8
 8004f40:	701a      	strb	r2, [r3, #0]
 8004f42:	e049      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f44:	231b      	movs	r3, #27
 8004f46:	18fb      	adds	r3, r7, r3
 8004f48:	2210      	movs	r2, #16
 8004f4a:	701a      	strb	r2, [r3, #0]
 8004f4c:	e044      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a90      	ldr	r2, [pc, #576]	; (8005194 <UART_SetConfig+0x334>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d127      	bne.n	8004fa8 <UART_SetConfig+0x148>
 8004f58:	4b8d      	ldr	r3, [pc, #564]	; (8005190 <UART_SetConfig+0x330>)
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5c:	220c      	movs	r2, #12
 8004f5e:	4013      	ands	r3, r2
 8004f60:	2b0c      	cmp	r3, #12
 8004f62:	d017      	beq.n	8004f94 <UART_SetConfig+0x134>
 8004f64:	d81b      	bhi.n	8004f9e <UART_SetConfig+0x13e>
 8004f66:	2b08      	cmp	r3, #8
 8004f68:	d00a      	beq.n	8004f80 <UART_SetConfig+0x120>
 8004f6a:	d818      	bhi.n	8004f9e <UART_SetConfig+0x13e>
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <UART_SetConfig+0x116>
 8004f70:	2b04      	cmp	r3, #4
 8004f72:	d00a      	beq.n	8004f8a <UART_SetConfig+0x12a>
 8004f74:	e013      	b.n	8004f9e <UART_SetConfig+0x13e>
 8004f76:	231b      	movs	r3, #27
 8004f78:	18fb      	adds	r3, r7, r3
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e02b      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f80:	231b      	movs	r3, #27
 8004f82:	18fb      	adds	r3, r7, r3
 8004f84:	2202      	movs	r2, #2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	e026      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f8a:	231b      	movs	r3, #27
 8004f8c:	18fb      	adds	r3, r7, r3
 8004f8e:	2204      	movs	r2, #4
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	e021      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f94:	231b      	movs	r3, #27
 8004f96:	18fb      	adds	r3, r7, r3
 8004f98:	2208      	movs	r2, #8
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	e01c      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004f9e:	231b      	movs	r3, #27
 8004fa0:	18fb      	adds	r3, r7, r3
 8004fa2:	2210      	movs	r2, #16
 8004fa4:	701a      	strb	r2, [r3, #0]
 8004fa6:	e017      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a7a      	ldr	r2, [pc, #488]	; (8005198 <UART_SetConfig+0x338>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d104      	bne.n	8004fbc <UART_SetConfig+0x15c>
 8004fb2:	231b      	movs	r3, #27
 8004fb4:	18fb      	adds	r3, r7, r3
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	701a      	strb	r2, [r3, #0]
 8004fba:	e00d      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a76      	ldr	r2, [pc, #472]	; (800519c <UART_SetConfig+0x33c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d104      	bne.n	8004fd0 <UART_SetConfig+0x170>
 8004fc6:	231b      	movs	r3, #27
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	2200      	movs	r2, #0
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e003      	b.n	8004fd8 <UART_SetConfig+0x178>
 8004fd0:	231b      	movs	r3, #27
 8004fd2:	18fb      	adds	r3, r7, r3
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	2380      	movs	r3, #128	; 0x80
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d000      	beq.n	8004fe6 <UART_SetConfig+0x186>
 8004fe4:	e065      	b.n	80050b2 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004fe6:	231b      	movs	r3, #27
 8004fe8:	18fb      	adds	r3, r7, r3
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	2b08      	cmp	r3, #8
 8004fee:	d015      	beq.n	800501c <UART_SetConfig+0x1bc>
 8004ff0:	dc18      	bgt.n	8005024 <UART_SetConfig+0x1c4>
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d00d      	beq.n	8005012 <UART_SetConfig+0x1b2>
 8004ff6:	dc15      	bgt.n	8005024 <UART_SetConfig+0x1c4>
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d002      	beq.n	8005002 <UART_SetConfig+0x1a2>
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d005      	beq.n	800500c <UART_SetConfig+0x1ac>
 8005000:	e010      	b.n	8005024 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005002:	f7fe f9a7 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 8005006:	0003      	movs	r3, r0
 8005008:	617b      	str	r3, [r7, #20]
        break;
 800500a:	e012      	b.n	8005032 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800500c:	4b64      	ldr	r3, [pc, #400]	; (80051a0 <UART_SetConfig+0x340>)
 800500e:	617b      	str	r3, [r7, #20]
        break;
 8005010:	e00f      	b.n	8005032 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005012:	f7fe f915 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 8005016:	0003      	movs	r3, r0
 8005018:	617b      	str	r3, [r7, #20]
        break;
 800501a:	e00a      	b.n	8005032 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	617b      	str	r3, [r7, #20]
        break;
 8005022:	e006      	b.n	8005032 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005028:	231a      	movs	r3, #26
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2201      	movs	r2, #1
 800502e:	701a      	strb	r2, [r3, #0]
        break;
 8005030:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d100      	bne.n	800503a <UART_SetConfig+0x1da>
 8005038:	e08d      	b.n	8005156 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800503e:	4b59      	ldr	r3, [pc, #356]	; (80051a4 <UART_SetConfig+0x344>)
 8005040:	0052      	lsls	r2, r2, #1
 8005042:	5ad3      	ldrh	r3, [r2, r3]
 8005044:	0019      	movs	r1, r3
 8005046:	6978      	ldr	r0, [r7, #20]
 8005048:	f7fb f866 	bl	8000118 <__udivsi3>
 800504c:	0003      	movs	r3, r0
 800504e:	005a      	lsls	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	085b      	lsrs	r3, r3, #1
 8005056:	18d2      	adds	r2, r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	0019      	movs	r1, r3
 800505e:	0010      	movs	r0, r2
 8005060:	f7fb f85a 	bl	8000118 <__udivsi3>
 8005064:	0003      	movs	r3, r0
 8005066:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	2b0f      	cmp	r3, #15
 800506c:	d91c      	bls.n	80050a8 <UART_SetConfig+0x248>
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	025b      	lsls	r3, r3, #9
 8005074:	429a      	cmp	r2, r3
 8005076:	d217      	bcs.n	80050a8 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	b29a      	uxth	r2, r3
 800507c:	200e      	movs	r0, #14
 800507e:	183b      	adds	r3, r7, r0
 8005080:	210f      	movs	r1, #15
 8005082:	438a      	bics	r2, r1
 8005084:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	085b      	lsrs	r3, r3, #1
 800508a:	b29b      	uxth	r3, r3
 800508c:	2207      	movs	r2, #7
 800508e:	4013      	ands	r3, r2
 8005090:	b299      	uxth	r1, r3
 8005092:	183b      	adds	r3, r7, r0
 8005094:	183a      	adds	r2, r7, r0
 8005096:	8812      	ldrh	r2, [r2, #0]
 8005098:	430a      	orrs	r2, r1
 800509a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	183a      	adds	r2, r7, r0
 80050a2:	8812      	ldrh	r2, [r2, #0]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	e056      	b.n	8005156 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80050a8:	231a      	movs	r3, #26
 80050aa:	18fb      	adds	r3, r7, r3
 80050ac:	2201      	movs	r2, #1
 80050ae:	701a      	strb	r2, [r3, #0]
 80050b0:	e051      	b.n	8005156 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050b2:	231b      	movs	r3, #27
 80050b4:	18fb      	adds	r3, r7, r3
 80050b6:	781b      	ldrb	r3, [r3, #0]
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d015      	beq.n	80050e8 <UART_SetConfig+0x288>
 80050bc:	dc18      	bgt.n	80050f0 <UART_SetConfig+0x290>
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d00d      	beq.n	80050de <UART_SetConfig+0x27e>
 80050c2:	dc15      	bgt.n	80050f0 <UART_SetConfig+0x290>
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <UART_SetConfig+0x26e>
 80050c8:	2b02      	cmp	r3, #2
 80050ca:	d005      	beq.n	80050d8 <UART_SetConfig+0x278>
 80050cc:	e010      	b.n	80050f0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050ce:	f7fe f941 	bl	8003354 <HAL_RCC_GetPCLK1Freq>
 80050d2:	0003      	movs	r3, r0
 80050d4:	617b      	str	r3, [r7, #20]
        break;
 80050d6:	e012      	b.n	80050fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050d8:	4b31      	ldr	r3, [pc, #196]	; (80051a0 <UART_SetConfig+0x340>)
 80050da:	617b      	str	r3, [r7, #20]
        break;
 80050dc:	e00f      	b.n	80050fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050de:	f7fe f8af 	bl	8003240 <HAL_RCC_GetSysClockFreq>
 80050e2:	0003      	movs	r3, r0
 80050e4:	617b      	str	r3, [r7, #20]
        break;
 80050e6:	e00a      	b.n	80050fe <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e8:	2380      	movs	r3, #128	; 0x80
 80050ea:	021b      	lsls	r3, r3, #8
 80050ec:	617b      	str	r3, [r7, #20]
        break;
 80050ee:	e006      	b.n	80050fe <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050f4:	231a      	movs	r3, #26
 80050f6:	18fb      	adds	r3, r7, r3
 80050f8:	2201      	movs	r2, #1
 80050fa:	701a      	strb	r2, [r3, #0]
        break;
 80050fc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d028      	beq.n	8005156 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005108:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <UART_SetConfig+0x344>)
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	5ad3      	ldrh	r3, [r2, r3]
 800510e:	0019      	movs	r1, r3
 8005110:	6978      	ldr	r0, [r7, #20]
 8005112:	f7fb f801 	bl	8000118 <__udivsi3>
 8005116:	0003      	movs	r3, r0
 8005118:	001a      	movs	r2, r3
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	18d2      	adds	r2, r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	0019      	movs	r1, r3
 8005128:	0010      	movs	r0, r2
 800512a:	f7fa fff5 	bl	8000118 <__udivsi3>
 800512e:	0003      	movs	r3, r0
 8005130:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	2b0f      	cmp	r3, #15
 8005136:	d90a      	bls.n	800514e <UART_SetConfig+0x2ee>
 8005138:	693a      	ldr	r2, [r7, #16]
 800513a:	2380      	movs	r3, #128	; 0x80
 800513c:	025b      	lsls	r3, r3, #9
 800513e:	429a      	cmp	r2, r3
 8005140:	d205      	bcs.n	800514e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	b29a      	uxth	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	60da      	str	r2, [r3, #12]
 800514c:	e003      	b.n	8005156 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800514e:	231a      	movs	r3, #26
 8005150:	18fb      	adds	r3, r7, r3
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	226a      	movs	r2, #106	; 0x6a
 800515a:	2101      	movs	r1, #1
 800515c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2268      	movs	r2, #104	; 0x68
 8005162:	2101      	movs	r1, #1
 8005164:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005172:	231a      	movs	r3, #26
 8005174:	18fb      	adds	r3, r7, r3
 8005176:	781b      	ldrb	r3, [r3, #0]
}
 8005178:	0018      	movs	r0, r3
 800517a:	46bd      	mov	sp, r7
 800517c:	b008      	add	sp, #32
 800517e:	bd80      	pop	{r7, pc}
 8005180:	cfff69f3 	.word	0xcfff69f3
 8005184:	ffffcfff 	.word	0xffffcfff
 8005188:	11fff4ff 	.word	0x11fff4ff
 800518c:	40013800 	.word	0x40013800
 8005190:	40021000 	.word	0x40021000
 8005194:	40004400 	.word	0x40004400
 8005198:	40004800 	.word	0x40004800
 800519c:	40004c00 	.word	0x40004c00
 80051a0:	00f42400 	.word	0x00f42400
 80051a4:	08007fd0 	.word	0x08007fd0

080051a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	2201      	movs	r2, #1
 80051b6:	4013      	ands	r3, r2
 80051b8:	d00b      	beq.n	80051d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	4a4a      	ldr	r2, [pc, #296]	; (80052ec <UART_AdvFeatureConfig+0x144>)
 80051c2:	4013      	ands	r3, r2
 80051c4:	0019      	movs	r1, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d6:	2202      	movs	r2, #2
 80051d8:	4013      	ands	r3, r2
 80051da:	d00b      	beq.n	80051f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	4a43      	ldr	r2, [pc, #268]	; (80052f0 <UART_AdvFeatureConfig+0x148>)
 80051e4:	4013      	ands	r3, r2
 80051e6:	0019      	movs	r1, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	2204      	movs	r2, #4
 80051fa:	4013      	ands	r3, r2
 80051fc:	d00b      	beq.n	8005216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	4a3b      	ldr	r2, [pc, #236]	; (80052f4 <UART_AdvFeatureConfig+0x14c>)
 8005206:	4013      	ands	r3, r2
 8005208:	0019      	movs	r1, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521a:	2208      	movs	r2, #8
 800521c:	4013      	ands	r3, r2
 800521e:	d00b      	beq.n	8005238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4a34      	ldr	r2, [pc, #208]	; (80052f8 <UART_AdvFeatureConfig+0x150>)
 8005228:	4013      	ands	r3, r2
 800522a:	0019      	movs	r1, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	2210      	movs	r2, #16
 800523e:	4013      	ands	r3, r2
 8005240:	d00b      	beq.n	800525a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	689b      	ldr	r3, [r3, #8]
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <UART_AdvFeatureConfig+0x154>)
 800524a:	4013      	ands	r3, r2
 800524c:	0019      	movs	r1, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	430a      	orrs	r2, r1
 8005258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800525e:	2220      	movs	r2, #32
 8005260:	4013      	ands	r3, r2
 8005262:	d00b      	beq.n	800527c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4a25      	ldr	r2, [pc, #148]	; (8005300 <UART_AdvFeatureConfig+0x158>)
 800526c:	4013      	ands	r3, r2
 800526e:	0019      	movs	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	430a      	orrs	r2, r1
 800527a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005280:	2240      	movs	r2, #64	; 0x40
 8005282:	4013      	ands	r3, r2
 8005284:	d01d      	beq.n	80052c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	4a1d      	ldr	r2, [pc, #116]	; (8005304 <UART_AdvFeatureConfig+0x15c>)
 800528e:	4013      	ands	r3, r2
 8005290:	0019      	movs	r1, r3
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	430a      	orrs	r2, r1
 800529c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	035b      	lsls	r3, r3, #13
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d10b      	bne.n	80052c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	4a15      	ldr	r2, [pc, #84]	; (8005308 <UART_AdvFeatureConfig+0x160>)
 80052b2:	4013      	ands	r3, r2
 80052b4:	0019      	movs	r1, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	430a      	orrs	r2, r1
 80052c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c6:	2280      	movs	r2, #128	; 0x80
 80052c8:	4013      	ands	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	4a0e      	ldr	r2, [pc, #56]	; (800530c <UART_AdvFeatureConfig+0x164>)
 80052d4:	4013      	ands	r3, r2
 80052d6:	0019      	movs	r1, r3
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	430a      	orrs	r2, r1
 80052e2:	605a      	str	r2, [r3, #4]
  }
}
 80052e4:	46c0      	nop			; (mov r8, r8)
 80052e6:	46bd      	mov	sp, r7
 80052e8:	b002      	add	sp, #8
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	fffdffff 	.word	0xfffdffff
 80052f0:	fffeffff 	.word	0xfffeffff
 80052f4:	fffbffff 	.word	0xfffbffff
 80052f8:	ffff7fff 	.word	0xffff7fff
 80052fc:	ffffefff 	.word	0xffffefff
 8005300:	ffffdfff 	.word	0xffffdfff
 8005304:	ffefffff 	.word	0xffefffff
 8005308:	ff9fffff 	.word	0xff9fffff
 800530c:	fff7ffff 	.word	0xfff7ffff

08005310 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b086      	sub	sp, #24
 8005314:	af02      	add	r7, sp, #8
 8005316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2290      	movs	r2, #144	; 0x90
 800531c:	2100      	movs	r1, #0
 800531e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005320:	f7fc fe88 	bl	8002034 <HAL_GetTick>
 8005324:	0003      	movs	r3, r0
 8005326:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2208      	movs	r2, #8
 8005330:	4013      	ands	r3, r2
 8005332:	2b08      	cmp	r3, #8
 8005334:	d10c      	bne.n	8005350 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2280      	movs	r2, #128	; 0x80
 800533a:	0391      	lsls	r1, r2, #14
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	4a1a      	ldr	r2, [pc, #104]	; (80053a8 <UART_CheckIdleState+0x98>)
 8005340:	9200      	str	r2, [sp, #0]
 8005342:	2200      	movs	r2, #0
 8005344:	f000 f832 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8005348:	1e03      	subs	r3, r0, #0
 800534a:	d001      	beq.n	8005350 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e026      	b.n	800539e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	2204      	movs	r2, #4
 8005358:	4013      	ands	r3, r2
 800535a:	2b04      	cmp	r3, #4
 800535c:	d10c      	bne.n	8005378 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	03d1      	lsls	r1, r2, #15
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	4a10      	ldr	r2, [pc, #64]	; (80053a8 <UART_CheckIdleState+0x98>)
 8005368:	9200      	str	r2, [sp, #0]
 800536a:	2200      	movs	r2, #0
 800536c:	f000 f81e 	bl	80053ac <UART_WaitOnFlagUntilTimeout>
 8005370:	1e03      	subs	r3, r0, #0
 8005372:	d001      	beq.n	8005378 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e012      	b.n	800539e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2288      	movs	r2, #136	; 0x88
 800537c:	2120      	movs	r1, #32
 800537e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	228c      	movs	r2, #140	; 0x8c
 8005384:	2120      	movs	r1, #32
 8005386:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2200      	movs	r2, #0
 800538c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2284      	movs	r2, #132	; 0x84
 8005398:	2100      	movs	r1, #0
 800539a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	0018      	movs	r0, r3
 80053a0:	46bd      	mov	sp, r7
 80053a2:	b004      	add	sp, #16
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	46c0      	nop			; (mov r8, r8)
 80053a8:	01ffffff 	.word	0x01ffffff

080053ac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b094      	sub	sp, #80	; 0x50
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	603b      	str	r3, [r7, #0]
 80053b8:	1dfb      	adds	r3, r7, #7
 80053ba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053bc:	e0a7      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053c0:	3301      	adds	r3, #1
 80053c2:	d100      	bne.n	80053c6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80053c4:	e0a3      	b.n	800550e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053c6:	f7fc fe35 	bl	8002034 <HAL_GetTick>
 80053ca:	0002      	movs	r2, r0
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	1ad3      	subs	r3, r2, r3
 80053d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d302      	bcc.n	80053dc <UART_WaitOnFlagUntilTimeout+0x30>
 80053d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d13f      	bne.n	800545c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053dc:	f3ef 8310 	mrs	r3, PRIMASK
 80053e0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80053e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053e4:	647b      	str	r3, [r7, #68]	; 0x44
 80053e6:	2301      	movs	r3, #1
 80053e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	f383 8810 	msr	PRIMASK, r3
}
 80053f0:	46c0      	nop			; (mov r8, r8)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	494e      	ldr	r1, [pc, #312]	; (8005538 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80053fe:	400a      	ands	r2, r1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005404:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005408:	f383 8810 	msr	PRIMASK, r3
}
 800540c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540e:	f3ef 8310 	mrs	r3, PRIMASK
 8005412:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005416:	643b      	str	r3, [r7, #64]	; 0x40
 8005418:	2301      	movs	r3, #1
 800541a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800541c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541e:	f383 8810 	msr	PRIMASK, r3
}
 8005422:	46c0      	nop			; (mov r8, r8)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	689a      	ldr	r2, [r3, #8]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2101      	movs	r1, #1
 8005430:	438a      	bics	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
 8005434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005436:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800543a:	f383 8810 	msr	PRIMASK, r3
}
 800543e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2288      	movs	r2, #136	; 0x88
 8005444:	2120      	movs	r1, #32
 8005446:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	228c      	movs	r2, #140	; 0x8c
 800544c:	2120      	movs	r1, #32
 800544e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	2284      	movs	r2, #132	; 0x84
 8005454:	2100      	movs	r1, #0
 8005456:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e069      	b.n	8005530 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2204      	movs	r2, #4
 8005464:	4013      	ands	r3, r2
 8005466:	d052      	beq.n	800550e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	69da      	ldr	r2, [r3, #28]
 800546e:	2380      	movs	r3, #128	; 0x80
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	401a      	ands	r2, r3
 8005474:	2380      	movs	r3, #128	; 0x80
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	429a      	cmp	r2, r3
 800547a:	d148      	bne.n	800550e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2280      	movs	r2, #128	; 0x80
 8005482:	0112      	lsls	r2, r2, #4
 8005484:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005486:	f3ef 8310 	mrs	r3, PRIMASK
 800548a:	613b      	str	r3, [r7, #16]
  return(result);
 800548c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800548e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005490:	2301      	movs	r3, #1
 8005492:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f383 8810 	msr	PRIMASK, r3
}
 800549a:	46c0      	nop			; (mov r8, r8)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4924      	ldr	r1, [pc, #144]	; (8005538 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80054a8:	400a      	ands	r2, r1
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054b0:	69bb      	ldr	r3, [r7, #24]
 80054b2:	f383 8810 	msr	PRIMASK, r3
}
 80054b6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054b8:	f3ef 8310 	mrs	r3, PRIMASK
 80054bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80054be:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80054c2:	2301      	movs	r3, #1
 80054c4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	f383 8810 	msr	PRIMASK, r3
}
 80054cc:	46c0      	nop			; (mov r8, r8)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2101      	movs	r1, #1
 80054da:	438a      	bics	r2, r1
 80054dc:	609a      	str	r2, [r3, #8]
 80054de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2288      	movs	r2, #136	; 0x88
 80054ee:	2120      	movs	r1, #32
 80054f0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	228c      	movs	r2, #140	; 0x8c
 80054f6:	2120      	movs	r1, #32
 80054f8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2290      	movs	r2, #144	; 0x90
 80054fe:	2120      	movs	r1, #32
 8005500:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2284      	movs	r2, #132	; 0x84
 8005506:	2100      	movs	r1, #0
 8005508:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800550a:	2303      	movs	r3, #3
 800550c:	e010      	b.n	8005530 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	68ba      	ldr	r2, [r7, #8]
 8005516:	4013      	ands	r3, r2
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	1ad3      	subs	r3, r2, r3
 800551c:	425a      	negs	r2, r3
 800551e:	4153      	adcs	r3, r2
 8005520:	b2db      	uxtb	r3, r3
 8005522:	001a      	movs	r2, r3
 8005524:	1dfb      	adds	r3, r7, #7
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d100      	bne.n	800552e <UART_WaitOnFlagUntilTimeout+0x182>
 800552c:	e747      	b.n	80053be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	0018      	movs	r0, r3
 8005532:	46bd      	mov	sp, r7
 8005534:	b014      	add	sp, #80	; 0x50
 8005536:	bd80      	pop	{r7, pc}
 8005538:	fffffe5f 	.word	0xfffffe5f

0800553c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b098      	sub	sp, #96	; 0x60
 8005540:	af00      	add	r7, sp, #0
 8005542:	60f8      	str	r0, [r7, #12]
 8005544:	60b9      	str	r1, [r7, #8]
 8005546:	1dbb      	adds	r3, r7, #6
 8005548:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	1dba      	adds	r2, r7, #6
 8005554:	215c      	movs	r1, #92	; 0x5c
 8005556:	8812      	ldrh	r2, [r2, #0]
 8005558:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	1dba      	adds	r2, r7, #6
 800555e:	215e      	movs	r1, #94	; 0x5e
 8005560:	8812      	ldrh	r2, [r2, #0]
 8005562:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	689a      	ldr	r2, [r3, #8]
 800556e:	2380      	movs	r3, #128	; 0x80
 8005570:	015b      	lsls	r3, r3, #5
 8005572:	429a      	cmp	r2, r3
 8005574:	d10d      	bne.n	8005592 <UART_Start_Receive_IT+0x56>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d104      	bne.n	8005588 <UART_Start_Receive_IT+0x4c>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2260      	movs	r2, #96	; 0x60
 8005582:	497b      	ldr	r1, [pc, #492]	; (8005770 <UART_Start_Receive_IT+0x234>)
 8005584:	5299      	strh	r1, [r3, r2]
 8005586:	e02e      	b.n	80055e6 <UART_Start_Receive_IT+0xaa>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2260      	movs	r2, #96	; 0x60
 800558c:	21ff      	movs	r1, #255	; 0xff
 800558e:	5299      	strh	r1, [r3, r2]
 8005590:	e029      	b.n	80055e6 <UART_Start_Receive_IT+0xaa>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10d      	bne.n	80055b6 <UART_Start_Receive_IT+0x7a>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <UART_Start_Receive_IT+0x70>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2260      	movs	r2, #96	; 0x60
 80055a6:	21ff      	movs	r1, #255	; 0xff
 80055a8:	5299      	strh	r1, [r3, r2]
 80055aa:	e01c      	b.n	80055e6 <UART_Start_Receive_IT+0xaa>
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2260      	movs	r2, #96	; 0x60
 80055b0:	217f      	movs	r1, #127	; 0x7f
 80055b2:	5299      	strh	r1, [r3, r2]
 80055b4:	e017      	b.n	80055e6 <UART_Start_Receive_IT+0xaa>
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689a      	ldr	r2, [r3, #8]
 80055ba:	2380      	movs	r3, #128	; 0x80
 80055bc:	055b      	lsls	r3, r3, #21
 80055be:	429a      	cmp	r2, r3
 80055c0:	d10d      	bne.n	80055de <UART_Start_Receive_IT+0xa2>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d104      	bne.n	80055d4 <UART_Start_Receive_IT+0x98>
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2260      	movs	r2, #96	; 0x60
 80055ce:	217f      	movs	r1, #127	; 0x7f
 80055d0:	5299      	strh	r1, [r3, r2]
 80055d2:	e008      	b.n	80055e6 <UART_Start_Receive_IT+0xaa>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2260      	movs	r2, #96	; 0x60
 80055d8:	213f      	movs	r1, #63	; 0x3f
 80055da:	5299      	strh	r1, [r3, r2]
 80055dc:	e003      	b.n	80055e6 <UART_Start_Receive_IT+0xaa>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2260      	movs	r2, #96	; 0x60
 80055e2:	2100      	movs	r1, #0
 80055e4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2290      	movs	r2, #144	; 0x90
 80055ea:	2100      	movs	r1, #0
 80055ec:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	228c      	movs	r2, #140	; 0x8c
 80055f2:	2122      	movs	r1, #34	; 0x22
 80055f4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055f6:	f3ef 8310 	mrs	r3, PRIMASK
 80055fa:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80055fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005600:	2301      	movs	r3, #1
 8005602:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005606:	f383 8810 	msr	PRIMASK, r3
}
 800560a:	46c0      	nop			; (mov r8, r8)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689a      	ldr	r2, [r3, #8]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2101      	movs	r1, #1
 8005618:	430a      	orrs	r2, r1
 800561a:	609a      	str	r2, [r3, #8]
 800561c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800561e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005620:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005622:	f383 8810 	msr	PRIMASK, r3
}
 8005626:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800562c:	2380      	movs	r3, #128	; 0x80
 800562e:	059b      	lsls	r3, r3, #22
 8005630:	429a      	cmp	r2, r3
 8005632:	d150      	bne.n	80056d6 <UART_Start_Receive_IT+0x19a>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2268      	movs	r2, #104	; 0x68
 8005638:	5a9b      	ldrh	r3, [r3, r2]
 800563a:	1dba      	adds	r2, r7, #6
 800563c:	8812      	ldrh	r2, [r2, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d349      	bcc.n	80056d6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689a      	ldr	r2, [r3, #8]
 8005646:	2380      	movs	r3, #128	; 0x80
 8005648:	015b      	lsls	r3, r3, #5
 800564a:	429a      	cmp	r2, r3
 800564c:	d107      	bne.n	800565e <UART_Start_Receive_IT+0x122>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d103      	bne.n	800565e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	4a46      	ldr	r2, [pc, #280]	; (8005774 <UART_Start_Receive_IT+0x238>)
 800565a:	675a      	str	r2, [r3, #116]	; 0x74
 800565c:	e002      	b.n	8005664 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4a45      	ldr	r2, [pc, #276]	; (8005778 <UART_Start_Receive_IT+0x23c>)
 8005662:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	691b      	ldr	r3, [r3, #16]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d019      	beq.n	80056a0 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800566c:	f3ef 8310 	mrs	r3, PRIMASK
 8005670:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005674:	65bb      	str	r3, [r7, #88]	; 0x58
 8005676:	2301      	movs	r3, #1
 8005678:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	f383 8810 	msr	PRIMASK, r3
}
 8005680:	46c0      	nop			; (mov r8, r8)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	2180      	movs	r1, #128	; 0x80
 800568e:	0049      	lsls	r1, r1, #1
 8005690:	430a      	orrs	r2, r1
 8005692:	601a      	str	r2, [r3, #0]
 8005694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800569a:	f383 8810 	msr	PRIMASK, r3
}
 800569e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056a0:	f3ef 8310 	mrs	r3, PRIMASK
 80056a4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80056a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056a8:	657b      	str	r3, [r7, #84]	; 0x54
 80056aa:	2301      	movs	r3, #1
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	f383 8810 	msr	PRIMASK, r3
}
 80056b4:	46c0      	nop			; (mov r8, r8)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	689a      	ldr	r2, [r3, #8]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0549      	lsls	r1, r1, #21
 80056c4:	430a      	orrs	r2, r1
 80056c6:	609a      	str	r2, [r3, #8]
 80056c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056ca:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ce:	f383 8810 	msr	PRIMASK, r3
}
 80056d2:	46c0      	nop			; (mov r8, r8)
 80056d4:	e047      	b.n	8005766 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	015b      	lsls	r3, r3, #5
 80056de:	429a      	cmp	r2, r3
 80056e0:	d107      	bne.n	80056f2 <UART_Start_Receive_IT+0x1b6>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d103      	bne.n	80056f2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a23      	ldr	r2, [pc, #140]	; (800577c <UART_Start_Receive_IT+0x240>)
 80056ee:	675a      	str	r2, [r3, #116]	; 0x74
 80056f0:	e002      	b.n	80056f8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a22      	ldr	r2, [pc, #136]	; (8005780 <UART_Start_Receive_IT+0x244>)
 80056f6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d019      	beq.n	8005734 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005700:	f3ef 8310 	mrs	r3, PRIMASK
 8005704:	61fb      	str	r3, [r7, #28]
  return(result);
 8005706:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005708:	64fb      	str	r3, [r7, #76]	; 0x4c
 800570a:	2301      	movs	r3, #1
 800570c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	f383 8810 	msr	PRIMASK, r3
}
 8005714:	46c0      	nop			; (mov r8, r8)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2190      	movs	r1, #144	; 0x90
 8005722:	0049      	lsls	r1, r1, #1
 8005724:	430a      	orrs	r2, r1
 8005726:	601a      	str	r2, [r3, #0]
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f383 8810 	msr	PRIMASK, r3
}
 8005732:	e018      	b.n	8005766 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005734:	f3ef 8310 	mrs	r3, PRIMASK
 8005738:	613b      	str	r3, [r7, #16]
  return(result);
 800573a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800573c:	653b      	str	r3, [r7, #80]	; 0x50
 800573e:	2301      	movs	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f383 8810 	msr	PRIMASK, r3
}
 8005748:	46c0      	nop			; (mov r8, r8)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2120      	movs	r1, #32
 8005756:	430a      	orrs	r2, r1
 8005758:	601a      	str	r2, [r3, #0]
 800575a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800575c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	f383 8810 	msr	PRIMASK, r3
}
 8005764:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005766:	2300      	movs	r3, #0
}
 8005768:	0018      	movs	r0, r3
 800576a:	46bd      	mov	sp, r7
 800576c:	b018      	add	sp, #96	; 0x60
 800576e:	bd80      	pop	{r7, pc}
 8005770:	000001ff 	.word	0x000001ff
 8005774:	08005ead 	.word	0x08005ead
 8005778:	08005bc1 	.word	0x08005bc1
 800577c:	08005a4d 	.word	0x08005a4d
 8005780:	080058d9 	.word	0x080058d9

08005784 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08e      	sub	sp, #56	; 0x38
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800578c:	f3ef 8310 	mrs	r3, PRIMASK
 8005790:	617b      	str	r3, [r7, #20]
  return(result);
 8005792:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005794:	637b      	str	r3, [r7, #52]	; 0x34
 8005796:	2301      	movs	r3, #1
 8005798:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f383 8810 	msr	PRIMASK, r3
}
 80057a0:	46c0      	nop			; (mov r8, r8)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4926      	ldr	r1, [pc, #152]	; (8005848 <UART_EndRxTransfer+0xc4>)
 80057ae:	400a      	ands	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057be:	f3ef 8310 	mrs	r3, PRIMASK
 80057c2:	623b      	str	r3, [r7, #32]
  return(result);
 80057c4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057c6:	633b      	str	r3, [r7, #48]	; 0x30
 80057c8:	2301      	movs	r3, #1
 80057ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			; (mov r8, r8)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	491b      	ldr	r1, [pc, #108]	; (800584c <UART_EndRxTransfer+0xc8>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d118      	bne.n	800582a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057f8:	f3ef 8310 	mrs	r3, PRIMASK
 80057fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80057fe:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005802:	2301      	movs	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f383 8810 	msr	PRIMASK, r3
}
 800580c:	46c0      	nop			; (mov r8, r8)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	2110      	movs	r1, #16
 800581a:	438a      	bics	r2, r1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	f383 8810 	msr	PRIMASK, r3
}
 8005828:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	228c      	movs	r2, #140	; 0x8c
 800582e:	2120      	movs	r1, #32
 8005830:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800583e:	46c0      	nop			; (mov r8, r8)
 8005840:	46bd      	mov	sp, r7
 8005842:	b00e      	add	sp, #56	; 0x38
 8005844:	bd80      	pop	{r7, pc}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	fffffedf 	.word	0xfffffedf
 800584c:	effffffe 	.word	0xeffffffe

08005850 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b084      	sub	sp, #16
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	225e      	movs	r2, #94	; 0x5e
 8005862:	2100      	movs	r1, #0
 8005864:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2256      	movs	r2, #86	; 0x56
 800586a:	2100      	movs	r1, #0
 800586c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	0018      	movs	r0, r3
 8005872:	f7ff fae1 	bl	8004e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	46bd      	mov	sp, r7
 800587a:	b004      	add	sp, #16
 800587c:	bd80      	pop	{r7, pc}

0800587e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800587e:	b580      	push	{r7, lr}
 8005880:	b086      	sub	sp, #24
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005886:	f3ef 8310 	mrs	r3, PRIMASK
 800588a:	60bb      	str	r3, [r7, #8]
  return(result);
 800588c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	2301      	movs	r3, #1
 8005892:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f383 8810 	msr	PRIMASK, r3
}
 800589a:	46c0      	nop			; (mov r8, r8)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2140      	movs	r1, #64	; 0x40
 80058a8:	438a      	bics	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	f383 8810 	msr	PRIMASK, r3
}
 80058b6:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2288      	movs	r2, #136	; 0x88
 80058bc:	2120      	movs	r1, #32
 80058be:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	0018      	movs	r0, r3
 80058ca:	f7ff faa5 	bl	8004e18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	46bd      	mov	sp, r7
 80058d2:	b006      	add	sp, #24
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b090      	sub	sp, #64	; 0x40
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058e0:	203e      	movs	r0, #62	; 0x3e
 80058e2:	183b      	adds	r3, r7, r0
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	2160      	movs	r1, #96	; 0x60
 80058e8:	5a52      	ldrh	r2, [r2, r1]
 80058ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	228c      	movs	r2, #140	; 0x8c
 80058f0:	589b      	ldr	r3, [r3, r2]
 80058f2:	2b22      	cmp	r3, #34	; 0x22
 80058f4:	d000      	beq.n	80058f8 <UART_RxISR_8BIT+0x20>
 80058f6:	e09a      	b.n	8005a2e <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058fe:	213c      	movs	r1, #60	; 0x3c
 8005900:	187b      	adds	r3, r7, r1
 8005902:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005904:	187b      	adds	r3, r7, r1
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	183b      	adds	r3, r7, r0
 800590c:	881b      	ldrh	r3, [r3, #0]
 800590e:	b2d9      	uxtb	r1, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	400a      	ands	r2, r1
 8005916:	b2d2      	uxtb	r2, r2
 8005918:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	1c5a      	adds	r2, r3, #1
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	225e      	movs	r2, #94	; 0x5e
 8005928:	5a9b      	ldrh	r3, [r3, r2]
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b299      	uxth	r1, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	225e      	movs	r2, #94	; 0x5e
 8005934:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	225e      	movs	r2, #94	; 0x5e
 800593a:	5a9b      	ldrh	r3, [r3, r2]
 800593c:	b29b      	uxth	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d000      	beq.n	8005944 <UART_RxISR_8BIT+0x6c>
 8005942:	e07c      	b.n	8005a3e <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005944:	f3ef 8310 	mrs	r3, PRIMASK
 8005948:	61bb      	str	r3, [r7, #24]
  return(result);
 800594a:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800594c:	63bb      	str	r3, [r7, #56]	; 0x38
 800594e:	2301      	movs	r3, #1
 8005950:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			; (mov r8, r8)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4938      	ldr	r1, [pc, #224]	; (8005a48 <UART_RxISR_8BIT+0x170>)
 8005966:	400a      	ands	r2, r1
 8005968:	601a      	str	r2, [r3, #0]
 800596a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800596c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596e:	6a3b      	ldr	r3, [r7, #32]
 8005970:	f383 8810 	msr	PRIMASK, r3
}
 8005974:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	637b      	str	r3, [r7, #52]	; 0x34
 8005980:	2301      	movs	r3, #1
 8005982:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	689a      	ldr	r2, [r3, #8]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2101      	movs	r1, #1
 8005998:	438a      	bics	r2, r1
 800599a:	609a      	str	r2, [r3, #8]
 800599c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800599e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	228c      	movs	r2, #140	; 0x8c
 80059ac:	2120      	movs	r1, #32
 80059ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d12f      	bne.n	8005a24 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ca:	f3ef 8310 	mrs	r3, PRIMASK
 80059ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80059d0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d2:	633b      	str	r3, [r7, #48]	; 0x30
 80059d4:	2301      	movs	r3, #1
 80059d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f383 8810 	msr	PRIMASK, r3
}
 80059de:	46c0      	nop			; (mov r8, r8)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2110      	movs	r1, #16
 80059ec:	438a      	bics	r2, r1
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f383 8810 	msr	PRIMASK, r3
}
 80059fa:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	2210      	movs	r2, #16
 8005a04:	4013      	ands	r3, r2
 8005a06:	2b10      	cmp	r3, #16
 8005a08:	d103      	bne.n	8005a12 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	2210      	movs	r2, #16
 8005a10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	225c      	movs	r2, #92	; 0x5c
 8005a16:	5a9a      	ldrh	r2, [r3, r2]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	0011      	movs	r1, r2
 8005a1c:	0018      	movs	r0, r3
 8005a1e:	f7ff fa13 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a22:	e00c      	b.n	8005a3e <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	0018      	movs	r0, r3
 8005a28:	f7ff f9fe 	bl	8004e28 <HAL_UART_RxCpltCallback>
}
 8005a2c:	e007      	b.n	8005a3e <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2108      	movs	r1, #8
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	619a      	str	r2, [r3, #24]
}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b010      	add	sp, #64	; 0x40
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	fffffedf 	.word	0xfffffedf

08005a4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b090      	sub	sp, #64	; 0x40
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a54:	203e      	movs	r0, #62	; 0x3e
 8005a56:	183b      	adds	r3, r7, r0
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	2160      	movs	r1, #96	; 0x60
 8005a5c:	5a52      	ldrh	r2, [r2, r1]
 8005a5e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	228c      	movs	r2, #140	; 0x8c
 8005a64:	589b      	ldr	r3, [r3, r2]
 8005a66:	2b22      	cmp	r3, #34	; 0x22
 8005a68:	d000      	beq.n	8005a6c <UART_RxISR_16BIT+0x20>
 8005a6a:	e09a      	b.n	8005ba2 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a72:	213c      	movs	r1, #60	; 0x3c
 8005a74:	187b      	adds	r3, r7, r1
 8005a76:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7c:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a7e:	187b      	adds	r3, r7, r1
 8005a80:	183a      	adds	r2, r7, r0
 8005a82:	881b      	ldrh	r3, [r3, #0]
 8005a84:	8812      	ldrh	r2, [r2, #0]
 8005a86:	4013      	ands	r3, r2
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a92:	1c9a      	adds	r2, r3, #2
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	225e      	movs	r2, #94	; 0x5e
 8005a9c:	5a9b      	ldrh	r3, [r3, r2]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b299      	uxth	r1, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	225e      	movs	r2, #94	; 0x5e
 8005aa8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	225e      	movs	r2, #94	; 0x5e
 8005aae:	5a9b      	ldrh	r3, [r3, r2]
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d000      	beq.n	8005ab8 <UART_RxISR_16BIT+0x6c>
 8005ab6:	e07c      	b.n	8005bb2 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8005abc:	617b      	str	r3, [r7, #20]
  return(result);
 8005abe:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	f383 8810 	msr	PRIMASK, r3
}
 8005acc:	46c0      	nop			; (mov r8, r8)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4938      	ldr	r1, [pc, #224]	; (8005bbc <UART_RxISR_16BIT+0x170>)
 8005ada:	400a      	ands	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]
 8005ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	f383 8810 	msr	PRIMASK, r3
}
 8005ae8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aea:	f3ef 8310 	mrs	r3, PRIMASK
 8005aee:	623b      	str	r3, [r7, #32]
  return(result);
 8005af0:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005af2:	633b      	str	r3, [r7, #48]	; 0x30
 8005af4:	2301      	movs	r3, #1
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	f383 8810 	msr	PRIMASK, r3
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	689a      	ldr	r2, [r3, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2101      	movs	r1, #1
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	609a      	str	r2, [r3, #8]
 8005b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	f383 8810 	msr	PRIMASK, r3
}
 8005b1a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	228c      	movs	r2, #140	; 0x8c
 8005b20:	2120      	movs	r1, #32
 8005b22:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d12f      	bne.n	8005b98 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b42:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b44:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b48:	2301      	movs	r3, #1
 8005b4a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f383 8810 	msr	PRIMASK, r3
}
 8005b52:	46c0      	nop			; (mov r8, r8)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2110      	movs	r1, #16
 8005b60:	438a      	bics	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]
 8005b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	f383 8810 	msr	PRIMASK, r3
}
 8005b6e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	69db      	ldr	r3, [r3, #28]
 8005b76:	2210      	movs	r2, #16
 8005b78:	4013      	ands	r3, r2
 8005b7a:	2b10      	cmp	r3, #16
 8005b7c:	d103      	bne.n	8005b86 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	225c      	movs	r2, #92	; 0x5c
 8005b8a:	5a9a      	ldrh	r2, [r3, r2]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	0011      	movs	r1, r2
 8005b90:	0018      	movs	r0, r3
 8005b92:	f7ff f959 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b96:	e00c      	b.n	8005bb2 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	f7ff f944 	bl	8004e28 <HAL_UART_RxCpltCallback>
}
 8005ba0:	e007      	b.n	8005bb2 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699a      	ldr	r2, [r3, #24]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2108      	movs	r1, #8
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	619a      	str	r2, [r3, #24]
}
 8005bb2:	46c0      	nop			; (mov r8, r8)
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	b010      	add	sp, #64	; 0x40
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	46c0      	nop			; (mov r8, r8)
 8005bbc:	fffffedf 	.word	0xfffffedf

08005bc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b09c      	sub	sp, #112	; 0x70
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005bc8:	236a      	movs	r3, #106	; 0x6a
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	2160      	movs	r1, #96	; 0x60
 8005bd0:	5a52      	ldrh	r2, [r2, r1]
 8005bd2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	228c      	movs	r2, #140	; 0x8c
 8005bf0:	589b      	ldr	r3, [r3, r2]
 8005bf2:	2b22      	cmp	r3, #34	; 0x22
 8005bf4:	d000      	beq.n	8005bf8 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005bf6:	e144      	b.n	8005e82 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005bf8:	235e      	movs	r3, #94	; 0x5e
 8005bfa:	18fb      	adds	r3, r7, r3
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	2168      	movs	r1, #104	; 0x68
 8005c00:	5a52      	ldrh	r2, [r2, r1]
 8005c02:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c04:	e0eb      	b.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c0c:	215c      	movs	r1, #92	; 0x5c
 8005c0e:	187b      	adds	r3, r7, r1
 8005c10:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005c12:	187b      	adds	r3, r7, r1
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	b2da      	uxtb	r2, r3
 8005c18:	236a      	movs	r3, #106	; 0x6a
 8005c1a:	18fb      	adds	r3, r7, r3
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	b2d9      	uxtb	r1, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	400a      	ands	r2, r1
 8005c26:	b2d2      	uxtb	r2, r2
 8005c28:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	225e      	movs	r2, #94	; 0x5e
 8005c38:	5a9b      	ldrh	r3, [r3, r2]
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b299      	uxth	r1, r3
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	225e      	movs	r2, #94	; 0x5e
 8005c44:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69db      	ldr	r3, [r3, #28]
 8005c4c:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005c4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c50:	2207      	movs	r2, #7
 8005c52:	4013      	ands	r3, r2
 8005c54:	d049      	beq.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c58:	2201      	movs	r2, #1
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	d010      	beq.n	8005c80 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005c5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	4013      	ands	r3, r2
 8005c66:	d00b      	beq.n	8005c80 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2290      	movs	r2, #144	; 0x90
 8005c74:	589b      	ldr	r3, [r3, r2]
 8005c76:	2201      	movs	r2, #1
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2190      	movs	r1, #144	; 0x90
 8005c7e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c82:	2202      	movs	r2, #2
 8005c84:	4013      	ands	r3, r2
 8005c86:	d00f      	beq.n	8005ca8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005c88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	4013      	ands	r3, r2
 8005c8e:	d00b      	beq.n	8005ca8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2202      	movs	r2, #2
 8005c96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2290      	movs	r2, #144	; 0x90
 8005c9c:	589b      	ldr	r3, [r3, r2]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2190      	movs	r1, #144	; 0x90
 8005ca6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005caa:	2204      	movs	r2, #4
 8005cac:	4013      	ands	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005cb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2204      	movs	r2, #4
 8005cbe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2290      	movs	r2, #144	; 0x90
 8005cc4:	589b      	ldr	r3, [r3, r2]
 8005cc6:	2202      	movs	r2, #2
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2190      	movs	r1, #144	; 0x90
 8005cce:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2290      	movs	r2, #144	; 0x90
 8005cd4:	589b      	ldr	r3, [r3, r2]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7ff f8ab 	bl	8004e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2290      	movs	r2, #144	; 0x90
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	225e      	movs	r2, #94	; 0x5e
 8005cee:	5a9b      	ldrh	r3, [r3, r2]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d173      	bne.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cf6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cfe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d00:	2301      	movs	r3, #1
 8005d02:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d06:	f383 8810 	msr	PRIMASK, r3
}
 8005d0a:	46c0      	nop			; (mov r8, r8)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4961      	ldr	r1, [pc, #388]	; (8005e9c <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005d18:	400a      	ands	r2, r1
 8005d1a:	601a      	str	r2, [r3, #0]
 8005d1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d1e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d22:	f383 8810 	msr	PRIMASK, r3
}
 8005d26:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d28:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d30:	657b      	str	r3, [r7, #84]	; 0x54
 8005d32:	2301      	movs	r3, #1
 8005d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d38:	f383 8810 	msr	PRIMASK, r3
}
 8005d3c:	46c0      	nop			; (mov r8, r8)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	689a      	ldr	r2, [r3, #8]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4955      	ldr	r1, [pc, #340]	; (8005ea0 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005d4a:	400a      	ands	r2, r1
 8005d4c:	609a      	str	r2, [r3, #8]
 8005d4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d50:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	228c      	movs	r2, #140	; 0x8c
 8005d5e:	2120      	movs	r1, #32
 8005d60:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2200      	movs	r2, #0
 8005d66:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d12f      	bne.n	8005dd6 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	623b      	str	r3, [r7, #32]
  return(result);
 8005d82:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	653b      	str	r3, [r7, #80]	; 0x50
 8005d86:	2301      	movs	r3, #1
 8005d88:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			; (mov r8, r8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2110      	movs	r1, #16
 8005d9e:	438a      	bics	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	2210      	movs	r2, #16
 8005db6:	4013      	ands	r3, r2
 8005db8:	2b10      	cmp	r3, #16
 8005dba:	d103      	bne.n	8005dc4 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2210      	movs	r2, #16
 8005dc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	225c      	movs	r2, #92	; 0x5c
 8005dc8:	5a9a      	ldrh	r2, [r3, r2]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	0011      	movs	r1, r2
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f7ff f83a 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
 8005dd4:	e003      	b.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7ff f825 	bl	8004e28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dde:	235e      	movs	r3, #94	; 0x5e
 8005de0:	18fb      	adds	r3, r7, r3
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d004      	beq.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	2220      	movs	r2, #32
 8005dec:	4013      	ands	r3, r2
 8005dee:	d000      	beq.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0x232>
 8005df0:	e709      	b.n	8005c06 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005df2:	204e      	movs	r0, #78	; 0x4e
 8005df4:	183b      	adds	r3, r7, r0
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	215e      	movs	r1, #94	; 0x5e
 8005dfa:	5a52      	ldrh	r2, [r2, r1]
 8005dfc:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dfe:	0001      	movs	r1, r0
 8005e00:	187b      	adds	r3, r7, r1
 8005e02:	881b      	ldrh	r3, [r3, #0]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d044      	beq.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2268      	movs	r2, #104	; 0x68
 8005e0c:	5a9b      	ldrh	r3, [r3, r2]
 8005e0e:	187a      	adds	r2, r7, r1
 8005e10:	8812      	ldrh	r2, [r2, #0]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d23d      	bcs.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e16:	f3ef 8310 	mrs	r3, PRIMASK
 8005e1a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005e1c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e20:	2301      	movs	r3, #1
 8005e22:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	f383 8810 	msr	PRIMASK, r3
}
 8005e2a:	46c0      	nop			; (mov r8, r8)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689a      	ldr	r2, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	491b      	ldr	r1, [pc, #108]	; (8005ea4 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005e38:	400a      	ands	r2, r1
 8005e3a:	609a      	str	r2, [r3, #8]
 8005e3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005e3e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f383 8810 	msr	PRIMASK, r3
}
 8005e46:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005e4c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e4e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e52:	617b      	str	r3, [r7, #20]
  return(result);
 8005e54:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e56:	647b      	str	r3, [r7, #68]	; 0x44
 8005e58:	2301      	movs	r3, #1
 8005e5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f383 8810 	msr	PRIMASK, r3
}
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	2120      	movs	r1, #32
 8005e70:	430a      	orrs	r2, r1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e78:	69fb      	ldr	r3, [r7, #28]
 8005e7a:	f383 8810 	msr	PRIMASK, r3
}
 8005e7e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e80:	e007      	b.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2108      	movs	r1, #8
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	619a      	str	r2, [r3, #24]
}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	46bd      	mov	sp, r7
 8005e96:	b01c      	add	sp, #112	; 0x70
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	46c0      	nop			; (mov r8, r8)
 8005e9c:	fffffeff 	.word	0xfffffeff
 8005ea0:	effffffe 	.word	0xeffffffe
 8005ea4:	efffffff 	.word	0xefffffff
 8005ea8:	080058d9 	.word	0x080058d9

08005eac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b09e      	sub	sp, #120	; 0x78
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005eb4:	2372      	movs	r3, #114	; 0x72
 8005eb6:	18fb      	adds	r3, r7, r3
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	2160      	movs	r1, #96	; 0x60
 8005ebc:	5a52      	ldrh	r2, [r2, r1]
 8005ebe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	228c      	movs	r2, #140	; 0x8c
 8005edc:	589b      	ldr	r3, [r3, r2]
 8005ede:	2b22      	cmp	r3, #34	; 0x22
 8005ee0:	d000      	beq.n	8005ee4 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005ee2:	e144      	b.n	800616e <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ee4:	2366      	movs	r3, #102	; 0x66
 8005ee6:	18fb      	adds	r3, r7, r3
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	2168      	movs	r1, #104	; 0x68
 8005eec:	5a52      	ldrh	r2, [r2, r1]
 8005eee:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ef0:	e0eb      	b.n	80060ca <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ef8:	2164      	movs	r1, #100	; 0x64
 8005efa:	187b      	adds	r3, r7, r1
 8005efc:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005f04:	187b      	adds	r3, r7, r1
 8005f06:	2272      	movs	r2, #114	; 0x72
 8005f08:	18ba      	adds	r2, r7, r2
 8005f0a:	881b      	ldrh	r3, [r3, #0]
 8005f0c:	8812      	ldrh	r2, [r2, #0]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	1c9a      	adds	r2, r3, #2
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	225e      	movs	r2, #94	; 0x5e
 8005f24:	5a9b      	ldrh	r3, [r3, r2]
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b299      	uxth	r1, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	225e      	movs	r2, #94	; 0x5e
 8005f30:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	69db      	ldr	r3, [r3, #28]
 8005f38:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	4013      	ands	r3, r2
 8005f40:	d049      	beq.n	8005fd6 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f44:	2201      	movs	r2, #1
 8005f46:	4013      	ands	r3, r2
 8005f48:	d010      	beq.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005f4a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f4c:	2380      	movs	r3, #128	; 0x80
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4013      	ands	r3, r2
 8005f52:	d00b      	beq.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2201      	movs	r2, #1
 8005f5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2290      	movs	r2, #144	; 0x90
 8005f60:	589b      	ldr	r3, [r3, r2]
 8005f62:	2201      	movs	r2, #1
 8005f64:	431a      	orrs	r2, r3
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2190      	movs	r1, #144	; 0x90
 8005f6a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6e:	2202      	movs	r2, #2
 8005f70:	4013      	ands	r3, r2
 8005f72:	d00f      	beq.n	8005f94 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005f74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f76:	2201      	movs	r2, #1
 8005f78:	4013      	ands	r3, r2
 8005f7a:	d00b      	beq.n	8005f94 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2202      	movs	r2, #2
 8005f82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2290      	movs	r2, #144	; 0x90
 8005f88:	589b      	ldr	r3, [r3, r2]
 8005f8a:	2204      	movs	r2, #4
 8005f8c:	431a      	orrs	r2, r3
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2190      	movs	r1, #144	; 0x90
 8005f92:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f96:	2204      	movs	r2, #4
 8005f98:	4013      	ands	r3, r2
 8005f9a:	d00f      	beq.n	8005fbc <UART_RxISR_16BIT_FIFOEN+0x110>
 8005f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	4013      	ands	r3, r2
 8005fa2:	d00b      	beq.n	8005fbc <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2204      	movs	r2, #4
 8005faa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2290      	movs	r2, #144	; 0x90
 8005fb0:	589b      	ldr	r3, [r3, r2]
 8005fb2:	2202      	movs	r2, #2
 8005fb4:	431a      	orrs	r2, r3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2190      	movs	r1, #144	; 0x90
 8005fba:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2290      	movs	r2, #144	; 0x90
 8005fc0:	589b      	ldr	r3, [r3, r2]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d007      	beq.n	8005fd6 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7fe ff35 	bl	8004e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2290      	movs	r2, #144	; 0x90
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	225e      	movs	r2, #94	; 0x5e
 8005fda:	5a9b      	ldrh	r3, [r3, r2]
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d173      	bne.n	80060ca <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fe2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fe6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fec:	2301      	movs	r3, #1
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff2:	f383 8810 	msr	PRIMASK, r3
}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4961      	ldr	r1, [pc, #388]	; (8006188 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8006004:	400a      	ands	r2, r1
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800600a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800600c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800600e:	f383 8810 	msr	PRIMASK, r3
}
 8006012:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006014:	f3ef 8310 	mrs	r3, PRIMASK
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800601a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800601c:	65bb      	str	r3, [r7, #88]	; 0x58
 800601e:	2301      	movs	r3, #1
 8006020:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4955      	ldr	r1, [pc, #340]	; (800618c <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8006036:	400a      	ands	r2, r1
 8006038:	609a      	str	r2, [r3, #8]
 800603a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800603c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006040:	f383 8810 	msr	PRIMASK, r3
}
 8006044:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	228c      	movs	r2, #140	; 0x8c
 800604a:	2120      	movs	r1, #32
 800604c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2200      	movs	r2, #0
 8006052:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605e:	2b01      	cmp	r3, #1
 8006060:	d12f      	bne.n	80060c2 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2200      	movs	r2, #0
 8006066:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006068:	f3ef 8310 	mrs	r3, PRIMASK
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006070:	657b      	str	r3, [r7, #84]	; 0x54
 8006072:	2301      	movs	r3, #1
 8006074:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006078:	f383 8810 	msr	PRIMASK, r3
}
 800607c:	46c0      	nop			; (mov r8, r8)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	2110      	movs	r1, #16
 800608a:	438a      	bics	r2, r1
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006090:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006094:	f383 8810 	msr	PRIMASK, r3
}
 8006098:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	69db      	ldr	r3, [r3, #28]
 80060a0:	2210      	movs	r2, #16
 80060a2:	4013      	ands	r3, r2
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d103      	bne.n	80060b0 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2210      	movs	r2, #16
 80060ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	225c      	movs	r2, #92	; 0x5c
 80060b4:	5a9a      	ldrh	r2, [r3, r2]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	0011      	movs	r1, r2
 80060ba:	0018      	movs	r0, r3
 80060bc:	f7fe fec4 	bl	8004e48 <HAL_UARTEx_RxEventCallback>
 80060c0:	e003      	b.n	80060ca <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	0018      	movs	r0, r3
 80060c6:	f7fe feaf 	bl	8004e28 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060ca:	2366      	movs	r3, #102	; 0x66
 80060cc:	18fb      	adds	r3, r7, r3
 80060ce:	881b      	ldrh	r3, [r3, #0]
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d004      	beq.n	80060de <UART_RxISR_16BIT_FIFOEN+0x232>
 80060d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060d6:	2220      	movs	r2, #32
 80060d8:	4013      	ands	r3, r2
 80060da:	d000      	beq.n	80060de <UART_RxISR_16BIT_FIFOEN+0x232>
 80060dc:	e709      	b.n	8005ef2 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060de:	2052      	movs	r0, #82	; 0x52
 80060e0:	183b      	adds	r3, r7, r0
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	215e      	movs	r1, #94	; 0x5e
 80060e6:	5a52      	ldrh	r2, [r2, r1]
 80060e8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060ea:	0001      	movs	r1, r0
 80060ec:	187b      	adds	r3, r7, r1
 80060ee:	881b      	ldrh	r3, [r3, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d044      	beq.n	800617e <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2268      	movs	r2, #104	; 0x68
 80060f8:	5a9b      	ldrh	r3, [r3, r2]
 80060fa:	187a      	adds	r2, r7, r1
 80060fc:	8812      	ldrh	r2, [r2, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d23d      	bcs.n	800617e <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006102:	f3ef 8310 	mrs	r3, PRIMASK
 8006106:	60fb      	str	r3, [r7, #12]
  return(result);
 8006108:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800610a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800610c:	2301      	movs	r3, #1
 800610e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006110:	693b      	ldr	r3, [r7, #16]
 8006112:	f383 8810 	msr	PRIMASK, r3
}
 8006116:	46c0      	nop			; (mov r8, r8)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689a      	ldr	r2, [r3, #8]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	491b      	ldr	r1, [pc, #108]	; (8006190 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8006124:	400a      	ands	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
 8006128:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800612a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	f383 8810 	msr	PRIMASK, r3
}
 8006132:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a17      	ldr	r2, [pc, #92]	; (8006194 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8006138:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800613a:	f3ef 8310 	mrs	r3, PRIMASK
 800613e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006140:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006142:	64bb      	str	r3, [r7, #72]	; 0x48
 8006144:	2301      	movs	r3, #1
 8006146:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	f383 8810 	msr	PRIMASK, r3
}
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2120      	movs	r1, #32
 800615c:	430a      	orrs	r2, r1
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006162:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f383 8810 	msr	PRIMASK, r3
}
 800616a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800616c:	e007      	b.n	800617e <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	2108      	movs	r1, #8
 800617a:	430a      	orrs	r2, r1
 800617c:	619a      	str	r2, [r3, #24]
}
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	46bd      	mov	sp, r7
 8006182:	b01e      	add	sp, #120	; 0x78
 8006184:	bd80      	pop	{r7, pc}
 8006186:	46c0      	nop			; (mov r8, r8)
 8006188:	fffffeff 	.word	0xfffffeff
 800618c:	effffffe 	.word	0xeffffffe
 8006190:	efffffff 	.word	0xefffffff
 8006194:	08005a4d 	.word	0x08005a4d

08006198 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061a0:	46c0      	nop			; (mov r8, r8)
 80061a2:	46bd      	mov	sp, r7
 80061a4:	b002      	add	sp, #8
 80061a6:	bd80      	pop	{r7, pc}

080061a8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b082      	sub	sp, #8
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061b0:	46c0      	nop			; (mov r8, r8)
 80061b2:	46bd      	mov	sp, r7
 80061b4:	b002      	add	sp, #8
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061c0:	46c0      	nop			; (mov r8, r8)
 80061c2:	46bd      	mov	sp, r7
 80061c4:	b002      	add	sp, #8
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b084      	sub	sp, #16
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2284      	movs	r2, #132	; 0x84
 80061d4:	5c9b      	ldrb	r3, [r3, r2]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_UARTEx_DisableFifoMode+0x16>
 80061da:	2302      	movs	r3, #2
 80061dc:	e027      	b.n	800622e <HAL_UARTEx_DisableFifoMode+0x66>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2284      	movs	r2, #132	; 0x84
 80061e2:	2101      	movs	r1, #1
 80061e4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2288      	movs	r2, #136	; 0x88
 80061ea:	2124      	movs	r1, #36	; 0x24
 80061ec:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2101      	movs	r1, #1
 8006202:	438a      	bics	r2, r1
 8006204:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	4a0b      	ldr	r2, [pc, #44]	; (8006238 <HAL_UARTEx_DisableFifoMode+0x70>)
 800620a:	4013      	ands	r3, r2
 800620c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2288      	movs	r2, #136	; 0x88
 8006220:	2120      	movs	r1, #32
 8006222:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2284      	movs	r2, #132	; 0x84
 8006228:	2100      	movs	r1, #0
 800622a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800622c:	2300      	movs	r3, #0
}
 800622e:	0018      	movs	r0, r3
 8006230:	46bd      	mov	sp, r7
 8006232:	b004      	add	sp, #16
 8006234:	bd80      	pop	{r7, pc}
 8006236:	46c0      	nop			; (mov r8, r8)
 8006238:	dfffffff 	.word	0xdfffffff

0800623c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b084      	sub	sp, #16
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
 8006244:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2284      	movs	r2, #132	; 0x84
 800624a:	5c9b      	ldrb	r3, [r3, r2]
 800624c:	2b01      	cmp	r3, #1
 800624e:	d101      	bne.n	8006254 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006250:	2302      	movs	r3, #2
 8006252:	e02e      	b.n	80062b2 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2284      	movs	r2, #132	; 0x84
 8006258:	2101      	movs	r1, #1
 800625a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2288      	movs	r2, #136	; 0x88
 8006260:	2124      	movs	r1, #36	; 0x24
 8006262:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	2101      	movs	r1, #1
 8006278:	438a      	bics	r2, r1
 800627a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	00db      	lsls	r3, r3, #3
 8006284:	08d9      	lsrs	r1, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	430a      	orrs	r2, r1
 800628e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	0018      	movs	r0, r3
 8006294:	f000 f854 	bl	8006340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2288      	movs	r2, #136	; 0x88
 80062a4:	2120      	movs	r1, #32
 80062a6:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2284      	movs	r2, #132	; 0x84
 80062ac:	2100      	movs	r1, #0
 80062ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	0018      	movs	r0, r3
 80062b4:	46bd      	mov	sp, r7
 80062b6:	b004      	add	sp, #16
 80062b8:	bd80      	pop	{r7, pc}
	...

080062bc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2284      	movs	r2, #132	; 0x84
 80062ca:	5c9b      	ldrb	r3, [r3, r2]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e02f      	b.n	8006334 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2284      	movs	r2, #132	; 0x84
 80062d8:	2101      	movs	r1, #1
 80062da:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2288      	movs	r2, #136	; 0x88
 80062e0:	2124      	movs	r1, #36	; 0x24
 80062e2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2101      	movs	r1, #1
 80062f8:	438a      	bics	r2, r1
 80062fa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	4a0e      	ldr	r2, [pc, #56]	; (800633c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006304:	4013      	ands	r3, r2
 8006306:	0019      	movs	r1, r3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	683a      	ldr	r2, [r7, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	0018      	movs	r0, r3
 8006316:	f000 f813 	bl	8006340 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2288      	movs	r2, #136	; 0x88
 8006326:	2120      	movs	r1, #32
 8006328:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2284      	movs	r2, #132	; 0x84
 800632e:	2100      	movs	r1, #0
 8006330:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b004      	add	sp, #16
 800633a:	bd80      	pop	{r7, pc}
 800633c:	f1ffffff 	.word	0xf1ffffff

08006340 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800634c:	2b00      	cmp	r3, #0
 800634e:	d108      	bne.n	8006362 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	226a      	movs	r2, #106	; 0x6a
 8006354:	2101      	movs	r1, #1
 8006356:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2268      	movs	r2, #104	; 0x68
 800635c:	2101      	movs	r1, #1
 800635e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006360:	e043      	b.n	80063ea <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006362:	260f      	movs	r6, #15
 8006364:	19bb      	adds	r3, r7, r6
 8006366:	2208      	movs	r2, #8
 8006368:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800636a:	200e      	movs	r0, #14
 800636c:	183b      	adds	r3, r7, r0
 800636e:	2208      	movs	r2, #8
 8006370:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	0e5b      	lsrs	r3, r3, #25
 800637a:	b2da      	uxtb	r2, r3
 800637c:	240d      	movs	r4, #13
 800637e:	193b      	adds	r3, r7, r4
 8006380:	2107      	movs	r1, #7
 8006382:	400a      	ands	r2, r1
 8006384:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	0f5b      	lsrs	r3, r3, #29
 800638e:	b2da      	uxtb	r2, r3
 8006390:	250c      	movs	r5, #12
 8006392:	197b      	adds	r3, r7, r5
 8006394:	2107      	movs	r1, #7
 8006396:	400a      	ands	r2, r1
 8006398:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800639a:	183b      	adds	r3, r7, r0
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	197a      	adds	r2, r7, r5
 80063a0:	7812      	ldrb	r2, [r2, #0]
 80063a2:	4914      	ldr	r1, [pc, #80]	; (80063f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80063a4:	5c8a      	ldrb	r2, [r1, r2]
 80063a6:	435a      	muls	r2, r3
 80063a8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80063aa:	197b      	adds	r3, r7, r5
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4a12      	ldr	r2, [pc, #72]	; (80063f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80063b0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063b2:	0019      	movs	r1, r3
 80063b4:	f7f9 ff3a 	bl	800022c <__divsi3>
 80063b8:	0003      	movs	r3, r0
 80063ba:	b299      	uxth	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	226a      	movs	r2, #106	; 0x6a
 80063c0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063c2:	19bb      	adds	r3, r7, r6
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	193a      	adds	r2, r7, r4
 80063c8:	7812      	ldrb	r2, [r2, #0]
 80063ca:	490a      	ldr	r1, [pc, #40]	; (80063f4 <UARTEx_SetNbDataToProcess+0xb4>)
 80063cc:	5c8a      	ldrb	r2, [r1, r2]
 80063ce:	435a      	muls	r2, r3
 80063d0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80063d2:	193b      	adds	r3, r7, r4
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	4a08      	ldr	r2, [pc, #32]	; (80063f8 <UARTEx_SetNbDataToProcess+0xb8>)
 80063d8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063da:	0019      	movs	r1, r3
 80063dc:	f7f9 ff26 	bl	800022c <__divsi3>
 80063e0:	0003      	movs	r3, r0
 80063e2:	b299      	uxth	r1, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2268      	movs	r2, #104	; 0x68
 80063e8:	5299      	strh	r1, [r3, r2]
}
 80063ea:	46c0      	nop			; (mov r8, r8)
 80063ec:	46bd      	mov	sp, r7
 80063ee:	b005      	add	sp, #20
 80063f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063f2:	46c0      	nop			; (mov r8, r8)
 80063f4:	08007fe8 	.word	0x08007fe8
 80063f8:	08007ff0 	.word	0x08007ff0

080063fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	0002      	movs	r2, r0
 8006404:	1dbb      	adds	r3, r7, #6
 8006406:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8006408:	2300      	movs	r3, #0
 800640a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800640c:	1dbb      	adds	r3, r7, #6
 800640e:	2200      	movs	r2, #0
 8006410:	5e9b      	ldrsh	r3, [r3, r2]
 8006412:	2b84      	cmp	r3, #132	; 0x84
 8006414:	d006      	beq.n	8006424 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8006416:	1dbb      	adds	r3, r7, #6
 8006418:	2200      	movs	r2, #0
 800641a:	5e9a      	ldrsh	r2, [r3, r2]
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	18d3      	adds	r3, r2, r3
 8006420:	3303      	adds	r3, #3
 8006422:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8006424:	68fb      	ldr	r3, [r7, #12]
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b004      	add	sp, #16
 800642c:	bd80      	pop	{r7, pc}

0800642e <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8006432:	f000 fdeb 	bl	800700c <vTaskStartScheduler>
  
  return osOK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	0018      	movs	r0, r3
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}

0800643e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800643e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006440:	b087      	sub	sp, #28
 8006442:	af02      	add	r7, sp, #8
 8006444:	6078      	str	r0, [r7, #4]
 8006446:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685c      	ldr	r4, [r3, #4]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006454:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2208      	movs	r2, #8
 800645a:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800645c:	0018      	movs	r0, r3
 800645e:	f7ff ffcd 	bl	80063fc <makeFreeRtosPriority>
 8006462:	0001      	movs	r1, r0
 8006464:	683a      	ldr	r2, [r7, #0]
 8006466:	230c      	movs	r3, #12
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	9301      	str	r3, [sp, #4]
 800646c:	9100      	str	r1, [sp, #0]
 800646e:	0013      	movs	r3, r2
 8006470:	0032      	movs	r2, r6
 8006472:	0029      	movs	r1, r5
 8006474:	0020      	movs	r0, r4
 8006476:	f000 fc75 	bl	8006d64 <xTaskCreate>
 800647a:	0003      	movs	r3, r0
 800647c:	2b01      	cmp	r3, #1
 800647e:	d001      	beq.n	8006484 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8006480:	2300      	movs	r3, #0
 8006482:	e000      	b.n	8006486 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8006484:	68fb      	ldr	r3, [r7, #12]
}
 8006486:	0018      	movs	r0, r3
 8006488:	46bd      	mov	sp, r7
 800648a:	b005      	add	sp, #20
 800648c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800648e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b084      	sub	sp, #16
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d001      	beq.n	80064a4 <osDelay+0x16>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	e000      	b.n	80064a6 <osDelay+0x18>
 80064a4:	2301      	movs	r3, #1
 80064a6:	0018      	movs	r0, r3
 80064a8:	f000 fd8a 	bl	8006fc0 <vTaskDelay>
  
  return osOK;
 80064ac:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80064ae:	0018      	movs	r0, r3
 80064b0:	46bd      	mov	sp, r7
 80064b2:	b004      	add	sp, #16
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b082      	sub	sp, #8
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	3308      	adds	r3, #8
 80064c2:	001a      	movs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	4252      	negs	r2, r2
 80064ce:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	3308      	adds	r3, #8
 80064d4:	001a      	movs	r2, r3
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3308      	adds	r3, #8
 80064de:	001a      	movs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80064ea:	46c0      	nop			; (mov r8, r8)
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b002      	add	sp, #8
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006500:	46c0      	nop			; (mov r8, r8)
 8006502:	46bd      	mov	sp, r7
 8006504:	b002      	add	sp, #8
 8006506:	bd80      	pop	{r7, pc}

08006508 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689a      	ldr	r2, [r3, #8]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	683a      	ldr	r2, [r7, #0]
 800652c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	683a      	ldr	r2, [r7, #0]
 8006532:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	1c5a      	adds	r2, r3, #1
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	46c0      	nop			; (mov r8, r8)
 8006546:	46bd      	mov	sp, r7
 8006548:	b004      	add	sp, #16
 800654a:	bd80      	pop	{r7, pc}

0800654c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	3301      	adds	r3, #1
 8006560:	d103      	bne.n	800656a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	60fb      	str	r3, [r7, #12]
 8006568:	e00c      	b.n	8006584 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3308      	adds	r3, #8
 800656e:	60fb      	str	r3, [r7, #12]
 8006570:	e002      	b.n	8006578 <vListInsert+0x2c>
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68ba      	ldr	r2, [r7, #8]
 8006580:	429a      	cmp	r2, r3
 8006582:	d2f6      	bcs.n	8006572 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	685a      	ldr	r2, [r3, #4]
 8006588:	683b      	ldr	r3, [r7, #0]
 800658a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	685b      	ldr	r3, [r3, #4]
 8006590:	683a      	ldr	r2, [r7, #0]
 8006592:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	683a      	ldr	r2, [r7, #0]
 800659e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	1c5a      	adds	r2, r3, #1
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b004      	add	sp, #16
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6892      	ldr	r2, [r2, #8]
 80065ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	6852      	ldr	r2, [r2, #4]
 80065d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d103      	bne.n	80065ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689a      	ldr	r2, [r3, #8]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1e5a      	subs	r2, r3, #1
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
}
 8006600:	0018      	movs	r0, r3
 8006602:	46bd      	mov	sp, r7
 8006604:	b004      	add	sp, #16
 8006606:	bd80      	pop	{r7, pc}

08006608 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b084      	sub	sp, #16
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d101      	bne.n	8006620 <xQueueGenericReset+0x18>
 800661c:	b672      	cpsid	i
 800661e:	e7fe      	b.n	800661e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8006620:	f001 f9c6 	bl	80079b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006630:	434b      	muls	r3, r1
 8006632:	18d2      	adds	r2, r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2200      	movs	r2, #0
 800663c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800664e:	1e59      	subs	r1, r3, #1
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006654:	434b      	muls	r3, r1
 8006656:	18d2      	adds	r2, r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2244      	movs	r2, #68	; 0x44
 8006660:	21ff      	movs	r1, #255	; 0xff
 8006662:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2245      	movs	r2, #69	; 0x45
 8006668:	21ff      	movs	r1, #255	; 0xff
 800666a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10d      	bne.n	800668e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d013      	beq.n	80066a2 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3310      	adds	r3, #16
 800667e:	0018      	movs	r0, r3
 8006680:	f000 feb2 	bl	80073e8 <xTaskRemoveFromEventList>
 8006684:	1e03      	subs	r3, r0, #0
 8006686:	d00c      	beq.n	80066a2 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006688:	f001 f982 	bl	8007990 <vPortYield>
 800668c:	e009      	b.n	80066a2 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3310      	adds	r3, #16
 8006692:	0018      	movs	r0, r3
 8006694:	f7ff ff0f 	bl	80064b6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3324      	adds	r3, #36	; 0x24
 800669c:	0018      	movs	r0, r3
 800669e:	f7ff ff0a 	bl	80064b6 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80066a2:	f001 f997 	bl	80079d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80066a6:	2301      	movs	r3, #1
}
 80066a8:	0018      	movs	r0, r3
 80066aa:	46bd      	mov	sp, r7
 80066ac:	b004      	add	sp, #16
 80066ae:	bd80      	pop	{r7, pc}

080066b0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80066b0:	b590      	push	{r4, r7, lr}
 80066b2:	b08b      	sub	sp, #44	; 0x2c
 80066b4:	af02      	add	r7, sp, #8
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	1dfb      	adds	r3, r7, #7
 80066bc:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <xQueueGenericCreate+0x18>
 80066c4:	b672      	cpsid	i
 80066c6:	e7fe      	b.n	80066c6 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	68ba      	ldr	r2, [r7, #8]
 80066cc:	4353      	muls	r3, r2
 80066ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	3348      	adds	r3, #72	; 0x48
 80066d4:	0018      	movs	r0, r3
 80066d6:	f001 fa03 	bl	8007ae0 <pvPortMalloc>
 80066da:	0003      	movs	r3, r0
 80066dc:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00e      	beq.n	8006702 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	3348      	adds	r3, #72	; 0x48
 80066ec:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80066ee:	1dfb      	adds	r3, r7, #7
 80066f0:	781c      	ldrb	r4, [r3, #0]
 80066f2:	697a      	ldr	r2, [r7, #20]
 80066f4:	68b9      	ldr	r1, [r7, #8]
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	0023      	movs	r3, r4
 80066fe:	f000 f805 	bl	800670c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006702:	69bb      	ldr	r3, [r7, #24]
	}
 8006704:	0018      	movs	r0, r3
 8006706:	46bd      	mov	sp, r7
 8006708:	b009      	add	sp, #36	; 0x24
 800670a:	bd90      	pop	{r4, r7, pc}

0800670c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b084      	sub	sp, #16
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	607a      	str	r2, [r7, #4]
 8006718:	001a      	movs	r2, r3
 800671a:	1cfb      	adds	r3, r7, #3
 800671c:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d103      	bne.n	800672c <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006724:	69bb      	ldr	r3, [r7, #24]
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	e002      	b.n	8006732 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800672c:	69bb      	ldr	r3, [r7, #24]
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	68ba      	ldr	r2, [r7, #8]
 800673c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	2101      	movs	r1, #1
 8006742:	0018      	movs	r0, r3
 8006744:	f7ff ff60 	bl	8006608 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006748:	46c0      	nop			; (mov r8, r8)
 800674a:	46bd      	mov	sp, r7
 800674c:	b004      	add	sp, #16
 800674e:	bd80      	pop	{r7, pc}

08006750 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	; 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	607a      	str	r2, [r7, #4]
 800675c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800675e:	2300      	movs	r3, #0
 8006760:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006766:	6a3b      	ldr	r3, [r7, #32]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <xQueueGenericSend+0x20>
 800676c:	b672      	cpsid	i
 800676e:	e7fe      	b.n	800676e <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d103      	bne.n	800677e <xQueueGenericSend+0x2e>
 8006776:	6a3b      	ldr	r3, [r7, #32]
 8006778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <xQueueGenericSend+0x32>
 800677e:	2301      	movs	r3, #1
 8006780:	e000      	b.n	8006784 <xQueueGenericSend+0x34>
 8006782:	2300      	movs	r3, #0
 8006784:	2b00      	cmp	r3, #0
 8006786:	d101      	bne.n	800678c <xQueueGenericSend+0x3c>
 8006788:	b672      	cpsid	i
 800678a:	e7fe      	b.n	800678a <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	2b02      	cmp	r3, #2
 8006790:	d103      	bne.n	800679a <xQueueGenericSend+0x4a>
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006796:	2b01      	cmp	r3, #1
 8006798:	d101      	bne.n	800679e <xQueueGenericSend+0x4e>
 800679a:	2301      	movs	r3, #1
 800679c:	e000      	b.n	80067a0 <xQueueGenericSend+0x50>
 800679e:	2300      	movs	r3, #0
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <xQueueGenericSend+0x58>
 80067a4:	b672      	cpsid	i
 80067a6:	e7fe      	b.n	80067a6 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067a8:	f000 ff9a 	bl	80076e0 <xTaskGetSchedulerState>
 80067ac:	1e03      	subs	r3, r0, #0
 80067ae:	d102      	bne.n	80067b6 <xQueueGenericSend+0x66>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <xQueueGenericSend+0x6a>
 80067b6:	2301      	movs	r3, #1
 80067b8:	e000      	b.n	80067bc <xQueueGenericSend+0x6c>
 80067ba:	2300      	movs	r3, #0
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <xQueueGenericSend+0x74>
 80067c0:	b672      	cpsid	i
 80067c2:	e7fe      	b.n	80067c2 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80067c4:	f001 f8f4 	bl	80079b0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067cc:	6a3b      	ldr	r3, [r7, #32]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <xQueueGenericSend+0x8a>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d11e      	bne.n	8006818 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	68b9      	ldr	r1, [r7, #8]
 80067de:	6a3b      	ldr	r3, [r7, #32]
 80067e0:	0018      	movs	r0, r3
 80067e2:	f000 f9a2 	bl	8006b2a <prvCopyDataToQueue>
 80067e6:	0003      	movs	r3, r0
 80067e8:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d009      	beq.n	8006806 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	3324      	adds	r3, #36	; 0x24
 80067f6:	0018      	movs	r0, r3
 80067f8:	f000 fdf6 	bl	80073e8 <xTaskRemoveFromEventList>
 80067fc:	1e03      	subs	r3, r0, #0
 80067fe:	d007      	beq.n	8006810 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006800:	f001 f8c6 	bl	8007990 <vPortYield>
 8006804:	e004      	b.n	8006810 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d001      	beq.n	8006810 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800680c:	f001 f8c0 	bl	8007990 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006810:	f001 f8e0 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 8006814:	2301      	movs	r3, #1
 8006816:	e05b      	b.n	80068d0 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d103      	bne.n	8006826 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800681e:	f001 f8d9 	bl	80079d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006822:	2300      	movs	r3, #0
 8006824:	e054      	b.n	80068d0 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006828:	2b00      	cmp	r3, #0
 800682a:	d106      	bne.n	800683a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800682c:	2314      	movs	r3, #20
 800682e:	18fb      	adds	r3, r7, r3
 8006830:	0018      	movs	r0, r3
 8006832:	f000 fe35 	bl	80074a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006836:	2301      	movs	r3, #1
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800683a:	f001 f8cb 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800683e:	f000 fc1b 	bl	8007078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006842:	f001 f8b5 	bl	80079b0 <vPortEnterCritical>
 8006846:	6a3b      	ldr	r3, [r7, #32]
 8006848:	2244      	movs	r2, #68	; 0x44
 800684a:	5c9b      	ldrb	r3, [r3, r2]
 800684c:	b25b      	sxtb	r3, r3
 800684e:	3301      	adds	r3, #1
 8006850:	d103      	bne.n	800685a <xQueueGenericSend+0x10a>
 8006852:	6a3b      	ldr	r3, [r7, #32]
 8006854:	2244      	movs	r2, #68	; 0x44
 8006856:	2100      	movs	r1, #0
 8006858:	5499      	strb	r1, [r3, r2]
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	2245      	movs	r2, #69	; 0x45
 800685e:	5c9b      	ldrb	r3, [r3, r2]
 8006860:	b25b      	sxtb	r3, r3
 8006862:	3301      	adds	r3, #1
 8006864:	d103      	bne.n	800686e <xQueueGenericSend+0x11e>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	2245      	movs	r2, #69	; 0x45
 800686a:	2100      	movs	r1, #0
 800686c:	5499      	strb	r1, [r3, r2]
 800686e:	f001 f8b1 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006872:	1d3a      	adds	r2, r7, #4
 8006874:	2314      	movs	r3, #20
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	0011      	movs	r1, r2
 800687a:	0018      	movs	r0, r3
 800687c:	f000 fe24 	bl	80074c8 <xTaskCheckForTimeOut>
 8006880:	1e03      	subs	r3, r0, #0
 8006882:	d11e      	bne.n	80068c2 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006884:	6a3b      	ldr	r3, [r7, #32]
 8006886:	0018      	movs	r0, r3
 8006888:	f000 fa54 	bl	8006d34 <prvIsQueueFull>
 800688c:	1e03      	subs	r3, r0, #0
 800688e:	d011      	beq.n	80068b4 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006890:	6a3b      	ldr	r3, [r7, #32]
 8006892:	3310      	adds	r3, #16
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	0011      	movs	r1, r2
 8006898:	0018      	movs	r0, r3
 800689a:	f000 fd87 	bl	80073ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	0018      	movs	r0, r3
 80068a2:	f000 f9d3 	bl	8006c4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80068a6:	f000 fbf3 	bl	8007090 <xTaskResumeAll>
 80068aa:	1e03      	subs	r3, r0, #0
 80068ac:	d18a      	bne.n	80067c4 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80068ae:	f001 f86f 	bl	8007990 <vPortYield>
 80068b2:	e787      	b.n	80067c4 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	0018      	movs	r0, r3
 80068b8:	f000 f9c8 	bl	8006c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80068bc:	f000 fbe8 	bl	8007090 <xTaskResumeAll>
 80068c0:	e780      	b.n	80067c4 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f000 f9c1 	bl	8006c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80068ca:	f000 fbe1 	bl	8007090 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80068ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80068d0:	0018      	movs	r0, r3
 80068d2:	46bd      	mov	sp, r7
 80068d4:	b00a      	add	sp, #40	; 0x28
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80068d8:	b590      	push	{r4, r7, lr}
 80068da:	b08b      	sub	sp, #44	; 0x2c
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
 80068e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80068ea:	6a3b      	ldr	r3, [r7, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d101      	bne.n	80068f4 <xQueueGenericSendFromISR+0x1c>
 80068f0:	b672      	cpsid	i
 80068f2:	e7fe      	b.n	80068f2 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <xQueueGenericSendFromISR+0x2a>
 80068fa:	6a3b      	ldr	r3, [r7, #32]
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <xQueueGenericSendFromISR+0x2e>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <xQueueGenericSendFromISR+0x30>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <xQueueGenericSendFromISR+0x38>
 800690c:	b672      	cpsid	i
 800690e:	e7fe      	b.n	800690e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d103      	bne.n	800691e <xQueueGenericSendFromISR+0x46>
 8006916:	6a3b      	ldr	r3, [r7, #32]
 8006918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800691a:	2b01      	cmp	r3, #1
 800691c:	d101      	bne.n	8006922 <xQueueGenericSendFromISR+0x4a>
 800691e:	2301      	movs	r3, #1
 8006920:	e000      	b.n	8006924 <xQueueGenericSendFromISR+0x4c>
 8006922:	2300      	movs	r3, #0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d101      	bne.n	800692c <xQueueGenericSendFromISR+0x54>
 8006928:	b672      	cpsid	i
 800692a:	e7fe      	b.n	800692a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800692c:	f001 f86a 	bl	8007a04 <ulSetInterruptMaskFromISR>
 8006930:	0003      	movs	r3, r0
 8006932:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006934:	6a3b      	ldr	r3, [r7, #32]
 8006936:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006938:	6a3b      	ldr	r3, [r7, #32]
 800693a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <xQueueGenericSendFromISR+0x6e>
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	2b02      	cmp	r3, #2
 8006944:	d131      	bne.n	80069aa <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006946:	241b      	movs	r4, #27
 8006948:	193b      	adds	r3, r7, r4
 800694a:	6a3a      	ldr	r2, [r7, #32]
 800694c:	2145      	movs	r1, #69	; 0x45
 800694e:	5c52      	ldrb	r2, [r2, r1]
 8006950:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006952:	6a3b      	ldr	r3, [r7, #32]
 8006954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006956:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	68b9      	ldr	r1, [r7, #8]
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	0018      	movs	r0, r3
 8006960:	f000 f8e3 	bl	8006b2a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006964:	193b      	adds	r3, r7, r4
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	b25b      	sxtb	r3, r3
 800696a:	3301      	adds	r3, #1
 800696c:	d111      	bne.n	8006992 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006972:	2b00      	cmp	r3, #0
 8006974:	d016      	beq.n	80069a4 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006976:	6a3b      	ldr	r3, [r7, #32]
 8006978:	3324      	adds	r3, #36	; 0x24
 800697a:	0018      	movs	r0, r3
 800697c:	f000 fd34 	bl	80073e8 <xTaskRemoveFromEventList>
 8006980:	1e03      	subs	r3, r0, #0
 8006982:	d00f      	beq.n	80069a4 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d00c      	beq.n	80069a4 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	e008      	b.n	80069a4 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006992:	231b      	movs	r3, #27
 8006994:	18fb      	adds	r3, r7, r3
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	3301      	adds	r3, #1
 800699a:	b2db      	uxtb	r3, r3
 800699c:	b259      	sxtb	r1, r3
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	2245      	movs	r2, #69	; 0x45
 80069a2:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 80069a4:	2301      	movs	r3, #1
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
		{
 80069a8:	e001      	b.n	80069ae <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	0018      	movs	r0, r3
 80069b2:	f001 f82d 	bl	8007a10 <vClearInterruptMaskFromISR>

	return xReturn;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069b8:	0018      	movs	r0, r3
 80069ba:	46bd      	mov	sp, r7
 80069bc:	b00b      	add	sp, #44	; 0x2c
 80069be:	bd90      	pop	{r4, r7, pc}

080069c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b08a      	sub	sp, #40	; 0x28
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	60b9      	str	r1, [r7, #8]
 80069ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80069cc:	2300      	movs	r3, #0
 80069ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d101      	bne.n	80069de <xQueueReceive+0x1e>
 80069da:	b672      	cpsid	i
 80069dc:	e7fe      	b.n	80069dc <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d103      	bne.n	80069ec <xQueueReceive+0x2c>
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <xQueueReceive+0x30>
 80069ec:	2301      	movs	r3, #1
 80069ee:	e000      	b.n	80069f2 <xQueueReceive+0x32>
 80069f0:	2300      	movs	r3, #0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d101      	bne.n	80069fa <xQueueReceive+0x3a>
 80069f6:	b672      	cpsid	i
 80069f8:	e7fe      	b.n	80069f8 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069fa:	f000 fe71 	bl	80076e0 <xTaskGetSchedulerState>
 80069fe:	1e03      	subs	r3, r0, #0
 8006a00:	d102      	bne.n	8006a08 <xQueueReceive+0x48>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d101      	bne.n	8006a0c <xQueueReceive+0x4c>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e000      	b.n	8006a0e <xQueueReceive+0x4e>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <xQueueReceive+0x56>
 8006a12:	b672      	cpsid	i
 8006a14:	e7fe      	b.n	8006a14 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a16:	f000 ffcb 	bl	80079b0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d01a      	beq.n	8006a5c <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006a26:	68ba      	ldr	r2, [r7, #8]
 8006a28:	6a3b      	ldr	r3, [r7, #32]
 8006a2a:	0011      	movs	r1, r2
 8006a2c:	0018      	movs	r0, r3
 8006a2e:	f000 f8e7 	bl	8006c00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	1e5a      	subs	r2, r3, #1
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d008      	beq.n	8006a54 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	3310      	adds	r3, #16
 8006a46:	0018      	movs	r0, r3
 8006a48:	f000 fcce 	bl	80073e8 <xTaskRemoveFromEventList>
 8006a4c:	1e03      	subs	r3, r0, #0
 8006a4e:	d001      	beq.n	8006a54 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a50:	f000 ff9e 	bl	8007990 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a54:	f000 ffbe 	bl	80079d4 <vPortExitCritical>
				return pdPASS;
 8006a58:	2301      	movs	r3, #1
 8006a5a:	e062      	b.n	8006b22 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d103      	bne.n	8006a6a <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a62:	f000 ffb7 	bl	80079d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a66:	2300      	movs	r3, #0
 8006a68:	e05b      	b.n	8006b22 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d106      	bne.n	8006a7e <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a70:	2314      	movs	r3, #20
 8006a72:	18fb      	adds	r3, r7, r3
 8006a74:	0018      	movs	r0, r3
 8006a76:	f000 fd13 	bl	80074a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a7e:	f000 ffa9 	bl	80079d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a82:	f000 faf9 	bl	8007078 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a86:	f000 ff93 	bl	80079b0 <vPortEnterCritical>
 8006a8a:	6a3b      	ldr	r3, [r7, #32]
 8006a8c:	2244      	movs	r2, #68	; 0x44
 8006a8e:	5c9b      	ldrb	r3, [r3, r2]
 8006a90:	b25b      	sxtb	r3, r3
 8006a92:	3301      	adds	r3, #1
 8006a94:	d103      	bne.n	8006a9e <xQueueReceive+0xde>
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	2244      	movs	r2, #68	; 0x44
 8006a9a:	2100      	movs	r1, #0
 8006a9c:	5499      	strb	r1, [r3, r2]
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	2245      	movs	r2, #69	; 0x45
 8006aa2:	5c9b      	ldrb	r3, [r3, r2]
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	d103      	bne.n	8006ab2 <xQueueReceive+0xf2>
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2245      	movs	r2, #69	; 0x45
 8006aae:	2100      	movs	r1, #0
 8006ab0:	5499      	strb	r1, [r3, r2]
 8006ab2:	f000 ff8f 	bl	80079d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006ab6:	1d3a      	adds	r2, r7, #4
 8006ab8:	2314      	movs	r3, #20
 8006aba:	18fb      	adds	r3, r7, r3
 8006abc:	0011      	movs	r1, r2
 8006abe:	0018      	movs	r0, r3
 8006ac0:	f000 fd02 	bl	80074c8 <xTaskCheckForTimeOut>
 8006ac4:	1e03      	subs	r3, r0, #0
 8006ac6:	d11e      	bne.n	8006b06 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	0018      	movs	r0, r3
 8006acc:	f000 f91c 	bl	8006d08 <prvIsQueueEmpty>
 8006ad0:	1e03      	subs	r3, r0, #0
 8006ad2:	d011      	beq.n	8006af8 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	3324      	adds	r3, #36	; 0x24
 8006ad8:	687a      	ldr	r2, [r7, #4]
 8006ada:	0011      	movs	r1, r2
 8006adc:	0018      	movs	r0, r3
 8006ade:	f000 fc65 	bl	80073ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006ae2:	6a3b      	ldr	r3, [r7, #32]
 8006ae4:	0018      	movs	r0, r3
 8006ae6:	f000 f8b1 	bl	8006c4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006aea:	f000 fad1 	bl	8007090 <xTaskResumeAll>
 8006aee:	1e03      	subs	r3, r0, #0
 8006af0:	d191      	bne.n	8006a16 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006af2:	f000 ff4d 	bl	8007990 <vPortYield>
 8006af6:	e78e      	b.n	8006a16 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006af8:	6a3b      	ldr	r3, [r7, #32]
 8006afa:	0018      	movs	r0, r3
 8006afc:	f000 f8a6 	bl	8006c4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b00:	f000 fac6 	bl	8007090 <xTaskResumeAll>
 8006b04:	e787      	b.n	8006a16 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	0018      	movs	r0, r3
 8006b0a:	f000 f89f 	bl	8006c4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b0e:	f000 fabf 	bl	8007090 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	0018      	movs	r0, r3
 8006b16:	f000 f8f7 	bl	8006d08 <prvIsQueueEmpty>
 8006b1a:	1e03      	subs	r3, r0, #0
 8006b1c:	d100      	bne.n	8006b20 <xQueueReceive+0x160>
 8006b1e:	e77a      	b.n	8006a16 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b20:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b22:	0018      	movs	r0, r3
 8006b24:	46bd      	mov	sp, r7
 8006b26:	b00a      	add	sp, #40	; 0x28
 8006b28:	bd80      	pop	{r7, pc}

08006b2a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006b2a:	b580      	push	{r7, lr}
 8006b2c:	b086      	sub	sp, #24
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	60f8      	str	r0, [r7, #12]
 8006b32:	60b9      	str	r1, [r7, #8]
 8006b34:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006b36:	2300      	movs	r3, #0
 8006b38:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10e      	bne.n	8006b66 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d14e      	bne.n	8006bee <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	0018      	movs	r0, r3
 8006b56:	f000 fddf 	bl	8007718 <xTaskPriorityDisinherit>
 8006b5a:	0003      	movs	r3, r0
 8006b5c:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	609a      	str	r2, [r3, #8]
 8006b64:	e043      	b.n	8006bee <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d119      	bne.n	8006ba0 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6858      	ldr	r0, [r3, #4]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	0019      	movs	r1, r3
 8006b78:	f001 f990 	bl	8007e9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	18d2      	adds	r2, r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d32b      	bcc.n	8006bee <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	e026      	b.n	8006bee <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	68d8      	ldr	r0, [r3, #12]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	0019      	movs	r1, r3
 8006bac:	f001 f976 	bl	8007e9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68da      	ldr	r2, [r3, #12]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	425b      	negs	r3, r3
 8006bba:	18d2      	adds	r2, r2, r3
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	68da      	ldr	r2, [r3, #12]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d207      	bcs.n	8006bdc <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	689a      	ldr	r2, [r3, #8]
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd4:	425b      	negs	r3, r3
 8006bd6:	18d2      	adds	r2, r2, r3
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b02      	cmp	r3, #2
 8006be0:	d105      	bne.n	8006bee <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d002      	beq.n	8006bee <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	1c5a      	adds	r2, r3, #1
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006bf6:	697b      	ldr	r3, [r7, #20]
}
 8006bf8:	0018      	movs	r0, r3
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b006      	add	sp, #24
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
 8006c08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d018      	beq.n	8006c44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68da      	ldr	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1a:	18d2      	adds	r2, r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68da      	ldr	r2, [r3, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d303      	bcc.n	8006c34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681a      	ldr	r2, [r3, #0]
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68d9      	ldr	r1, [r3, #12]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	0018      	movs	r0, r3
 8006c40:	f001 f92c 	bl	8007e9c <memcpy>
	}
}
 8006c44:	46c0      	nop			; (mov r8, r8)
 8006c46:	46bd      	mov	sp, r7
 8006c48:	b002      	add	sp, #8
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c54:	f000 feac 	bl	80079b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c58:	230f      	movs	r3, #15
 8006c5a:	18fb      	adds	r3, r7, r3
 8006c5c:	687a      	ldr	r2, [r7, #4]
 8006c5e:	2145      	movs	r1, #69	; 0x45
 8006c60:	5c52      	ldrb	r2, [r2, r1]
 8006c62:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c64:	e013      	b.n	8006c8e <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d016      	beq.n	8006c9c <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3324      	adds	r3, #36	; 0x24
 8006c72:	0018      	movs	r0, r3
 8006c74:	f000 fbb8 	bl	80073e8 <xTaskRemoveFromEventList>
 8006c78:	1e03      	subs	r3, r0, #0
 8006c7a:	d001      	beq.n	8006c80 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c7c:	f000 fc74 	bl	8007568 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c80:	210f      	movs	r1, #15
 8006c82:	187b      	adds	r3, r7, r1
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	187b      	adds	r3, r7, r1
 8006c8c:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c8e:	230f      	movs	r3, #15
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	b25b      	sxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	dce5      	bgt.n	8006c66 <prvUnlockQueue+0x1a>
 8006c9a:	e000      	b.n	8006c9e <prvUnlockQueue+0x52>
					break;
 8006c9c:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2245      	movs	r2, #69	; 0x45
 8006ca2:	21ff      	movs	r1, #255	; 0xff
 8006ca4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006ca6:	f000 fe95 	bl	80079d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006caa:	f000 fe81 	bl	80079b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006cae:	230e      	movs	r3, #14
 8006cb0:	18fb      	adds	r3, r7, r3
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	2144      	movs	r1, #68	; 0x44
 8006cb6:	5c52      	ldrb	r2, [r2, r1]
 8006cb8:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006cba:	e013      	b.n	8006ce4 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	691b      	ldr	r3, [r3, #16]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d016      	beq.n	8006cf2 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	3310      	adds	r3, #16
 8006cc8:	0018      	movs	r0, r3
 8006cca:	f000 fb8d 	bl	80073e8 <xTaskRemoveFromEventList>
 8006cce:	1e03      	subs	r3, r0, #0
 8006cd0:	d001      	beq.n	8006cd6 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006cd2:	f000 fc49 	bl	8007568 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006cd6:	210e      	movs	r1, #14
 8006cd8:	187b      	adds	r3, r7, r1
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b2da      	uxtb	r2, r3
 8006ce0:	187b      	adds	r3, r7, r1
 8006ce2:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ce4:	230e      	movs	r3, #14
 8006ce6:	18fb      	adds	r3, r7, r3
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	b25b      	sxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dce5      	bgt.n	8006cbc <prvUnlockQueue+0x70>
 8006cf0:	e000      	b.n	8006cf4 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006cf2:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2244      	movs	r2, #68	; 0x44
 8006cf8:	21ff      	movs	r1, #255	; 0xff
 8006cfa:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006cfc:	f000 fe6a 	bl	80079d4 <vPortExitCritical>
}
 8006d00:	46c0      	nop			; (mov r8, r8)
 8006d02:	46bd      	mov	sp, r7
 8006d04:	b004      	add	sp, #16
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d10:	f000 fe4e 	bl	80079b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d102      	bne.n	8006d22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	e001      	b.n	8006d26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d22:	2300      	movs	r3, #0
 8006d24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d26:	f000 fe55 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
}
 8006d2c:	0018      	movs	r0, r3
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	b004      	add	sp, #16
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d3c:	f000 fe38 	bl	80079b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d48:	429a      	cmp	r2, r3
 8006d4a:	d102      	bne.n	8006d52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	60fb      	str	r3, [r7, #12]
 8006d50:	e001      	b.n	8006d56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006d52:	2300      	movs	r3, #0
 8006d54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d56:	f000 fe3d 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
}
 8006d5c:	0018      	movs	r0, r3
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	b004      	add	sp, #16
 8006d62:	bd80      	pop	{r7, pc}

08006d64 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d64:	b590      	push	{r4, r7, lr}
 8006d66:	b08d      	sub	sp, #52	; 0x34
 8006d68:	af04      	add	r7, sp, #16
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	603b      	str	r3, [r7, #0]
 8006d70:	1dbb      	adds	r3, r7, #6
 8006d72:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d74:	1dbb      	adds	r3, r7, #6
 8006d76:	881b      	ldrh	r3, [r3, #0]
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f000 feb0 	bl	8007ae0 <pvPortMalloc>
 8006d80:	0003      	movs	r3, r0
 8006d82:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d010      	beq.n	8006dac <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d8a:	2054      	movs	r0, #84	; 0x54
 8006d8c:	f000 fea8 	bl	8007ae0 <pvPortMalloc>
 8006d90:	0003      	movs	r3, r0
 8006d92:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
 8006da0:	e006      	b.n	8006db0 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	0018      	movs	r0, r3
 8006da6:	f000 ff47 	bl	8007c38 <vPortFree>
 8006daa:	e001      	b.n	8006db0 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006dac:	2300      	movs	r3, #0
 8006dae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006db0:	69fb      	ldr	r3, [r7, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d016      	beq.n	8006de4 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006db6:	1dbb      	adds	r3, r7, #6
 8006db8:	881a      	ldrh	r2, [r3, #0]
 8006dba:	683c      	ldr	r4, [r7, #0]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	9303      	str	r3, [sp, #12]
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	9302      	str	r3, [sp, #8]
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dca:	9301      	str	r3, [sp, #4]
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	0023      	movs	r3, r4
 8006dd2:	f000 f80f 	bl	8006df4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	0018      	movs	r0, r3
 8006dda:	f000 f88d 	bl	8006ef8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006dde:	2301      	movs	r3, #1
 8006de0:	61bb      	str	r3, [r7, #24]
 8006de2:	e002      	b.n	8006dea <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006de4:	2301      	movs	r3, #1
 8006de6:	425b      	negs	r3, r3
 8006de8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006dea:	69bb      	ldr	r3, [r7, #24]
	}
 8006dec:	0018      	movs	r0, r3
 8006dee:	46bd      	mov	sp, r7
 8006df0:	b009      	add	sp, #36	; 0x24
 8006df2:	bd90      	pop	{r4, r7, pc}

08006df4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b086      	sub	sp, #24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
 8006e00:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	493a      	ldr	r1, [pc, #232]	; (8006ef4 <prvInitialiseNewTask+0x100>)
 8006e0a:	468c      	mov	ip, r1
 8006e0c:	4463      	add	r3, ip
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	18d3      	adds	r3, r2, r3
 8006e12:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	2207      	movs	r2, #7
 8006e18:	4393      	bics	r3, r2
 8006e1a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	2207      	movs	r2, #7
 8006e20:	4013      	ands	r3, r2
 8006e22:	d001      	beq.n	8006e28 <prvInitialiseNewTask+0x34>
 8006e24:	b672      	cpsid	i
 8006e26:	e7fe      	b.n	8006e26 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d020      	beq.n	8006e70 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e2e:	2300      	movs	r3, #0
 8006e30:	617b      	str	r3, [r7, #20]
 8006e32:	e013      	b.n	8006e5c <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006e34:	68ba      	ldr	r2, [r7, #8]
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	18d3      	adds	r3, r2, r3
 8006e3a:	7818      	ldrb	r0, [r3, #0]
 8006e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e3e:	2134      	movs	r1, #52	; 0x34
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	18d3      	adds	r3, r2, r3
 8006e44:	185b      	adds	r3, r3, r1
 8006e46:	1c02      	adds	r2, r0, #0
 8006e48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	18d3      	adds	r3, r2, r3
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d006      	beq.n	8006e64 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	3301      	adds	r3, #1
 8006e5a:	617b      	str	r3, [r7, #20]
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	2b0f      	cmp	r3, #15
 8006e60:	d9e8      	bls.n	8006e34 <prvInitialiseNewTask+0x40>
 8006e62:	e000      	b.n	8006e66 <prvInitialiseNewTask+0x72>
			{
				break;
 8006e64:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e68:	2243      	movs	r2, #67	; 0x43
 8006e6a:	2100      	movs	r1, #0
 8006e6c:	5499      	strb	r1, [r3, r2]
 8006e6e:	e003      	b.n	8006e78 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	2234      	movs	r2, #52	; 0x34
 8006e74:	2100      	movs	r1, #0
 8006e76:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e78:	6a3b      	ldr	r3, [r7, #32]
 8006e7a:	2b06      	cmp	r3, #6
 8006e7c:	d901      	bls.n	8006e82 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e7e:	2306      	movs	r3, #6
 8006e80:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e84:	6a3a      	ldr	r2, [r7, #32]
 8006e86:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	6a3a      	ldr	r2, [r7, #32]
 8006e8c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	2200      	movs	r2, #0
 8006e92:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	3304      	adds	r3, #4
 8006e98:	0018      	movs	r0, r3
 8006e9a:	f7ff fb2a 	bl	80064f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea0:	3318      	adds	r3, #24
 8006ea2:	0018      	movs	r0, r3
 8006ea4:	f7ff fb25 	bl	80064f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	2207      	movs	r2, #7
 8006eb2:	1ad2      	subs	r2, r2, r3
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ebc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec6:	2250      	movs	r2, #80	; 0x50
 8006ec8:	2100      	movs	r1, #0
 8006eca:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006ecc:	683a      	ldr	r2, [r7, #0]
 8006ece:	68f9      	ldr	r1, [r7, #12]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f000 fcd0 	bl	8007878 <pxPortInitialiseStack>
 8006ed8:	0002      	movs	r2, r0
 8006eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006edc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d002      	beq.n	8006eea <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ee8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006eea:	46c0      	nop			; (mov r8, r8)
 8006eec:	46bd      	mov	sp, r7
 8006eee:	b006      	add	sp, #24
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	46c0      	nop			; (mov r8, r8)
 8006ef4:	3fffffff 	.word	0x3fffffff

08006ef8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006f00:	f000 fd56 	bl	80079b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006f04:	4b28      	ldr	r3, [pc, #160]	; (8006fa8 <prvAddNewTaskToReadyList+0xb0>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	1c5a      	adds	r2, r3, #1
 8006f0a:	4b27      	ldr	r3, [pc, #156]	; (8006fa8 <prvAddNewTaskToReadyList+0xb0>)
 8006f0c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006f0e:	4b27      	ldr	r3, [pc, #156]	; (8006fac <prvAddNewTaskToReadyList+0xb4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d109      	bne.n	8006f2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006f16:	4b25      	ldr	r3, [pc, #148]	; (8006fac <prvAddNewTaskToReadyList+0xb4>)
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006f1c:	4b22      	ldr	r3, [pc, #136]	; (8006fa8 <prvAddNewTaskToReadyList+0xb0>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d110      	bne.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006f24:	f000 fb3a 	bl	800759c <prvInitialiseTaskLists>
 8006f28:	e00d      	b.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006f2a:	4b21      	ldr	r3, [pc, #132]	; (8006fb0 <prvAddNewTaskToReadyList+0xb8>)
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d109      	bne.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006f32:	4b1e      	ldr	r3, [pc, #120]	; (8006fac <prvAddNewTaskToReadyList+0xb4>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d802      	bhi.n	8006f46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006f40:	4b1a      	ldr	r3, [pc, #104]	; (8006fac <prvAddNewTaskToReadyList+0xb4>)
 8006f42:	687a      	ldr	r2, [r7, #4]
 8006f44:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f46:	4b1b      	ldr	r3, [pc, #108]	; (8006fb4 <prvAddNewTaskToReadyList+0xbc>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <prvAddNewTaskToReadyList+0xbc>)
 8006f4e:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	4b18      	ldr	r3, [pc, #96]	; (8006fb8 <prvAddNewTaskToReadyList+0xc0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d903      	bls.n	8006f64 <prvAddNewTaskToReadyList+0x6c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f60:	4b15      	ldr	r3, [pc, #84]	; (8006fb8 <prvAddNewTaskToReadyList+0xc0>)
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f68:	0013      	movs	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	189b      	adds	r3, r3, r2
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4a12      	ldr	r2, [pc, #72]	; (8006fbc <prvAddNewTaskToReadyList+0xc4>)
 8006f72:	189a      	adds	r2, r3, r2
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	3304      	adds	r3, #4
 8006f78:	0019      	movs	r1, r3
 8006f7a:	0010      	movs	r0, r2
 8006f7c:	f7ff fac4 	bl	8006508 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f80:	f000 fd28 	bl	80079d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f84:	4b0a      	ldr	r3, [pc, #40]	; (8006fb0 <prvAddNewTaskToReadyList+0xb8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d008      	beq.n	8006f9e <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <prvAddNewTaskToReadyList+0xb4>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d201      	bcs.n	8006f9e <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f9a:	f000 fcf9 	bl	8007990 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f9e:	46c0      	nop			; (mov r8, r8)
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	b002      	add	sp, #8
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	46c0      	nop			; (mov r8, r8)
 8006fa8:	200005e0 	.word	0x200005e0
 8006fac:	200004e0 	.word	0x200004e0
 8006fb0:	200005ec 	.word	0x200005ec
 8006fb4:	200005fc 	.word	0x200005fc
 8006fb8:	200005e8 	.word	0x200005e8
 8006fbc:	200004e4 	.word	0x200004e4

08006fc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b084      	sub	sp, #16
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d010      	beq.n	8006ff4 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fd2:	4b0d      	ldr	r3, [pc, #52]	; (8007008 <vTaskDelay+0x48>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d001      	beq.n	8006fde <vTaskDelay+0x1e>
 8006fda:	b672      	cpsid	i
 8006fdc:	e7fe      	b.n	8006fdc <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006fde:	f000 f84b 	bl	8007078 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2100      	movs	r1, #0
 8006fe6:	0018      	movs	r0, r3
 8006fe8:	f000 fbf2 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fec:	f000 f850 	bl	8007090 <xTaskResumeAll>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006ffa:	f000 fcc9 	bl	8007990 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	46bd      	mov	sp, r7
 8007002:	b004      	add	sp, #16
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	20000608 	.word	0x20000608

0800700c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8007012:	4913      	ldr	r1, [pc, #76]	; (8007060 <vTaskStartScheduler+0x54>)
 8007014:	4813      	ldr	r0, [pc, #76]	; (8007064 <vTaskStartScheduler+0x58>)
 8007016:	4b14      	ldr	r3, [pc, #80]	; (8007068 <vTaskStartScheduler+0x5c>)
 8007018:	9301      	str	r3, [sp, #4]
 800701a:	2300      	movs	r3, #0
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	2300      	movs	r3, #0
 8007020:	2280      	movs	r2, #128	; 0x80
 8007022:	f7ff fe9f 	bl	8006d64 <xTaskCreate>
 8007026:	0003      	movs	r3, r0
 8007028:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10d      	bne.n	800704c <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8007030:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007032:	4b0e      	ldr	r3, [pc, #56]	; (800706c <vTaskStartScheduler+0x60>)
 8007034:	2201      	movs	r2, #1
 8007036:	4252      	negs	r2, r2
 8007038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <vTaskStartScheduler+0x64>)
 800703c:	2201      	movs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007040:	4b0c      	ldr	r3, [pc, #48]	; (8007074 <vTaskStartScheduler+0x68>)
 8007042:	2200      	movs	r2, #0
 8007044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007046:	f000 fc7f 	bl	8007948 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800704a:	e004      	b.n	8007056 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3301      	adds	r3, #1
 8007050:	d101      	bne.n	8007056 <vTaskStartScheduler+0x4a>
 8007052:	b672      	cpsid	i
 8007054:	e7fe      	b.n	8007054 <vTaskStartScheduler+0x48>
}
 8007056:	46c0      	nop			; (mov r8, r8)
 8007058:	46bd      	mov	sp, r7
 800705a:	b002      	add	sp, #8
 800705c:	bd80      	pop	{r7, pc}
 800705e:	46c0      	nop			; (mov r8, r8)
 8007060:	08007f14 	.word	0x08007f14
 8007064:	0800757d 	.word	0x0800757d
 8007068:	20000604 	.word	0x20000604
 800706c:	20000600 	.word	0x20000600
 8007070:	200005ec 	.word	0x200005ec
 8007074:	200005e4 	.word	0x200005e4

08007078 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800707c:	4b03      	ldr	r3, [pc, #12]	; (800708c <vTaskSuspendAll+0x14>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	1c5a      	adds	r2, r3, #1
 8007082:	4b02      	ldr	r3, [pc, #8]	; (800708c <vTaskSuspendAll+0x14>)
 8007084:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007086:	46c0      	nop			; (mov r8, r8)
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000608 	.word	0x20000608

08007090 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800709e:	4b3a      	ldr	r3, [pc, #232]	; (8007188 <xTaskResumeAll+0xf8>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <xTaskResumeAll+0x1a>
 80070a6:	b672      	cpsid	i
 80070a8:	e7fe      	b.n	80070a8 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80070aa:	f000 fc81 	bl	80079b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80070ae:	4b36      	ldr	r3, [pc, #216]	; (8007188 <xTaskResumeAll+0xf8>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	1e5a      	subs	r2, r3, #1
 80070b4:	4b34      	ldr	r3, [pc, #208]	; (8007188 <xTaskResumeAll+0xf8>)
 80070b6:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070b8:	4b33      	ldr	r3, [pc, #204]	; (8007188 <xTaskResumeAll+0xf8>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d15b      	bne.n	8007178 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <xTaskResumeAll+0xfc>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d057      	beq.n	8007178 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070c8:	e02f      	b.n	800712a <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ca:	4b31      	ldr	r3, [pc, #196]	; (8007190 <xTaskResumeAll+0x100>)
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	3318      	adds	r3, #24
 80070d6:	0018      	movs	r0, r3
 80070d8:	f7ff fa6e 	bl	80065b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	3304      	adds	r3, #4
 80070e0:	0018      	movs	r0, r3
 80070e2:	f7ff fa69 	bl	80065b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070ea:	4b2a      	ldr	r3, [pc, #168]	; (8007194 <xTaskResumeAll+0x104>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	429a      	cmp	r2, r3
 80070f0:	d903      	bls.n	80070fa <xTaskResumeAll+0x6a>
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070f6:	4b27      	ldr	r3, [pc, #156]	; (8007194 <xTaskResumeAll+0x104>)
 80070f8:	601a      	str	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fe:	0013      	movs	r3, r2
 8007100:	009b      	lsls	r3, r3, #2
 8007102:	189b      	adds	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4a24      	ldr	r2, [pc, #144]	; (8007198 <xTaskResumeAll+0x108>)
 8007108:	189a      	adds	r2, r3, r2
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	3304      	adds	r3, #4
 800710e:	0019      	movs	r1, r3
 8007110:	0010      	movs	r0, r2
 8007112:	f7ff f9f9 	bl	8006508 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800711a:	4b20      	ldr	r3, [pc, #128]	; (800719c <xTaskResumeAll+0x10c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007120:	429a      	cmp	r2, r3
 8007122:	d302      	bcc.n	800712a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8007124:	4b1e      	ldr	r3, [pc, #120]	; (80071a0 <xTaskResumeAll+0x110>)
 8007126:	2201      	movs	r2, #1
 8007128:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800712a:	4b19      	ldr	r3, [pc, #100]	; (8007190 <xTaskResumeAll+0x100>)
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1cb      	bne.n	80070ca <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d001      	beq.n	800713c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007138:	f000 fab4 	bl	80076a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800713c:	4b19      	ldr	r3, [pc, #100]	; (80071a4 <xTaskResumeAll+0x114>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00f      	beq.n	8007168 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007148:	f000 f82e 	bl	80071a8 <xTaskIncrementTick>
 800714c:	1e03      	subs	r3, r0, #0
 800714e:	d002      	beq.n	8007156 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8007150:	4b13      	ldr	r3, [pc, #76]	; (80071a0 <xTaskResumeAll+0x110>)
 8007152:	2201      	movs	r2, #1
 8007154:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	3b01      	subs	r3, #1
 800715a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1f2      	bne.n	8007148 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8007162:	4b10      	ldr	r3, [pc, #64]	; (80071a4 <xTaskResumeAll+0x114>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007168:	4b0d      	ldr	r3, [pc, #52]	; (80071a0 <xTaskResumeAll+0x110>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d003      	beq.n	8007178 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007174:	f000 fc0c 	bl	8007990 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007178:	f000 fc2c 	bl	80079d4 <vPortExitCritical>

	return xAlreadyYielded;
 800717c:	68bb      	ldr	r3, [r7, #8]
}
 800717e:	0018      	movs	r0, r3
 8007180:	46bd      	mov	sp, r7
 8007182:	b004      	add	sp, #16
 8007184:	bd80      	pop	{r7, pc}
 8007186:	46c0      	nop			; (mov r8, r8)
 8007188:	20000608 	.word	0x20000608
 800718c:	200005e0 	.word	0x200005e0
 8007190:	200005a0 	.word	0x200005a0
 8007194:	200005e8 	.word	0x200005e8
 8007198:	200004e4 	.word	0x200004e4
 800719c:	200004e0 	.word	0x200004e0
 80071a0:	200005f4 	.word	0x200005f4
 80071a4:	200005f0 	.word	0x200005f0

080071a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80071ae:	2300      	movs	r3, #0
 80071b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071b2:	4b4a      	ldr	r3, [pc, #296]	; (80072dc <xTaskIncrementTick+0x134>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d000      	beq.n	80071bc <xTaskIncrementTick+0x14>
 80071ba:	e084      	b.n	80072c6 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80071bc:	4b48      	ldr	r3, [pc, #288]	; (80072e0 <xTaskIncrementTick+0x138>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3301      	adds	r3, #1
 80071c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80071c4:	4b46      	ldr	r3, [pc, #280]	; (80072e0 <xTaskIncrementTick+0x138>)
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d117      	bne.n	8007200 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80071d0:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <xTaskIncrementTick+0x13c>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d001      	beq.n	80071de <xTaskIncrementTick+0x36>
 80071da:	b672      	cpsid	i
 80071dc:	e7fe      	b.n	80071dc <xTaskIncrementTick+0x34>
 80071de:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <xTaskIncrementTick+0x13c>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	60fb      	str	r3, [r7, #12]
 80071e4:	4b40      	ldr	r3, [pc, #256]	; (80072e8 <xTaskIncrementTick+0x140>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b3e      	ldr	r3, [pc, #248]	; (80072e4 <xTaskIncrementTick+0x13c>)
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	4b3e      	ldr	r3, [pc, #248]	; (80072e8 <xTaskIncrementTick+0x140>)
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	601a      	str	r2, [r3, #0]
 80071f2:	4b3e      	ldr	r3, [pc, #248]	; (80072ec <xTaskIncrementTick+0x144>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	4b3c      	ldr	r3, [pc, #240]	; (80072ec <xTaskIncrementTick+0x144>)
 80071fa:	601a      	str	r2, [r3, #0]
 80071fc:	f000 fa52 	bl	80076a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007200:	4b3b      	ldr	r3, [pc, #236]	; (80072f0 <xTaskIncrementTick+0x148>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	693a      	ldr	r2, [r7, #16]
 8007206:	429a      	cmp	r2, r3
 8007208:	d349      	bcc.n	800729e <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800720a:	4b36      	ldr	r3, [pc, #216]	; (80072e4 <xTaskIncrementTick+0x13c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007214:	4b36      	ldr	r3, [pc, #216]	; (80072f0 <xTaskIncrementTick+0x148>)
 8007216:	2201      	movs	r2, #1
 8007218:	4252      	negs	r2, r2
 800721a:	601a      	str	r2, [r3, #0]
					break;
 800721c:	e03f      	b.n	800729e <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800721e:	4b31      	ldr	r3, [pc, #196]	; (80072e4 <xTaskIncrementTick+0x13c>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	429a      	cmp	r2, r3
 8007234:	d203      	bcs.n	800723e <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007236:	4b2e      	ldr	r3, [pc, #184]	; (80072f0 <xTaskIncrementTick+0x148>)
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800723c:	e02f      	b.n	800729e <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	3304      	adds	r3, #4
 8007242:	0018      	movs	r0, r3
 8007244:	f7ff f9b8 	bl	80065b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800724c:	2b00      	cmp	r3, #0
 800724e:	d004      	beq.n	800725a <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	3318      	adds	r3, #24
 8007254:	0018      	movs	r0, r3
 8007256:	f7ff f9af 	bl	80065b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800725e:	4b25      	ldr	r3, [pc, #148]	; (80072f4 <xTaskIncrementTick+0x14c>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d903      	bls.n	800726e <xTaskIncrementTick+0xc6>
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726a:	4b22      	ldr	r3, [pc, #136]	; (80072f4 <xTaskIncrementTick+0x14c>)
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007272:	0013      	movs	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	189b      	adds	r3, r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	4a1f      	ldr	r2, [pc, #124]	; (80072f8 <xTaskIncrementTick+0x150>)
 800727c:	189a      	adds	r2, r3, r2
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	3304      	adds	r3, #4
 8007282:	0019      	movs	r1, r3
 8007284:	0010      	movs	r0, r2
 8007286:	f7ff f93f 	bl	8006508 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	4b1b      	ldr	r3, [pc, #108]	; (80072fc <xTaskIncrementTick+0x154>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007294:	429a      	cmp	r2, r3
 8007296:	d3b8      	bcc.n	800720a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007298:	2301      	movs	r3, #1
 800729a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800729c:	e7b5      	b.n	800720a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800729e:	4b17      	ldr	r3, [pc, #92]	; (80072fc <xTaskIncrementTick+0x154>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072a4:	4914      	ldr	r1, [pc, #80]	; (80072f8 <xTaskIncrementTick+0x150>)
 80072a6:	0013      	movs	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	189b      	adds	r3, r3, r2
 80072ac:	009b      	lsls	r3, r3, #2
 80072ae:	585b      	ldr	r3, [r3, r1]
 80072b0:	2b01      	cmp	r3, #1
 80072b2:	d901      	bls.n	80072b8 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80072b4:	2301      	movs	r3, #1
 80072b6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80072b8:	4b11      	ldr	r3, [pc, #68]	; (8007300 <xTaskIncrementTick+0x158>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80072c0:	2301      	movs	r3, #1
 80072c2:	617b      	str	r3, [r7, #20]
 80072c4:	e004      	b.n	80072d0 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80072c6:	4b0f      	ldr	r3, [pc, #60]	; (8007304 <xTaskIncrementTick+0x15c>)
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	1c5a      	adds	r2, r3, #1
 80072cc:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <xTaskIncrementTick+0x15c>)
 80072ce:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80072d0:	697b      	ldr	r3, [r7, #20]
}
 80072d2:	0018      	movs	r0, r3
 80072d4:	46bd      	mov	sp, r7
 80072d6:	b006      	add	sp, #24
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	20000608 	.word	0x20000608
 80072e0:	200005e4 	.word	0x200005e4
 80072e4:	20000598 	.word	0x20000598
 80072e8:	2000059c 	.word	0x2000059c
 80072ec:	200005f8 	.word	0x200005f8
 80072f0:	20000600 	.word	0x20000600
 80072f4:	200005e8 	.word	0x200005e8
 80072f8:	200004e4 	.word	0x200004e4
 80072fc:	200004e0 	.word	0x200004e0
 8007300:	200005f4 	.word	0x200005f4
 8007304:	200005f0 	.word	0x200005f0

08007308 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b082      	sub	sp, #8
 800730c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800730e:	4b22      	ldr	r3, [pc, #136]	; (8007398 <vTaskSwitchContext+0x90>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d003      	beq.n	800731e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007316:	4b21      	ldr	r3, [pc, #132]	; (800739c <vTaskSwitchContext+0x94>)
 8007318:	2201      	movs	r2, #1
 800731a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800731c:	e037      	b.n	800738e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800731e:	4b1f      	ldr	r3, [pc, #124]	; (800739c <vTaskSwitchContext+0x94>)
 8007320:	2200      	movs	r2, #0
 8007322:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007324:	4b1e      	ldr	r3, [pc, #120]	; (80073a0 <vTaskSwitchContext+0x98>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	607b      	str	r3, [r7, #4]
 800732a:	e007      	b.n	800733c <vTaskSwitchContext+0x34>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <vTaskSwitchContext+0x2e>
 8007332:	b672      	cpsid	i
 8007334:	e7fe      	b.n	8007334 <vTaskSwitchContext+0x2c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3b01      	subs	r3, #1
 800733a:	607b      	str	r3, [r7, #4]
 800733c:	4919      	ldr	r1, [pc, #100]	; (80073a4 <vTaskSwitchContext+0x9c>)
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	0013      	movs	r3, r2
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	189b      	adds	r3, r3, r2
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	585b      	ldr	r3, [r3, r1]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d0ee      	beq.n	800732c <vTaskSwitchContext+0x24>
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	0013      	movs	r3, r2
 8007352:	009b      	lsls	r3, r3, #2
 8007354:	189b      	adds	r3, r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <vTaskSwitchContext+0x9c>)
 800735a:	189b      	adds	r3, r3, r2
 800735c:	603b      	str	r3, [r7, #0]
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	685a      	ldr	r2, [r3, #4]
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	3308      	adds	r3, #8
 8007370:	429a      	cmp	r2, r3
 8007372:	d104      	bne.n	800737e <vTaskSwitchContext+0x76>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	4b08      	ldr	r3, [pc, #32]	; (80073a8 <vTaskSwitchContext+0xa0>)
 8007386:	601a      	str	r2, [r3, #0]
 8007388:	4b05      	ldr	r3, [pc, #20]	; (80073a0 <vTaskSwitchContext+0x98>)
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	601a      	str	r2, [r3, #0]
}
 800738e:	46c0      	nop			; (mov r8, r8)
 8007390:	46bd      	mov	sp, r7
 8007392:	b002      	add	sp, #8
 8007394:	bd80      	pop	{r7, pc}
 8007396:	46c0      	nop			; (mov r8, r8)
 8007398:	20000608 	.word	0x20000608
 800739c:	200005f4 	.word	0x200005f4
 80073a0:	200005e8 	.word	0x200005e8
 80073a4:	200004e4 	.word	0x200004e4
 80073a8:	200004e0 	.word	0x200004e0

080073ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b082      	sub	sp, #8
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <vTaskPlaceOnEventList+0x14>
 80073bc:	b672      	cpsid	i
 80073be:	e7fe      	b.n	80073be <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80073c0:	4b08      	ldr	r3, [pc, #32]	; (80073e4 <vTaskPlaceOnEventList+0x38>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3318      	adds	r3, #24
 80073c6:	001a      	movs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	0011      	movs	r1, r2
 80073cc:	0018      	movs	r0, r3
 80073ce:	f7ff f8bd 	bl	800654c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2101      	movs	r1, #1
 80073d6:	0018      	movs	r0, r3
 80073d8:	f000 f9fa 	bl	80077d0 <prvAddCurrentTaskToDelayedList>
}
 80073dc:	46c0      	nop			; (mov r8, r8)
 80073de:	46bd      	mov	sp, r7
 80073e0:	b002      	add	sp, #8
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	200004e0 	.word	0x200004e0

080073e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <xTaskRemoveFromEventList+0x1a>
 80073fe:	b672      	cpsid	i
 8007400:	e7fe      	b.n	8007400 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	3318      	adds	r3, #24
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff f8d6 	bl	80065b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800740c:	4b1e      	ldr	r3, [pc, #120]	; (8007488 <xTaskRemoveFromEventList+0xa0>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d11d      	bne.n	8007450 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	3304      	adds	r3, #4
 8007418:	0018      	movs	r0, r3
 800741a:	f7ff f8cd 	bl	80065b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007422:	4b1a      	ldr	r3, [pc, #104]	; (800748c <xTaskRemoveFromEventList+0xa4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	429a      	cmp	r2, r3
 8007428:	d903      	bls.n	8007432 <xTaskRemoveFromEventList+0x4a>
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742e:	4b17      	ldr	r3, [pc, #92]	; (800748c <xTaskRemoveFromEventList+0xa4>)
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007436:	0013      	movs	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	189b      	adds	r3, r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4a14      	ldr	r2, [pc, #80]	; (8007490 <xTaskRemoveFromEventList+0xa8>)
 8007440:	189a      	adds	r2, r3, r2
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3304      	adds	r3, #4
 8007446:	0019      	movs	r1, r3
 8007448:	0010      	movs	r0, r2
 800744a:	f7ff f85d 	bl	8006508 <vListInsertEnd>
 800744e:	e007      	b.n	8007460 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	3318      	adds	r3, #24
 8007454:	001a      	movs	r2, r3
 8007456:	4b0f      	ldr	r3, [pc, #60]	; (8007494 <xTaskRemoveFromEventList+0xac>)
 8007458:	0011      	movs	r1, r2
 800745a:	0018      	movs	r0, r3
 800745c:	f7ff f854 	bl	8006508 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <xTaskRemoveFromEventList+0xb0>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800746a:	429a      	cmp	r2, r3
 800746c:	d905      	bls.n	800747a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800746e:	2301      	movs	r3, #1
 8007470:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007472:	4b0a      	ldr	r3, [pc, #40]	; (800749c <xTaskRemoveFromEventList+0xb4>)
 8007474:	2201      	movs	r2, #1
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	e001      	b.n	800747e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800747e:	68fb      	ldr	r3, [r7, #12]
}
 8007480:	0018      	movs	r0, r3
 8007482:	46bd      	mov	sp, r7
 8007484:	b004      	add	sp, #16
 8007486:	bd80      	pop	{r7, pc}
 8007488:	20000608 	.word	0x20000608
 800748c:	200005e8 	.word	0x200005e8
 8007490:	200004e4 	.word	0x200004e4
 8007494:	200005a0 	.word	0x200005a0
 8007498:	200004e0 	.word	0x200004e0
 800749c:	200005f4 	.word	0x200005f4

080074a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b082      	sub	sp, #8
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80074a8:	4b05      	ldr	r3, [pc, #20]	; (80074c0 <vTaskInternalSetTimeOutState+0x20>)
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074b0:	4b04      	ldr	r3, [pc, #16]	; (80074c4 <vTaskInternalSetTimeOutState+0x24>)
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	605a      	str	r2, [r3, #4]
}
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b002      	add	sp, #8
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	200005f8 	.word	0x200005f8
 80074c4:	200005e4 	.word	0x200005e4

080074c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <xTaskCheckForTimeOut+0x14>
 80074d8:	b672      	cpsid	i
 80074da:	e7fe      	b.n	80074da <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d101      	bne.n	80074e6 <xTaskCheckForTimeOut+0x1e>
 80074e2:	b672      	cpsid	i
 80074e4:	e7fe      	b.n	80074e4 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 80074e6:	f000 fa63 	bl	80079b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ea:	4b1d      	ldr	r3, [pc, #116]	; (8007560 <xTaskCheckForTimeOut+0x98>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	693a      	ldr	r2, [r7, #16]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	3301      	adds	r3, #1
 8007500:	d102      	bne.n	8007508 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
 8007506:	e024      	b.n	8007552 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	4b15      	ldr	r3, [pc, #84]	; (8007564 <xTaskCheckForTimeOut+0x9c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d007      	beq.n	8007524 <xTaskCheckForTimeOut+0x5c>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	429a      	cmp	r2, r3
 800751c:	d302      	bcc.n	8007524 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800751e:	2301      	movs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
 8007522:	e016      	b.n	8007552 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68fa      	ldr	r2, [r7, #12]
 800752a:	429a      	cmp	r2, r3
 800752c:	d20c      	bcs.n	8007548 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	1ad2      	subs	r2, r2, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	0018      	movs	r0, r3
 800753e:	f7ff ffaf 	bl	80074a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007542:	2300      	movs	r3, #0
 8007544:	617b      	str	r3, [r7, #20]
 8007546:	e004      	b.n	8007552 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800754e:	2301      	movs	r3, #1
 8007550:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007552:	f000 fa3f 	bl	80079d4 <vPortExitCritical>

	return xReturn;
 8007556:	697b      	ldr	r3, [r7, #20]
}
 8007558:	0018      	movs	r0, r3
 800755a:	46bd      	mov	sp, r7
 800755c:	b006      	add	sp, #24
 800755e:	bd80      	pop	{r7, pc}
 8007560:	200005e4 	.word	0x200005e4
 8007564:	200005f8 	.word	0x200005f8

08007568 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007568:	b580      	push	{r7, lr}
 800756a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800756c:	4b02      	ldr	r3, [pc, #8]	; (8007578 <vTaskMissedYield+0x10>)
 800756e:	2201      	movs	r2, #1
 8007570:	601a      	str	r2, [r3, #0]
}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	200005f4 	.word	0x200005f4

0800757c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b082      	sub	sp, #8
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007584:	f000 f84e 	bl	8007624 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <prvIdleTask+0x1c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b01      	cmp	r3, #1
 800758e:	d9f9      	bls.n	8007584 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007590:	f000 f9fe 	bl	8007990 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007594:	e7f6      	b.n	8007584 <prvIdleTask+0x8>
 8007596:	46c0      	nop			; (mov r8, r8)
 8007598:	200004e4 	.word	0x200004e4

0800759c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
 80075a6:	e00c      	b.n	80075c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	0013      	movs	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	189b      	adds	r3, r3, r2
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4a14      	ldr	r2, [pc, #80]	; (8007604 <prvInitialiseTaskLists+0x68>)
 80075b4:	189b      	adds	r3, r3, r2
 80075b6:	0018      	movs	r0, r3
 80075b8:	f7fe ff7d 	bl	80064b6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3301      	adds	r3, #1
 80075c0:	607b      	str	r3, [r7, #4]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b06      	cmp	r3, #6
 80075c6:	d9ef      	bls.n	80075a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075c8:	4b0f      	ldr	r3, [pc, #60]	; (8007608 <prvInitialiseTaskLists+0x6c>)
 80075ca:	0018      	movs	r0, r3
 80075cc:	f7fe ff73 	bl	80064b6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075d0:	4b0e      	ldr	r3, [pc, #56]	; (800760c <prvInitialiseTaskLists+0x70>)
 80075d2:	0018      	movs	r0, r3
 80075d4:	f7fe ff6f 	bl	80064b6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075d8:	4b0d      	ldr	r3, [pc, #52]	; (8007610 <prvInitialiseTaskLists+0x74>)
 80075da:	0018      	movs	r0, r3
 80075dc:	f7fe ff6b 	bl	80064b6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075e0:	4b0c      	ldr	r3, [pc, #48]	; (8007614 <prvInitialiseTaskLists+0x78>)
 80075e2:	0018      	movs	r0, r3
 80075e4:	f7fe ff67 	bl	80064b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075e8:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <prvInitialiseTaskLists+0x7c>)
 80075ea:	0018      	movs	r0, r3
 80075ec:	f7fe ff63 	bl	80064b6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <prvInitialiseTaskLists+0x80>)
 80075f2:	4a05      	ldr	r2, [pc, #20]	; (8007608 <prvInitialiseTaskLists+0x6c>)
 80075f4:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075f6:	4b0a      	ldr	r3, [pc, #40]	; (8007620 <prvInitialiseTaskLists+0x84>)
 80075f8:	4a04      	ldr	r2, [pc, #16]	; (800760c <prvInitialiseTaskLists+0x70>)
 80075fa:	601a      	str	r2, [r3, #0]
}
 80075fc:	46c0      	nop			; (mov r8, r8)
 80075fe:	46bd      	mov	sp, r7
 8007600:	b002      	add	sp, #8
 8007602:	bd80      	pop	{r7, pc}
 8007604:	200004e4 	.word	0x200004e4
 8007608:	20000570 	.word	0x20000570
 800760c:	20000584 	.word	0x20000584
 8007610:	200005a0 	.word	0x200005a0
 8007614:	200005b4 	.word	0x200005b4
 8007618:	200005cc 	.word	0x200005cc
 800761c:	20000598 	.word	0x20000598
 8007620:	2000059c 	.word	0x2000059c

08007624 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b082      	sub	sp, #8
 8007628:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800762a:	e01a      	b.n	8007662 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800762c:	f000 f9c0 	bl	80079b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007630:	4b10      	ldr	r3, [pc, #64]	; (8007674 <prvCheckTasksWaitingTermination+0x50>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3304      	adds	r3, #4
 800763c:	0018      	movs	r0, r3
 800763e:	f7fe ffbb 	bl	80065b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007642:	4b0d      	ldr	r3, [pc, #52]	; (8007678 <prvCheckTasksWaitingTermination+0x54>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	1e5a      	subs	r2, r3, #1
 8007648:	4b0b      	ldr	r3, [pc, #44]	; (8007678 <prvCheckTasksWaitingTermination+0x54>)
 800764a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800764c:	4b0b      	ldr	r3, [pc, #44]	; (800767c <prvCheckTasksWaitingTermination+0x58>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	1e5a      	subs	r2, r3, #1
 8007652:	4b0a      	ldr	r3, [pc, #40]	; (800767c <prvCheckTasksWaitingTermination+0x58>)
 8007654:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007656:	f000 f9bd 	bl	80079d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	0018      	movs	r0, r3
 800765e:	f000 f80f 	bl	8007680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <prvCheckTasksWaitingTermination+0x58>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e0      	bne.n	800762c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	46c0      	nop			; (mov r8, r8)
 800766e:	46bd      	mov	sp, r7
 8007670:	b002      	add	sp, #8
 8007672:	bd80      	pop	{r7, pc}
 8007674:	200005b4 	.word	0x200005b4
 8007678:	200005e0 	.word	0x200005e0
 800767c:	200005c8 	.word	0x200005c8

08007680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800768c:	0018      	movs	r0, r3
 800768e:	f000 fad3 	bl	8007c38 <vPortFree>
			vPortFree( pxTCB );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	0018      	movs	r0, r3
 8007696:	f000 facf 	bl	8007c38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800769a:	46c0      	nop			; (mov r8, r8)
 800769c:	46bd      	mov	sp, r7
 800769e:	b002      	add	sp, #8
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b082      	sub	sp, #8
 80076a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076aa:	4b0b      	ldr	r3, [pc, #44]	; (80076d8 <prvResetNextTaskUnblockTime+0x34>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d104      	bne.n	80076be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80076b4:	4b09      	ldr	r3, [pc, #36]	; (80076dc <prvResetNextTaskUnblockTime+0x38>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	4252      	negs	r2, r2
 80076ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80076bc:	e008      	b.n	80076d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80076be:	4b06      	ldr	r3, [pc, #24]	; (80076d8 <prvResetNextTaskUnblockTime+0x34>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68db      	ldr	r3, [r3, #12]
 80076c4:	68db      	ldr	r3, [r3, #12]
 80076c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4b03      	ldr	r3, [pc, #12]	; (80076dc <prvResetNextTaskUnblockTime+0x38>)
 80076ce:	601a      	str	r2, [r3, #0]
}
 80076d0:	46c0      	nop			; (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b002      	add	sp, #8
 80076d6:	bd80      	pop	{r7, pc}
 80076d8:	20000598 	.word	0x20000598
 80076dc:	20000600 	.word	0x20000600

080076e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b082      	sub	sp, #8
 80076e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80076e6:	4b0a      	ldr	r3, [pc, #40]	; (8007710 <xTaskGetSchedulerState+0x30>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d102      	bne.n	80076f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80076ee:	2301      	movs	r3, #1
 80076f0:	607b      	str	r3, [r7, #4]
 80076f2:	e008      	b.n	8007706 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076f4:	4b07      	ldr	r3, [pc, #28]	; (8007714 <xTaskGetSchedulerState+0x34>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d102      	bne.n	8007702 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076fc:	2302      	movs	r3, #2
 80076fe:	607b      	str	r3, [r7, #4]
 8007700:	e001      	b.n	8007706 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007702:	2300      	movs	r3, #0
 8007704:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007706:	687b      	ldr	r3, [r7, #4]
	}
 8007708:	0018      	movs	r0, r3
 800770a:	46bd      	mov	sp, r7
 800770c:	b002      	add	sp, #8
 800770e:	bd80      	pop	{r7, pc}
 8007710:	200005ec 	.word	0x200005ec
 8007714:	20000608 	.word	0x20000608

08007718 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007724:	2300      	movs	r3, #0
 8007726:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d044      	beq.n	80077b8 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800772e:	4b25      	ldr	r3, [pc, #148]	; (80077c4 <xTaskPriorityDisinherit+0xac>)
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	429a      	cmp	r2, r3
 8007736:	d001      	beq.n	800773c <xTaskPriorityDisinherit+0x24>
 8007738:	b672      	cpsid	i
 800773a:	e7fe      	b.n	800773a <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007740:	2b00      	cmp	r3, #0
 8007742:	d101      	bne.n	8007748 <xTaskPriorityDisinherit+0x30>
 8007744:	b672      	cpsid	i
 8007746:	e7fe      	b.n	8007746 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800774c:	1e5a      	subs	r2, r3, #1
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800775a:	429a      	cmp	r2, r3
 800775c:	d02c      	beq.n	80077b8 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007762:	2b00      	cmp	r3, #0
 8007764:	d128      	bne.n	80077b8 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	3304      	adds	r3, #4
 800776a:	0018      	movs	r0, r3
 800776c:	f7fe ff24 	bl	80065b8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	2207      	movs	r2, #7
 800777e:	1ad2      	subs	r2, r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	4b0f      	ldr	r3, [pc, #60]	; (80077c8 <xTaskPriorityDisinherit+0xb0>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	429a      	cmp	r2, r3
 800778e:	d903      	bls.n	8007798 <xTaskPriorityDisinherit+0x80>
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007794:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <xTaskPriorityDisinherit+0xb0>)
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	68bb      	ldr	r3, [r7, #8]
 800779a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800779c:	0013      	movs	r3, r2
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	189b      	adds	r3, r3, r2
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4a09      	ldr	r2, [pc, #36]	; (80077cc <xTaskPriorityDisinherit+0xb4>)
 80077a6:	189a      	adds	r2, r3, r2
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	3304      	adds	r3, #4
 80077ac:	0019      	movs	r1, r3
 80077ae:	0010      	movs	r0, r2
 80077b0:	f7fe feaa 	bl	8006508 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80077b4:	2301      	movs	r3, #1
 80077b6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80077b8:	68fb      	ldr	r3, [r7, #12]
	}
 80077ba:	0018      	movs	r0, r3
 80077bc:	46bd      	mov	sp, r7
 80077be:	b004      	add	sp, #16
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	46c0      	nop			; (mov r8, r8)
 80077c4:	200004e0 	.word	0x200004e0
 80077c8:	200005e8 	.word	0x200005e8
 80077cc:	200004e4 	.word	0x200004e4

080077d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80077da:	4b21      	ldr	r3, [pc, #132]	; (8007860 <prvAddCurrentTaskToDelayedList+0x90>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077e0:	4b20      	ldr	r3, [pc, #128]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3304      	adds	r3, #4
 80077e6:	0018      	movs	r0, r3
 80077e8:	f7fe fee6 	bl	80065b8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	3301      	adds	r3, #1
 80077f0:	d10b      	bne.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077f8:	4b1a      	ldr	r3, [pc, #104]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	1d1a      	adds	r2, r3, #4
 80077fe:	4b1a      	ldr	r3, [pc, #104]	; (8007868 <prvAddCurrentTaskToDelayedList+0x98>)
 8007800:	0011      	movs	r1, r2
 8007802:	0018      	movs	r0, r3
 8007804:	f7fe fe80 	bl	8006508 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007808:	e026      	b.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	18d3      	adds	r3, r2, r3
 8007810:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007812:	4b14      	ldr	r3, [pc, #80]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	429a      	cmp	r2, r3
 8007820:	d209      	bcs.n	8007836 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007822:	4b12      	ldr	r3, [pc, #72]	; (800786c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4b0f      	ldr	r3, [pc, #60]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3304      	adds	r3, #4
 800782c:	0019      	movs	r1, r3
 800782e:	0010      	movs	r0, r2
 8007830:	f7fe fe8c 	bl	800654c <vListInsert>
}
 8007834:	e010      	b.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	4b0a      	ldr	r3, [pc, #40]	; (8007864 <prvAddCurrentTaskToDelayedList+0x94>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	3304      	adds	r3, #4
 8007840:	0019      	movs	r1, r3
 8007842:	0010      	movs	r0, r2
 8007844:	f7fe fe82 	bl	800654c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007848:	4b0a      	ldr	r3, [pc, #40]	; (8007874 <prvAddCurrentTaskToDelayedList+0xa4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68ba      	ldr	r2, [r7, #8]
 800784e:	429a      	cmp	r2, r3
 8007850:	d202      	bcs.n	8007858 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007852:	4b08      	ldr	r3, [pc, #32]	; (8007874 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007854:	68ba      	ldr	r2, [r7, #8]
 8007856:	601a      	str	r2, [r3, #0]
}
 8007858:	46c0      	nop			; (mov r8, r8)
 800785a:	46bd      	mov	sp, r7
 800785c:	b004      	add	sp, #16
 800785e:	bd80      	pop	{r7, pc}
 8007860:	200005e4 	.word	0x200005e4
 8007864:	200004e0 	.word	0x200004e0
 8007868:	200005cc 	.word	0x200005cc
 800786c:	2000059c 	.word	0x2000059c
 8007870:	20000598 	.word	0x20000598
 8007874:	20000600 	.word	0x20000600

08007878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b04      	subs	r3, #4
 8007888:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2280      	movs	r2, #128	; 0x80
 800788e:	0452      	lsls	r2, r2, #17
 8007890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3b04      	subs	r3, #4
 8007896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	3b04      	subs	r3, #4
 80078a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80078a4:	4a08      	ldr	r2, [pc, #32]	; (80078c8 <pxPortInitialiseStack+0x50>)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3b14      	subs	r3, #20
 80078ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	3b20      	subs	r3, #32
 80078ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80078bc:	68fb      	ldr	r3, [r7, #12]
}
 80078be:	0018      	movs	r0, r3
 80078c0:	46bd      	mov	sp, r7
 80078c2:	b004      	add	sp, #16
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	46c0      	nop			; (mov r8, r8)
 80078c8:	080078cd 	.word	0x080078cd

080078cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80078d6:	4b08      	ldr	r3, [pc, #32]	; (80078f8 <prvTaskExitError+0x2c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	3301      	adds	r3, #1
 80078dc:	d001      	beq.n	80078e2 <prvTaskExitError+0x16>
 80078de:	b672      	cpsid	i
 80078e0:	e7fe      	b.n	80078e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80078e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0fc      	beq.n	80078e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	46c0      	nop			; (mov r8, r8)
 80078f0:	46bd      	mov	sp, r7
 80078f2:	b002      	add	sp, #8
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	46c0      	nop			; (mov r8, r8)
 80078f8:	2000003c 	.word	0x2000003c

080078fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8007900:	46c0      	nop			; (mov r8, r8)
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007910 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8007910:	4a0b      	ldr	r2, [pc, #44]	; (8007940 <pxCurrentTCBConst2>)
 8007912:	6813      	ldr	r3, [r2, #0]
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	3020      	adds	r0, #32
 8007918:	f380 8809 	msr	PSP, r0
 800791c:	2002      	movs	r0, #2
 800791e:	f380 8814 	msr	CONTROL, r0
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8007928:	46ae      	mov	lr, r5
 800792a:	bc08      	pop	{r3}
 800792c:	bc04      	pop	{r2}
 800792e:	b662      	cpsie	i
 8007930:	4718      	bx	r3
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	46c0      	nop			; (mov r8, r8)
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	46c0      	nop			; (mov r8, r8)
 800793a:	46c0      	nop			; (mov r8, r8)
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	46c0      	nop			; (mov r8, r8)

08007940 <pxCurrentTCBConst2>:
 8007940:	200004e0 	.word	0x200004e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8007944:	46c0      	nop			; (mov r8, r8)
 8007946:	46c0      	nop			; (mov r8, r8)

08007948 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800794c:	4b0e      	ldr	r3, [pc, #56]	; (8007988 <xPortStartScheduler+0x40>)
 800794e:	681a      	ldr	r2, [r3, #0]
 8007950:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <xPortStartScheduler+0x40>)
 8007952:	21ff      	movs	r1, #255	; 0xff
 8007954:	0409      	lsls	r1, r1, #16
 8007956:	430a      	orrs	r2, r1
 8007958:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800795a:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <xPortStartScheduler+0x40>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b0a      	ldr	r3, [pc, #40]	; (8007988 <xPortStartScheduler+0x40>)
 8007960:	21ff      	movs	r1, #255	; 0xff
 8007962:	0609      	lsls	r1, r1, #24
 8007964:	430a      	orrs	r2, r1
 8007966:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007968:	f000 f898 	bl	8007a9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800796c:	4b07      	ldr	r3, [pc, #28]	; (800798c <xPortStartScheduler+0x44>)
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007972:	f7ff ffcd 	bl	8007910 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007976:	f7ff fcc7 	bl	8007308 <vTaskSwitchContext>
	prvTaskExitError();
 800797a:	f7ff ffa7 	bl	80078cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800797e:	2300      	movs	r3, #0
}
 8007980:	0018      	movs	r0, r3
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	46c0      	nop			; (mov r8, r8)
 8007988:	e000ed20 	.word	0xe000ed20
 800798c:	2000003c 	.word	0x2000003c

08007990 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007994:	4b05      	ldr	r3, [pc, #20]	; (80079ac <vPortYield+0x1c>)
 8007996:	2280      	movs	r2, #128	; 0x80
 8007998:	0552      	lsls	r2, r2, #21
 800799a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800799c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80079a0:	f3bf 8f6f 	isb	sy
}
 80079a4:	46c0      	nop			; (mov r8, r8)
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	e000ed04 	.word	0xe000ed04

080079b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80079b4:	b672      	cpsid	i
	uxCriticalNesting++;
 80079b6:	4b06      	ldr	r3, [pc, #24]	; (80079d0 <vPortEnterCritical+0x20>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	4b04      	ldr	r3, [pc, #16]	; (80079d0 <vPortEnterCritical+0x20>)
 80079be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80079c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80079c4:	f3bf 8f6f 	isb	sy
}
 80079c8:	46c0      	nop			; (mov r8, r8)
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	46c0      	nop			; (mov r8, r8)
 80079d0:	2000003c 	.word	0x2000003c

080079d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80079d8:	4b09      	ldr	r3, [pc, #36]	; (8007a00 <vPortExitCritical+0x2c>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d101      	bne.n	80079e4 <vPortExitCritical+0x10>
 80079e0:	b672      	cpsid	i
 80079e2:	e7fe      	b.n	80079e2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <vPortExitCritical+0x2c>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	1e5a      	subs	r2, r3, #1
 80079ea:	4b05      	ldr	r3, [pc, #20]	; (8007a00 <vPortExitCritical+0x2c>)
 80079ec:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80079ee:	4b04      	ldr	r3, [pc, #16]	; (8007a00 <vPortExitCritical+0x2c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d100      	bne.n	80079f8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80079f6:	b662      	cpsie	i
	}
}
 80079f8:	46c0      	nop			; (mov r8, r8)
 80079fa:	46bd      	mov	sp, r7
 80079fc:	bd80      	pop	{r7, pc}
 80079fe:	46c0      	nop			; (mov r8, r8)
 8007a00:	2000003c 	.word	0x2000003c

08007a04 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007a04:	f3ef 8010 	mrs	r0, PRIMASK
 8007a08:	b672      	cpsid	i
 8007a0a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007a0c:	46c0      	nop			; (mov r8, r8)
 8007a0e:	0018      	movs	r0, r3

08007a10 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007a10:	f380 8810 	msr	PRIMASK, r0
 8007a14:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007a16:	46c0      	nop			; (mov r8, r8)
	...

08007a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007a20:	f3ef 8009 	mrs	r0, PSP
 8007a24:	4b0e      	ldr	r3, [pc, #56]	; (8007a60 <pxCurrentTCBConst>)
 8007a26:	681a      	ldr	r2, [r3, #0]
 8007a28:	3820      	subs	r0, #32
 8007a2a:	6010      	str	r0, [r2, #0]
 8007a2c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007a2e:	4644      	mov	r4, r8
 8007a30:	464d      	mov	r5, r9
 8007a32:	4656      	mov	r6, sl
 8007a34:	465f      	mov	r7, fp
 8007a36:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007a38:	b508      	push	{r3, lr}
 8007a3a:	b672      	cpsid	i
 8007a3c:	f7ff fc64 	bl	8007308 <vTaskSwitchContext>
 8007a40:	b662      	cpsie	i
 8007a42:	bc0c      	pop	{r2, r3}
 8007a44:	6811      	ldr	r1, [r2, #0]
 8007a46:	6808      	ldr	r0, [r1, #0]
 8007a48:	3010      	adds	r0, #16
 8007a4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a4c:	46a0      	mov	r8, r4
 8007a4e:	46a9      	mov	r9, r5
 8007a50:	46b2      	mov	sl, r6
 8007a52:	46bb      	mov	fp, r7
 8007a54:	f380 8809 	msr	PSP, r0
 8007a58:	3820      	subs	r0, #32
 8007a5a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a5c:	4718      	bx	r3
 8007a5e:	46c0      	nop			; (mov r8, r8)

08007a60 <pxCurrentTCBConst>:
 8007a60:	200004e0 	.word	0x200004e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007a64:	46c0      	nop			; (mov r8, r8)
 8007a66:	46c0      	nop			; (mov r8, r8)

08007a68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a6e:	f7ff ffc9 	bl	8007a04 <ulSetInterruptMaskFromISR>
 8007a72:	0003      	movs	r3, r0
 8007a74:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a76:	f7ff fb97 	bl	80071a8 <xTaskIncrementTick>
 8007a7a:	1e03      	subs	r3, r0, #0
 8007a7c:	d003      	beq.n	8007a86 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a7e:	4b06      	ldr	r3, [pc, #24]	; (8007a98 <xPortSysTickHandler+0x30>)
 8007a80:	2280      	movs	r2, #128	; 0x80
 8007a82:	0552      	lsls	r2, r2, #21
 8007a84:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	0018      	movs	r0, r3
 8007a8a:	f7ff ffc1 	bl	8007a10 <vClearInterruptMaskFromISR>
}
 8007a8e:	46c0      	nop			; (mov r8, r8)
 8007a90:	46bd      	mov	sp, r7
 8007a92:	b002      	add	sp, #8
 8007a94:	bd80      	pop	{r7, pc}
 8007a96:	46c0      	nop			; (mov r8, r8)
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007aa0:	4b0b      	ldr	r3, [pc, #44]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007aa6:	4b0b      	ldr	r3, [pc, #44]	; (8007ad4 <vPortSetupTimerInterrupt+0x38>)
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007aac:	4b0a      	ldr	r3, [pc, #40]	; (8007ad8 <vPortSetupTimerInterrupt+0x3c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	22fa      	movs	r2, #250	; 0xfa
 8007ab2:	0091      	lsls	r1, r2, #2
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7f8 fb2f 	bl	8000118 <__udivsi3>
 8007aba:	0003      	movs	r3, r0
 8007abc:	001a      	movs	r2, r3
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <vPortSetupTimerInterrupt+0x40>)
 8007ac0:	3a01      	subs	r2, #1
 8007ac2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <vPortSetupTimerInterrupt+0x34>)
 8007ac6:	2207      	movs	r2, #7
 8007ac8:	601a      	str	r2, [r3, #0]
}
 8007aca:	46c0      	nop			; (mov r8, r8)
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	e000e010 	.word	0xe000e010
 8007ad4:	e000e018 	.word	0xe000e018
 8007ad8:	20000000 	.word	0x20000000
 8007adc:	e000e014 	.word	0xe000e014

08007ae0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b086      	sub	sp, #24
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007aec:	f7ff fac4 	bl	8007078 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007af0:	4b4b      	ldr	r3, [pc, #300]	; (8007c20 <pvPortMalloc+0x140>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007af8:	f000 f8ec 	bl	8007cd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007afc:	4b49      	ldr	r3, [pc, #292]	; (8007c24 <pvPortMalloc+0x144>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	687a      	ldr	r2, [r7, #4]
 8007b02:	4013      	ands	r3, r2
 8007b04:	d000      	beq.n	8007b08 <pvPortMalloc+0x28>
 8007b06:	e07e      	b.n	8007c06 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d012      	beq.n	8007b34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007b0e:	2208      	movs	r2, #8
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	189b      	adds	r3, r3, r2
 8007b14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2207      	movs	r2, #7
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	d00a      	beq.n	8007b34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2207      	movs	r2, #7
 8007b22:	4393      	bics	r3, r2
 8007b24:	3308      	adds	r3, #8
 8007b26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2207      	movs	r2, #7
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	d001      	beq.n	8007b34 <pvPortMalloc+0x54>
 8007b30:	b672      	cpsid	i
 8007b32:	e7fe      	b.n	8007b32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d065      	beq.n	8007c06 <pvPortMalloc+0x126>
 8007b3a:	4b3b      	ldr	r3, [pc, #236]	; (8007c28 <pvPortMalloc+0x148>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d860      	bhi.n	8007c06 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007b44:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <pvPortMalloc+0x14c>)
 8007b46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007b48:	4b38      	ldr	r3, [pc, #224]	; (8007c2c <pvPortMalloc+0x14c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b4e:	e004      	b.n	8007b5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d903      	bls.n	8007b6c <pvPortMalloc+0x8c>
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1f1      	bne.n	8007b50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b6c:	4b2c      	ldr	r3, [pc, #176]	; (8007c20 <pvPortMalloc+0x140>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d047      	beq.n	8007c06 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2208      	movs	r2, #8
 8007b7c:	189b      	adds	r3, r3, r2
 8007b7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b88:	697b      	ldr	r3, [r7, #20]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	1ad2      	subs	r2, r2, r3
 8007b90:	2308      	movs	r3, #8
 8007b92:	005b      	lsls	r3, r3, #1
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d916      	bls.n	8007bc6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b98:	697a      	ldr	r2, [r7, #20]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	18d3      	adds	r3, r2, r3
 8007b9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ba0:	68bb      	ldr	r3, [r7, #8]
 8007ba2:	2207      	movs	r2, #7
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	d001      	beq.n	8007bac <pvPortMalloc+0xcc>
 8007ba8:	b672      	cpsid	i
 8007baa:	e7fe      	b.n	8007baa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	1ad2      	subs	r2, r2, r3
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	687a      	ldr	r2, [r7, #4]
 8007bbc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	0018      	movs	r0, r3
 8007bc2:	f000 f8e7 	bl	8007d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007bc6:	4b18      	ldr	r3, [pc, #96]	; (8007c28 <pvPortMalloc+0x148>)
 8007bc8:	681a      	ldr	r2, [r3, #0]
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	685b      	ldr	r3, [r3, #4]
 8007bce:	1ad2      	subs	r2, r2, r3
 8007bd0:	4b15      	ldr	r3, [pc, #84]	; (8007c28 <pvPortMalloc+0x148>)
 8007bd2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007bd4:	4b14      	ldr	r3, [pc, #80]	; (8007c28 <pvPortMalloc+0x148>)
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	4b15      	ldr	r3, [pc, #84]	; (8007c30 <pvPortMalloc+0x150>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d203      	bcs.n	8007be8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007be0:	4b11      	ldr	r3, [pc, #68]	; (8007c28 <pvPortMalloc+0x148>)
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	4b12      	ldr	r3, [pc, #72]	; (8007c30 <pvPortMalloc+0x150>)
 8007be6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	685a      	ldr	r2, [r3, #4]
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <pvPortMalloc+0x144>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	431a      	orrs	r2, r3
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <pvPortMalloc+0x154>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	4b0c      	ldr	r3, [pc, #48]	; (8007c34 <pvPortMalloc+0x154>)
 8007c04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007c06:	f7ff fa43 	bl	8007090 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	2207      	movs	r2, #7
 8007c0e:	4013      	ands	r3, r2
 8007c10:	d001      	beq.n	8007c16 <pvPortMalloc+0x136>
 8007c12:	b672      	cpsid	i
 8007c14:	e7fe      	b.n	8007c14 <pvPortMalloc+0x134>
	return pvReturn;
 8007c16:	68fb      	ldr	r3, [r7, #12]
}
 8007c18:	0018      	movs	r0, r3
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	b006      	add	sp, #24
 8007c1e:	bd80      	pop	{r7, pc}
 8007c20:	20007e14 	.word	0x20007e14
 8007c24:	20007e28 	.word	0x20007e28
 8007c28:	20007e18 	.word	0x20007e18
 8007c2c:	20007e0c 	.word	0x20007e0c
 8007c30:	20007e1c 	.word	0x20007e1c
 8007c34:	20007e20 	.word	0x20007e20

08007c38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d03a      	beq.n	8007cc0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007c4a:	2308      	movs	r3, #8
 8007c4c:	425b      	negs	r3, r3
 8007c4e:	68fa      	ldr	r2, [r7, #12]
 8007c50:	18d3      	adds	r3, r2, r3
 8007c52:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	685a      	ldr	r2, [r3, #4]
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <vPortFree+0x90>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4013      	ands	r3, r2
 8007c62:	d101      	bne.n	8007c68 <vPortFree+0x30>
 8007c64:	b672      	cpsid	i
 8007c66:	e7fe      	b.n	8007c66 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d001      	beq.n	8007c74 <vPortFree+0x3c>
 8007c70:	b672      	cpsid	i
 8007c72:	e7fe      	b.n	8007c72 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	685a      	ldr	r2, [r3, #4]
 8007c78:	4b13      	ldr	r3, [pc, #76]	; (8007cc8 <vPortFree+0x90>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	d01f      	beq.n	8007cc0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11b      	bne.n	8007cc0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	685a      	ldr	r2, [r3, #4]
 8007c8c:	4b0e      	ldr	r3, [pc, #56]	; (8007cc8 <vPortFree+0x90>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	43db      	mvns	r3, r3
 8007c92:	401a      	ands	r2, r3
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c98:	f7ff f9ee 	bl	8007078 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	; (8007ccc <vPortFree+0x94>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	18d2      	adds	r2, r2, r3
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <vPortFree+0x94>)
 8007ca8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	0018      	movs	r0, r3
 8007cae:	f000 f871 	bl	8007d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <vPortFree+0x98>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	1c5a      	adds	r2, r3, #1
 8007cb8:	4b05      	ldr	r3, [pc, #20]	; (8007cd0 <vPortFree+0x98>)
 8007cba:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8007cbc:	f7ff f9e8 	bl	8007090 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007cc0:	46c0      	nop			; (mov r8, r8)
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	b004      	add	sp, #16
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	20007e28 	.word	0x20007e28
 8007ccc:	20007e18 	.word	0x20007e18
 8007cd0:	20007e24 	.word	0x20007e24

08007cd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007cda:	23f0      	movs	r3, #240	; 0xf0
 8007cdc:	01db      	lsls	r3, r3, #7
 8007cde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ce0:	4b26      	ldr	r3, [pc, #152]	; (8007d7c <prvHeapInit+0xa8>)
 8007ce2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2207      	movs	r2, #7
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d00c      	beq.n	8007d06 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	3307      	adds	r3, #7
 8007cf0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2207      	movs	r2, #7
 8007cf6:	4393      	bics	r3, r2
 8007cf8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	4b1e      	ldr	r3, [pc, #120]	; (8007d7c <prvHeapInit+0xa8>)
 8007d02:	18d3      	adds	r3, r2, r3
 8007d04:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007d0a:	4b1d      	ldr	r3, [pc, #116]	; (8007d80 <prvHeapInit+0xac>)
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007d10:	4b1b      	ldr	r3, [pc, #108]	; (8007d80 <prvHeapInit+0xac>)
 8007d12:	2200      	movs	r2, #0
 8007d14:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68ba      	ldr	r2, [r7, #8]
 8007d1a:	18d3      	adds	r3, r2, r3
 8007d1c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007d1e:	2208      	movs	r2, #8
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	1a9b      	subs	r3, r3, r2
 8007d24:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2207      	movs	r2, #7
 8007d2a:	4393      	bics	r3, r2
 8007d2c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <prvHeapInit+0xb0>)
 8007d32:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007d34:	4b13      	ldr	r3, [pc, #76]	; (8007d84 <prvHeapInit+0xb0>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <prvHeapInit+0xb0>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2200      	movs	r2, #0
 8007d42:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	68fa      	ldr	r2, [r7, #12]
 8007d4c:	1ad2      	subs	r2, r2, r3
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d52:	4b0c      	ldr	r3, [pc, #48]	; (8007d84 <prvHeapInit+0xb0>)
 8007d54:	681a      	ldr	r2, [r3, #0]
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <prvHeapInit+0xb4>)
 8007d60:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	685a      	ldr	r2, [r3, #4]
 8007d66:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <prvHeapInit+0xb8>)
 8007d68:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d6a:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <prvHeapInit+0xbc>)
 8007d6c:	2280      	movs	r2, #128	; 0x80
 8007d6e:	0612      	lsls	r2, r2, #24
 8007d70:	601a      	str	r2, [r3, #0]
}
 8007d72:	46c0      	nop			; (mov r8, r8)
 8007d74:	46bd      	mov	sp, r7
 8007d76:	b004      	add	sp, #16
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	2000060c 	.word	0x2000060c
 8007d80:	20007e0c 	.word	0x20007e0c
 8007d84:	20007e14 	.word	0x20007e14
 8007d88:	20007e1c 	.word	0x20007e1c
 8007d8c:	20007e18 	.word	0x20007e18
 8007d90:	20007e28 	.word	0x20007e28

08007d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b084      	sub	sp, #16
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d9c:	4b27      	ldr	r3, [pc, #156]	; (8007e3c <prvInsertBlockIntoFreeList+0xa8>)
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	e002      	b.n	8007da8 <prvInsertBlockIntoFreeList+0x14>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d8f7      	bhi.n	8007da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	68ba      	ldr	r2, [r7, #8]
 8007dbc:	18d3      	adds	r3, r2, r3
 8007dbe:	687a      	ldr	r2, [r7, #4]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d108      	bne.n	8007dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	685a      	ldr	r2, [r3, #4]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	18d2      	adds	r2, r2, r3
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	18d2      	adds	r2, r2, r3
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d118      	bne.n	8007e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681a      	ldr	r2, [r3, #0]
 8007dee:	4b14      	ldr	r3, [pc, #80]	; (8007e40 <prvInsertBlockIntoFreeList+0xac>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	429a      	cmp	r2, r3
 8007df4:	d00d      	beq.n	8007e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685a      	ldr	r2, [r3, #4]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685b      	ldr	r3, [r3, #4]
 8007e00:	18d2      	adds	r2, r2, r3
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	681a      	ldr	r2, [r3, #0]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	601a      	str	r2, [r3, #0]
 8007e10:	e008      	b.n	8007e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007e12:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <prvInsertBlockIntoFreeList+0xac>)
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	e003      	b.n	8007e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d002      	beq.n	8007e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007e32:	46c0      	nop			; (mov r8, r8)
 8007e34:	46bd      	mov	sp, r7
 8007e36:	b004      	add	sp, #16
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	46c0      	nop			; (mov r8, r8)
 8007e3c:	20007e0c 	.word	0x20007e0c
 8007e40:	20007e14 	.word	0x20007e14

08007e44 <memset>:
 8007e44:	0003      	movs	r3, r0
 8007e46:	1882      	adds	r2, r0, r2
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d100      	bne.n	8007e4e <memset+0xa>
 8007e4c:	4770      	bx	lr
 8007e4e:	7019      	strb	r1, [r3, #0]
 8007e50:	3301      	adds	r3, #1
 8007e52:	e7f9      	b.n	8007e48 <memset+0x4>

08007e54 <__libc_init_array>:
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	2600      	movs	r6, #0
 8007e58:	4c0c      	ldr	r4, [pc, #48]	; (8007e8c <__libc_init_array+0x38>)
 8007e5a:	4d0d      	ldr	r5, [pc, #52]	; (8007e90 <__libc_init_array+0x3c>)
 8007e5c:	1b64      	subs	r4, r4, r5
 8007e5e:	10a4      	asrs	r4, r4, #2
 8007e60:	42a6      	cmp	r6, r4
 8007e62:	d109      	bne.n	8007e78 <__libc_init_array+0x24>
 8007e64:	2600      	movs	r6, #0
 8007e66:	f000 f823 	bl	8007eb0 <_init>
 8007e6a:	4c0a      	ldr	r4, [pc, #40]	; (8007e94 <__libc_init_array+0x40>)
 8007e6c:	4d0a      	ldr	r5, [pc, #40]	; (8007e98 <__libc_init_array+0x44>)
 8007e6e:	1b64      	subs	r4, r4, r5
 8007e70:	10a4      	asrs	r4, r4, #2
 8007e72:	42a6      	cmp	r6, r4
 8007e74:	d105      	bne.n	8007e82 <__libc_init_array+0x2e>
 8007e76:	bd70      	pop	{r4, r5, r6, pc}
 8007e78:	00b3      	lsls	r3, r6, #2
 8007e7a:	58eb      	ldr	r3, [r5, r3]
 8007e7c:	4798      	blx	r3
 8007e7e:	3601      	adds	r6, #1
 8007e80:	e7ee      	b.n	8007e60 <__libc_init_array+0xc>
 8007e82:	00b3      	lsls	r3, r6, #2
 8007e84:	58eb      	ldr	r3, [r5, r3]
 8007e86:	4798      	blx	r3
 8007e88:	3601      	adds	r6, #1
 8007e8a:	e7f2      	b.n	8007e72 <__libc_init_array+0x1e>
 8007e8c:	08007ff8 	.word	0x08007ff8
 8007e90:	08007ff8 	.word	0x08007ff8
 8007e94:	08007ffc 	.word	0x08007ffc
 8007e98:	08007ff8 	.word	0x08007ff8

08007e9c <memcpy>:
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	b510      	push	{r4, lr}
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d100      	bne.n	8007ea6 <memcpy+0xa>
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	5ccc      	ldrb	r4, [r1, r3]
 8007ea8:	54c4      	strb	r4, [r0, r3]
 8007eaa:	3301      	adds	r3, #1
 8007eac:	e7f8      	b.n	8007ea0 <memcpy+0x4>
	...

08007eb0 <_init>:
 8007eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb2:	46c0      	nop			; (mov r8, r8)
 8007eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eb6:	bc08      	pop	{r3}
 8007eb8:	469e      	mov	lr, r3
 8007eba:	4770      	bx	lr

08007ebc <_fini>:
 8007ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ec2:	bc08      	pop	{r3}
 8007ec4:	469e      	mov	lr, r3
 8007ec6:	4770      	bx	lr
