
Prog_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007db8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  08007e78  08007e78  00017e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007fa8  08007fa8  00020040  2**0
                  CONTENTS
  4 .ARM          00000000  08007fa8  08007fa8  00020040  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007fa8  08007fa8  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007fa8  08007fa8  00017fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007fac  08007fac  00017fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08007fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007dec  20000040  08007ff0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007e2c  08007ff0  00027e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a2f6  00000000  00000000  000200ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004183  00000000  00000000  0003a3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001808  00000000  00000000  0003e528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c8  00000000  00000000  0003fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019731  00000000  00000000  00040ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f45d  00000000  00000000  0005a729  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000998e9  00000000  00000000  00079b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000055ec  00000000  00000000  00113470  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  00118a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000040 	.word	0x20000040
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007e60 	.word	0x08007e60

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000044 	.word	0x20000044
 8000104:	08007e60 	.word	0x08007e60

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4a08      	ldr	r2, [pc, #32]	; (8000430 <MX_FREERTOS_Init+0x2c>)
 800040e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000410:	c313      	stmia	r3!, {r0, r1, r4}
 8000412:	ca03      	ldmia	r2!, {r0, r1}
 8000414:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2100      	movs	r1, #0
 800041a:	0018      	movs	r0, r3
 800041c:	f005 ffe5 	bl	80063ea <osThreadCreate>
 8000420:	0002      	movs	r2, r0
 8000422:	4b04      	ldr	r3, [pc, #16]	; (8000434 <MX_FREERTOS_Init+0x30>)
 8000424:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	46bd      	mov	sp, r7
 800042a:	b007      	add	sp, #28
 800042c:	bd90      	pop	{r4, r7, pc}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	08007e84 	.word	0x08007e84
 8000434:	2000005c 	.word	0x2000005c

08000438 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000440:	2001      	movs	r0, #1
 8000442:	f005 fffa 	bl	800643a <osDelay>
 8000446:	e7fb      	b.n	8000440 <StartDefaultTask+0x8>

08000448 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b08b      	sub	sp, #44	; 0x2c
 800044c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044e:	2414      	movs	r4, #20
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2314      	movs	r3, #20
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f007 fccb 	bl	8007df4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800045e:	4b68      	ldr	r3, [pc, #416]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000462:	4b67      	ldr	r3, [pc, #412]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000464:	2104      	movs	r1, #4
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
 800046a:	4b65      	ldr	r3, [pc, #404]	; (8000600 <MX_GPIO_Init+0x1b8>)
 800046c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800046e:	2204      	movs	r2, #4
 8000470:	4013      	ands	r3, r2
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000476:	4b62      	ldr	r3, [pc, #392]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000478:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800047a:	4b61      	ldr	r3, [pc, #388]	; (8000600 <MX_GPIO_Init+0x1b8>)
 800047c:	2120      	movs	r1, #32
 800047e:	430a      	orrs	r2, r1
 8000480:	635a      	str	r2, [r3, #52]	; 0x34
 8000482:	4b5f      	ldr	r3, [pc, #380]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000486:	2220      	movs	r2, #32
 8000488:	4013      	ands	r3, r2
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800048e:	4b5c      	ldr	r3, [pc, #368]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000490:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000492:	4b5b      	ldr	r3, [pc, #364]	; (8000600 <MX_GPIO_Init+0x1b8>)
 8000494:	2101      	movs	r1, #1
 8000496:	430a      	orrs	r2, r1
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
 800049a:	4b59      	ldr	r3, [pc, #356]	; (8000600 <MX_GPIO_Init+0x1b8>)
 800049c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800049e:	2201      	movs	r2, #1
 80004a0:	4013      	ands	r3, r2
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a6:	4b56      	ldr	r3, [pc, #344]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004aa:	4b55      	ldr	r3, [pc, #340]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004ac:	2102      	movs	r1, #2
 80004ae:	430a      	orrs	r2, r1
 80004b0:	635a      	str	r2, [r3, #52]	; 0x34
 80004b2:	4b53      	ldr	r3, [pc, #332]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004b6:	2202      	movs	r2, #2
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004be:	4b50      	ldr	r3, [pc, #320]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c2:	4b4f      	ldr	r3, [pc, #316]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004c4:	2108      	movs	r1, #8
 80004c6:	430a      	orrs	r2, r1
 80004c8:	635a      	str	r2, [r3, #52]	; 0x34
 80004ca:	4b4d      	ldr	r3, [pc, #308]	; (8000600 <MX_GPIO_Init+0x1b8>)
 80004cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80004ce:	2208      	movs	r2, #8
 80004d0:	4013      	ands	r3, r2
 80004d2:	603b      	str	r3, [r7, #0]
 80004d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin, GPIO_PIN_RESET);
 80004d6:	23c0      	movs	r3, #192	; 0xc0
 80004d8:	01db      	lsls	r3, r3, #7
 80004da:	484a      	ldr	r0, [pc, #296]	; (8000604 <MX_GPIO_Init+0x1bc>)
 80004dc:	2200      	movs	r2, #0
 80004de:	0019      	movs	r1, r3
 80004e0:	f002 f896 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_STATE_Pin|LED_ERROR_Pin, GPIO_PIN_RESET);
 80004e4:	23a0      	movs	r3, #160	; 0xa0
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	2103      	movs	r1, #3
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 f88f 	bl	8002610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LIDAR_MOTOR_ENABLE_Pin|LIDAR_MESURE_ENABLE_Pin;
 80004f2:	193b      	adds	r3, r7, r4
 80004f4:	22c0      	movs	r2, #192	; 0xc0
 80004f6:	01d2      	lsls	r2, r2, #7
 80004f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	193b      	adds	r3, r7, r4
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000500:	193b      	adds	r3, r7, r4
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000506:	193b      	adds	r3, r7, r4
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800050c:	193b      	adds	r3, r7, r4
 800050e:	4a3d      	ldr	r2, [pc, #244]	; (8000604 <MX_GPIO_Init+0x1bc>)
 8000510:	0019      	movs	r1, r3
 8000512:	0010      	movs	r0, r2
 8000514:	f001 ff18 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_STATE_Pin|LED_ERROR_Pin;
 8000518:	193b      	adds	r3, r7, r4
 800051a:	2203      	movs	r2, #3
 800051c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2201      	movs	r2, #1
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	23a0      	movs	r3, #160	; 0xa0
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f001 ff05 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = BORDURE_1_Pin|BORDURE_2_Pin|BORDURE_3_Pin;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	22e0      	movs	r2, #224	; 0xe0
 8000544:	0212      	lsls	r2, r2, #8
 8000546:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2288      	movs	r2, #136	; 0x88
 800054c:	0352      	lsls	r2, r2, #13
 800054e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	000c      	movs	r4, r1
 8000552:	193b      	adds	r3, r7, r4
 8000554:	2200      	movs	r2, #0
 8000556:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	193b      	adds	r3, r7, r4
 800055a:	4a2b      	ldr	r2, [pc, #172]	; (8000608 <MX_GPIO_Init+0x1c0>)
 800055c:	0019      	movs	r1, r3
 800055e:	0010      	movs	r0, r2
 8000560:	f001 fef2 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BUMPER_1_Pin|BUMPER_2_Pin;
 8000564:	193b      	adds	r3, r7, r4
 8000566:	22c0      	movs	r2, #192	; 0xc0
 8000568:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800056a:	193b      	adds	r3, r7, r4
 800056c:	2288      	movs	r2, #136	; 0x88
 800056e:	0352      	lsls	r2, r2, #13
 8000570:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000572:	193b      	adds	r3, r7, r4
 8000574:	2200      	movs	r2, #0
 8000576:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000578:	193b      	adds	r3, r7, r4
 800057a:	4a22      	ldr	r2, [pc, #136]	; (8000604 <MX_GPIO_Init+0x1bc>)
 800057c:	0019      	movs	r1, r3
 800057e:	0010      	movs	r0, r2
 8000580:	f001 fee2 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = BUMPER_3_Pin|BUMPER_4_Pin;
 8000584:	193b      	adds	r3, r7, r4
 8000586:	22c0      	movs	r2, #192	; 0xc0
 8000588:	0092      	lsls	r2, r2, #2
 800058a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800058c:	193b      	adds	r3, r7, r4
 800058e:	2288      	movs	r2, #136	; 0x88
 8000590:	0352      	lsls	r2, r2, #13
 8000592:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	193b      	adds	r3, r7, r4
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800059a:	193b      	adds	r3, r7, r4
 800059c:	4a1b      	ldr	r2, [pc, #108]	; (800060c <MX_GPIO_Init+0x1c4>)
 800059e:	0019      	movs	r1, r3
 80005a0:	0010      	movs	r0, r2
 80005a2:	f001 fed1 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin;
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	22e0      	movs	r2, #224	; 0xe0
 80005aa:	0152      	lsls	r2, r2, #5
 80005ac:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ae:	193b      	adds	r3, r7, r4
 80005b0:	2288      	movs	r2, #136	; 0x88
 80005b2:	0352      	lsls	r2, r2, #13
 80005b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b6:	193b      	adds	r3, r7, r4
 80005b8:	2200      	movs	r2, #0
 80005ba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	23a0      	movs	r3, #160	; 0xa0
 80005c0:	05db      	lsls	r3, r3, #23
 80005c2:	0011      	movs	r1, r2
 80005c4:	0018      	movs	r0, r3
 80005c6:	f001 febf 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80005ca:	193b      	adds	r3, r7, r4
 80005cc:	227f      	movs	r2, #127	; 0x7f
 80005ce:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	2200      	movs	r2, #0
 80005d4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d6:	193b      	adds	r3, r7, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	4a0b      	ldr	r2, [pc, #44]	; (800060c <MX_GPIO_Init+0x1c4>)
 80005e0:	0019      	movs	r1, r3
 80005e2:	0010      	movs	r0, r2
 80005e4:	f001 feb0 	bl	8002348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 80005e8:	2200      	movs	r2, #0
 80005ea:	2103      	movs	r1, #3
 80005ec:	2007      	movs	r0, #7
 80005ee:	f001 fdad 	bl	800214c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80005f2:	2007      	movs	r0, #7
 80005f4:	f001 fdbf 	bl	8002176 <HAL_NVIC_EnableIRQ>

}
 80005f8:	46c0      	nop			; (mov r8, r8)
 80005fa:	46bd      	mov	sp, r7
 80005fc:	b00b      	add	sp, #44	; 0x2c
 80005fe:	bd90      	pop	{r4, r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	50000800 	.word	0x50000800
 8000608:	50000400 	.word	0x50000400
 800060c:	50000c00 	.word	0x50000c00

08000610 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000614:	4b1b      	ldr	r3, [pc, #108]	; (8000684 <MX_I2C2_Init+0x74>)
 8000616:	4a1c      	ldr	r2, [pc, #112]	; (8000688 <MX_I2C2_Init+0x78>)
 8000618:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 800061a:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_I2C2_Init+0x74>)
 800061c:	4a1b      	ldr	r2, [pc, #108]	; (800068c <MX_I2C2_Init+0x7c>)
 800061e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <MX_I2C2_Init+0x74>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_I2C2_Init+0x74>)
 8000628:	2201      	movs	r2, #1
 800062a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_I2C2_Init+0x74>)
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_I2C2_Init+0x74>)
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C2_Init+0x74>)
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C2_Init+0x74>)
 8000640:	2200      	movs	r2, #0
 8000642:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C2_Init+0x74>)
 8000646:	2200      	movs	r2, #0
 8000648:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C2_Init+0x74>)
 800064c:	0018      	movs	r0, r3
 800064e:	f002 f83b 	bl	80026c8 <HAL_I2C_Init>
 8000652:	1e03      	subs	r3, r0, #0
 8000654:	d001      	beq.n	800065a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000656:	f000 f8f9 	bl	800084c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800065a:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C2_Init+0x74>)
 800065c:	2100      	movs	r1, #0
 800065e:	0018      	movs	r0, r3
 8000660:	f002 f8c8 	bl	80027f4 <HAL_I2CEx_ConfigAnalogFilter>
 8000664:	1e03      	subs	r3, r0, #0
 8000666:	d001      	beq.n	800066c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000668:	f000 f8f0 	bl	800084c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800066c:	4b05      	ldr	r3, [pc, #20]	; (8000684 <MX_I2C2_Init+0x74>)
 800066e:	2100      	movs	r1, #0
 8000670:	0018      	movs	r0, r3
 8000672:	f002 f90b 	bl	800288c <HAL_I2CEx_ConfigDigitalFilter>
 8000676:	1e03      	subs	r3, r0, #0
 8000678:	d001      	beq.n	800067e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800067a:	f000 f8e7 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000060 	.word	0x20000060
 8000688:	40005800 	.word	0x40005800
 800068c:	00303d5b 	.word	0x00303d5b

08000690 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b08b      	sub	sp, #44	; 0x2c
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	2414      	movs	r4, #20
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	2314      	movs	r3, #20
 80006a0:	001a      	movs	r2, r3
 80006a2:	2100      	movs	r1, #0
 80006a4:	f007 fba6 	bl	8007df4 <memset>
  if(i2cHandle->Instance==I2C2)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <HAL_I2C_MspInit+0x8c>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d130      	bne.n	8000714 <HAL_I2C_MspInit+0x84>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006b8:	2102      	movs	r1, #2
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
 80006be:	4b18      	ldr	r3, [pc, #96]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	2202      	movs	r2, #2
 80006c4:	4013      	ands	r3, r2
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80006ca:	193b      	adds	r3, r7, r4
 80006cc:	22c0      	movs	r2, #192	; 0xc0
 80006ce:	0112      	lsls	r2, r2, #4
 80006d0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006d2:	0021      	movs	r1, r4
 80006d4:	187b      	adds	r3, r7, r1
 80006d6:	2212      	movs	r2, #18
 80006d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	187b      	adds	r3, r7, r1
 80006dc:	2200      	movs	r2, #0
 80006de:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	187b      	adds	r3, r7, r1
 80006e2:	2200      	movs	r2, #0
 80006e4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80006e6:	187b      	adds	r3, r7, r1
 80006e8:	2206      	movs	r2, #6
 80006ea:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ec:	187b      	adds	r3, r7, r1
 80006ee:	4a0d      	ldr	r2, [pc, #52]	; (8000724 <HAL_I2C_MspInit+0x94>)
 80006f0:	0019      	movs	r1, r3
 80006f2:	0010      	movs	r0, r2
 80006f4:	f001 fe28 	bl	8002348 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <HAL_I2C_MspInit+0x90>)
 80006fe:	2180      	movs	r1, #128	; 0x80
 8000700:	03c9      	lsls	r1, r1, #15
 8000702:	430a      	orrs	r2, r1
 8000704:	63da      	str	r2, [r3, #60]	; 0x3c
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_I2C_MspInit+0x90>)
 8000708:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800070a:	2380      	movs	r3, #128	; 0x80
 800070c:	03db      	lsls	r3, r3, #15
 800070e:	4013      	ands	r3, r2
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000714:	46c0      	nop			; (mov r8, r8)
 8000716:	46bd      	mov	sp, r7
 8000718:	b00b      	add	sp, #44	; 0x2c
 800071a:	bd90      	pop	{r4, r7, pc}
 800071c:	40005800 	.word	0x40005800
 8000720:	40021000 	.word	0x40021000
 8000724:	50000400 	.word	0x50000400

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f001 fbdc 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f84a 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f7ff fe88 	bl	8000448 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000738:	f7ff ff6a 	bl	8000610 <MX_I2C2_Init>
  MX_TIM1_Init();
 800073c:	f000 f92e 	bl	800099c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000740:	f000 f996 	bl	8000a70 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000744:	f000 f9f8 	bl	8000b38 <MX_TIM6_Init>
  MX_TIM7_Init();
 8000748:	f000 fa32 	bl	8000bb0 <MX_TIM7_Init>
  MX_TIM14_Init();
 800074c:	f000 fa6c 	bl	8000c28 <MX_TIM14_Init>
  MX_TIM15_Init();
 8000750:	f000 faba 	bl	8000cc8 <MX_TIM15_Init>
  MX_TIM16_Init();
 8000754:	f000 fb5a 	bl	8000e0c <MX_TIM16_Init>
  MX_TIM17_Init();
 8000758:	f000 fbde 	bl	8000f18 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 800075c:	f000 fe38 	bl	80013d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000760:	f000 fed2 	bl	8001508 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000764:	f000 fe82 	bl	800146c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // Create and start FreeRTOS tasks
  HAL_TIM_PWM_Start(left_motor.forward_htim,left_motor.forward_CHANNEL);
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <main+0x98>)
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	4b14      	ldr	r3, [pc, #80]	; (80007c0 <main+0x98>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	0019      	movs	r1, r3
 8000772:	0010      	movs	r0, r2
 8000774:	f002 ffbe 	bl	80036f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(left_motor.reverse_htim,left_motor.reverse_CHANNEL);
 8000778:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <main+0x98>)
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <main+0x98>)
 800077e:	68db      	ldr	r3, [r3, #12]
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f002 ffb6 	bl	80036f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(right_motor.forward_htim,right_motor.forward_CHANNEL);
 8000788:	4b0e      	ldr	r3, [pc, #56]	; (80007c4 <main+0x9c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <main+0x9c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	0019      	movs	r1, r3
 8000792:	0010      	movs	r0, r2
 8000794:	f002 ffae 	bl	80036f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(right_motor.reverse_htim,right_motor.reverse_CHANNEL);
 8000798:	4b0a      	ldr	r3, [pc, #40]	; (80007c4 <main+0x9c>)
 800079a:	689a      	ldr	r2, [r3, #8]
 800079c:	4b09      	ldr	r3, [pc, #36]	; (80007c4 <main+0x9c>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	0019      	movs	r1, r3
 80007a2:	0010      	movs	r0, r2
 80007a4:	f002 ffa6 	bl	80036f4 <HAL_TIM_PWM_Start>
  Start_HC05_Tasks();
 80007a8:	f001 f870 	bl	800188c <Start_HC05_Tasks>
  Start_motor_Tasks();
 80007ac:	f001 f8c8 	bl	8001940 <Start_motor_Tasks>
  // Start the scheduler
  vTaskStartScheduler();
 80007b0:	f006 fc02 	bl	8006fb8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80007b4:	f7ff fe26 	bl	8000404 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007b8:	f005 fe0f 	bl	80063da <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <main+0x94>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20000014 	.word	0x20000014
 80007c4:	20000024 	.word	0x20000024

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b093      	sub	sp, #76	; 0x4c
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	2414      	movs	r4, #20
 80007d0:	193b      	adds	r3, r7, r4
 80007d2:	0018      	movs	r0, r3
 80007d4:	2334      	movs	r3, #52	; 0x34
 80007d6:	001a      	movs	r2, r3
 80007d8:	2100      	movs	r1, #0
 80007da:	f007 fb0b 	bl	8007df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007de:	1d3b      	adds	r3, r7, #4
 80007e0:	0018      	movs	r0, r3
 80007e2:	2310      	movs	r3, #16
 80007e4:	001a      	movs	r2, r3
 80007e6:	2100      	movs	r1, #0
 80007e8:	f007 fb04 	bl	8007df4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007ec:	2380      	movs	r3, #128	; 0x80
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 f897 	bl	8002924 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	2201      	movs	r2, #1
 80007fa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2280      	movs	r2, #128	; 0x80
 8000800:	0252      	lsls	r2, r2, #9
 8000802:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000804:	193b      	adds	r3, r7, r4
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080a:	193b      	adds	r3, r7, r4
 800080c:	0018      	movs	r0, r3
 800080e:	f002 f8d5 	bl	80029bc <HAL_RCC_OscConfig>
 8000812:	1e03      	subs	r3, r0, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x52>
  {
    Error_Handler();
 8000816:	f000 f819 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	1d3b      	adds	r3, r7, #4
 800081c:	2207      	movs	r2, #7
 800081e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2201      	movs	r2, #1
 8000824:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2100      	movs	r1, #0
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fbd0 	bl	8002fdc <HAL_RCC_ClockConfig>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000840:	f000 f804 	bl	800084c <Error_Handler>
  }
}
 8000844:	46c0      	nop			; (mov r8, r8)
 8000846:	46bd      	mov	sp, r7
 8000848:	b013      	add	sp, #76	; 0x4c
 800084a:	bd90      	pop	{r4, r7, pc}

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <HAL_MspInit+0x50>)
 8000860:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_MspInit+0x50>)
 8000864:	2101      	movs	r1, #1
 8000866:	430a      	orrs	r2, r1
 8000868:	641a      	str	r2, [r3, #64]	; 0x40
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <HAL_MspInit+0x50>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	2201      	movs	r2, #1
 8000870:	4013      	ands	r3, r2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000876:	4b0c      	ldr	r3, [pc, #48]	; (80008a8 <HAL_MspInit+0x50>)
 8000878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <HAL_MspInit+0x50>)
 800087c:	2180      	movs	r1, #128	; 0x80
 800087e:	0549      	lsls	r1, r1, #21
 8000880:	430a      	orrs	r2, r1
 8000882:	63da      	str	r2, [r3, #60]	; 0x3c
 8000884:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <HAL_MspInit+0x50>)
 8000886:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	055b      	lsls	r3, r3, #21
 800088c:	4013      	ands	r3, r2
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000892:	2302      	movs	r3, #2
 8000894:	425b      	negs	r3, r3
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fc56 	bl	800214c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008a0:	46c0      	nop			; (mov r8, r8)
 80008a2:	46bd      	mov	sp, r7
 80008a4:	b002      	add	sp, #8
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40021000 	.word	0x40021000

080008ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <NMI_Handler+0x4>

080008b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b2:	b580      	push	{r7, lr}
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <HardFault_Handler+0x4>

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f001 fb7e 	bl	8001fbc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80008c0:	f006 fee4 	bl	800768c <xTaskGetSchedulerState>
 80008c4:	0003      	movs	r3, r0
 80008c6:	2b01      	cmp	r3, #1
 80008c8:	d001      	beq.n	80008ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80008ca:	f007 f8a5 	bl	8007a18 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ce:	46c0      	nop			; (mov r8, r8)
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUMPER_1_Pin);
 80008d8:	2040      	movs	r0, #64	; 0x40
 80008da:	f001 feb7 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_2_Pin);
 80008de:	2080      	movs	r0, #128	; 0x80
 80008e0:	f001 feb4 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_3_Pin);
 80008e4:	2380      	movs	r3, #128	; 0x80
 80008e6:	005b      	lsls	r3, r3, #1
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 feaf 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUMPER_4_Pin);
 80008ee:	2380      	movs	r3, #128	; 0x80
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	0018      	movs	r0, r3
 80008f4:	f001 feaa 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_1_Pin);
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	0018      	movs	r0, r3
 80008fe:	f001 fea5 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_2_Pin);
 8000902:	2380      	movs	r3, #128	; 0x80
 8000904:	011b      	lsls	r3, r3, #4
 8000906:	0018      	movs	r0, r3
 8000908:	f001 fea0 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN_3_Pin);
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	015b      	lsls	r3, r3, #5
 8000910:	0018      	movs	r0, r3
 8000912:	f001 fe9b 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_1_Pin);
 8000916:	2380      	movs	r3, #128	; 0x80
 8000918:	019b      	lsls	r3, r3, #6
 800091a:	0018      	movs	r0, r3
 800091c:	f001 fe96 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_2_Pin);
 8000920:	2380      	movs	r3, #128	; 0x80
 8000922:	01db      	lsls	r3, r3, #7
 8000924:	0018      	movs	r0, r3
 8000926:	f001 fe91 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BORDURE_3_Pin);
 800092a:	2380      	movs	r3, #128	; 0x80
 800092c:	021b      	lsls	r3, r3, #8
 800092e:	0018      	movs	r0, r3
 8000930:	f001 fe8c 	bl	800264c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <USART3_4_IRQHandler>:

/**
  * @brief This function handles USART3 and USART4 interrupts.
  */
void USART3_4_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_4_IRQn 0 */
	BaseType_t higher_priority_task_woken=pdFALSE;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
	xQueueSendFromISR(q_read_BT,(void*)&buffer,&higher_priority_task_woken);
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <USART3_4_IRQHandler+0x44>)
 8000948:	6818      	ldr	r0, [r3, #0]
 800094a:	1d3a      	adds	r2, r7, #4
 800094c:	490d      	ldr	r1, [pc, #52]	; (8000984 <USART3_4_IRQHandler+0x48>)
 800094e:	2300      	movs	r3, #0
 8000950:	f005 ff98 	bl	8006884 <xQueueGenericSendFromISR>

  /* USER CODE END USART3_4_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000954:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <USART3_4_IRQHandler+0x4c>)
 8000956:	0018      	movs	r0, r3
 8000958:	f003 ff0e 	bl	8004778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_4_IRQn 1 */
	HAL_UART_Receive_IT(&huart3,&buffer,1);
 800095c:	4909      	ldr	r1, [pc, #36]	; (8000984 <USART3_4_IRQHandler+0x48>)
 800095e:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <USART3_4_IRQHandler+0x4c>)
 8000960:	2201      	movs	r2, #1
 8000962:	0018      	movs	r0, r3
 8000964:	f003 feb0 	bl	80046c8 <HAL_UART_Receive_IT>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d003      	beq.n	8000976 <USART3_4_IRQHandler+0x3a>
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <USART3_4_IRQHandler+0x50>)
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	0552      	lsls	r2, r2, #21
 8000974:	601a      	str	r2, [r3, #0]
  /* USER CODE END USART3_4_IRQn 1 */
}
 8000976:	46c0      	nop			; (mov r8, r8)
 8000978:	46bd      	mov	sp, r7
 800097a:	b002      	add	sp, #8
 800097c:	bd80      	pop	{r7, pc}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	200004d4 	.word	0x200004d4
 8000984:	200004d8 	.word	0x200004d8
 8000988:	2000043c 	.word	0x2000043c
 800098c:	e000ed04 	.word	0xe000ed04

08000990 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b08d      	sub	sp, #52	; 0x34
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009a2:	240c      	movs	r4, #12
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	0018      	movs	r0, r3
 80009a8:	2324      	movs	r3, #36	; 0x24
 80009aa:	001a      	movs	r2, r3
 80009ac:	2100      	movs	r1, #0
 80009ae:	f007 fa21 	bl	8007df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	230c      	movs	r3, #12
 80009b8:	001a      	movs	r2, r3
 80009ba:	2100      	movs	r1, #0
 80009bc:	f007 fa1a 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c0:	4b28      	ldr	r3, [pc, #160]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009c2:	4a29      	ldr	r2, [pc, #164]	; (8000a68 <MX_TIM1_Init+0xcc>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <MX_TIM1_Init+0xd0>)
 80009d6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e4:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_TIM1_Init+0xc8>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80009ea:	0021      	movs	r1, r4
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2201      	movs	r2, #1
 80009f0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80009f2:	187b      	adds	r3, r7, r1
 80009f4:	2200      	movs	r2, #0
 80009f6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	2201      	movs	r2, #1
 80009fc:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2200      	movs	r2, #0
 8000a02:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000a04:	187b      	adds	r3, r7, r1
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a0a:	187b      	adds	r3, r7, r1
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a10:	187b      	adds	r3, r7, r1
 8000a12:	2201      	movs	r2, #1
 8000a14:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a16:	187b      	adds	r3, r7, r1
 8000a18:	2200      	movs	r2, #0
 8000a1a:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000a1c:	187b      	adds	r3, r7, r1
 8000a1e:	2200      	movs	r2, #0
 8000a20:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a22:	187a      	adds	r2, r7, r1
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_TIM1_Init+0xc8>)
 8000a26:	0011      	movs	r1, r2
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f002 ff47 	bl	80038bc <HAL_TIM_Encoder_Init>
 8000a2e:	1e03      	subs	r3, r0, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000a32:	f7ff ff0b 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a36:	003b      	movs	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a3c:	003b      	movs	r3, r7
 8000a3e:	2200      	movs	r2, #0
 8000a40:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	003b      	movs	r3, r7
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a48:	003a      	movs	r2, r7
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_TIM1_Init+0xc8>)
 8000a4c:	0011      	movs	r1, r2
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f003 fc3a 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a54:	1e03      	subs	r3, r0, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000a58:	f7ff fef8 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a5c:	46c0      	nop			; (mov r8, r8)
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b00d      	add	sp, #52	; 0x34
 8000a62:	bd90      	pop	{r4, r7, pc}
 8000a64:	200000b4 	.word	0x200000b4
 8000a68:	40012c00 	.word	0x40012c00
 8000a6c:	0000ffff 	.word	0x0000ffff

08000a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b08d      	sub	sp, #52	; 0x34
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a76:	240c      	movs	r4, #12
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	2324      	movs	r3, #36	; 0x24
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f007 f9b7 	bl	8007df4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a86:	003b      	movs	r3, r7
 8000a88:	0018      	movs	r0, r3
 8000a8a:	230c      	movs	r3, #12
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f007 f9b0 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000a94:	4b25      	ldr	r3, [pc, #148]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000a96:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <MX_TIM3_Init+0xc0>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b22      	ldr	r3, [pc, #136]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aa6:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000aa8:	4a22      	ldr	r2, [pc, #136]	; (8000b34 <MX_TIM3_Init+0xc4>)
 8000aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aac:	4b1f      	ldr	r3, [pc, #124]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b1e      	ldr	r3, [pc, #120]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ab8:	0021      	movs	r1, r4
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2201      	movs	r2, #1
 8000abe:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2201      	movs	r2, #1
 8000aca:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2200      	movs	r2, #0
 8000ad0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ad8:	187b      	adds	r3, r7, r1
 8000ada:	2200      	movs	r2, #0
 8000adc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ade:	187b      	adds	r3, r7, r1
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000af0:	187a      	adds	r2, r7, r1
 8000af2:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000af4:	0011      	movs	r1, r2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f002 fee0 	bl	80038bc <HAL_TIM_Encoder_Init>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000b00:	f7ff fea4 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b04:	003b      	movs	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b10:	003a      	movs	r2, r7
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <MX_TIM3_Init+0xbc>)
 8000b14:	0011      	movs	r1, r2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f003 fbd6 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8000b20:	f7ff fe94 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b00d      	add	sp, #52	; 0x34
 8000b2a:	bd90      	pop	{r4, r7, pc}
 8000b2c:	20000100 	.word	0x20000100
 8000b30:	40000400 	.word	0x40000400
 8000b34:	0000ffff 	.word	0x0000ffff

08000b38 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	0018      	movs	r0, r3
 8000b42:	230c      	movs	r3, #12
 8000b44:	001a      	movs	r2, r3
 8000b46:	2100      	movs	r1, #0
 8000b48:	f007 f954 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b4e:	4a16      	ldr	r2, [pc, #88]	; (8000ba8 <MX_TIM6_Init+0x70>)
 8000b50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b60:	4a12      	ldr	r2, [pc, #72]	; (8000bac <MX_TIM6_Init+0x74>)
 8000b62:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f002 fd11 	bl	8003594 <HAL_TIM_Base_Init>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b76:	f7ff fe69 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b80:	1d3b      	adds	r3, r7, #4
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b86:	1d3a      	adds	r2, r7, #4
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_TIM6_Init+0x6c>)
 8000b8a:	0011      	movs	r1, r2
 8000b8c:	0018      	movs	r0, r3
 8000b8e:	f003 fb9b 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	1e03      	subs	r3, r0, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b96:	f7ff fe59 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	b004      	add	sp, #16
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	2000014c 	.word	0x2000014c
 8000ba8:	40001000 	.word	0x40001000
 8000bac:	0000ffff 	.word	0x0000ffff

08000bb0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb6:	1d3b      	adds	r3, r7, #4
 8000bb8:	0018      	movs	r0, r3
 8000bba:	230c      	movs	r3, #12
 8000bbc:	001a      	movs	r2, r3
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	f007 f918 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000bc4:	4b15      	ldr	r3, [pc, #84]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bc6:	4a16      	ldr	r2, [pc, #88]	; (8000c20 <MX_TIM7_Init+0x70>)
 8000bc8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bd0:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8000bd6:	4b11      	ldr	r3, [pc, #68]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bd8:	4a12      	ldr	r2, [pc, #72]	; (8000c24 <MX_TIM7_Init+0x74>)
 8000bda:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bdc:	4b0f      	ldr	r3, [pc, #60]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000be2:	4b0e      	ldr	r3, [pc, #56]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000be4:	0018      	movs	r0, r3
 8000be6:	f002 fcd5 	bl	8003594 <HAL_TIM_Base_Init>
 8000bea:	1e03      	subs	r3, r0, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8000bee:	f7ff fe2d 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000bfe:	1d3a      	adds	r2, r7, #4
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <MX_TIM7_Init+0x6c>)
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f003 fb5f 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c0a:	1e03      	subs	r3, r0, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8000c0e:	f7ff fe1d 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b004      	add	sp, #16
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	20000198 	.word	0x20000198
 8000c20:	40001400 	.word	0x40001400
 8000c24:	0000ffff 	.word	0x0000ffff

08000c28 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b088      	sub	sp, #32
 8000c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c2e:	1d3b      	adds	r3, r7, #4
 8000c30:	0018      	movs	r0, r3
 8000c32:	231c      	movs	r3, #28
 8000c34:	001a      	movs	r2, r3
 8000c36:	2100      	movs	r1, #0
 8000c38:	f007 f8dc 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000c3c:	4b1f      	ldr	r3, [pc, #124]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c3e:	4a20      	ldr	r2, [pc, #128]	; (8000cc0 <MX_TIM14_Init+0x98>)
 8000c40:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8000c42:	4b1e      	ldr	r3, [pc, #120]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c48:	4b1c      	ldr	r3, [pc, #112]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000c4e:	4b1b      	ldr	r3, [pc, #108]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <MX_TIM14_Init+0x9c>)
 8000c52:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c54:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c5a:	4b18      	ldr	r3, [pc, #96]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000c60:	4b16      	ldr	r3, [pc, #88]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f002 fc96 	bl	8003594 <HAL_TIM_Base_Init>
 8000c68:	1e03      	subs	r3, r0, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8000c6c:	f7ff fdee 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000c70:	4b12      	ldr	r3, [pc, #72]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 fce6 	bl	8003644 <HAL_TIM_PWM_Init>
 8000c78:	1e03      	subs	r3, r0, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8000c7c:	f7ff fde6 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	2260      	movs	r2, #96	; 0x60
 8000c84:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c98:	1d39      	adds	r1, r7, #4
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 feb4 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000ca8:	f7ff fdd0 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000cac:	4b03      	ldr	r3, [pc, #12]	; (8000cbc <MX_TIM14_Init+0x94>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f000 face 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000cb4:	46c0      	nop			; (mov r8, r8)
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b008      	add	sp, #32
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	200001e4 	.word	0x200001e4
 8000cc0:	40002000 	.word	0x40002000
 8000cc4:	0000ffff 	.word	0x0000ffff

08000cc8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b098      	sub	sp, #96	; 0x60
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cce:	2354      	movs	r3, #84	; 0x54
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	230c      	movs	r3, #12
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f007 f88b 	bl	8007df4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cde:	2338      	movs	r3, #56	; 0x38
 8000ce0:	18fb      	adds	r3, r7, r3
 8000ce2:	0018      	movs	r0, r3
 8000ce4:	231c      	movs	r3, #28
 8000ce6:	001a      	movs	r2, r3
 8000ce8:	2100      	movs	r1, #0
 8000cea:	f007 f883 	bl	8007df4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	2334      	movs	r3, #52	; 0x34
 8000cf4:	001a      	movs	r2, r3
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	f007 f87c 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000cfc:	4b41      	ldr	r3, [pc, #260]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000cfe:	4a42      	ldr	r2, [pc, #264]	; (8000e08 <MX_TIM15_Init+0x140>)
 8000d00:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 4;
 8000d02:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d04:	2204      	movs	r2, #4
 8000d06:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d08:	4b3e      	ldr	r3, [pc, #248]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 127;
 8000d0e:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d10:	227f      	movs	r2, #127	; 0x7f
 8000d12:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d14:	4b3b      	ldr	r3, [pc, #236]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000d1a:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d20:	4b38      	ldr	r3, [pc, #224]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d22:	2280      	movs	r2, #128	; 0x80
 8000d24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000d26:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f002 fc8b 	bl	8003644 <HAL_TIM_PWM_Init>
 8000d2e:	1e03      	subs	r3, r0, #0
 8000d30:	d001      	beq.n	8000d36 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000d32:	f7ff fd8b 	bl	800084c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d36:	2154      	movs	r1, #84	; 0x54
 8000d38:	187b      	adds	r3, r7, r1
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	187b      	adds	r3, r7, r1
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000d44:	187a      	adds	r2, r7, r1
 8000d46:	4b2f      	ldr	r3, [pc, #188]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d48:	0011      	movs	r1, r2
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	f003 fabc 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d50:	1e03      	subs	r3, r0, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8000d54:	f7ff fd7a 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2138      	movs	r1, #56	; 0x38
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2260      	movs	r2, #96	; 0x60
 8000d5e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2200      	movs	r2, #0
 8000d64:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d6c:	187b      	adds	r3, r7, r1
 8000d6e:	2200      	movs	r2, #0
 8000d70:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d78:	187b      	adds	r3, r7, r1
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2200      	movs	r2, #0
 8000d82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d84:	1879      	adds	r1, r7, r1
 8000d86:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f002 fe3e 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8000d94:	f7ff fd5a 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d98:	2338      	movs	r3, #56	; 0x38
 8000d9a:	18f9      	adds	r1, r7, r3
 8000d9c:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000d9e:	2204      	movs	r2, #4
 8000da0:	0018      	movs	r0, r3
 8000da2:	f002 fe33 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000da6:	1e03      	subs	r3, r0, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8000daa:	f7ff fd4f 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	2200      	movs	r2, #0
 8000db8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dba:	1d3b      	adds	r3, r7, #4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc0:	1d3b      	adds	r3, r7, #4
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc6:	1d3b      	adds	r3, r7, #4
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2280      	movs	r2, #128	; 0x80
 8000dd0:	0192      	lsls	r2, r2, #6
 8000dd2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f003 fad6 	bl	8004398 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dec:	1e03      	subs	r3, r0, #0
 8000dee:	d001      	beq.n	8000df4 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8000df0:	f7ff fd2c 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000df4:	4b03      	ldr	r3, [pc, #12]	; (8000e04 <MX_TIM15_Init+0x13c>)
 8000df6:	0018      	movs	r0, r3
 8000df8:	f000 fa2a 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000dfc:	46c0      	nop			; (mov r8, r8)
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	b018      	add	sp, #96	; 0x60
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000230 	.word	0x20000230
 8000e08:	40014000 	.word	0x40014000

08000e0c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	; 0x50
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e12:	2334      	movs	r3, #52	; 0x34
 8000e14:	18fb      	adds	r3, r7, r3
 8000e16:	0018      	movs	r0, r3
 8000e18:	231c      	movs	r3, #28
 8000e1a:	001a      	movs	r2, r3
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	f006 ffe9 	bl	8007df4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e22:	003b      	movs	r3, r7
 8000e24:	0018      	movs	r0, r3
 8000e26:	2334      	movs	r3, #52	; 0x34
 8000e28:	001a      	movs	r2, r3
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	f006 ffe2 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e32:	4a38      	ldr	r2, [pc, #224]	; (8000f14 <MX_TIM16_Init+0x108>)
 8000e34:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 4;
 8000e36:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e38:	2204      	movs	r2, #4
 8000e3a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b34      	ldr	r3, [pc, #208]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 127;
 8000e42:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e44:	227f      	movs	r2, #127	; 0x7f
 8000e46:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e48:	4b31      	ldr	r3, [pc, #196]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000e4e:	4b30      	ldr	r3, [pc, #192]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e54:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000e5a:	4b2d      	ldr	r3, [pc, #180]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f002 fb99 	bl	8003594 <HAL_TIM_Base_Init>
 8000e62:	1e03      	subs	r3, r0, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8000e66:	f7ff fcf1 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000e6a:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f002 fbe9 	bl	8003644 <HAL_TIM_PWM_Init>
 8000e72:	1e03      	subs	r3, r0, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8000e76:	f7ff fce9 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2134      	movs	r1, #52	; 0x34
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2260      	movs	r2, #96	; 0x60
 8000e80:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2200      	movs	r2, #0
 8000e86:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2200      	movs	r2, #0
 8000e92:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2200      	movs	r2, #0
 8000e98:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ea6:	1879      	adds	r1, r7, r1
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	0018      	movs	r0, r3
 8000eae:	f002 fdad 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	1e03      	subs	r3, r0, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8000eb6:	f7ff fcc9 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000eba:	003b      	movs	r3, r7
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ec0:	003b      	movs	r3, r7
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	2200      	movs	r2, #0
 8000eca:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ecc:	003b      	movs	r3, r7
 8000ece:	2200      	movs	r2, #0
 8000ed0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ed2:	003b      	movs	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ed8:	003b      	movs	r3, r7
 8000eda:	2280      	movs	r2, #128	; 0x80
 8000edc:	0192      	lsls	r2, r2, #6
 8000ede:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ee0:	003b      	movs	r3, r7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ee6:	003b      	movs	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000eec:	003a      	movs	r2, r7
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f003 fa50 	bl	8004398 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ef8:	1e03      	subs	r3, r0, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8000efc:	f7ff fca6 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <MX_TIM16_Init+0x104>)
 8000f02:	0018      	movs	r0, r3
 8000f04:	f000 f9a4 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8000f08:	46c0      	nop			; (mov r8, r8)
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	b014      	add	sp, #80	; 0x50
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	2000027c 	.word	0x2000027c
 8000f14:	40014400 	.word	0x40014400

08000f18 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b094      	sub	sp, #80	; 0x50
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1e:	2334      	movs	r3, #52	; 0x34
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	0018      	movs	r0, r3
 8000f24:	231c      	movs	r3, #28
 8000f26:	001a      	movs	r2, r3
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f006 ff63 	bl	8007df4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f2e:	003b      	movs	r3, r7
 8000f30:	0018      	movs	r0, r3
 8000f32:	2334      	movs	r3, #52	; 0x34
 8000f34:	001a      	movs	r2, r3
 8000f36:	2100      	movs	r1, #0
 8000f38:	f006 ff5c 	bl	8007df4 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000f3c:	4b37      	ldr	r3, [pc, #220]	; (800101c <MX_TIM17_Init+0x104>)
 8000f3e:	4a38      	ldr	r2, [pc, #224]	; (8001020 <MX_TIM17_Init+0x108>)
 8000f40:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 4;
 8000f42:	4b36      	ldr	r3, [pc, #216]	; (800101c <MX_TIM17_Init+0x104>)
 8000f44:	2204      	movs	r2, #4
 8000f46:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f48:	4b34      	ldr	r3, [pc, #208]	; (800101c <MX_TIM17_Init+0x104>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 127;
 8000f4e:	4b33      	ldr	r3, [pc, #204]	; (800101c <MX_TIM17_Init+0x104>)
 8000f50:	227f      	movs	r2, #127	; 0x7f
 8000f52:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f54:	4b31      	ldr	r3, [pc, #196]	; (800101c <MX_TIM17_Init+0x104>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000f5a:	4b30      	ldr	r3, [pc, #192]	; (800101c <MX_TIM17_Init+0x104>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b2e      	ldr	r3, [pc, #184]	; (800101c <MX_TIM17_Init+0x104>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000f66:	4b2d      	ldr	r3, [pc, #180]	; (800101c <MX_TIM17_Init+0x104>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f002 fb13 	bl	8003594 <HAL_TIM_Base_Init>
 8000f6e:	1e03      	subs	r3, r0, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8000f72:	f7ff fc6b 	bl	800084c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <MX_TIM17_Init+0x104>)
 8000f78:	0018      	movs	r0, r3
 8000f7a:	f002 fb63 	bl	8003644 <HAL_TIM_PWM_Init>
 8000f7e:	1e03      	subs	r3, r0, #0
 8000f80:	d001      	beq.n	8000f86 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8000f82:	f7ff fc63 	bl	800084c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f86:	2134      	movs	r1, #52	; 0x34
 8000f88:	187b      	adds	r3, r7, r1
 8000f8a:	2260      	movs	r2, #96	; 0x60
 8000f8c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000f8e:	187b      	adds	r3, r7, r1
 8000f90:	2200      	movs	r2, #0
 8000f92:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f94:	187b      	adds	r3, r7, r1
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fa6:	187b      	adds	r3, r7, r1
 8000fa8:	2200      	movs	r2, #0
 8000faa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	2200      	movs	r2, #0
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb2:	1879      	adds	r1, r7, r1
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_TIM17_Init+0x104>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fd27 	bl	8003a0c <HAL_TIM_PWM_ConfigChannel>
 8000fbe:	1e03      	subs	r3, r0, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8000fc2:	f7ff fc43 	bl	800084c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000fc6:	003b      	movs	r3, r7
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000fcc:	003b      	movs	r3, r7
 8000fce:	2200      	movs	r2, #0
 8000fd0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000fd2:	003b      	movs	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fd8:	003b      	movs	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fde:	003b      	movs	r3, r7
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fe4:	003b      	movs	r3, r7
 8000fe6:	2280      	movs	r2, #128	; 0x80
 8000fe8:	0192      	lsls	r2, r2, #6
 8000fea:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000fec:	003b      	movs	r3, r7
 8000fee:	2200      	movs	r2, #0
 8000ff0:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ff2:	003b      	movs	r3, r7
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ff8:	003a      	movs	r2, r7
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_TIM17_Init+0x104>)
 8000ffc:	0011      	movs	r1, r2
 8000ffe:	0018      	movs	r0, r3
 8001000:	f003 f9ca 	bl	8004398 <HAL_TIMEx_ConfigBreakDeadTime>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d001      	beq.n	800100c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001008:	f7ff fc20 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <MX_TIM17_Init+0x104>)
 800100e:	0018      	movs	r0, r3
 8001010:	f000 f91e 	bl	8001250 <HAL_TIM_MspPostInit>

}
 8001014:	46c0      	nop			; (mov r8, r8)
 8001016:	46bd      	mov	sp, r7
 8001018:	b014      	add	sp, #80	; 0x50
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200002c8 	.word	0x200002c8
 8001020:	40014800 	.word	0x40014800

08001024 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001024:	b590      	push	{r4, r7, lr}
 8001026:	b08d      	sub	sp, #52	; 0x34
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	241c      	movs	r4, #28
 800102e:	193b      	adds	r3, r7, r4
 8001030:	0018      	movs	r0, r3
 8001032:	2314      	movs	r3, #20
 8001034:	001a      	movs	r2, r3
 8001036:	2100      	movs	r1, #0
 8001038:	f006 fedc 	bl	8007df4 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a36      	ldr	r2, [pc, #216]	; (800111c <HAL_TIM_Encoder_MspInit+0xf8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d132      	bne.n	80010ac <HAL_TIM_Encoder_MspInit+0x88>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104a:	4b35      	ldr	r3, [pc, #212]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0109      	lsls	r1, r1, #4
 8001050:	430a      	orrs	r2, r1
 8001052:	641a      	str	r2, [r3, #64]	; 0x40
 8001054:	4b32      	ldr	r3, [pc, #200]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	011b      	lsls	r3, r3, #4
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001066:	4b2e      	ldr	r3, [pc, #184]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001068:	2101      	movs	r1, #1
 800106a:	430a      	orrs	r2, r1
 800106c:	635a      	str	r2, [r3, #52]	; 0x34
 800106e:	4b2c      	ldr	r3, [pc, #176]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 8001070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001072:	2201      	movs	r2, #1
 8001074:	4013      	ands	r3, r2
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_1_B_Pin|ENCODER_1_A_Pin;
 800107a:	193b      	adds	r3, r7, r4
 800107c:	22c0      	movs	r2, #192	; 0xc0
 800107e:	0092      	lsls	r2, r2, #2
 8001080:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	0021      	movs	r1, r4
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2202      	movs	r2, #2
 8001088:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2200      	movs	r2, #0
 8001094:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001096:	187b      	adds	r3, r7, r1
 8001098:	2202      	movs	r2, #2
 800109a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109c:	187a      	adds	r2, r7, r1
 800109e:	23a0      	movs	r3, #160	; 0xa0
 80010a0:	05db      	lsls	r3, r3, #23
 80010a2:	0011      	movs	r1, r2
 80010a4:	0018      	movs	r0, r3
 80010a6:	f001 f94f 	bl	8002348 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010aa:	e033      	b.n	8001114 <HAL_TIM_Encoder_MspInit+0xf0>
  else if(tim_encoderHandle->Instance==TIM3)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a1c      	ldr	r2, [pc, #112]	; (8001124 <HAL_TIM_Encoder_MspInit+0x100>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d12e      	bne.n	8001114 <HAL_TIM_Encoder_MspInit+0xf0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b6:	4b1a      	ldr	r3, [pc, #104]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010ba:	4b19      	ldr	r3, [pc, #100]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010bc:	2102      	movs	r1, #2
 80010be:	430a      	orrs	r2, r1
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
 80010c2:	4b17      	ldr	r3, [pc, #92]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c6:	2202      	movs	r2, #2
 80010c8:	4013      	ands	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
 80010cc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b14      	ldr	r3, [pc, #80]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010d2:	4b13      	ldr	r3, [pc, #76]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010d4:	2101      	movs	r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
 80010da:	4b11      	ldr	r3, [pc, #68]	; (8001120 <HAL_TIM_Encoder_MspInit+0xfc>)
 80010dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010de:	2201      	movs	r2, #1
 80010e0:	4013      	ands	r3, r2
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENCODER_2_A_Pin|ENCODER_2_B_Pin;
 80010e6:	211c      	movs	r1, #28
 80010e8:	187b      	adds	r3, r7, r1
 80010ea:	22c0      	movs	r2, #192	; 0xc0
 80010ec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	187b      	adds	r3, r7, r1
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	187b      	adds	r3, r7, r1
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fa:	187b      	adds	r3, r7, r1
 80010fc:	2200      	movs	r2, #0
 80010fe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001100:	187b      	adds	r3, r7, r1
 8001102:	2201      	movs	r2, #1
 8001104:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001106:	187a      	adds	r2, r7, r1
 8001108:	23a0      	movs	r3, #160	; 0xa0
 800110a:	05db      	lsls	r3, r3, #23
 800110c:	0011      	movs	r1, r2
 800110e:	0018      	movs	r0, r3
 8001110:	f001 f91a 	bl	8002348 <HAL_GPIO_Init>
}
 8001114:	46c0      	nop			; (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	b00d      	add	sp, #52	; 0x34
 800111a:	bd90      	pop	{r4, r7, pc}
 800111c:	40012c00 	.word	0x40012c00
 8001120:	40021000 	.word	0x40021000
 8001124:	40000400 	.word	0x40000400

08001128 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a30      	ldr	r2, [pc, #192]	; (80011f8 <HAL_TIM_Base_MspInit+0xd0>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d10c      	bne.n	8001154 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800113a:	4b30      	ldr	r3, [pc, #192]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 800113c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800113e:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001140:	2110      	movs	r1, #16
 8001142:	430a      	orrs	r2, r1
 8001144:	63da      	str	r2, [r3, #60]	; 0x3c
 8001146:	4b2d      	ldr	r3, [pc, #180]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800114a:	2210      	movs	r2, #16
 800114c:	4013      	ands	r3, r2
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001152:	e04c      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM7)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a29      	ldr	r2, [pc, #164]	; (8001200 <HAL_TIM_Base_MspInit+0xd8>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d10c      	bne.n	8001178 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800115e:	4b27      	ldr	r3, [pc, #156]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001162:	4b26      	ldr	r3, [pc, #152]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001164:	2120      	movs	r1, #32
 8001166:	430a      	orrs	r2, r1
 8001168:	63da      	str	r2, [r3, #60]	; 0x3c
 800116a:	4b24      	ldr	r3, [pc, #144]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 800116c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116e:	2220      	movs	r2, #32
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
 8001174:	69bb      	ldr	r3, [r7, #24]
}
 8001176:	e03a      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM14)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <HAL_TIM_Base_MspInit+0xdc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d10e      	bne.n	80011a0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001182:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001184:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001186:	4b1d      	ldr	r3, [pc, #116]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001188:	2180      	movs	r1, #128	; 0x80
 800118a:	0209      	lsls	r1, r1, #8
 800118c:	430a      	orrs	r2, r1
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 8001192:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001194:	2380      	movs	r3, #128	; 0x80
 8001196:	021b      	lsls	r3, r3, #8
 8001198:	4013      	ands	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
 800119c:	697b      	ldr	r3, [r7, #20]
}
 800119e:	e026      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM16)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a18      	ldr	r2, [pc, #96]	; (8001208 <HAL_TIM_Base_MspInit+0xe0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d10e      	bne.n	80011c8 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011aa:	4b14      	ldr	r3, [pc, #80]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011b0:	2180      	movs	r1, #128	; 0x80
 80011b2:	0289      	lsls	r1, r1, #10
 80011b4:	430a      	orrs	r2, r1
 80011b6:	641a      	str	r2, [r3, #64]	; 0x40
 80011b8:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011bc:	2380      	movs	r3, #128	; 0x80
 80011be:	029b      	lsls	r3, r3, #10
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
}
 80011c6:	e012      	b.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
  else if(tim_baseHandle->Instance==TIM17)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_TIM_Base_MspInit+0xe4>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d10d      	bne.n	80011ee <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011d2:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011d8:	2180      	movs	r1, #128	; 0x80
 80011da:	02c9      	lsls	r1, r1, #11
 80011dc:	430a      	orrs	r2, r1
 80011de:	641a      	str	r2, [r3, #64]	; 0x40
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_TIM_Base_MspInit+0xd4>)
 80011e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	02db      	lsls	r3, r3, #11
 80011e8:	4013      	ands	r3, r2
 80011ea:	60fb      	str	r3, [r7, #12]
 80011ec:	68fb      	ldr	r3, [r7, #12]
}
 80011ee:	46c0      	nop			; (mov r8, r8)
 80011f0:	46bd      	mov	sp, r7
 80011f2:	b008      	add	sp, #32
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	46c0      	nop			; (mov r8, r8)
 80011f8:	40001000 	.word	0x40001000
 80011fc:	40021000 	.word	0x40021000
 8001200:	40001400 	.word	0x40001400
 8001204:	40002000 	.word	0x40002000
 8001208:	40014400 	.word	0x40014400
 800120c:	40014800 	.word	0x40014800

08001210 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a0a      	ldr	r2, [pc, #40]	; (8001248 <HAL_TIM_PWM_MspInit+0x38>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d10d      	bne.n	800123e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001222:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_TIM_PWM_MspInit+0x3c>)
 8001224:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <HAL_TIM_PWM_MspInit+0x3c>)
 8001228:	2180      	movs	r1, #128	; 0x80
 800122a:	0249      	lsls	r1, r1, #9
 800122c:	430a      	orrs	r2, r1
 800122e:	641a      	str	r2, [r3, #64]	; 0x40
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_TIM_PWM_MspInit+0x3c>)
 8001232:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	025b      	lsls	r3, r3, #9
 8001238:	4013      	ands	r3, r2
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b004      	add	sp, #16
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	40014000 	.word	0x40014000
 800124c:	40021000 	.word	0x40021000

08001250 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b08d      	sub	sp, #52	; 0x34
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	241c      	movs	r4, #28
 800125a:	193b      	adds	r3, r7, r4
 800125c:	0018      	movs	r0, r3
 800125e:	2314      	movs	r3, #20
 8001260:	001a      	movs	r2, r3
 8001262:	2100      	movs	r1, #0
 8001264:	f006 fdc6 	bl	8007df4 <memset>
  if(timHandle->Instance==TIM14)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a51      	ldr	r2, [pc, #324]	; (80013b4 <HAL_TIM_MspPostInit+0x164>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d123      	bne.n	80012ba <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	4b51      	ldr	r3, [pc, #324]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001276:	4b50      	ldr	r3, [pc, #320]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001278:	2104      	movs	r1, #4
 800127a:	430a      	orrs	r2, r1
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
 800127e:	4b4e      	ldr	r3, [pc, #312]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001282:	2204      	movs	r2, #4
 8001284:	4013      	ands	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
 8001288:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = LIDAR_PWM_Pin;
 800128a:	193b      	adds	r3, r7, r4
 800128c:	2280      	movs	r2, #128	; 0x80
 800128e:	0152      	lsls	r2, r2, #5
 8001290:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	0021      	movs	r1, r4
 8001294:	187b      	adds	r3, r7, r1
 8001296:	2202      	movs	r2, #2
 8001298:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	187b      	adds	r3, r7, r1
 80012a2:	2200      	movs	r2, #0
 80012a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2202      	movs	r2, #2
 80012aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LIDAR_PWM_GPIO_Port, &GPIO_InitStruct);
 80012ac:	187b      	adds	r3, r7, r1
 80012ae:	4a43      	ldr	r2, [pc, #268]	; (80013bc <HAL_TIM_MspPostInit+0x16c>)
 80012b0:	0019      	movs	r1, r3
 80012b2:	0010      	movs	r0, r2
 80012b4:	f001 f848 	bl	8002348 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80012b8:	e078      	b.n	80013ac <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	4a40      	ldr	r2, [pc, #256]	; (80013c0 <HAL_TIM_MspPostInit+0x170>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d122      	bne.n	800130a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c4:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 80012c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012c8:	4b3b      	ldr	r3, [pc, #236]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 80012ca:	2104      	movs	r1, #4
 80012cc:	430a      	orrs	r2, r1
 80012ce:	635a      	str	r2, [r3, #52]	; 0x34
 80012d0:	4b39      	ldr	r3, [pc, #228]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 80012d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d4:	2204      	movs	r2, #4
 80012d6:	4013      	ands	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MOTOR_1_FWD_Pin|MOTOR_1_REV_Pin;
 80012dc:	211c      	movs	r1, #28
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2206      	movs	r2, #6
 80012e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	187b      	adds	r3, r7, r1
 80012e6:	2202      	movs	r2, #2
 80012e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	187b      	adds	r3, r7, r1
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	187b      	adds	r3, r7, r1
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80012f6:	187b      	adds	r3, r7, r1
 80012f8:	2202      	movs	r2, #2
 80012fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012fc:	187b      	adds	r3, r7, r1
 80012fe:	4a2f      	ldr	r2, [pc, #188]	; (80013bc <HAL_TIM_MspPostInit+0x16c>)
 8001300:	0019      	movs	r1, r3
 8001302:	0010      	movs	r0, r2
 8001304:	f001 f820 	bl	8002348 <HAL_GPIO_Init>
}
 8001308:	e050      	b.n	80013ac <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a2d      	ldr	r2, [pc, #180]	; (80013c4 <HAL_TIM_MspPostInit+0x174>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d123      	bne.n	800135c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001316:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001318:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 800131a:	2102      	movs	r1, #2
 800131c:	430a      	orrs	r2, r1
 800131e:	635a      	str	r2, [r3, #52]	; 0x34
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001322:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001324:	2202      	movs	r2, #2
 8001326:	4013      	ands	r3, r2
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_2_REV_Pin;
 800132c:	211c      	movs	r1, #28
 800132e:	187b      	adds	r3, r7, r1
 8001330:	2280      	movs	r2, #128	; 0x80
 8001332:	0052      	lsls	r2, r2, #1
 8001334:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2202      	movs	r2, #2
 800133a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM16;
 8001348:	187b      	adds	r3, r7, r1
 800134a:	2202      	movs	r2, #2
 800134c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_REV_GPIO_Port, &GPIO_InitStruct);
 800134e:	187b      	adds	r3, r7, r1
 8001350:	4a1d      	ldr	r2, [pc, #116]	; (80013c8 <HAL_TIM_MspPostInit+0x178>)
 8001352:	0019      	movs	r1, r3
 8001354:	0010      	movs	r0, r2
 8001356:	f000 fff7 	bl	8002348 <HAL_GPIO_Init>
}
 800135a:	e027      	b.n	80013ac <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a1a      	ldr	r2, [pc, #104]	; (80013cc <HAL_TIM_MspPostInit+0x17c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d122      	bne.n	80013ac <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001368:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800136a:	4b13      	ldr	r3, [pc, #76]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 800136c:	2102      	movs	r1, #2
 800136e:	430a      	orrs	r2, r1
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
 8001372:	4b11      	ldr	r3, [pc, #68]	; (80013b8 <HAL_TIM_MspPostInit+0x168>)
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	2202      	movs	r2, #2
 8001378:	4013      	ands	r3, r2
 800137a:	60fb      	str	r3, [r7, #12]
 800137c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MOTOR_2_FWD_Pin;
 800137e:	211c      	movs	r1, #28
 8001380:	187b      	adds	r3, r7, r1
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2202      	movs	r2, #2
 800138c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	187b      	adds	r3, r7, r1
 8001390:	2200      	movs	r2, #0
 8001392:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001394:	187b      	adds	r3, r7, r1
 8001396:	2200      	movs	r2, #0
 8001398:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM17;
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2202      	movs	r2, #2
 800139e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(MOTOR_2_FWD_GPIO_Port, &GPIO_InitStruct);
 80013a0:	187b      	adds	r3, r7, r1
 80013a2:	4a09      	ldr	r2, [pc, #36]	; (80013c8 <HAL_TIM_MspPostInit+0x178>)
 80013a4:	0019      	movs	r1, r3
 80013a6:	0010      	movs	r0, r2
 80013a8:	f000 ffce 	bl	8002348 <HAL_GPIO_Init>
}
 80013ac:	46c0      	nop			; (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	b00d      	add	sp, #52	; 0x34
 80013b2:	bd90      	pop	{r4, r7, pc}
 80013b4:	40002000 	.word	0x40002000
 80013b8:	40021000 	.word	0x40021000
 80013bc:	50000800 	.word	0x50000800
 80013c0:	40014000 	.word	0x40014000
 80013c4:	40014400 	.word	0x40014400
 80013c8:	50000400 	.word	0x50000400
 80013cc:	40014800 	.word	0x40014800

080013d0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013d4:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013d6:	4a24      	ldr	r2, [pc, #144]	; (8001468 <MX_USART1_UART_Init+0x98>)
 80013d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013da:	4b22      	ldr	r3, [pc, #136]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013dc:	22e1      	movs	r2, #225	; 0xe1
 80013de:	0252      	lsls	r2, r2, #9
 80013e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013e2:	4b20      	ldr	r3, [pc, #128]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013ee:	4b1d      	ldr	r3, [pc, #116]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013f4:	4b1b      	ldr	r3, [pc, #108]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013f6:	220c      	movs	r2, #12
 80013f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013fa:	4b1a      	ldr	r3, [pc, #104]	; (8001464 <MX_USART1_UART_Init+0x94>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001400:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_USART1_UART_Init+0x94>)
 8001402:	2200      	movs	r2, #0
 8001404:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001406:	4b17      	ldr	r3, [pc, #92]	; (8001464 <MX_USART1_UART_Init+0x94>)
 8001408:	2200      	movs	r2, #0
 800140a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800140c:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800140e:	2200      	movs	r2, #0
 8001410:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <MX_USART1_UART_Init+0x94>)
 8001414:	2200      	movs	r2, #0
 8001416:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001418:	4b12      	ldr	r3, [pc, #72]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800141a:	0018      	movs	r0, r3
 800141c:	f003 f862 	bl	80044e4 <HAL_UART_Init>
 8001420:	1e03      	subs	r3, r0, #0
 8001422:	d001      	beq.n	8001428 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001424:	f7ff fa12 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800142a:	2100      	movs	r1, #0
 800142c:	0018      	movs	r0, r3
 800142e:	f004 fedb 	bl	80061e8 <HAL_UARTEx_SetTxFifoThreshold>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001436:	f7ff fa09 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800143c:	2100      	movs	r1, #0
 800143e:	0018      	movs	r0, r3
 8001440:	f004 ff12 	bl	8006268 <HAL_UARTEx_SetRxFifoThreshold>
 8001444:	1e03      	subs	r3, r0, #0
 8001446:	d001      	beq.n	800144c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001448:	f7ff fa00 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <MX_USART1_UART_Init+0x94>)
 800144e:	0018      	movs	r0, r3
 8001450:	f004 fe90 	bl	8006174 <HAL_UARTEx_DisableFifoMode>
 8001454:	1e03      	subs	r3, r0, #0
 8001456:	d001      	beq.n	800145c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001458:	f7ff f9f8 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	46c0      	nop			; (mov r8, r8)
 8001464:	20000314 	.word	0x20000314
 8001468:	40013800 	.word	0x40013800

0800146c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001472:	4a24      	ldr	r2, [pc, #144]	; (8001504 <MX_USART2_UART_Init+0x98>)
 8001474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001478:	22e1      	movs	r2, #225	; 0xe1
 800147a:	0252      	lsls	r2, r2, #9
 800147c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001486:	2200      	movs	r2, #0
 8001488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800148a:	4b1d      	ldr	r3, [pc, #116]	; (8001500 <MX_USART2_UART_Init+0x94>)
 800148c:	2200      	movs	r2, #0
 800148e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001490:	4b1b      	ldr	r3, [pc, #108]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001492:	220c      	movs	r2, #12
 8001494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001496:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <MX_USART2_UART_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800149c:	4b18      	ldr	r3, [pc, #96]	; (8001500 <MX_USART2_UART_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014a2:	4b17      	ldr	r3, [pc, #92]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a8:	4b15      	ldr	r3, [pc, #84]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014ae:	4b14      	ldr	r3, [pc, #80]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b4:	4b12      	ldr	r3, [pc, #72]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014b6:	0018      	movs	r0, r3
 80014b8:	f003 f814 	bl	80044e4 <HAL_UART_Init>
 80014bc:	1e03      	subs	r3, r0, #0
 80014be:	d001      	beq.n	80014c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80014c0:	f7ff f9c4 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014c6:	2100      	movs	r1, #0
 80014c8:	0018      	movs	r0, r3
 80014ca:	f004 fe8d 	bl	80061e8 <HAL_UARTEx_SetTxFifoThreshold>
 80014ce:	1e03      	subs	r3, r0, #0
 80014d0:	d001      	beq.n	80014d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80014d2:	f7ff f9bb 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d6:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014d8:	2100      	movs	r1, #0
 80014da:	0018      	movs	r0, r3
 80014dc:	f004 fec4 	bl	8006268 <HAL_UARTEx_SetRxFifoThreshold>
 80014e0:	1e03      	subs	r3, r0, #0
 80014e2:	d001      	beq.n	80014e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f7ff f9b2 	bl	800084c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <MX_USART2_UART_Init+0x94>)
 80014ea:	0018      	movs	r0, r3
 80014ec:	f004 fe42 	bl	8006174 <HAL_UARTEx_DisableFifoMode>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80014f4:	f7ff f9aa 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	46c0      	nop			; (mov r8, r8)
 8001500:	200003a8 	.word	0x200003a8
 8001504:	40004400 	.word	0x40004400

08001508 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800150e:	4a17      	ldr	r2, [pc, #92]	; (800156c <MX_USART3_UART_Init+0x64>)
 8001510:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001512:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001514:	2296      	movs	r2, #150	; 0x96
 8001516:	0192      	lsls	r2, r2, #6
 8001518:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001528:	2200      	movs	r2, #0
 800152a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800152e:	220c      	movs	r2, #12
 8001530:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001532:	4b0d      	ldr	r3, [pc, #52]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001538:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800153e:	4b0a      	ldr	r3, [pc, #40]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001546:	2200      	movs	r2, #0
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800154a:	4b07      	ldr	r3, [pc, #28]	; (8001568 <MX_USART3_UART_Init+0x60>)
 800154c:	2200      	movs	r2, #0
 800154e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <MX_USART3_UART_Init+0x60>)
 8001552:	0018      	movs	r0, r3
 8001554:	f002 ffc6 	bl	80044e4 <HAL_UART_Init>
 8001558:	1e03      	subs	r3, r0, #0
 800155a:	d001      	beq.n	8001560 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800155c:	f7ff f976 	bl	800084c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001560:	46c0      	nop			; (mov r8, r8)
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	46c0      	nop			; (mov r8, r8)
 8001568:	2000043c 	.word	0x2000043c
 800156c:	40004800 	.word	0x40004800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b095      	sub	sp, #84	; 0x54
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	233c      	movs	r3, #60	; 0x3c
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	0018      	movs	r0, r3
 800157e:	2314      	movs	r3, #20
 8001580:	001a      	movs	r2, r3
 8001582:	2100      	movs	r1, #0
 8001584:	f006 fc36 	bl	8007df4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	2420      	movs	r4, #32
 800158a:	193b      	adds	r3, r7, r4
 800158c:	0018      	movs	r0, r3
 800158e:	231c      	movs	r3, #28
 8001590:	001a      	movs	r2, r3
 8001592:	2100      	movs	r1, #0
 8001594:	f006 fc2e 	bl	8007df4 <memset>
  if(uartHandle->Instance==USART1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a64      	ldr	r2, [pc, #400]	; (8001730 <HAL_UART_MspInit+0x1c0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d13e      	bne.n	8001620 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80015a2:	193b      	adds	r3, r7, r4
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	2200      	movs	r2, #0
 80015ac:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015ae:	193b      	adds	r3, r7, r4
 80015b0:	0018      	movs	r0, r3
 80015b2:	f001 febb 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015ba:	f7ff f947 	bl	800084c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015be:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015c4:	2180      	movs	r1, #128	; 0x80
 80015c6:	01c9      	lsls	r1, r1, #7
 80015c8:	430a      	orrs	r2, r1
 80015ca:	641a      	str	r2, [r3, #64]	; 0x40
 80015cc:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015d0:	2380      	movs	r3, #128	; 0x80
 80015d2:	01db      	lsls	r3, r3, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	61fb      	str	r3, [r7, #28]
 80015d8:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	4b55      	ldr	r3, [pc, #340]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015e0:	2102      	movs	r1, #2
 80015e2:	430a      	orrs	r2, r1
 80015e4:	635a      	str	r2, [r3, #52]	; 0x34
 80015e6:	4b53      	ldr	r3, [pc, #332]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80015e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ea:	2202      	movs	r2, #2
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
 80015f0:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80015f2:	213c      	movs	r1, #60	; 0x3c
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	22c0      	movs	r2, #192	; 0xc0
 80015f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	187b      	adds	r3, r7, r1
 80015fc:	2202      	movs	r2, #2
 80015fe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	187b      	adds	r3, r7, r1
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001606:	187b      	adds	r3, r7, r1
 8001608:	2200      	movs	r2, #0
 800160a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800160c:	187b      	adds	r3, r7, r1
 800160e:	2200      	movs	r2, #0
 8001610:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001612:	187b      	adds	r3, r7, r1
 8001614:	4a48      	ldr	r2, [pc, #288]	; (8001738 <HAL_UART_MspInit+0x1c8>)
 8001616:	0019      	movs	r1, r3
 8001618:	0010      	movs	r0, r2
 800161a:	f000 fe95 	bl	8002348 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800161e:	e082      	b.n	8001726 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART2)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a45      	ldr	r2, [pc, #276]	; (800173c <HAL_UART_MspInit+0x1cc>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d140      	bne.n	80016ac <HAL_UART_MspInit+0x13c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800162a:	2120      	movs	r1, #32
 800162c:	187b      	adds	r3, r7, r1
 800162e:	2202      	movs	r2, #2
 8001630:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001632:	187b      	adds	r3, r7, r1
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001638:	187b      	adds	r3, r7, r1
 800163a:	0018      	movs	r0, r3
 800163c:	f001 fe76 	bl	800332c <HAL_RCCEx_PeriphCLKConfig>
 8001640:	1e03      	subs	r3, r0, #0
 8001642:	d001      	beq.n	8001648 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 8001644:	f7ff f902 	bl	800084c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001648:	4b3a      	ldr	r3, [pc, #232]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 800164a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800164c:	4b39      	ldr	r3, [pc, #228]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	0289      	lsls	r1, r1, #10
 8001652:	430a      	orrs	r2, r1
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c
 8001656:	4b37      	ldr	r3, [pc, #220]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 8001658:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800165a:	2380      	movs	r3, #128	; 0x80
 800165c:	029b      	lsls	r3, r3, #10
 800165e:	4013      	ands	r3, r2
 8001660:	617b      	str	r3, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001664:	4b33      	ldr	r3, [pc, #204]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 8001666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001668:	4b32      	ldr	r3, [pc, #200]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 800166a:	2101      	movs	r1, #1
 800166c:	430a      	orrs	r2, r1
 800166e:	635a      	str	r2, [r3, #52]	; 0x34
 8001670:	4b30      	ldr	r3, [pc, #192]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 8001672:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001674:	2201      	movs	r2, #1
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
 800167a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800167c:	213c      	movs	r1, #60	; 0x3c
 800167e:	187b      	adds	r3, r7, r1
 8001680:	220c      	movs	r2, #12
 8001682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2202      	movs	r2, #2
 8001688:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2201      	movs	r2, #1
 800169a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	187a      	adds	r2, r7, r1
 800169e:	23a0      	movs	r3, #160	; 0xa0
 80016a0:	05db      	lsls	r3, r3, #23
 80016a2:	0011      	movs	r1, r2
 80016a4:	0018      	movs	r0, r3
 80016a6:	f000 fe4f 	bl	8002348 <HAL_GPIO_Init>
}
 80016aa:	e03c      	b.n	8001726 <HAL_UART_MspInit+0x1b6>
  else if(uartHandle->Instance==USART3)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a23      	ldr	r2, [pc, #140]	; (8001740 <HAL_UART_MspInit+0x1d0>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d137      	bne.n	8001726 <HAL_UART_MspInit+0x1b6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	02c9      	lsls	r1, r1, #11
 80016c0:	430a      	orrs	r2, r1
 80016c2:	63da      	str	r2, [r3, #60]	; 0x3c
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	02db      	lsls	r3, r3, #11
 80016cc:	4013      	ands	r3, r2
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	4b17      	ldr	r3, [pc, #92]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016d8:	2104      	movs	r1, #4
 80016da:	430a      	orrs	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_UART_MspInit+0x1c4>)
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e2:	2204      	movs	r2, #4
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016ea:	213c      	movs	r1, #60	; 0x3c
 80016ec:	187b      	adds	r3, r7, r1
 80016ee:	2230      	movs	r2, #48	; 0x30
 80016f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f2:	187b      	adds	r3, r7, r1
 80016f4:	2202      	movs	r2, #2
 80016f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	187b      	adds	r3, r7, r1
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART3;
 8001704:	187b      	adds	r3, r7, r1
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800170a:	187b      	adds	r3, r7, r1
 800170c:	4a0d      	ldr	r2, [pc, #52]	; (8001744 <HAL_UART_MspInit+0x1d4>)
 800170e:	0019      	movs	r1, r3
 8001710:	0010      	movs	r0, r2
 8001712:	f000 fe19 	bl	8002348 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_4_IRQn, 3, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2103      	movs	r1, #3
 800171a:	201d      	movs	r0, #29
 800171c:	f000 fd16 	bl	800214c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_4_IRQn);
 8001720:	201d      	movs	r0, #29
 8001722:	f000 fd28 	bl	8002176 <HAL_NVIC_EnableIRQ>
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b015      	add	sp, #84	; 0x54
 800172c:	bd90      	pop	{r4, r7, pc}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	40013800 	.word	0x40013800
 8001734:	40021000 	.word	0x40021000
 8001738:	50000400 	.word	0x50000400
 800173c:	40004400 	.word	0x40004400
 8001740:	40004800 	.word	0x40004800
 8001744:	50000800 	.word	0x50000800

08001748 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800174a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800174c:	f7ff f920 	bl	8000990 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <LoopForever+0x6>)
  ldr r1, =_edata
 8001752:	490d      	ldr	r1, [pc, #52]	; (8001788 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001754:	4a0d      	ldr	r2, [pc, #52]	; (800178c <LoopForever+0xe>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001758:	e002      	b.n	8001760 <LoopCopyDataInit>

0800175a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800175c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175e:	3304      	adds	r3, #4

08001760 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001760:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001762:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001764:	d3f9      	bcc.n	800175a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001768:	4c0a      	ldr	r4, [pc, #40]	; (8001794 <LoopForever+0x16>)
  movs r3, #0
 800176a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800176c:	e001      	b.n	8001772 <LoopFillZerobss>

0800176e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001770:	3204      	adds	r2, #4

08001772 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001772:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001774:	d3fb      	bcc.n	800176e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001776:	f006 fb45 	bl	8007e04 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800177a:	f7fe ffd5 	bl	8000728 <main>

0800177e <LoopForever>:

LoopForever:
  b LoopForever
 800177e:	e7fe      	b.n	800177e <LoopForever>
  ldr   r0, =_estack
 8001780:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 800178c:	08007fb0 	.word	0x08007fb0
  ldr r2, =_sbss
 8001790:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 8001794:	20007e2c 	.word	0x20007e2c

08001798 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <ADC1_IRQHandler>
	...

0800179c <print_BT_Task>:

QueueHandle_t q_print_BT=NULL;
QueueHandle_t q_read_BT=NULL;
uint8_t buffer;

void print_BT_Task(void *pvParameters){
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
	uint8_t char_to_send;

	for(;;){
		xQueueReceive(q_print_BT,(void*)&char_to_send,portMAX_DELAY);
 80017a4:	4b07      	ldr	r3, [pc, #28]	; (80017c4 <print_BT_Task+0x28>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	4252      	negs	r2, r2
 80017ac:	240f      	movs	r4, #15
 80017ae:	1939      	adds	r1, r7, r4
 80017b0:	0018      	movs	r0, r3
 80017b2:	f005 f8db 	bl	800696c <xQueueReceive>
		HAL_UART_Transmit(&huart3, (uint8_t *)&char_to_send, 1, 0xFFFF);
 80017b6:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <print_BT_Task+0x2c>)
 80017b8:	1939      	adds	r1, r7, r4
 80017ba:	4804      	ldr	r0, [pc, #16]	; (80017cc <print_BT_Task+0x30>)
 80017bc:	2201      	movs	r2, #1
 80017be:	f002 fee7 	bl	8004590 <HAL_UART_Transmit>
		xQueueReceive(q_print_BT,(void*)&char_to_send,portMAX_DELAY);
 80017c2:	e7ef      	b.n	80017a4 <print_BT_Task+0x8>
 80017c4:	200004d0 	.word	0x200004d0
 80017c8:	0000ffff 	.word	0x0000ffff
 80017cc:	2000043c 	.word	0x2000043c

080017d0 <send_text>:
	}
}

void send_text(void *pvParameters){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	static char input_char[]="Hello World\r\n";
	for(;;){
		fill_queue(q_print_BT,input_char);
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <send_text+0x20>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a05      	ldr	r2, [pc, #20]	; (80017f4 <send_text+0x24>)
 80017de:	0011      	movs	r1, r2
 80017e0:	0018      	movs	r0, r3
 80017e2:	f000 f80b 	bl	80017fc <fill_queue>
		vTaskDelay(10000);
 80017e6:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <send_text+0x28>)
 80017e8:	0018      	movs	r0, r3
 80017ea:	f005 fbbf 	bl	8006f6c <vTaskDelay>
		fill_queue(q_print_BT,input_char);
 80017ee:	e7f3      	b.n	80017d8 <send_text+0x8>
 80017f0:	200004d0 	.word	0x200004d0
 80017f4:	20000004 	.word	0x20000004
 80017f8:	00002710 	.word	0x00002710

080017fc <fill_queue>:
	}
}

void fill_queue(QueueHandle_t queue, const char* text){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	6039      	str	r1, [r7, #0]
	for(int i=0;i<strlen(text);i++){
 8001806:	2300      	movs	r3, #0
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	e00c      	b.n	8001826 <fill_queue+0x2a>
		xQueueSend(q_print_BT,&text[i],portMAX_DELAY);
 800180c:	4b0c      	ldr	r3, [pc, #48]	; (8001840 <fill_queue+0x44>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	18d1      	adds	r1, r2, r3
 8001816:	2301      	movs	r3, #1
 8001818:	425a      	negs	r2, r3
 800181a:	2300      	movs	r3, #0
 800181c:	f004 ff6e 	bl	80066fc <xQueueGenericSend>
	for(int i=0;i<strlen(text);i++){
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3301      	adds	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	0018      	movs	r0, r3
 800182a:	f7fe fc6d 	bl	8000108 <strlen>
 800182e:	0002      	movs	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	429a      	cmp	r2, r3
 8001834:	d8ea      	bhi.n	800180c <fill_queue+0x10>
	}
}
 8001836:	46c0      	nop			; (mov r8, r8)
 8001838:	46c0      	nop			; (mov r8, r8)
 800183a:	46bd      	mov	sp, r7
 800183c:	b004      	add	sp, #16
 800183e:	bd80      	pop	{r7, pc}
 8001840:	200004d0 	.word	0x200004d0

08001844 <renvoie>:
		HAL_UART_Receive(&huart3,&buffer,1,portMAX_DELAY);
		xQueueSend(q_read_BT,&buffer,portMAX_DELAY);
	}
}

void renvoie(void *pvParameters){
 8001844:	b590      	push	{r4, r7, lr}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	uint8_t char_to_send;
	HAL_UART_Receive_IT(&huart3,&buffer,1);
 800184c:	490a      	ldr	r1, [pc, #40]	; (8001878 <renvoie+0x34>)
 800184e:	4b0b      	ldr	r3, [pc, #44]	; (800187c <renvoie+0x38>)
 8001850:	2201      	movs	r2, #1
 8001852:	0018      	movs	r0, r3
 8001854:	f002 ff38 	bl	80046c8 <HAL_UART_Receive_IT>
	for(;;){
		xQueueReceive(q_read_BT,(uint8_t*)&char_to_send,portMAX_DELAY);
 8001858:	4b09      	ldr	r3, [pc, #36]	; (8001880 <renvoie+0x3c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4252      	negs	r2, r2
 8001860:	240f      	movs	r4, #15
 8001862:	1939      	adds	r1, r7, r4
 8001864:	0018      	movs	r0, r3
 8001866:	f005 f881 	bl	800696c <xQueueReceive>
		HAL_UART_Transmit(&huart1, (uint8_t *)&char_to_send, 1, 0xFFFF);
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <renvoie+0x40>)
 800186c:	1939      	adds	r1, r7, r4
 800186e:	4806      	ldr	r0, [pc, #24]	; (8001888 <renvoie+0x44>)
 8001870:	2201      	movs	r2, #1
 8001872:	f002 fe8d 	bl	8004590 <HAL_UART_Transmit>
		xQueueReceive(q_read_BT,(uint8_t*)&char_to_send,portMAX_DELAY);
 8001876:	e7ef      	b.n	8001858 <renvoie+0x14>
 8001878:	200004d8 	.word	0x200004d8
 800187c:	2000043c 	.word	0x2000043c
 8001880:	200004d4 	.word	0x200004d4
 8001884:	0000ffff 	.word	0x0000ffff
 8001888:	20000314 	.word	0x20000314

0800188c <Start_HC05_Tasks>:
	}
}


void Start_HC05_Tasks(void) {
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af02      	add	r7, sp, #8
	TaskHandle_t TaskHandle_print_BT;
	TaskHandle_t TaskHandle_send_text;
	//TaskHandle_t TaskHandle_read_BT;
	TaskHandle_t TaskHandle_renvoie;

	q_print_BT=xQueueCreate(Q_PRINT_BT_LENGTH,Q_PRINT_BT_SIZE);
 8001892:	2200      	movs	r2, #0
 8001894:	2101      	movs	r1, #1
 8001896:	2064      	movs	r0, #100	; 0x64
 8001898:	f004 fee0 	bl	800665c <xQueueGenericCreate>
 800189c:	0002      	movs	r2, r0
 800189e:	4b17      	ldr	r3, [pc, #92]	; (80018fc <Start_HC05_Tasks+0x70>)
 80018a0:	601a      	str	r2, [r3, #0]
	q_read_BT=xQueueCreate(Q_PRINT_BT_LENGTH,Q_PRINT_BT_SIZE);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2101      	movs	r1, #1
 80018a6:	2064      	movs	r0, #100	; 0x64
 80018a8:	f004 fed8 	bl	800665c <xQueueGenericCreate>
 80018ac:	0002      	movs	r2, r0
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <Start_HC05_Tasks+0x74>)
 80018b0:	601a      	str	r2, [r3, #0]

    xTaskCreate(print_BT_Task,"print_BT_Task",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_print_BT);
 80018b2:	4914      	ldr	r1, [pc, #80]	; (8001904 <Start_HC05_Tasks+0x78>)
 80018b4:	4814      	ldr	r0, [pc, #80]	; (8001908 <Start_HC05_Tasks+0x7c>)
 80018b6:	230c      	movs	r3, #12
 80018b8:	18fb      	adds	r3, r7, r3
 80018ba:	9301      	str	r3, [sp, #4]
 80018bc:	2301      	movs	r3, #1
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2300      	movs	r3, #0
 80018c2:	2280      	movs	r2, #128	; 0x80
 80018c4:	f005 fa24 	bl	8006d10 <xTaskCreate>
    xTaskCreate(send_text,"send_text",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_send_text);
 80018c8:	4910      	ldr	r1, [pc, #64]	; (800190c <Start_HC05_Tasks+0x80>)
 80018ca:	4811      	ldr	r0, [pc, #68]	; (8001910 <Start_HC05_Tasks+0x84>)
 80018cc:	2308      	movs	r3, #8
 80018ce:	18fb      	adds	r3, r7, r3
 80018d0:	9301      	str	r3, [sp, #4]
 80018d2:	2301      	movs	r3, #1
 80018d4:	9300      	str	r3, [sp, #0]
 80018d6:	2300      	movs	r3, #0
 80018d8:	2280      	movs	r2, #128	; 0x80
 80018da:	f005 fa19 	bl	8006d10 <xTaskCreate>
    //xTaskCreate(read_BT,"read_BT",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_read_BT);
    xTaskCreate(renvoie,"renvoie",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_renvoie);
 80018de:	490d      	ldr	r1, [pc, #52]	; (8001914 <Start_HC05_Tasks+0x88>)
 80018e0:	480d      	ldr	r0, [pc, #52]	; (8001918 <Start_HC05_Tasks+0x8c>)
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	9301      	str	r3, [sp, #4]
 80018e6:	2301      	movs	r3, #1
 80018e8:	9300      	str	r3, [sp, #0]
 80018ea:	2300      	movs	r3, #0
 80018ec:	2280      	movs	r2, #128	; 0x80
 80018ee:	f005 fa0f 	bl	8006d10 <xTaskCreate>
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	46c0      	nop			; (mov r8, r8)
 80018fc:	200004d0 	.word	0x200004d0
 8001900:	200004d4 	.word	0x200004d4
 8001904:	08007e98 	.word	0x08007e98
 8001908:	0800179d 	.word	0x0800179d
 800190c:	08007ea8 	.word	0x08007ea8
 8001910:	080017d1 	.word	0x080017d1
 8001914:	08007eb4 	.word	0x08007eb4
 8001918:	08001845 	.word	0x08001845

0800191c <test1>:
		.reverse_htim=&htim16,
		.reverse_CHANNEL=TIM_CHANNEL_1
};

//tests
void test1(){
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
	for(;;){
		//move_on_curve_right(100,30);
		//vTaskDelay(2000);
		move_straight(90);
 8001920:	205a      	movs	r0, #90	; 0x5a
 8001922:	f000 fa9f 	bl	8001e64 <move_straight>
		vTaskDelay(2000);
 8001926:	23fa      	movs	r3, #250	; 0xfa
 8001928:	00db      	lsls	r3, r3, #3
 800192a:	0018      	movs	r0, r3
 800192c:	f005 fb1e 	bl	8006f6c <vTaskDelay>
		stop();
 8001930:	f000 fabc 	bl	8001eac <stop>
		vTaskDelay(2000);
 8001934:	23fa      	movs	r3, #250	; 0xfa
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	0018      	movs	r0, r3
 800193a:	f005 fb17 	bl	8006f6c <vTaskDelay>
		move_straight(90);
 800193e:	e7ef      	b.n	8001920 <test1+0x4>

08001940 <Start_motor_Tasks>:
	}
}

void Start_motor_Tasks(){
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af02      	add	r7, sp, #8
	TaskHandle_t TaskHandle_test1;
	xTaskCreate(test1,"test1",configMINIMAL_STACK_SIZE,NULL,1,&TaskHandle_test1);
 8001946:	4907      	ldr	r1, [pc, #28]	; (8001964 <Start_motor_Tasks+0x24>)
 8001948:	4807      	ldr	r0, [pc, #28]	; (8001968 <Start_motor_Tasks+0x28>)
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	2301      	movs	r3, #1
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	2300      	movs	r3, #0
 8001954:	2280      	movs	r2, #128	; 0x80
 8001956:	f005 f9db 	bl	8006d10 <xTaskCreate>
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	b002      	add	sp, #8
 8001960:	bd80      	pop	{r7, pc}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	08007ebc 	.word	0x08007ebc
 8001968:	0800191d 	.word	0x0800191d

0800196c <forward_mode>:
// fonctions de bas niveau

void forward_mode(uint16_t speed,struct driver_motor_t motor)
{
 800196c:	b084      	sub	sp, #16
 800196e:	b5b0      	push	{r4, r5, r7, lr}
 8001970:	b084      	sub	sp, #16
 8001972:	af00      	add	r7, sp, #0
 8001974:	0004      	movs	r4, r0
 8001976:	2004      	movs	r0, #4
 8001978:	2520      	movs	r5, #32
 800197a:	1940      	adds	r0, r0, r5
 800197c:	19c0      	adds	r0, r0, r7
 800197e:	6001      	str	r1, [r0, #0]
 8001980:	6042      	str	r2, [r0, #4]
 8001982:	6083      	str	r3, [r0, #8]
 8001984:	1dbb      	adds	r3, r7, #6
 8001986:	1c22      	adds	r2, r4, #0
 8001988:	801a      	strh	r2, [r3, #0]
	if (speed>MAX_SPEED){speed=MAX_SPEED;}
 800198a:	1dbb      	adds	r3, r7, #6
 800198c:	881b      	ldrh	r3, [r3, #0]
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d902      	bls.n	8001998 <forward_mode+0x2c>
 8001992:	1dbb      	adds	r3, r7, #6
 8001994:	2264      	movs	r2, #100	; 0x64
 8001996:	801a      	strh	r2, [r3, #0]
	uint16_t compare=speed*MAX_COMPTEUR/MAX_SPEED;
 8001998:	1dbb      	adds	r3, r7, #6
 800199a:	881a      	ldrh	r2, [r3, #0]
 800199c:	0013      	movs	r3, r2
 800199e:	01db      	lsls	r3, r3, #7
 80019a0:	1a9b      	subs	r3, r3, r2
 80019a2:	2164      	movs	r1, #100	; 0x64
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7fe fc41 	bl	800022c <__divsi3>
 80019aa:	0003      	movs	r3, r0
 80019ac:	001a      	movs	r2, r3
 80019ae:	230e      	movs	r3, #14
 80019b0:	18fb      	adds	r3, r7, r3
 80019b2:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, 0);
 80019b4:	2304      	movs	r3, #4
 80019b6:	2220      	movs	r2, #32
 80019b8:	189b      	adds	r3, r3, r2
 80019ba:	19db      	adds	r3, r3, r7
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <forward_mode+0x66>
 80019c2:	2304      	movs	r3, #4
 80019c4:	189b      	adds	r3, r3, r2
 80019c6:	19db      	adds	r3, r3, r7
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	2200      	movs	r2, #0
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34
 80019d0:	e043      	b.n	8001a5a <forward_mode+0xee>
 80019d2:	2304      	movs	r3, #4
 80019d4:	2220      	movs	r2, #32
 80019d6:	189b      	adds	r3, r3, r2
 80019d8:	19db      	adds	r3, r3, r7
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d107      	bne.n	80019f0 <forward_mode+0x84>
 80019e0:	2304      	movs	r3, #4
 80019e2:	189b      	adds	r3, r3, r2
 80019e4:	19db      	adds	r3, r3, r7
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2300      	movs	r3, #0
 80019ec:	6393      	str	r3, [r2, #56]	; 0x38
 80019ee:	e034      	b.n	8001a5a <forward_mode+0xee>
 80019f0:	2304      	movs	r3, #4
 80019f2:	2220      	movs	r2, #32
 80019f4:	189b      	adds	r3, r3, r2
 80019f6:	19db      	adds	r3, r3, r7
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	d107      	bne.n	8001a0e <forward_mode+0xa2>
 80019fe:	2304      	movs	r3, #4
 8001a00:	189b      	adds	r3, r3, r2
 8001a02:	19db      	adds	r3, r3, r7
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2300      	movs	r3, #0
 8001a0a:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001a0c:	e025      	b.n	8001a5a <forward_mode+0xee>
 8001a0e:	2304      	movs	r3, #4
 8001a10:	2220      	movs	r2, #32
 8001a12:	189b      	adds	r3, r3, r2
 8001a14:	19db      	adds	r3, r3, r7
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d107      	bne.n	8001a2c <forward_mode+0xc0>
 8001a1c:	2304      	movs	r3, #4
 8001a1e:	189b      	adds	r3, r3, r2
 8001a20:	19db      	adds	r3, r3, r7
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	e016      	b.n	8001a5a <forward_mode+0xee>
 8001a2c:	2304      	movs	r3, #4
 8001a2e:	2220      	movs	r2, #32
 8001a30:	189b      	adds	r3, r3, r2
 8001a32:	19db      	adds	r3, r3, r7
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	2b10      	cmp	r3, #16
 8001a38:	d107      	bne.n	8001a4a <forward_mode+0xde>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	189b      	adds	r3, r3, r2
 8001a3e:	19db      	adds	r3, r3, r7
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	2300      	movs	r3, #0
 8001a46:	6593      	str	r3, [r2, #88]	; 0x58
 8001a48:	e007      	b.n	8001a5a <forward_mode+0xee>
 8001a4a:	2304      	movs	r3, #4
 8001a4c:	2220      	movs	r2, #32
 8001a4e:	189b      	adds	r3, r3, r2
 8001a50:	19db      	adds	r3, r3, r7
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2300      	movs	r3, #0
 8001a58:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001a5a:	2304      	movs	r3, #4
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	189b      	adds	r3, r3, r2
 8001a60:	19db      	adds	r3, r3, r7
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d109      	bne.n	8001a7c <forward_mode+0x110>
 8001a68:	2304      	movs	r3, #4
 8001a6a:	189b      	adds	r3, r3, r2
 8001a6c:	19db      	adds	r3, r3, r7
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	220e      	movs	r2, #14
 8001a74:	18ba      	adds	r2, r7, r2
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a7a:	e04d      	b.n	8001b18 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001a7c:	2304      	movs	r3, #4
 8001a7e:	2220      	movs	r2, #32
 8001a80:	189b      	adds	r3, r3, r2
 8001a82:	19db      	adds	r3, r3, r7
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d109      	bne.n	8001a9e <forward_mode+0x132>
 8001a8a:	2304      	movs	r3, #4
 8001a8c:	189b      	adds	r3, r3, r2
 8001a8e:	19db      	adds	r3, r3, r7
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	230e      	movs	r3, #14
 8001a96:	18fb      	adds	r3, r7, r3
 8001a98:	881b      	ldrh	r3, [r3, #0]
 8001a9a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001a9c:	e03c      	b.n	8001b18 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	2220      	movs	r2, #32
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	19db      	adds	r3, r3, r7
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d109      	bne.n	8001ac0 <forward_mode+0x154>
 8001aac:	2304      	movs	r3, #4
 8001aae:	189b      	adds	r3, r3, r2
 8001ab0:	19db      	adds	r3, r3, r7
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	230e      	movs	r3, #14
 8001ab8:	18fb      	adds	r3, r7, r3
 8001aba:	881b      	ldrh	r3, [r3, #0]
 8001abc:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001abe:	e02b      	b.n	8001b18 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001ac0:	2304      	movs	r3, #4
 8001ac2:	2220      	movs	r2, #32
 8001ac4:	189b      	adds	r3, r3, r2
 8001ac6:	19db      	adds	r3, r3, r7
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d109      	bne.n	8001ae2 <forward_mode+0x176>
 8001ace:	2304      	movs	r3, #4
 8001ad0:	189b      	adds	r3, r3, r2
 8001ad2:	19db      	adds	r3, r3, r7
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	230e      	movs	r3, #14
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	881b      	ldrh	r3, [r3, #0]
 8001ade:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001ae0:	e01a      	b.n	8001b18 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	189b      	adds	r3, r3, r2
 8001ae8:	19db      	adds	r3, r3, r7
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	2b10      	cmp	r3, #16
 8001aee:	d109      	bne.n	8001b04 <forward_mode+0x198>
 8001af0:	2304      	movs	r3, #4
 8001af2:	189b      	adds	r3, r3, r2
 8001af4:	19db      	adds	r3, r3, r7
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	230e      	movs	r3, #14
 8001afc:	18fb      	adds	r3, r7, r3
 8001afe:	881b      	ldrh	r3, [r3, #0]
 8001b00:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001b02:	e009      	b.n	8001b18 <forward_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, compare);
 8001b04:	2304      	movs	r3, #4
 8001b06:	2220      	movs	r2, #32
 8001b08:	189b      	adds	r3, r3, r2
 8001b0a:	19db      	adds	r3, r3, r7
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	230e      	movs	r3, #14
 8001b12:	18fb      	adds	r3, r7, r3
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001b18:	46c0      	nop			; (mov r8, r8)
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	b004      	add	sp, #16
 8001b1e:	bcb0      	pop	{r4, r5, r7}
 8001b20:	bc08      	pop	{r3}
 8001b22:	b004      	add	sp, #16
 8001b24:	4718      	bx	r3

08001b26 <reverse_mode>:

void reverse_mode(uint16_t speed,struct driver_motor_t motor)
{
 8001b26:	b084      	sub	sp, #16
 8001b28:	b5b0      	push	{r4, r5, r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	0004      	movs	r4, r0
 8001b30:	2004      	movs	r0, #4
 8001b32:	2520      	movs	r5, #32
 8001b34:	1940      	adds	r0, r0, r5
 8001b36:	19c0      	adds	r0, r0, r7
 8001b38:	6001      	str	r1, [r0, #0]
 8001b3a:	6042      	str	r2, [r0, #4]
 8001b3c:	6083      	str	r3, [r0, #8]
 8001b3e:	1dbb      	adds	r3, r7, #6
 8001b40:	1c22      	adds	r2, r4, #0
 8001b42:	801a      	strh	r2, [r3, #0]
	if (speed>MAX_SPEED){speed=MAX_SPEED;}
 8001b44:	1dbb      	adds	r3, r7, #6
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	2b64      	cmp	r3, #100	; 0x64
 8001b4a:	d902      	bls.n	8001b52 <reverse_mode+0x2c>
 8001b4c:	1dbb      	adds	r3, r7, #6
 8001b4e:	2264      	movs	r2, #100	; 0x64
 8001b50:	801a      	strh	r2, [r3, #0]
	uint16_t compare=speed*MAX_COMPTEUR/MAX_SPEED;
 8001b52:	1dbb      	adds	r3, r7, #6
 8001b54:	881a      	ldrh	r2, [r3, #0]
 8001b56:	0013      	movs	r3, r2
 8001b58:	01db      	lsls	r3, r3, #7
 8001b5a:	1a9b      	subs	r3, r3, r2
 8001b5c:	2164      	movs	r1, #100	; 0x64
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f7fe fb64 	bl	800022c <__divsi3>
 8001b64:	0003      	movs	r3, r0
 8001b66:	001a      	movs	r2, r3
 8001b68:	230e      	movs	r3, #14
 8001b6a:	18fb      	adds	r3, r7, r3
 8001b6c:	801a      	strh	r2, [r3, #0]
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, 0);
 8001b6e:	2304      	movs	r3, #4
 8001b70:	2220      	movs	r2, #32
 8001b72:	189b      	adds	r3, r3, r2
 8001b74:	19db      	adds	r3, r3, r7
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <reverse_mode+0x66>
 8001b7c:	2304      	movs	r3, #4
 8001b7e:	189b      	adds	r3, r3, r2
 8001b80:	19db      	adds	r3, r3, r7
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	635a      	str	r2, [r3, #52]	; 0x34
 8001b8a:	e043      	b.n	8001c14 <reverse_mode+0xee>
 8001b8c:	2304      	movs	r3, #4
 8001b8e:	2220      	movs	r2, #32
 8001b90:	189b      	adds	r3, r3, r2
 8001b92:	19db      	adds	r3, r3, r7
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	d107      	bne.n	8001baa <reverse_mode+0x84>
 8001b9a:	2304      	movs	r3, #4
 8001b9c:	189b      	adds	r3, r3, r2
 8001b9e:	19db      	adds	r3, r3, r7
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	6393      	str	r3, [r2, #56]	; 0x38
 8001ba8:	e034      	b.n	8001c14 <reverse_mode+0xee>
 8001baa:	2304      	movs	r3, #4
 8001bac:	2220      	movs	r2, #32
 8001bae:	189b      	adds	r3, r3, r2
 8001bb0:	19db      	adds	r3, r3, r7
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b08      	cmp	r3, #8
 8001bb6:	d107      	bne.n	8001bc8 <reverse_mode+0xa2>
 8001bb8:	2304      	movs	r3, #4
 8001bba:	189b      	adds	r3, r3, r2
 8001bbc:	19db      	adds	r3, r3, r7
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001bc6:	e025      	b.n	8001c14 <reverse_mode+0xee>
 8001bc8:	2304      	movs	r3, #4
 8001bca:	2220      	movs	r2, #32
 8001bcc:	189b      	adds	r3, r3, r2
 8001bce:	19db      	adds	r3, r3, r7
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	2b0c      	cmp	r3, #12
 8001bd4:	d107      	bne.n	8001be6 <reverse_mode+0xc0>
 8001bd6:	2304      	movs	r3, #4
 8001bd8:	189b      	adds	r3, r3, r2
 8001bda:	19db      	adds	r3, r3, r7
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	2300      	movs	r3, #0
 8001be2:	6413      	str	r3, [r2, #64]	; 0x40
 8001be4:	e016      	b.n	8001c14 <reverse_mode+0xee>
 8001be6:	2304      	movs	r3, #4
 8001be8:	2220      	movs	r2, #32
 8001bea:	189b      	adds	r3, r3, r2
 8001bec:	19db      	adds	r3, r3, r7
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	2b10      	cmp	r3, #16
 8001bf2:	d107      	bne.n	8001c04 <reverse_mode+0xde>
 8001bf4:	2304      	movs	r3, #4
 8001bf6:	189b      	adds	r3, r3, r2
 8001bf8:	19db      	adds	r3, r3, r7
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	2300      	movs	r3, #0
 8001c00:	6593      	str	r3, [r2, #88]	; 0x58
 8001c02:	e007      	b.n	8001c14 <reverse_mode+0xee>
 8001c04:	2304      	movs	r3, #4
 8001c06:	2220      	movs	r2, #32
 8001c08:	189b      	adds	r3, r3, r2
 8001c0a:	19db      	adds	r3, r3, r7
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	2300      	movs	r3, #0
 8001c12:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c14:	2304      	movs	r3, #4
 8001c16:	2220      	movs	r2, #32
 8001c18:	189b      	adds	r3, r3, r2
 8001c1a:	19db      	adds	r3, r3, r7
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d109      	bne.n	8001c36 <reverse_mode+0x110>
 8001c22:	2304      	movs	r3, #4
 8001c24:	189b      	adds	r3, r3, r2
 8001c26:	19db      	adds	r3, r3, r7
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	220e      	movs	r2, #14
 8001c2e:	18ba      	adds	r2, r7, r2
 8001c30:	8812      	ldrh	r2, [r2, #0]
 8001c32:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001c34:	e04d      	b.n	8001cd2 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c36:	2304      	movs	r3, #4
 8001c38:	2220      	movs	r2, #32
 8001c3a:	189b      	adds	r3, r3, r2
 8001c3c:	19db      	adds	r3, r3, r7
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d109      	bne.n	8001c58 <reverse_mode+0x132>
 8001c44:	2304      	movs	r3, #4
 8001c46:	189b      	adds	r3, r3, r2
 8001c48:	19db      	adds	r3, r3, r7
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	230e      	movs	r3, #14
 8001c50:	18fb      	adds	r3, r7, r3
 8001c52:	881b      	ldrh	r3, [r3, #0]
 8001c54:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001c56:	e03c      	b.n	8001cd2 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c58:	2304      	movs	r3, #4
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	189b      	adds	r3, r3, r2
 8001c5e:	19db      	adds	r3, r3, r7
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d109      	bne.n	8001c7a <reverse_mode+0x154>
 8001c66:	2304      	movs	r3, #4
 8001c68:	189b      	adds	r3, r3, r2
 8001c6a:	19db      	adds	r3, r3, r7
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	230e      	movs	r3, #14
 8001c72:	18fb      	adds	r3, r7, r3
 8001c74:	881b      	ldrh	r3, [r3, #0]
 8001c76:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001c78:	e02b      	b.n	8001cd2 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c7a:	2304      	movs	r3, #4
 8001c7c:	2220      	movs	r2, #32
 8001c7e:	189b      	adds	r3, r3, r2
 8001c80:	19db      	adds	r3, r3, r7
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b0c      	cmp	r3, #12
 8001c86:	d109      	bne.n	8001c9c <reverse_mode+0x176>
 8001c88:	2304      	movs	r3, #4
 8001c8a:	189b      	adds	r3, r3, r2
 8001c8c:	19db      	adds	r3, r3, r7
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	230e      	movs	r3, #14
 8001c94:	18fb      	adds	r3, r7, r3
 8001c96:	881b      	ldrh	r3, [r3, #0]
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001c9a:	e01a      	b.n	8001cd2 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001c9c:	2304      	movs	r3, #4
 8001c9e:	2220      	movs	r2, #32
 8001ca0:	189b      	adds	r3, r3, r2
 8001ca2:	19db      	adds	r3, r3, r7
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	2b10      	cmp	r3, #16
 8001ca8:	d109      	bne.n	8001cbe <reverse_mode+0x198>
 8001caa:	2304      	movs	r3, #4
 8001cac:	189b      	adds	r3, r3, r2
 8001cae:	19db      	adds	r3, r3, r7
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	230e      	movs	r3, #14
 8001cb6:	18fb      	adds	r3, r7, r3
 8001cb8:	881b      	ldrh	r3, [r3, #0]
 8001cba:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001cbc:	e009      	b.n	8001cd2 <reverse_mode+0x1ac>
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, compare);
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	189b      	adds	r3, r3, r2
 8001cc4:	19db      	adds	r3, r3, r7
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	230e      	movs	r3, #14
 8001ccc:	18fb      	adds	r3, r7, r3
 8001cce:	881b      	ldrh	r3, [r3, #0]
 8001cd0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001cd2:	46c0      	nop			; (mov r8, r8)
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	b004      	add	sp, #16
 8001cd8:	bcb0      	pop	{r4, r5, r7}
 8001cda:	bc08      	pop	{r3}
 8001cdc:	b004      	add	sp, #16
 8001cde:	4718      	bx	r3

08001ce0 <brake_mode>:
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, 0);
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, 0);
}

void brake_mode(struct driver_motor_t motor)
{
 8001ce0:	b590      	push	{r4, r7, lr}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	003c      	movs	r4, r7
 8001ce8:	6020      	str	r0, [r4, #0]
 8001cea:	6061      	str	r1, [r4, #4]
 8001cec:	60a2      	str	r2, [r4, #8]
 8001cee:	60e3      	str	r3, [r4, #12]
	__HAL_TIM_SET_COMPARE(motor.reverse_htim, motor.reverse_CHANNEL, MAX_COMPTEUR);
 8001cf0:	003b      	movs	r3, r7
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d105      	bne.n	8001d04 <brake_mode+0x24>
 8001cf8:	003b      	movs	r3, r7
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	227f      	movs	r2, #127	; 0x7f
 8001d00:	635a      	str	r2, [r3, #52]	; 0x34
 8001d02:	e02c      	b.n	8001d5e <brake_mode+0x7e>
 8001d04:	003b      	movs	r3, r7
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d105      	bne.n	8001d18 <brake_mode+0x38>
 8001d0c:	003b      	movs	r3, r7
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	237f      	movs	r3, #127	; 0x7f
 8001d14:	6393      	str	r3, [r2, #56]	; 0x38
 8001d16:	e022      	b.n	8001d5e <brake_mode+0x7e>
 8001d18:	003b      	movs	r3, r7
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	2b08      	cmp	r3, #8
 8001d1e:	d105      	bne.n	8001d2c <brake_mode+0x4c>
 8001d20:	003b      	movs	r3, r7
 8001d22:	689b      	ldr	r3, [r3, #8]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	237f      	movs	r3, #127	; 0x7f
 8001d28:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001d2a:	e018      	b.n	8001d5e <brake_mode+0x7e>
 8001d2c:	003b      	movs	r3, r7
 8001d2e:	68db      	ldr	r3, [r3, #12]
 8001d30:	2b0c      	cmp	r3, #12
 8001d32:	d105      	bne.n	8001d40 <brake_mode+0x60>
 8001d34:	003b      	movs	r3, r7
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	237f      	movs	r3, #127	; 0x7f
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	e00e      	b.n	8001d5e <brake_mode+0x7e>
 8001d40:	003b      	movs	r3, r7
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b10      	cmp	r3, #16
 8001d46:	d105      	bne.n	8001d54 <brake_mode+0x74>
 8001d48:	003b      	movs	r3, r7
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	237f      	movs	r3, #127	; 0x7f
 8001d50:	6593      	str	r3, [r2, #88]	; 0x58
 8001d52:	e004      	b.n	8001d5e <brake_mode+0x7e>
 8001d54:	003b      	movs	r3, r7
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	237f      	movs	r3, #127	; 0x7f
 8001d5c:	65d3      	str	r3, [r2, #92]	; 0x5c
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001d5e:	003b      	movs	r3, r7
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <brake_mode+0x92>
 8001d66:	003b      	movs	r3, r7
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	227f      	movs	r2, #127	; 0x7f
 8001d6e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001d70:	e02c      	b.n	8001dcc <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001d72:	003b      	movs	r3, r7
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b04      	cmp	r3, #4
 8001d78:	d105      	bne.n	8001d86 <brake_mode+0xa6>
 8001d7a:	003b      	movs	r3, r7
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	237f      	movs	r3, #127	; 0x7f
 8001d82:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001d84:	e022      	b.n	8001dcc <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001d86:	003b      	movs	r3, r7
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	2b08      	cmp	r3, #8
 8001d8c:	d105      	bne.n	8001d9a <brake_mode+0xba>
 8001d8e:	003b      	movs	r3, r7
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	237f      	movs	r3, #127	; 0x7f
 8001d96:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001d98:	e018      	b.n	8001dcc <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001d9a:	003b      	movs	r3, r7
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d105      	bne.n	8001dae <brake_mode+0xce>
 8001da2:	003b      	movs	r3, r7
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	237f      	movs	r3, #127	; 0x7f
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001dac:	e00e      	b.n	8001dcc <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001dae:	003b      	movs	r3, r7
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d105      	bne.n	8001dc2 <brake_mode+0xe2>
 8001db6:	003b      	movs	r3, r7
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	237f      	movs	r3, #127	; 0x7f
 8001dbe:	6593      	str	r3, [r2, #88]	; 0x58
}
 8001dc0:	e004      	b.n	8001dcc <brake_mode+0xec>
	__HAL_TIM_SET_COMPARE(motor.forward_htim, motor.forward_CHANNEL, MAX_COMPTEUR);
 8001dc2:	003b      	movs	r3, r7
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	237f      	movs	r3, #127	; 0x7f
 8001dca:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8001dcc:	46c0      	nop			; (mov r8, r8)
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b005      	add	sp, #20
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <set_speed>:

void set_speed(uint16_t speed,struct driver_motor_t motor){
 8001dd4:	b084      	sub	sp, #16
 8001dd6:	b5b0      	push	{r4, r5, r7, lr}
 8001dd8:	b084      	sub	sp, #16
 8001dda:	af02      	add	r7, sp, #8
 8001ddc:	0004      	movs	r4, r0
 8001dde:	2004      	movs	r0, #4
 8001de0:	2518      	movs	r5, #24
 8001de2:	1940      	adds	r0, r0, r5
 8001de4:	19c0      	adds	r0, r0, r7
 8001de6:	6001      	str	r1, [r0, #0]
 8001de8:	6042      	str	r2, [r0, #4]
 8001dea:	6083      	str	r3, [r0, #8]
 8001dec:	1dbb      	adds	r3, r7, #6
 8001dee:	1c22      	adds	r2, r4, #0
 8001df0:	801a      	strh	r2, [r3, #0]
	if(speed==0){brake_mode(motor);}
 8001df2:	1dbb      	adds	r3, r7, #6
 8001df4:	881b      	ldrh	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <set_speed+0x3a>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	195b      	adds	r3, r3, r5
 8001dfe:	19db      	adds	r3, r3, r7
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	6859      	ldr	r1, [r3, #4]
 8001e04:	689a      	ldr	r2, [r3, #8]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f7ff ff6a 	bl	8001ce0 <brake_mode>
	else if(speed>0){forward_mode(speed,motor);}
	else {reverse_mode(-speed,motor);}
}
 8001e0c:	e022      	b.n	8001e54 <set_speed+0x80>
	else if(speed>0){forward_mode(speed,motor);}
 8001e0e:	1dbb      	adds	r3, r7, #6
 8001e10:	881b      	ldrh	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00e      	beq.n	8001e34 <set_speed+0x60>
 8001e16:	2304      	movs	r3, #4
 8001e18:	2218      	movs	r2, #24
 8001e1a:	189b      	adds	r3, r3, r2
 8001e1c:	19db      	adds	r3, r3, r7
 8001e1e:	1dba      	adds	r2, r7, #6
 8001e20:	8810      	ldrh	r0, [r2, #0]
 8001e22:	466a      	mov	r2, sp
 8001e24:	68d9      	ldr	r1, [r3, #12]
 8001e26:	6011      	str	r1, [r2, #0]
 8001e28:	6819      	ldr	r1, [r3, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f7ff fd9d 	bl	800196c <forward_mode>
}
 8001e32:	e00f      	b.n	8001e54 <set_speed+0x80>
	else {reverse_mode(-speed,motor);}
 8001e34:	1dbb      	adds	r3, r7, #6
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	425b      	negs	r3, r3
 8001e3a:	b298      	uxth	r0, r3
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	2218      	movs	r2, #24
 8001e40:	189b      	adds	r3, r3, r2
 8001e42:	19db      	adds	r3, r3, r7
 8001e44:	466a      	mov	r2, sp
 8001e46:	68d9      	ldr	r1, [r3, #12]
 8001e48:	6011      	str	r1, [r2, #0]
 8001e4a:	6819      	ldr	r1, [r3, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f7ff fe69 	bl	8001b26 <reverse_mode>
}
 8001e54:	46c0      	nop			; (mov r8, r8)
 8001e56:	46bd      	mov	sp, r7
 8001e58:	b002      	add	sp, #8
 8001e5a:	bcb0      	pop	{r4, r5, r7}
 8001e5c:	bc08      	pop	{r3}
 8001e5e:	b004      	add	sp, #16
 8001e60:	4718      	bx	r3
	...

08001e64 <move_straight>:
	set_speed(speed_R,right_motor);
	set_speed(speed_L,left_motor);
}

void move_straight(int16_t speed)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	0002      	movs	r2, r0
 8001e6c:	1dbb      	adds	r3, r7, #6
 8001e6e:	801a      	strh	r2, [r3, #0]
	set_speed(speed,right_motor);
 8001e70:	1dbb      	adds	r3, r7, #6
 8001e72:	8818      	ldrh	r0, [r3, #0]
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <move_straight+0x40>)
 8001e76:	466a      	mov	r2, sp
 8001e78:	68d9      	ldr	r1, [r3, #12]
 8001e7a:	6011      	str	r1, [r2, #0]
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f7ff ffa7 	bl	8001dd4 <set_speed>
	set_speed(speed,left_motor);
 8001e86:	1dbb      	adds	r3, r7, #6
 8001e88:	8818      	ldrh	r0, [r3, #0]
 8001e8a:	4b07      	ldr	r3, [pc, #28]	; (8001ea8 <move_straight+0x44>)
 8001e8c:	466a      	mov	r2, sp
 8001e8e:	68d9      	ldr	r1, [r3, #12]
 8001e90:	6011      	str	r1, [r2, #0]
 8001e92:	6819      	ldr	r1, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f7ff ff9c 	bl	8001dd4 <set_speed>
}
 8001e9c:	46c0      	nop			; (mov r8, r8)
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	b002      	add	sp, #8
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000024 	.word	0x20000024
 8001ea8:	20000014 	.word	0x20000014

08001eac <stop>:

void stop(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af02      	add	r7, sp, #8
	set_speed(0,right_motor);
 8001eb2:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <stop+0x34>)
 8001eb4:	466a      	mov	r2, sp
 8001eb6:	68d9      	ldr	r1, [r3, #12]
 8001eb8:	6011      	str	r1, [r2, #0]
 8001eba:	6819      	ldr	r1, [r3, #0]
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	f7ff ff87 	bl	8001dd4 <set_speed>
	set_speed(0,left_motor);
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <stop+0x38>)
 8001ec8:	466a      	mov	r2, sp
 8001eca:	68d9      	ldr	r1, [r3, #12]
 8001ecc:	6011      	str	r1, [r2, #0]
 8001ece:	6819      	ldr	r1, [r3, #0]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f7ff ff7d 	bl	8001dd4 <set_speed>
}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000024 	.word	0x20000024
 8001ee4:	20000014 	.word	0x20000014

08001ee8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001eee:	1dfb      	adds	r3, r7, #7
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef4:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_Init+0x3c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b0a      	ldr	r3, [pc, #40]	; (8001f24 <HAL_Init+0x3c>)
 8001efa:	2180      	movs	r1, #128	; 0x80
 8001efc:	0049      	lsls	r1, r1, #1
 8001efe:	430a      	orrs	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f02:	2003      	movs	r0, #3
 8001f04:	f000 f810 	bl	8001f28 <HAL_InitTick>
 8001f08:	1e03      	subs	r3, r0, #0
 8001f0a:	d003      	beq.n	8001f14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001f0c:	1dfb      	adds	r3, r7, #7
 8001f0e:	2201      	movs	r2, #1
 8001f10:	701a      	strb	r2, [r3, #0]
 8001f12:	e001      	b.n	8001f18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001f14:	f7fe fca0 	bl	8000858 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f18:	1dfb      	adds	r3, r7, #7
 8001f1a:	781b      	ldrb	r3, [r3, #0]
}
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	b002      	add	sp, #8
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	40022000 	.word	0x40022000

08001f28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f28:	b590      	push	{r4, r7, lr}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f30:	230f      	movs	r3, #15
 8001f32:	18fb      	adds	r3, r7, r3
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_InitTick+0x88>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d02b      	beq.n	8001f98 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001f40:	4b1c      	ldr	r3, [pc, #112]	; (8001fb4 <HAL_InitTick+0x8c>)
 8001f42:	681c      	ldr	r4, [r3, #0]
 8001f44:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_InitTick+0x88>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	0019      	movs	r1, r3
 8001f4a:	23fa      	movs	r3, #250	; 0xfa
 8001f4c:	0098      	lsls	r0, r3, #2
 8001f4e:	f7fe f8e3 	bl	8000118 <__udivsi3>
 8001f52:	0003      	movs	r3, r0
 8001f54:	0019      	movs	r1, r3
 8001f56:	0020      	movs	r0, r4
 8001f58:	f7fe f8de 	bl	8000118 <__udivsi3>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	0018      	movs	r0, r3
 8001f60:	f000 f919 	bl	8002196 <HAL_SYSTICK_Config>
 8001f64:	1e03      	subs	r3, r0, #0
 8001f66:	d112      	bne.n	8001f8e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b03      	cmp	r3, #3
 8001f6c:	d80a      	bhi.n	8001f84 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	2301      	movs	r3, #1
 8001f72:	425b      	negs	r3, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	0018      	movs	r0, r3
 8001f78:	f000 f8e8 	bl	800214c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f7c:	4b0e      	ldr	r3, [pc, #56]	; (8001fb8 <HAL_InitTick+0x90>)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e00d      	b.n	8001fa0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	2201      	movs	r2, #1
 8001f8a:	701a      	strb	r2, [r3, #0]
 8001f8c:	e008      	b.n	8001fa0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8e:	230f      	movs	r3, #15
 8001f90:	18fb      	adds	r3, r7, r3
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e003      	b.n	8001fa0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f98:	230f      	movs	r3, #15
 8001f9a:	18fb      	adds	r3, r7, r3
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	18fb      	adds	r3, r7, r3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b005      	add	sp, #20
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	20000038 	.word	0x20000038
 8001fb4:	20000000 	.word	0x20000000
 8001fb8:	20000034 	.word	0x20000034

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_IncTick+0x1c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	18d2      	adds	r2, r2, r3
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_IncTick+0x20>)
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000038 	.word	0x20000038
 8001fdc:	200004dc 	.word	0x200004dc

08001fe0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_GetTick+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	200004dc 	.word	0x200004dc

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	0002      	movs	r2, r0
 8001ffc:	1dfb      	adds	r3, r7, #7
 8001ffe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002000:	1dfb      	adds	r3, r7, #7
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b7f      	cmp	r3, #127	; 0x7f
 8002006:	d809      	bhi.n	800201c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002008:	1dfb      	adds	r3, r7, #7
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	001a      	movs	r2, r3
 800200e:	231f      	movs	r3, #31
 8002010:	401a      	ands	r2, r3
 8002012:	4b04      	ldr	r3, [pc, #16]	; (8002024 <__NVIC_EnableIRQ+0x30>)
 8002014:	2101      	movs	r1, #1
 8002016:	4091      	lsls	r1, r2
 8002018:	000a      	movs	r2, r1
 800201a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800201c:	46c0      	nop			; (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	0002      	movs	r2, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	1dfb      	adds	r3, r7, #7
 8002034:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002036:	1dfb      	adds	r3, r7, #7
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b7f      	cmp	r3, #127	; 0x7f
 800203c:	d828      	bhi.n	8002090 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800203e:	4a2f      	ldr	r2, [pc, #188]	; (80020fc <__NVIC_SetPriority+0xd4>)
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	b25b      	sxtb	r3, r3
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	33c0      	adds	r3, #192	; 0xc0
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	589b      	ldr	r3, [r3, r2]
 800204e:	1dfa      	adds	r2, r7, #7
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	0011      	movs	r1, r2
 8002054:	2203      	movs	r2, #3
 8002056:	400a      	ands	r2, r1
 8002058:	00d2      	lsls	r2, r2, #3
 800205a:	21ff      	movs	r1, #255	; 0xff
 800205c:	4091      	lsls	r1, r2
 800205e:	000a      	movs	r2, r1
 8002060:	43d2      	mvns	r2, r2
 8002062:	401a      	ands	r2, r3
 8002064:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	019b      	lsls	r3, r3, #6
 800206a:	22ff      	movs	r2, #255	; 0xff
 800206c:	401a      	ands	r2, r3
 800206e:	1dfb      	adds	r3, r7, #7
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	0018      	movs	r0, r3
 8002074:	2303      	movs	r3, #3
 8002076:	4003      	ands	r3, r0
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800207c:	481f      	ldr	r0, [pc, #124]	; (80020fc <__NVIC_SetPriority+0xd4>)
 800207e:	1dfb      	adds	r3, r7, #7
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	b25b      	sxtb	r3, r3
 8002084:	089b      	lsrs	r3, r3, #2
 8002086:	430a      	orrs	r2, r1
 8002088:	33c0      	adds	r3, #192	; 0xc0
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800208e:	e031      	b.n	80020f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <__NVIC_SetPriority+0xd8>)
 8002092:	1dfb      	adds	r3, r7, #7
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	0019      	movs	r1, r3
 8002098:	230f      	movs	r3, #15
 800209a:	400b      	ands	r3, r1
 800209c:	3b08      	subs	r3, #8
 800209e:	089b      	lsrs	r3, r3, #2
 80020a0:	3306      	adds	r3, #6
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	18d3      	adds	r3, r2, r3
 80020a6:	3304      	adds	r3, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	1dfa      	adds	r2, r7, #7
 80020ac:	7812      	ldrb	r2, [r2, #0]
 80020ae:	0011      	movs	r1, r2
 80020b0:	2203      	movs	r2, #3
 80020b2:	400a      	ands	r2, r1
 80020b4:	00d2      	lsls	r2, r2, #3
 80020b6:	21ff      	movs	r1, #255	; 0xff
 80020b8:	4091      	lsls	r1, r2
 80020ba:	000a      	movs	r2, r1
 80020bc:	43d2      	mvns	r2, r2
 80020be:	401a      	ands	r2, r3
 80020c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	019b      	lsls	r3, r3, #6
 80020c6:	22ff      	movs	r2, #255	; 0xff
 80020c8:	401a      	ands	r2, r3
 80020ca:	1dfb      	adds	r3, r7, #7
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	0018      	movs	r0, r3
 80020d0:	2303      	movs	r3, #3
 80020d2:	4003      	ands	r3, r0
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d8:	4809      	ldr	r0, [pc, #36]	; (8002100 <__NVIC_SetPriority+0xd8>)
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	001c      	movs	r4, r3
 80020e0:	230f      	movs	r3, #15
 80020e2:	4023      	ands	r3, r4
 80020e4:	3b08      	subs	r3, #8
 80020e6:	089b      	lsrs	r3, r3, #2
 80020e8:	430a      	orrs	r2, r1
 80020ea:	3306      	adds	r3, #6
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	18c3      	adds	r3, r0, r3
 80020f0:	3304      	adds	r3, #4
 80020f2:	601a      	str	r2, [r3, #0]
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b003      	add	sp, #12
 80020fa:	bd90      	pop	{r4, r7, pc}
 80020fc:	e000e100 	.word	0xe000e100
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	1e5a      	subs	r2, r3, #1
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	045b      	lsls	r3, r3, #17
 8002114:	429a      	cmp	r2, r3
 8002116:	d301      	bcc.n	800211c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002118:	2301      	movs	r3, #1
 800211a:	e010      	b.n	800213e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800211c:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <SysTick_Config+0x44>)
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	3a01      	subs	r2, #1
 8002122:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002124:	2301      	movs	r3, #1
 8002126:	425b      	negs	r3, r3
 8002128:	2103      	movs	r1, #3
 800212a:	0018      	movs	r0, r3
 800212c:	f7ff ff7c 	bl	8002028 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <SysTick_Config+0x44>)
 8002132:	2200      	movs	r2, #0
 8002134:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002136:	4b04      	ldr	r3, [pc, #16]	; (8002148 <SysTick_Config+0x44>)
 8002138:	2207      	movs	r2, #7
 800213a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800213c:	2300      	movs	r3, #0
}
 800213e:	0018      	movs	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	b002      	add	sp, #8
 8002144:	bd80      	pop	{r7, pc}
 8002146:	46c0      	nop			; (mov r8, r8)
 8002148:	e000e010 	.word	0xe000e010

0800214c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
 8002156:	210f      	movs	r1, #15
 8002158:	187b      	adds	r3, r7, r1
 800215a:	1c02      	adds	r2, r0, #0
 800215c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	187b      	adds	r3, r7, r1
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	b25b      	sxtb	r3, r3
 8002166:	0011      	movs	r1, r2
 8002168:	0018      	movs	r0, r3
 800216a:	f7ff ff5d 	bl	8002028 <__NVIC_SetPriority>
}
 800216e:	46c0      	nop			; (mov r8, r8)
 8002170:	46bd      	mov	sp, r7
 8002172:	b004      	add	sp, #16
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	0002      	movs	r2, r0
 800217e:	1dfb      	adds	r3, r7, #7
 8002180:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002182:	1dfb      	adds	r3, r7, #7
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	b25b      	sxtb	r3, r3
 8002188:	0018      	movs	r0, r3
 800218a:	f7ff ff33 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 800218e:	46c0      	nop			; (mov r8, r8)
 8002190:	46bd      	mov	sp, r7
 8002192:	b002      	add	sp, #8
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	0018      	movs	r0, r3
 80021a2:	f7ff ffaf 	bl	8002104 <SysTick_Config>
 80021a6:	0003      	movs	r3, r0
}
 80021a8:	0018      	movs	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	b002      	add	sp, #8
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e050      	b.n	8002264 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2225      	movs	r2, #37	; 0x25
 80021c6:	5c9b      	ldrb	r3, [r3, r2]
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d008      	beq.n	80021e0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2204      	movs	r2, #4
 80021d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2224      	movs	r2, #36	; 0x24
 80021d8:	2100      	movs	r1, #0
 80021da:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e041      	b.n	8002264 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	210e      	movs	r1, #14
 80021ec:	438a      	bics	r2, r1
 80021ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021fa:	491c      	ldr	r1, [pc, #112]	; (800226c <HAL_DMA_Abort+0xbc>)
 80021fc:	400a      	ands	r2, r1
 80021fe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2101      	movs	r1, #1
 800220c:	438a      	bics	r2, r1
 800220e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8002210:	4b17      	ldr	r3, [pc, #92]	; (8002270 <HAL_DMA_Abort+0xc0>)
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002218:	221c      	movs	r2, #28
 800221a:	4013      	ands	r3, r2
 800221c:	2201      	movs	r2, #1
 800221e:	409a      	lsls	r2, r3
 8002220:	4b13      	ldr	r3, [pc, #76]	; (8002270 <HAL_DMA_Abort+0xc0>)
 8002222:	430a      	orrs	r2, r1
 8002224:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800222e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00c      	beq.n	8002252 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002242:	490a      	ldr	r1, [pc, #40]	; (800226c <HAL_DMA_Abort+0xbc>)
 8002244:	400a      	ands	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002250:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2225      	movs	r2, #37	; 0x25
 8002256:	2101      	movs	r1, #1
 8002258:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2224      	movs	r2, #36	; 0x24
 800225e:	2100      	movs	r1, #0
 8002260:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002262:	2300      	movs	r3, #0
}
 8002264:	0018      	movs	r0, r3
 8002266:	46bd      	mov	sp, r7
 8002268:	b002      	add	sp, #8
 800226a:	bd80      	pop	{r7, pc}
 800226c:	fffffeff 	.word	0xfffffeff
 8002270:	40020000 	.word	0x40020000

08002274 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800227c:	210f      	movs	r1, #15
 800227e:	187b      	adds	r3, r7, r1
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2225      	movs	r2, #37	; 0x25
 8002288:	5c9b      	ldrb	r3, [r3, r2]
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b02      	cmp	r3, #2
 800228e:	d006      	beq.n	800229e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2204      	movs	r2, #4
 8002294:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002296:	187b      	adds	r3, r7, r1
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
 800229c:	e049      	b.n	8002332 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	210e      	movs	r1, #14
 80022aa:	438a      	bics	r2, r1
 80022ac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2101      	movs	r1, #1
 80022ba:	438a      	bics	r2, r1
 80022bc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c8:	491d      	ldr	r1, [pc, #116]	; (8002340 <HAL_DMA_Abort_IT+0xcc>)
 80022ca:	400a      	ands	r2, r1
 80022cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <HAL_DMA_Abort_IT+0xd0>)
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d6:	221c      	movs	r2, #28
 80022d8:	4013      	ands	r3, r2
 80022da:	2201      	movs	r2, #1
 80022dc:	409a      	lsls	r2, r3
 80022de:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_DMA_Abort_IT+0xd0>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80022ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00c      	beq.n	8002310 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	490f      	ldr	r1, [pc, #60]	; (8002340 <HAL_DMA_Abort_IT+0xcc>)
 8002302:	400a      	ands	r2, r1
 8002304:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800230e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2225      	movs	r2, #37	; 0x25
 8002314:	2101      	movs	r1, #1
 8002316:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2224      	movs	r2, #36	; 0x24
 800231c:	2100      	movs	r1, #0
 800231e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	0010      	movs	r0, r2
 8002330:	4798      	blx	r3
    }
  }
  return status;
 8002332:	230f      	movs	r3, #15
 8002334:	18fb      	adds	r3, r7, r3
 8002336:	781b      	ldrb	r3, [r3, #0]
}
 8002338:	0018      	movs	r0, r3
 800233a:	46bd      	mov	sp, r7
 800233c:	b004      	add	sp, #16
 800233e:	bd80      	pop	{r7, pc}
 8002340:	fffffeff 	.word	0xfffffeff
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b086      	sub	sp, #24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002356:	e147      	b.n	80025e8 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2101      	movs	r1, #1
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	4091      	lsls	r1, r2
 8002362:	000a      	movs	r2, r1
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d100      	bne.n	8002370 <HAL_GPIO_Init+0x28>
 800236e:	e138      	b.n	80025e2 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	4013      	ands	r3, r2
 8002378:	2b01      	cmp	r3, #1
 800237a:	d005      	beq.n	8002388 <HAL_GPIO_Init+0x40>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	2203      	movs	r2, #3
 8002382:	4013      	ands	r3, r2
 8002384:	2b02      	cmp	r3, #2
 8002386:	d130      	bne.n	80023ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	2203      	movs	r2, #3
 8002394:	409a      	lsls	r2, r3
 8002396:	0013      	movs	r3, r2
 8002398:	43da      	mvns	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	4013      	ands	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68da      	ldr	r2, [r3, #12]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	409a      	lsls	r2, r3
 80023aa:	0013      	movs	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80023be:	2201      	movs	r2, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	43da      	mvns	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	091b      	lsrs	r3, r3, #4
 80023d4:	2201      	movs	r2, #1
 80023d6:	401a      	ands	r2, r3
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	409a      	lsls	r2, r3
 80023dc:	0013      	movs	r3, r2
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2203      	movs	r2, #3
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d017      	beq.n	8002426 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	409a      	lsls	r2, r3
 8002404:	0013      	movs	r3, r2
 8002406:	43da      	mvns	r2, r3
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	689a      	ldr	r2, [r3, #8]
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	2203      	movs	r2, #3
 800242c:	4013      	ands	r3, r2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d123      	bne.n	800247a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	08da      	lsrs	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	3208      	adds	r2, #8
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	58d3      	ldr	r3, [r2, r3]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2207      	movs	r2, #7
 8002444:	4013      	ands	r3, r2
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	220f      	movs	r2, #15
 800244a:	409a      	lsls	r2, r3
 800244c:	0013      	movs	r3, r2
 800244e:	43da      	mvns	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4013      	ands	r3, r2
 8002454:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2107      	movs	r1, #7
 800245e:	400b      	ands	r3, r1
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	409a      	lsls	r2, r3
 8002464:	0013      	movs	r3, r2
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	4313      	orrs	r3, r2
 800246a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	08da      	lsrs	r2, r3, #3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3208      	adds	r2, #8
 8002474:	0092      	lsls	r2, r2, #2
 8002476:	6939      	ldr	r1, [r7, #16]
 8002478:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	2203      	movs	r2, #3
 8002486:	409a      	lsls	r2, r3
 8002488:	0013      	movs	r3, r2
 800248a:	43da      	mvns	r2, r3
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2203      	movs	r2, #3
 8002498:	401a      	ands	r2, r3
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	409a      	lsls	r2, r3
 80024a0:	0013      	movs	r3, r2
 80024a2:	693a      	ldr	r2, [r7, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	23c0      	movs	r3, #192	; 0xc0
 80024b4:	029b      	lsls	r3, r3, #10
 80024b6:	4013      	ands	r3, r2
 80024b8:	d100      	bne.n	80024bc <HAL_GPIO_Init+0x174>
 80024ba:	e092      	b.n	80025e2 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80024bc:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3318      	adds	r3, #24
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	589b      	ldr	r3, [r3, r2]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2203      	movs	r2, #3
 80024ce:	4013      	ands	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	220f      	movs	r2, #15
 80024d4:	409a      	lsls	r2, r3
 80024d6:	0013      	movs	r3, r2
 80024d8:	43da      	mvns	r2, r3
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	23a0      	movs	r3, #160	; 0xa0
 80024e4:	05db      	lsls	r3, r3, #23
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d013      	beq.n	8002512 <HAL_GPIO_Init+0x1ca>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a45      	ldr	r2, [pc, #276]	; (8002604 <HAL_GPIO_Init+0x2bc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d00d      	beq.n	800250e <HAL_GPIO_Init+0x1c6>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a44      	ldr	r2, [pc, #272]	; (8002608 <HAL_GPIO_Init+0x2c0>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d007      	beq.n	800250a <HAL_GPIO_Init+0x1c2>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a43      	ldr	r2, [pc, #268]	; (800260c <HAL_GPIO_Init+0x2c4>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d101      	bne.n	8002506 <HAL_GPIO_Init+0x1be>
 8002502:	2303      	movs	r3, #3
 8002504:	e006      	b.n	8002514 <HAL_GPIO_Init+0x1cc>
 8002506:	2305      	movs	r3, #5
 8002508:	e004      	b.n	8002514 <HAL_GPIO_Init+0x1cc>
 800250a:	2302      	movs	r3, #2
 800250c:	e002      	b.n	8002514 <HAL_GPIO_Init+0x1cc>
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_GPIO_Init+0x1cc>
 8002512:	2300      	movs	r3, #0
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	2103      	movs	r1, #3
 8002518:	400a      	ands	r2, r1
 800251a:	00d2      	lsls	r2, r2, #3
 800251c:	4093      	lsls	r3, r2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002524:	4936      	ldr	r1, [pc, #216]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	089b      	lsrs	r3, r3, #2
 800252a:	3318      	adds	r3, #24
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002532:	4b33      	ldr	r3, [pc, #204]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	43da      	mvns	r2, r3
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	4013      	ands	r3, r2
 8002540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	035b      	lsls	r3, r3, #13
 800254a:	4013      	ands	r3, r2
 800254c:	d003      	beq.n	8002556 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4313      	orrs	r3, r2
 8002554:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002556:	4b2a      	ldr	r3, [pc, #168]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800255c:	4b28      	ldr	r3, [pc, #160]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	43da      	mvns	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	4013      	ands	r3, r2
 800256a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685a      	ldr	r2, [r3, #4]
 8002570:	2380      	movs	r3, #128	; 0x80
 8002572:	039b      	lsls	r3, r3, #14
 8002574:	4013      	ands	r3, r2
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	4313      	orrs	r3, r2
 800257e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002580:	4b1f      	ldr	r3, [pc, #124]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002586:	4a1e      	ldr	r2, [pc, #120]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 8002588:	2384      	movs	r3, #132	; 0x84
 800258a:	58d3      	ldr	r3, [r2, r3]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43da      	mvns	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	029b      	lsls	r3, r3, #10
 80025a0:	4013      	ands	r3, r2
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80025ac:	4914      	ldr	r1, [pc, #80]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80025ae:	2284      	movs	r2, #132	; 0x84
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80025b4:	4a12      	ldr	r2, [pc, #72]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80025b6:	2380      	movs	r3, #128	; 0x80
 80025b8:	58d3      	ldr	r3, [r2, r3]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43da      	mvns	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	4013      	ands	r3, r2
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025da:	4909      	ldr	r1, [pc, #36]	; (8002600 <HAL_GPIO_Init+0x2b8>)
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	3301      	adds	r3, #1
 80025e6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	40da      	lsrs	r2, r3
 80025f0:	1e13      	subs	r3, r2, #0
 80025f2:	d000      	beq.n	80025f6 <HAL_GPIO_Init+0x2ae>
 80025f4:	e6b0      	b.n	8002358 <HAL_GPIO_Init+0x10>
  }
}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	46c0      	nop			; (mov r8, r8)
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021800 	.word	0x40021800
 8002604:	50000400 	.word	0x50000400
 8002608:	50000800 	.word	0x50000800
 800260c:	50000c00 	.word	0x50000c00

08002610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	0008      	movs	r0, r1
 800261a:	0011      	movs	r1, r2
 800261c:	1cbb      	adds	r3, r7, #2
 800261e:	1c02      	adds	r2, r0, #0
 8002620:	801a      	strh	r2, [r3, #0]
 8002622:	1c7b      	adds	r3, r7, #1
 8002624:	1c0a      	adds	r2, r1, #0
 8002626:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002628:	1c7b      	adds	r3, r7, #1
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d004      	beq.n	800263a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002630:	1cbb      	adds	r3, r7, #2
 8002632:	881a      	ldrh	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800263a:	1cbb      	adds	r3, r7, #2
 800263c:	881a      	ldrh	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b002      	add	sp, #8
 8002648:	bd80      	pop	{r7, pc}
	...

0800264c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	0002      	movs	r2, r0
 8002654:	1dbb      	adds	r3, r7, #6
 8002656:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8002658:	4b10      	ldr	r3, [pc, #64]	; (800269c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	1dba      	adds	r2, r7, #6
 800265e:	8812      	ldrh	r2, [r2, #0]
 8002660:	4013      	ands	r3, r2
 8002662:	d008      	beq.n	8002676 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002666:	1dba      	adds	r2, r7, #6
 8002668:	8812      	ldrh	r2, [r2, #0]
 800266a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800266c:	1dbb      	adds	r3, r7, #6
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	0018      	movs	r0, r3
 8002672:	f000 f815 	bl	80026a0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8002676:	4b09      	ldr	r3, [pc, #36]	; (800269c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	1dba      	adds	r2, r7, #6
 800267c:	8812      	ldrh	r2, [r2, #0]
 800267e:	4013      	ands	r3, r2
 8002680:	d008      	beq.n	8002694 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8002684:	1dba      	adds	r2, r7, #6
 8002686:	8812      	ldrh	r2, [r2, #0]
 8002688:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800268a:	1dbb      	adds	r3, r7, #6
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	0018      	movs	r0, r3
 8002690:	f000 f810 	bl	80026b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8002694:	46c0      	nop			; (mov r8, r8)
 8002696:	46bd      	mov	sp, r7
 8002698:	b002      	add	sp, #8
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40021800 	.word	0x40021800

080026a0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	0002      	movs	r2, r0
 80026a8:	1dbb      	adds	r3, r7, #6
 80026aa:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80026ac:	46c0      	nop			; (mov r8, r8)
 80026ae:	46bd      	mov	sp, r7
 80026b0:	b002      	add	sp, #8
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	0002      	movs	r2, r0
 80026bc:	1dbb      	adds	r3, r7, #6
 80026be:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80026c0:	46c0      	nop			; (mov r8, r8)
 80026c2:	46bd      	mov	sp, r7
 80026c4:	b002      	add	sp, #8
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e082      	b.n	80027e0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2241      	movs	r2, #65	; 0x41
 80026de:	5c9b      	ldrb	r3, [r3, r2]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d107      	bne.n	80026f6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2240      	movs	r2, #64	; 0x40
 80026ea:	2100      	movs	r1, #0
 80026ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f7fd ffcd 	bl	8000690 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2241      	movs	r2, #65	; 0x41
 80026fa:	2124      	movs	r1, #36	; 0x24
 80026fc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	438a      	bics	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4934      	ldr	r1, [pc, #208]	; (80027e8 <HAL_I2C_Init+0x120>)
 8002718:	400a      	ands	r2, r1
 800271a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4931      	ldr	r1, [pc, #196]	; (80027ec <HAL_I2C_Init+0x124>)
 8002728:	400a      	ands	r2, r1
 800272a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	2b01      	cmp	r3, #1
 8002732:	d108      	bne.n	8002746 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2180      	movs	r1, #128	; 0x80
 800273e:	0209      	lsls	r1, r1, #8
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
 8002744:	e007      	b.n	8002756 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2184      	movs	r1, #132	; 0x84
 8002750:	0209      	lsls	r1, r1, #8
 8002752:	430a      	orrs	r2, r1
 8002754:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b02      	cmp	r3, #2
 800275c:	d104      	bne.n	8002768 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2280      	movs	r2, #128	; 0x80
 8002764:	0112      	lsls	r2, r2, #4
 8002766:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685a      	ldr	r2, [r3, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	491f      	ldr	r1, [pc, #124]	; (80027f0 <HAL_I2C_Init+0x128>)
 8002774:	430a      	orrs	r2, r1
 8002776:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	491a      	ldr	r1, [pc, #104]	; (80027ec <HAL_I2C_Init+0x124>)
 8002784:	400a      	ands	r2, r1
 8002786:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691a      	ldr	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	431a      	orrs	r2, r3
 8002792:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	430a      	orrs	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69d9      	ldr	r1, [r3, #28]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6a1a      	ldr	r2, [r3, #32]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	430a      	orrs	r2, r1
 80027b0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	430a      	orrs	r2, r1
 80027c0:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2241      	movs	r2, #65	; 0x41
 80027cc:	2120      	movs	r1, #32
 80027ce:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2242      	movs	r2, #66	; 0x42
 80027da:	2100      	movs	r1, #0
 80027dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	f0ffffff 	.word	0xf0ffffff
 80027ec:	ffff7fff 	.word	0xffff7fff
 80027f0:	02008000 	.word	0x02008000

080027f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2241      	movs	r2, #65	; 0x41
 8002802:	5c9b      	ldrb	r3, [r3, r2]
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b20      	cmp	r3, #32
 8002808:	d138      	bne.n	800287c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2240      	movs	r2, #64	; 0x40
 800280e:	5c9b      	ldrb	r3, [r3, r2]
 8002810:	2b01      	cmp	r3, #1
 8002812:	d101      	bne.n	8002818 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002814:	2302      	movs	r3, #2
 8002816:	e032      	b.n	800287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2240      	movs	r2, #64	; 0x40
 800281c:	2101      	movs	r1, #1
 800281e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2241      	movs	r2, #65	; 0x41
 8002824:	2124      	movs	r1, #36	; 0x24
 8002826:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2101      	movs	r1, #1
 8002834:	438a      	bics	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4911      	ldr	r1, [pc, #68]	; (8002888 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002844:	400a      	ands	r2, r1
 8002846:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	6819      	ldr	r1, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2101      	movs	r1, #1
 8002864:	430a      	orrs	r2, r1
 8002866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2241      	movs	r2, #65	; 0x41
 800286c:	2120      	movs	r1, #32
 800286e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2240      	movs	r2, #64	; 0x40
 8002874:	2100      	movs	r1, #0
 8002876:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002878:	2300      	movs	r3, #0
 800287a:	e000      	b.n	800287e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800287c:	2302      	movs	r3, #2
  }
}
 800287e:	0018      	movs	r0, r3
 8002880:	46bd      	mov	sp, r7
 8002882:	b002      	add	sp, #8
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	ffffefff 	.word	0xffffefff

0800288c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b084      	sub	sp, #16
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2241      	movs	r2, #65	; 0x41
 800289a:	5c9b      	ldrb	r3, [r3, r2]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b20      	cmp	r3, #32
 80028a0:	d139      	bne.n	8002916 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2240      	movs	r2, #64	; 0x40
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028ac:	2302      	movs	r3, #2
 80028ae:	e033      	b.n	8002918 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	2101      	movs	r1, #1
 80028b6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2241      	movs	r2, #65	; 0x41
 80028bc:	2124      	movs	r1, #36	; 0x24
 80028be:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2101      	movs	r1, #1
 80028cc:	438a      	bics	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4a11      	ldr	r2, [pc, #68]	; (8002920 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80028dc:	4013      	ands	r3, r2
 80028de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	2101      	movs	r1, #1
 80028fe:	430a      	orrs	r2, r1
 8002900:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2241      	movs	r2, #65	; 0x41
 8002906:	2120      	movs	r1, #32
 8002908:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2240      	movs	r2, #64	; 0x40
 800290e:	2100      	movs	r1, #0
 8002910:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002912:	2300      	movs	r3, #0
 8002914:	e000      	b.n	8002918 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
  }
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b004      	add	sp, #16
 800291e:	bd80      	pop	{r7, pc}
 8002920:	fffff0ff 	.word	0xfffff0ff

08002924 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800292c:	4b19      	ldr	r3, [pc, #100]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a19      	ldr	r2, [pc, #100]	; (8002998 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002932:	4013      	ands	r3, r2
 8002934:	0019      	movs	r1, r3
 8002936:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	430a      	orrs	r2, r1
 800293c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	429a      	cmp	r2, r3
 8002946:	d11f      	bne.n	8002988 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002948:	4b14      	ldr	r3, [pc, #80]	; (800299c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	0013      	movs	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	189b      	adds	r3, r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4912      	ldr	r1, [pc, #72]	; (80029a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002956:	0018      	movs	r0, r3
 8002958:	f7fd fbde 	bl	8000118 <__udivsi3>
 800295c:	0003      	movs	r3, r0
 800295e:	3301      	adds	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002962:	e008      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	3b01      	subs	r3, #1
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e001      	b.n	8002976 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002972:	2303      	movs	r3, #3
 8002974:	e009      	b.n	800298a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002976:	4b07      	ldr	r3, [pc, #28]	; (8002994 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002978:	695a      	ldr	r2, [r3, #20]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	401a      	ands	r2, r3
 8002980:	2380      	movs	r3, #128	; 0x80
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	429a      	cmp	r2, r3
 8002986:	d0ed      	beq.n	8002964 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	0018      	movs	r0, r3
 800298c:	46bd      	mov	sp, r7
 800298e:	b004      	add	sp, #16
 8002990:	bd80      	pop	{r7, pc}
 8002992:	46c0      	nop			; (mov r8, r8)
 8002994:	40007000 	.word	0x40007000
 8002998:	fffff9ff 	.word	0xfffff9ff
 800299c:	20000000 	.word	0x20000000
 80029a0:	000f4240 	.word	0x000f4240

080029a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80029a8:	4b03      	ldr	r3, [pc, #12]	; (80029b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	23e0      	movs	r3, #224	; 0xe0
 80029ae:	01db      	lsls	r3, r3, #7
 80029b0:	4013      	ands	r3, r2
}
 80029b2:	0018      	movs	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bd80      	pop	{r7, pc}
 80029b8:	40021000 	.word	0x40021000

080029bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d101      	bne.n	80029ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e2f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2201      	movs	r2, #1
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x1e>
 80029d8:	e07c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80029da:	4bc3      	ldr	r3, [pc, #780]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	2238      	movs	r2, #56	; 0x38
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80029e4:	4bc0      	ldr	r3, [pc, #768]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	2203      	movs	r2, #3
 80029ea:	4013      	ands	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d102      	bne.n	80029fa <HAL_RCC_OscConfig+0x3e>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d10b      	bne.n	8002a18 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a00:	4bb9      	ldr	r3, [pc, #740]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2380      	movs	r3, #128	; 0x80
 8002a06:	029b      	lsls	r3, r3, #10
 8002a08:	4013      	ands	r3, r2
 8002a0a:	d062      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x116>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d15e      	bne.n	8002ad2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e2ce      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	2380      	movs	r3, #128	; 0x80
 8002a1e:	025b      	lsls	r3, r3, #9
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x78>
 8002a24:	4bb0      	ldr	r3, [pc, #704]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4baf      	ldr	r3, [pc, #700]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a2a:	2180      	movs	r1, #128	; 0x80
 8002a2c:	0249      	lsls	r1, r1, #9
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e020      	b.n	8002a76 <HAL_RCC_OscConfig+0xba>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	685a      	ldr	r2, [r3, #4]
 8002a38:	23a0      	movs	r3, #160	; 0xa0
 8002a3a:	02db      	lsls	r3, r3, #11
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d10e      	bne.n	8002a5e <HAL_RCC_OscConfig+0xa2>
 8002a40:	4ba9      	ldr	r3, [pc, #676]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4ba8      	ldr	r3, [pc, #672]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a46:	2180      	movs	r1, #128	; 0x80
 8002a48:	02c9      	lsls	r1, r1, #11
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	4ba6      	ldr	r3, [pc, #664]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	4ba5      	ldr	r3, [pc, #660]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a54:	2180      	movs	r1, #128	; 0x80
 8002a56:	0249      	lsls	r1, r1, #9
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e00b      	b.n	8002a76 <HAL_RCC_OscConfig+0xba>
 8002a5e:	4ba2      	ldr	r3, [pc, #648]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	4ba1      	ldr	r3, [pc, #644]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a64:	49a1      	ldr	r1, [pc, #644]	; (8002cec <HAL_RCC_OscConfig+0x330>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	4b9f      	ldr	r3, [pc, #636]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a6c:	681a      	ldr	r2, [r3, #0]
 8002a6e:	4b9e      	ldr	r3, [pc, #632]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a70:	499f      	ldr	r1, [pc, #636]	; (8002cf0 <HAL_RCC_OscConfig+0x334>)
 8002a72:	400a      	ands	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d014      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7ff faaf 	bl	8001fe0 <HAL_GetTick>
 8002a82:	0003      	movs	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff faaa 	bl	8001fe0 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e28d      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a9a:	4b93      	ldr	r3, [pc, #588]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	029b      	lsls	r3, r3, #10
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xcc>
 8002aa6:	e015      	b.n	8002ad4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fa9a 	bl	8001fe0 <HAL_GetTick>
 8002aac:	0003      	movs	r3, r0
 8002aae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab2:	f7ff fa95 	bl	8001fe0 <HAL_GetTick>
 8002ab6:	0002      	movs	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b64      	cmp	r3, #100	; 0x64
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e278      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac4:	4b88      	ldr	r3, [pc, #544]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002ac6:	681a      	ldr	r2, [r3, #0]
 8002ac8:	2380      	movs	r3, #128	; 0x80
 8002aca:	029b      	lsls	r3, r3, #10
 8002acc:	4013      	ands	r3, r2
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0xf6>
 8002ad0:	e000      	b.n	8002ad4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	d100      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x124>
 8002ade:	e099      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ae0:	4b81      	ldr	r3, [pc, #516]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	2238      	movs	r2, #56	; 0x38
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002aea:	4b7f      	ldr	r3, [pc, #508]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002aec:	68db      	ldr	r3, [r3, #12]
 8002aee:	2203      	movs	r2, #3
 8002af0:	4013      	ands	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	2b10      	cmp	r3, #16
 8002af8:	d102      	bne.n	8002b00 <HAL_RCC_OscConfig+0x144>
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d002      	beq.n	8002b06 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d135      	bne.n	8002b72 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b06:	4b78      	ldr	r3, [pc, #480]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	2380      	movs	r3, #128	; 0x80
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d005      	beq.n	8002b1e <HAL_RCC_OscConfig+0x162>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e24b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1e:	4b72      	ldr	r3, [pc, #456]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a74      	ldr	r2, [pc, #464]	; (8002cf4 <HAL_RCC_OscConfig+0x338>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	0019      	movs	r1, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	021a      	lsls	r2, r3, #8
 8002b2e:	4b6e      	ldr	r3, [pc, #440]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b30:	430a      	orrs	r2, r1
 8002b32:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d112      	bne.n	8002b60 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b3a:	4b6b      	ldr	r3, [pc, #428]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a6e      	ldr	r2, [pc, #440]	; (8002cf8 <HAL_RCC_OscConfig+0x33c>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	0019      	movs	r1, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	4b67      	ldr	r3, [pc, #412]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b4a:	430a      	orrs	r2, r1
 8002b4c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002b4e:	4b66      	ldr	r3, [pc, #408]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	0adb      	lsrs	r3, r3, #11
 8002b54:	2207      	movs	r2, #7
 8002b56:	4013      	ands	r3, r2
 8002b58:	4a68      	ldr	r2, [pc, #416]	; (8002cfc <HAL_RCC_OscConfig+0x340>)
 8002b5a:	40da      	lsrs	r2, r3
 8002b5c:	4b68      	ldr	r3, [pc, #416]	; (8002d00 <HAL_RCC_OscConfig+0x344>)
 8002b5e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002b60:	4b68      	ldr	r3, [pc, #416]	; (8002d04 <HAL_RCC_OscConfig+0x348>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	0018      	movs	r0, r3
 8002b66:	f7ff f9df 	bl	8001f28 <HAL_InitTick>
 8002b6a:	1e03      	subs	r3, r0, #0
 8002b6c:	d051      	beq.n	8002c12 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e221      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d030      	beq.n	8002bdc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002b7a:	4b5b      	ldr	r3, [pc, #364]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a5e      	ldr	r2, [pc, #376]	; (8002cf8 <HAL_RCC_OscConfig+0x33c>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	0019      	movs	r1, r3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	4b57      	ldr	r3, [pc, #348]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002b8e:	4b56      	ldr	r3, [pc, #344]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002b94:	2180      	movs	r1, #128	; 0x80
 8002b96:	0049      	lsls	r1, r1, #1
 8002b98:	430a      	orrs	r2, r1
 8002b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9c:	f7ff fa20 	bl	8001fe0 <HAL_GetTick>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba6:	f7ff fa1b 	bl	8001fe0 <HAL_GetTick>
 8002baa:	0002      	movs	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e1fe      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bb8:	4b4b      	ldr	r3, [pc, #300]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2380      	movs	r3, #128	; 0x80
 8002bbe:	00db      	lsls	r3, r3, #3
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	d0f0      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bc4:	4b48      	ldr	r3, [pc, #288]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	4a4a      	ldr	r2, [pc, #296]	; (8002cf4 <HAL_RCC_OscConfig+0x338>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	0019      	movs	r1, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	021a      	lsls	r2, r3, #8
 8002bd4:	4b44      	ldr	r3, [pc, #272]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	605a      	str	r2, [r3, #4]
 8002bda:	e01b      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002bdc:	4b42      	ldr	r3, [pc, #264]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002be2:	4949      	ldr	r1, [pc, #292]	; (8002d08 <HAL_RCC_OscConfig+0x34c>)
 8002be4:	400a      	ands	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be8:	f7ff f9fa 	bl	8001fe0 <HAL_GetTick>
 8002bec:	0003      	movs	r3, r0
 8002bee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bf0:	e008      	b.n	8002c04 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bf2:	f7ff f9f5 	bl	8001fe0 <HAL_GetTick>
 8002bf6:	0002      	movs	r2, r0
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d901      	bls.n	8002c04 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e1d8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c04:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d1f0      	bne.n	8002bf2 <HAL_RCC_OscConfig+0x236>
 8002c10:	e000      	b.n	8002c14 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c12:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2208      	movs	r2, #8
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d047      	beq.n	8002cae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002c1e:	4b32      	ldr	r3, [pc, #200]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	2238      	movs	r2, #56	; 0x38
 8002c24:	4013      	ands	r3, r2
 8002c26:	2b18      	cmp	r3, #24
 8002c28:	d10a      	bne.n	8002c40 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002c2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2e:	2202      	movs	r2, #2
 8002c30:	4013      	ands	r3, r2
 8002c32:	d03c      	beq.n	8002cae <HAL_RCC_OscConfig+0x2f2>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d138      	bne.n	8002cae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e1ba      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	699b      	ldr	r3, [r3, #24]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d019      	beq.n	8002c7c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002c48:	4b27      	ldr	r3, [pc, #156]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c4a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c4c:	4b26      	ldr	r3, [pc, #152]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c4e:	2101      	movs	r1, #1
 8002c50:	430a      	orrs	r2, r1
 8002c52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c54:	f7ff f9c4 	bl	8001fe0 <HAL_GetTick>
 8002c58:	0003      	movs	r3, r0
 8002c5a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c5c:	e008      	b.n	8002c70 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c5e:	f7ff f9bf 	bl	8001fe0 <HAL_GetTick>
 8002c62:	0002      	movs	r2, r0
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d901      	bls.n	8002c70 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	e1a2      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c70:	4b1d      	ldr	r3, [pc, #116]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d0f1      	beq.n	8002c5e <HAL_RCC_OscConfig+0x2a2>
 8002c7a:	e018      	b.n	8002cae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002c7c:	4b1a      	ldr	r3, [pc, #104]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c80:	4b19      	ldr	r3, [pc, #100]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff f9aa 	bl	8001fe0 <HAL_GetTick>
 8002c8c:	0003      	movs	r3, r0
 8002c8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c90:	e008      	b.n	8002ca4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c92:	f7ff f9a5 	bl	8001fe0 <HAL_GetTick>
 8002c96:	0002      	movs	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d901      	bls.n	8002ca4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	e188      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ca4:	4b10      	ldr	r3, [pc, #64]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	2202      	movs	r2, #2
 8002caa:	4013      	ands	r3, r2
 8002cac:	d1f1      	bne.n	8002c92 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2204      	movs	r2, #4
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d100      	bne.n	8002cba <HAL_RCC_OscConfig+0x2fe>
 8002cb8:	e0c6      	b.n	8002e48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cba:	231f      	movs	r3, #31
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002cc2:	4b09      	ldr	r3, [pc, #36]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2238      	movs	r2, #56	; 0x38
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	d11e      	bne.n	8002d0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002cce:	4b06      	ldr	r3, [pc, #24]	; (8002ce8 <HAL_RCC_OscConfig+0x32c>)
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	d100      	bne.n	8002cda <HAL_RCC_OscConfig+0x31e>
 8002cd8:	e0b6      	b.n	8002e48 <HAL_RCC_OscConfig+0x48c>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d000      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x328>
 8002ce2:	e0b1      	b.n	8002e48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e166      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	fffeffff 	.word	0xfffeffff
 8002cf0:	fffbffff 	.word	0xfffbffff
 8002cf4:	ffff80ff 	.word	0xffff80ff
 8002cf8:	ffffc7ff 	.word	0xffffc7ff
 8002cfc:	00f42400 	.word	0x00f42400
 8002d00:	20000000 	.word	0x20000000
 8002d04:	20000034 	.word	0x20000034
 8002d08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d0c:	4bac      	ldr	r3, [pc, #688]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002d0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	055b      	lsls	r3, r3, #21
 8002d14:	4013      	ands	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_RCC_OscConfig+0x360>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_RCC_OscConfig+0x362>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d011      	beq.n	8002d46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002d22:	4ba7      	ldr	r3, [pc, #668]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002d24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d26:	4ba6      	ldr	r3, [pc, #664]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002d28:	2180      	movs	r1, #128	; 0x80
 8002d2a:	0549      	lsls	r1, r1, #21
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002d30:	4ba3      	ldr	r3, [pc, #652]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002d32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	055b      	lsls	r3, r3, #21
 8002d38:	4013      	ands	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002d3e:	231f      	movs	r3, #31
 8002d40:	18fb      	adds	r3, r7, r3
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d46:	4b9f      	ldr	r3, [pc, #636]	; (8002fc4 <HAL_RCC_OscConfig+0x608>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	2380      	movs	r3, #128	; 0x80
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4013      	ands	r3, r2
 8002d50:	d11a      	bne.n	8002d88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d52:	4b9c      	ldr	r3, [pc, #624]	; (8002fc4 <HAL_RCC_OscConfig+0x608>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b9b      	ldr	r3, [pc, #620]	; (8002fc4 <HAL_RCC_OscConfig+0x608>)
 8002d58:	2180      	movs	r1, #128	; 0x80
 8002d5a:	0049      	lsls	r1, r1, #1
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002d60:	f7ff f93e 	bl	8001fe0 <HAL_GetTick>
 8002d64:	0003      	movs	r3, r0
 8002d66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d68:	e008      	b.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d6a:	f7ff f939 	bl	8001fe0 <HAL_GetTick>
 8002d6e:	0002      	movs	r2, r0
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d901      	bls.n	8002d7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	e11c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d7c:	4b91      	ldr	r3, [pc, #580]	; (8002fc4 <HAL_RCC_OscConfig+0x608>)
 8002d7e:	681a      	ldr	r2, [r3, #0]
 8002d80:	2380      	movs	r3, #128	; 0x80
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d0f0      	beq.n	8002d6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d106      	bne.n	8002d9e <HAL_RCC_OscConfig+0x3e2>
 8002d90:	4b8b      	ldr	r3, [pc, #556]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002d92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d94:	4b8a      	ldr	r3, [pc, #552]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002d96:	2101      	movs	r1, #1
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d9c:	e01c      	b.n	8002dd8 <HAL_RCC_OscConfig+0x41c>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d10c      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x404>
 8002da6:	4b86      	ldr	r3, [pc, #536]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002da8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002daa:	4b85      	ldr	r3, [pc, #532]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002dac:	2104      	movs	r1, #4
 8002dae:	430a      	orrs	r2, r1
 8002db0:	65da      	str	r2, [r3, #92]	; 0x5c
 8002db2:	4b83      	ldr	r3, [pc, #524]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002db6:	4b82      	ldr	r3, [pc, #520]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002db8:	2101      	movs	r1, #1
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dbe:	e00b      	b.n	8002dd8 <HAL_RCC_OscConfig+0x41c>
 8002dc0:	4b7f      	ldr	r3, [pc, #508]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002dc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dc4:	4b7e      	ldr	r3, [pc, #504]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	438a      	bics	r2, r1
 8002dca:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dcc:	4b7c      	ldr	r3, [pc, #496]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002dce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dd0:	4b7b      	ldr	r3, [pc, #492]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002dd2:	2104      	movs	r1, #4
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d014      	beq.n	8002e0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de0:	f7ff f8fe 	bl	8001fe0 <HAL_GetTick>
 8002de4:	0003      	movs	r3, r0
 8002de6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de8:	e009      	b.n	8002dfe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dea:	f7ff f8f9 	bl	8001fe0 <HAL_GetTick>
 8002dee:	0002      	movs	r2, r0
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	4a74      	ldr	r2, [pc, #464]	; (8002fc8 <HAL_RCC_OscConfig+0x60c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e0db      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfe:	4b70      	ldr	r3, [pc, #448]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e02:	2202      	movs	r2, #2
 8002e04:	4013      	ands	r3, r2
 8002e06:	d0f0      	beq.n	8002dea <HAL_RCC_OscConfig+0x42e>
 8002e08:	e013      	b.n	8002e32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7ff f8e9 	bl	8001fe0 <HAL_GetTick>
 8002e0e:	0003      	movs	r3, r0
 8002e10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e12:	e009      	b.n	8002e28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e14:	f7ff f8e4 	bl	8001fe0 <HAL_GetTick>
 8002e18:	0002      	movs	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	4a6a      	ldr	r2, [pc, #424]	; (8002fc8 <HAL_RCC_OscConfig+0x60c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0c6      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e28:	4b65      	ldr	r3, [pc, #404]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002e32:	231f      	movs	r3, #31
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002e3c:	4b60      	ldr	r3, [pc, #384]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e40:	4b5f      	ldr	r3, [pc, #380]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e42:	4962      	ldr	r1, [pc, #392]	; (8002fcc <HAL_RCC_OscConfig+0x610>)
 8002e44:	400a      	ands	r2, r1
 8002e46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	69db      	ldr	r3, [r3, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d100      	bne.n	8002e52 <HAL_RCC_OscConfig+0x496>
 8002e50:	e0b0      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e52:	4b5b      	ldr	r3, [pc, #364]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	2238      	movs	r2, #56	; 0x38
 8002e58:	4013      	ands	r3, r2
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d100      	bne.n	8002e60 <HAL_RCC_OscConfig+0x4a4>
 8002e5e:	e078      	b.n	8002f52 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d153      	bne.n	8002f10 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e68:	4b55      	ldr	r3, [pc, #340]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	4b54      	ldr	r3, [pc, #336]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e6e:	4958      	ldr	r1, [pc, #352]	; (8002fd0 <HAL_RCC_OscConfig+0x614>)
 8002e70:	400a      	ands	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e74:	f7ff f8b4 	bl	8001fe0 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e7e:	f7ff f8af 	bl	8001fe0 <HAL_GetTick>
 8002e82:	0002      	movs	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e092      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e90:	4b4b      	ldr	r3, [pc, #300]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2380      	movs	r3, #128	; 0x80
 8002e96:	049b      	lsls	r3, r3, #18
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d1f0      	bne.n	8002e7e <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e9c:	4b48      	ldr	r3, [pc, #288]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a4c      	ldr	r2, [pc, #304]	; (8002fd4 <HAL_RCC_OscConfig+0x618>)
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1a      	ldr	r2, [r3, #32]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	431a      	orrs	r2, r3
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	4b3e      	ldr	r3, [pc, #248]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002eca:	4b3d      	ldr	r3, [pc, #244]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b3c      	ldr	r3, [pc, #240]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	0449      	lsls	r1, r1, #17
 8002ed4:	430a      	orrs	r2, r1
 8002ed6:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002ed8:	4b39      	ldr	r3, [pc, #228]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	4b38      	ldr	r3, [pc, #224]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002ede:	2180      	movs	r1, #128	; 0x80
 8002ee0:	0549      	lsls	r1, r1, #21
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee6:	f7ff f87b 	bl	8001fe0 <HAL_GetTick>
 8002eea:	0003      	movs	r3, r0
 8002eec:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7ff f876 	bl	8001fe0 <HAL_GetTick>
 8002ef4:	0002      	movs	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e059      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f02:	4b2f      	ldr	r3, [pc, #188]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	2380      	movs	r3, #128	; 0x80
 8002f08:	049b      	lsls	r3, r3, #18
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x534>
 8002f0e:	e051      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f10:	4b2b      	ldr	r3, [pc, #172]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4b2a      	ldr	r3, [pc, #168]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f16:	492e      	ldr	r1, [pc, #184]	; (8002fd0 <HAL_RCC_OscConfig+0x614>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7ff f860 	bl	8001fe0 <HAL_GetTick>
 8002f20:	0003      	movs	r3, r0
 8002f22:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f26:	f7ff f85b 	bl	8001fe0 <HAL_GetTick>
 8002f2a:	0002      	movs	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e03e      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f38:	4b21      	ldr	r3, [pc, #132]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	2380      	movs	r3, #128	; 0x80
 8002f3e:	049b      	lsls	r3, r3, #18
 8002f40:	4013      	ands	r3, r2
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002f44:	4b1e      	ldr	r3, [pc, #120]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	4b1d      	ldr	r3, [pc, #116]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f4a:	4923      	ldr	r1, [pc, #140]	; (8002fd8 <HAL_RCC_OscConfig+0x61c>)
 8002f4c:	400a      	ands	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]
 8002f50:	e030      	b.n	8002fb4 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02b      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002f5e:	4b18      	ldr	r3, [pc, #96]	; (8002fc0 <HAL_RCC_OscConfig+0x604>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2203      	movs	r2, #3
 8002f68:	401a      	ands	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d11e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2270      	movs	r2, #112	; 0x70
 8002f76:	401a      	ands	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d117      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f80:	697a      	ldr	r2, [r7, #20]
 8002f82:	23fe      	movs	r3, #254	; 0xfe
 8002f84:	01db      	lsls	r3, r3, #7
 8002f86:	401a      	ands	r2, r3
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f8c:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d10e      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	23f8      	movs	r3, #248	; 0xf8
 8002f96:	039b      	lsls	r3, r3, #14
 8002f98:	401a      	ands	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d106      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	0f5b      	lsrs	r3, r3, #29
 8002fa6:	075a      	lsls	r2, r3, #29
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	b008      	add	sp, #32
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	46c0      	nop			; (mov r8, r8)
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	00001388 	.word	0x00001388
 8002fcc:	efffffff 	.word	0xefffffff
 8002fd0:	feffffff 	.word	0xfeffffff
 8002fd4:	1fc1808c 	.word	0x1fc1808c
 8002fd8:	effefffc 	.word	0xeffefffc

08002fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0e9      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ff0:	4b76      	ldr	r3, [pc, #472]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2207      	movs	r2, #7
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d91e      	bls.n	800303c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2207      	movs	r2, #7
 8003004:	4393      	bics	r3, r2
 8003006:	0019      	movs	r1, r3
 8003008:	4b70      	ldr	r3, [pc, #448]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003010:	f7fe ffe6 	bl	8001fe0 <HAL_GetTick>
 8003014:	0003      	movs	r3, r0
 8003016:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003018:	e009      	b.n	800302e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800301a:	f7fe ffe1 	bl	8001fe0 <HAL_GetTick>
 800301e:	0002      	movs	r2, r0
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	4a6a      	ldr	r2, [pc, #424]	; (80031d0 <HAL_RCC_ClockConfig+0x1f4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d901      	bls.n	800302e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e0ca      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2207      	movs	r2, #7
 8003034:	4013      	ands	r3, r2
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	429a      	cmp	r2, r3
 800303a:	d1ee      	bne.n	800301a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	4013      	ands	r3, r2
 8003044:	d015      	beq.n	8003072 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2204      	movs	r2, #4
 800304c:	4013      	ands	r3, r2
 800304e:	d006      	beq.n	800305e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003050:	4b60      	ldr	r3, [pc, #384]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	4b5f      	ldr	r3, [pc, #380]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003056:	21e0      	movs	r1, #224	; 0xe0
 8003058:	01c9      	lsls	r1, r1, #7
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800305e:	4b5d      	ldr	r3, [pc, #372]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	4a5d      	ldr	r2, [pc, #372]	; (80031d8 <HAL_RCC_ClockConfig+0x1fc>)
 8003064:	4013      	ands	r3, r2
 8003066:	0019      	movs	r1, r3
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	4b59      	ldr	r3, [pc, #356]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	4013      	ands	r3, r2
 800307a:	d057      	beq.n	800312c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d107      	bne.n	8003094 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003084:	4b53      	ldr	r3, [pc, #332]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	4013      	ands	r3, r2
 800308e:	d12b      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e097      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d107      	bne.n	80030ac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800309c:	4b4d      	ldr	r3, [pc, #308]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	2380      	movs	r3, #128	; 0x80
 80030a2:	049b      	lsls	r3, r3, #18
 80030a4:	4013      	ands	r3, r2
 80030a6:	d11f      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e08b      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030b4:	4b47      	ldr	r3, [pc, #284]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4013      	ands	r3, r2
 80030be:	d113      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e07f      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2b03      	cmp	r3, #3
 80030ca:	d106      	bne.n	80030da <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80030cc:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 80030ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d0:	2202      	movs	r2, #2
 80030d2:	4013      	ands	r3, r2
 80030d4:	d108      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e074      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80030da:	4b3e      	ldr	r3, [pc, #248]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2202      	movs	r2, #2
 80030e0:	4013      	ands	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e06d      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030e8:	4b3a      	ldr	r3, [pc, #232]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2207      	movs	r2, #7
 80030ee:	4393      	bics	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	4b37      	ldr	r3, [pc, #220]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 80030f8:	430a      	orrs	r2, r1
 80030fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe ff70 	bl	8001fe0 <HAL_GetTick>
 8003100:	0003      	movs	r3, r0
 8003102:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003104:	e009      	b.n	800311a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003106:	f7fe ff6b 	bl	8001fe0 <HAL_GetTick>
 800310a:	0002      	movs	r2, r0
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	4a2f      	ldr	r2, [pc, #188]	; (80031d0 <HAL_RCC_ClockConfig+0x1f4>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e054      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	4b2e      	ldr	r3, [pc, #184]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2238      	movs	r2, #56	; 0x38
 8003120:	401a      	ands	r2, r3
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	00db      	lsls	r3, r3, #3
 8003128:	429a      	cmp	r2, r3
 800312a:	d1ec      	bne.n	8003106 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800312c:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	2207      	movs	r2, #7
 8003132:	4013      	ands	r3, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	429a      	cmp	r2, r3
 8003138:	d21e      	bcs.n	8003178 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800313a:	4b24      	ldr	r3, [pc, #144]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2207      	movs	r2, #7
 8003140:	4393      	bics	r3, r2
 8003142:	0019      	movs	r1, r3
 8003144:	4b21      	ldr	r3, [pc, #132]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 8003146:	683a      	ldr	r2, [r7, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800314c:	f7fe ff48 	bl	8001fe0 <HAL_GetTick>
 8003150:	0003      	movs	r3, r0
 8003152:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003154:	e009      	b.n	800316a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003156:	f7fe ff43 	bl	8001fe0 <HAL_GetTick>
 800315a:	0002      	movs	r2, r0
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	4a1b      	ldr	r2, [pc, #108]	; (80031d0 <HAL_RCC_ClockConfig+0x1f4>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e02c      	b.n	80031c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <HAL_RCC_ClockConfig+0x1f0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2207      	movs	r2, #7
 8003170:	4013      	ands	r3, r2
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d1ee      	bne.n	8003156 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2204      	movs	r2, #4
 800317e:	4013      	ands	r3, r2
 8003180:	d009      	beq.n	8003196 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003182:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <HAL_RCC_ClockConfig+0x200>)
 8003188:	4013      	ands	r3, r2
 800318a:	0019      	movs	r1, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68da      	ldr	r2, [r3, #12]
 8003190:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003196:	f000 f829 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800319a:	0001      	movs	r1, r0
 800319c:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCC_ClockConfig+0x1f8>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	0a1b      	lsrs	r3, r3, #8
 80031a2:	220f      	movs	r2, #15
 80031a4:	401a      	ands	r2, r3
 80031a6:	4b0e      	ldr	r3, [pc, #56]	; (80031e0 <HAL_RCC_ClockConfig+0x204>)
 80031a8:	0092      	lsls	r2, r2, #2
 80031aa:	58d3      	ldr	r3, [r2, r3]
 80031ac:	221f      	movs	r2, #31
 80031ae:	4013      	ands	r3, r2
 80031b0:	000a      	movs	r2, r1
 80031b2:	40da      	lsrs	r2, r3
 80031b4:	4b0b      	ldr	r3, [pc, #44]	; (80031e4 <HAL_RCC_ClockConfig+0x208>)
 80031b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x20c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fe feb3 	bl	8001f28 <HAL_InitTick>
 80031c2:	0003      	movs	r3, r0
}
 80031c4:	0018      	movs	r0, r3
 80031c6:	46bd      	mov	sp, r7
 80031c8:	b004      	add	sp, #16
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40022000 	.word	0x40022000
 80031d0:	00001388 	.word	0x00001388
 80031d4:	40021000 	.word	0x40021000
 80031d8:	fffff0ff 	.word	0xfffff0ff
 80031dc:	ffff8fff 	.word	0xffff8fff
 80031e0:	08007ecc 	.word	0x08007ecc
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000034 	.word	0x20000034

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80031f2:	4b3c      	ldr	r3, [pc, #240]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	2238      	movs	r2, #56	; 0x38
 80031f8:	4013      	ands	r3, r2
 80031fa:	d10f      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80031fc:	4b39      	ldr	r3, [pc, #228]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	0adb      	lsrs	r3, r3, #11
 8003202:	2207      	movs	r2, #7
 8003204:	4013      	ands	r3, r2
 8003206:	2201      	movs	r2, #1
 8003208:	409a      	lsls	r2, r3
 800320a:	0013      	movs	r3, r2
 800320c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800320e:	6839      	ldr	r1, [r7, #0]
 8003210:	4835      	ldr	r0, [pc, #212]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003212:	f7fc ff81 	bl	8000118 <__udivsi3>
 8003216:	0003      	movs	r3, r0
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	e05d      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800321c:	4b31      	ldr	r3, [pc, #196]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2238      	movs	r2, #56	; 0x38
 8003222:	4013      	ands	r3, r2
 8003224:	2b08      	cmp	r3, #8
 8003226:	d102      	bne.n	800322e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003228:	4b2f      	ldr	r3, [pc, #188]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800322a:	613b      	str	r3, [r7, #16]
 800322c:	e054      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800322e:	4b2d      	ldr	r3, [pc, #180]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	2238      	movs	r2, #56	; 0x38
 8003234:	4013      	ands	r3, r2
 8003236:	2b10      	cmp	r3, #16
 8003238:	d138      	bne.n	80032ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800323a:	4b2a      	ldr	r3, [pc, #168]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	2203      	movs	r2, #3
 8003240:	4013      	ands	r3, r2
 8003242:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003244:	4b27      	ldr	r3, [pc, #156]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	2207      	movs	r2, #7
 800324c:	4013      	ands	r3, r2
 800324e:	3301      	adds	r3, #1
 8003250:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b03      	cmp	r3, #3
 8003256:	d10d      	bne.n	8003274 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	4823      	ldr	r0, [pc, #140]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 800325c:	f7fc ff5c 	bl	8000118 <__udivsi3>
 8003260:	0003      	movs	r3, r0
 8003262:	0019      	movs	r1, r3
 8003264:	4b1f      	ldr	r3, [pc, #124]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	0a1b      	lsrs	r3, r3, #8
 800326a:	227f      	movs	r2, #127	; 0x7f
 800326c:	4013      	ands	r3, r2
 800326e:	434b      	muls	r3, r1
 8003270:	617b      	str	r3, [r7, #20]
        break;
 8003272:	e00d      	b.n	8003290 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003274:	68b9      	ldr	r1, [r7, #8]
 8003276:	481c      	ldr	r0, [pc, #112]	; (80032e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003278:	f7fc ff4e 	bl	8000118 <__udivsi3>
 800327c:	0003      	movs	r3, r0
 800327e:	0019      	movs	r1, r3
 8003280:	4b18      	ldr	r3, [pc, #96]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	227f      	movs	r2, #127	; 0x7f
 8003288:	4013      	ands	r3, r2
 800328a:	434b      	muls	r3, r1
 800328c:	617b      	str	r3, [r7, #20]
        break;
 800328e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003290:	4b14      	ldr	r3, [pc, #80]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0f5b      	lsrs	r3, r3, #29
 8003296:	2207      	movs	r2, #7
 8003298:	4013      	ands	r3, r2
 800329a:	3301      	adds	r3, #1
 800329c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800329e:	6879      	ldr	r1, [r7, #4]
 80032a0:	6978      	ldr	r0, [r7, #20]
 80032a2:	f7fc ff39 	bl	8000118 <__udivsi3>
 80032a6:	0003      	movs	r3, r0
 80032a8:	613b      	str	r3, [r7, #16]
 80032aa:	e015      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80032ac:	4b0d      	ldr	r3, [pc, #52]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	2238      	movs	r2, #56	; 0x38
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b20      	cmp	r3, #32
 80032b6:	d103      	bne.n	80032c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80032b8:	2380      	movs	r3, #128	; 0x80
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	e00b      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80032c0:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2238      	movs	r2, #56	; 0x38
 80032c6:	4013      	ands	r3, r2
 80032c8:	2b18      	cmp	r3, #24
 80032ca:	d103      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80032cc:	23fa      	movs	r3, #250	; 0xfa
 80032ce:	01db      	lsls	r3, r3, #7
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	e001      	b.n	80032d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80032d8:	693b      	ldr	r3, [r7, #16]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b006      	add	sp, #24
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	46c0      	nop			; (mov r8, r8)
 80032e4:	40021000 	.word	0x40021000
 80032e8:	00f42400 	.word	0x00f42400

080032ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032f0:	4b02      	ldr	r3, [pc, #8]	; (80032fc <HAL_RCC_GetHCLKFreq+0x10>)
 80032f2:	681b      	ldr	r3, [r3, #0]
}
 80032f4:	0018      	movs	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	20000000 	.word	0x20000000

08003300 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003304:	f7ff fff2 	bl	80032ec <HAL_RCC_GetHCLKFreq>
 8003308:	0004      	movs	r4, r0
 800330a:	f7ff fb4b 	bl	80029a4 <LL_RCC_GetAPB1Prescaler>
 800330e:	0003      	movs	r3, r0
 8003310:	0b1a      	lsrs	r2, r3, #12
 8003312:	4b05      	ldr	r3, [pc, #20]	; (8003328 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003314:	0092      	lsls	r2, r2, #2
 8003316:	58d3      	ldr	r3, [r2, r3]
 8003318:	221f      	movs	r2, #31
 800331a:	4013      	ands	r3, r2
 800331c:	40dc      	lsrs	r4, r3
 800331e:	0023      	movs	r3, r4
}
 8003320:	0018      	movs	r0, r3
 8003322:	46bd      	mov	sp, r7
 8003324:	bdb0      	pop	{r4, r5, r7, pc}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	08007f0c 	.word	0x08007f0c

0800332c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b086      	sub	sp, #24
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003334:	2313      	movs	r3, #19
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2200      	movs	r2, #0
 800333a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800333c:	2312      	movs	r3, #18
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	029b      	lsls	r3, r3, #10
 800334c:	4013      	ands	r3, r2
 800334e:	d100      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003350:	e0a3      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003352:	2011      	movs	r0, #17
 8003354:	183b      	adds	r3, r7, r0
 8003356:	2200      	movs	r2, #0
 8003358:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800335a:	4b86      	ldr	r3, [pc, #536]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800335c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800335e:	2380      	movs	r3, #128	; 0x80
 8003360:	055b      	lsls	r3, r3, #21
 8003362:	4013      	ands	r3, r2
 8003364:	d110      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003366:	4b83      	ldr	r3, [pc, #524]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003368:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800336a:	4b82      	ldr	r3, [pc, #520]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800336c:	2180      	movs	r1, #128	; 0x80
 800336e:	0549      	lsls	r1, r1, #21
 8003370:	430a      	orrs	r2, r1
 8003372:	63da      	str	r2, [r3, #60]	; 0x3c
 8003374:	4b7f      	ldr	r3, [pc, #508]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003376:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003378:	2380      	movs	r3, #128	; 0x80
 800337a:	055b      	lsls	r3, r3, #21
 800337c:	4013      	ands	r3, r2
 800337e:	60bb      	str	r3, [r7, #8]
 8003380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003382:	183b      	adds	r3, r7, r0
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003388:	4b7b      	ldr	r3, [pc, #492]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	4b7a      	ldr	r3, [pc, #488]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800338e:	2180      	movs	r1, #128	; 0x80
 8003390:	0049      	lsls	r1, r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003396:	f7fe fe23 	bl	8001fe0 <HAL_GetTick>
 800339a:	0003      	movs	r3, r0
 800339c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800339e:	e00b      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033a0:	f7fe fe1e 	bl	8001fe0 <HAL_GetTick>
 80033a4:	0002      	movs	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d904      	bls.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80033ae:	2313      	movs	r3, #19
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	2203      	movs	r2, #3
 80033b4:	701a      	strb	r2, [r3, #0]
        break;
 80033b6:	e005      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80033b8:	4b6f      	ldr	r3, [pc, #444]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	2380      	movs	r3, #128	; 0x80
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	4013      	ands	r3, r2
 80033c2:	d0ed      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80033c4:	2313      	movs	r3, #19
 80033c6:	18fb      	adds	r3, r7, r3
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d154      	bne.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033ce:	4b69      	ldr	r3, [pc, #420]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033d2:	23c0      	movs	r3, #192	; 0xc0
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4013      	ands	r3, r2
 80033d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d019      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	697a      	ldr	r2, [r7, #20]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d014      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80033f0:	4013      	ands	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80033f4:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033f6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033f8:	4b5e      	ldr	r3, [pc, #376]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80033fa:	2180      	movs	r1, #128	; 0x80
 80033fc:	0249      	lsls	r1, r1, #9
 80033fe:	430a      	orrs	r2, r1
 8003400:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003404:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003406:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003408:	495d      	ldr	r1, [pc, #372]	; (8003580 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800340a:	400a      	ands	r2, r1
 800340c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800340e:	4b59      	ldr	r3, [pc, #356]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	2201      	movs	r2, #1
 8003418:	4013      	ands	r3, r2
 800341a:	d016      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800341c:	f7fe fde0 	bl	8001fe0 <HAL_GetTick>
 8003420:	0003      	movs	r3, r0
 8003422:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003424:	e00c      	b.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003426:	f7fe fddb 	bl	8001fe0 <HAL_GetTick>
 800342a:	0002      	movs	r2, r0
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1ad3      	subs	r3, r2, r3
 8003430:	4a54      	ldr	r2, [pc, #336]	; (8003584 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d904      	bls.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003436:	2313      	movs	r3, #19
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	2203      	movs	r2, #3
 800343c:	701a      	strb	r2, [r3, #0]
            break;
 800343e:	e004      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003440:	4b4c      	ldr	r3, [pc, #304]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003444:	2202      	movs	r2, #2
 8003446:	4013      	ands	r3, r2
 8003448:	d0ed      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800344a:	2313      	movs	r3, #19
 800344c:	18fb      	adds	r3, r7, r3
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d10a      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003454:	4b47      	ldr	r3, [pc, #284]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003458:	4a48      	ldr	r2, [pc, #288]	; (800357c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800345a:	4013      	ands	r3, r2
 800345c:	0019      	movs	r1, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699a      	ldr	r2, [r3, #24]
 8003462:	4b44      	ldr	r3, [pc, #272]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003464:	430a      	orrs	r2, r1
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c
 8003468:	e00c      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800346a:	2312      	movs	r3, #18
 800346c:	18fb      	adds	r3, r7, r3
 800346e:	2213      	movs	r2, #19
 8003470:	18ba      	adds	r2, r7, r2
 8003472:	7812      	ldrb	r2, [r2, #0]
 8003474:	701a      	strb	r2, [r3, #0]
 8003476:	e005      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003478:	2312      	movs	r3, #18
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	2213      	movs	r2, #19
 800347e:	18ba      	adds	r2, r7, r2
 8003480:	7812      	ldrb	r2, [r2, #0]
 8003482:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003484:	2311      	movs	r3, #17
 8003486:	18fb      	adds	r3, r7, r3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	2b01      	cmp	r3, #1
 800348c:	d105      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800348e:	4b39      	ldr	r3, [pc, #228]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003490:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003492:	4b38      	ldr	r3, [pc, #224]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003494:	493c      	ldr	r1, [pc, #240]	; (8003588 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003496:	400a      	ands	r2, r1
 8003498:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2201      	movs	r2, #1
 80034a0:	4013      	ands	r3, r2
 80034a2:	d009      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034a4:	4b33      	ldr	r3, [pc, #204]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a8:	2203      	movs	r2, #3
 80034aa:	4393      	bics	r3, r2
 80034ac:	0019      	movs	r1, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4b30      	ldr	r3, [pc, #192]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034b4:	430a      	orrs	r2, r1
 80034b6:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2202      	movs	r2, #2
 80034be:	4013      	ands	r3, r2
 80034c0:	d009      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034c2:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c6:	220c      	movs	r2, #12
 80034c8:	4393      	bics	r3, r2
 80034ca:	0019      	movs	r1, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	4b28      	ldr	r3, [pc, #160]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034d2:	430a      	orrs	r2, r1
 80034d4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2220      	movs	r2, #32
 80034dc:	4013      	ands	r3, r2
 80034de:	d009      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e0:	4b24      	ldr	r3, [pc, #144]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034e6:	4013      	ands	r3, r2
 80034e8:	0019      	movs	r1, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	68da      	ldr	r2, [r3, #12]
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80034f0:	430a      	orrs	r2, r1
 80034f2:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	2380      	movs	r3, #128	; 0x80
 80034fa:	01db      	lsls	r3, r3, #7
 80034fc:	4013      	ands	r3, r2
 80034fe:	d015      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003500:	4b1c      	ldr	r3, [pc, #112]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	0899      	lsrs	r1, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695a      	ldr	r2, [r3, #20]
 800350c:	4b19      	ldr	r3, [pc, #100]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800350e:	430a      	orrs	r2, r1
 8003510:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	2380      	movs	r3, #128	; 0x80
 8003518:	05db      	lsls	r3, r3, #23
 800351a:	429a      	cmp	r2, r3
 800351c:	d106      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	4b14      	ldr	r3, [pc, #80]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003524:	2180      	movs	r1, #128	; 0x80
 8003526:	0249      	lsls	r1, r1, #9
 8003528:	430a      	orrs	r2, r1
 800352a:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	2380      	movs	r3, #128	; 0x80
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	4013      	ands	r3, r2
 8003536:	d016      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003538:	4b0e      	ldr	r3, [pc, #56]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800353a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353c:	4a14      	ldr	r2, [pc, #80]	; (8003590 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800353e:	4013      	ands	r3, r2
 8003540:	0019      	movs	r1, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	691a      	ldr	r2, [r3, #16]
 8003546:	4b0b      	ldr	r3, [pc, #44]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8003548:	430a      	orrs	r2, r1
 800354a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	2380      	movs	r3, #128	; 0x80
 8003552:	01db      	lsls	r3, r3, #7
 8003554:	429a      	cmp	r2, r3
 8003556:	d106      	bne.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003558:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800355a:	68da      	ldr	r2, [r3, #12]
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800355e:	2180      	movs	r1, #128	; 0x80
 8003560:	0249      	lsls	r1, r1, #9
 8003562:	430a      	orrs	r2, r1
 8003564:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003566:	2312      	movs	r3, #18
 8003568:	18fb      	adds	r3, r7, r3
 800356a:	781b      	ldrb	r3, [r3, #0]
}
 800356c:	0018      	movs	r0, r3
 800356e:	46bd      	mov	sp, r7
 8003570:	b006      	add	sp, #24
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	40007000 	.word	0x40007000
 800357c:	fffffcff 	.word	0xfffffcff
 8003580:	fffeffff 	.word	0xfffeffff
 8003584:	00001388 	.word	0x00001388
 8003588:	efffffff 	.word	0xefffffff
 800358c:	ffffcfff 	.word	0xffffcfff
 8003590:	ffff3fff 	.word	0xffff3fff

08003594 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	e04a      	b.n	800363c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	223d      	movs	r2, #61	; 0x3d
 80035aa:	5c9b      	ldrb	r3, [r3, r2]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d107      	bne.n	80035c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	223c      	movs	r2, #60	; 0x3c
 80035b6:	2100      	movs	r1, #0
 80035b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd fdb3 	bl	8001128 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	223d      	movs	r2, #61	; 0x3d
 80035c6:	2102      	movs	r1, #2
 80035c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	0019      	movs	r1, r3
 80035d4:	0010      	movs	r0, r2
 80035d6:	f000 fb19 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2248      	movs	r2, #72	; 0x48
 80035de:	2101      	movs	r1, #1
 80035e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	223e      	movs	r2, #62	; 0x3e
 80035e6:	2101      	movs	r1, #1
 80035e8:	5499      	strb	r1, [r3, r2]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	223f      	movs	r2, #63	; 0x3f
 80035ee:	2101      	movs	r1, #1
 80035f0:	5499      	strb	r1, [r3, r2]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2240      	movs	r2, #64	; 0x40
 80035f6:	2101      	movs	r1, #1
 80035f8:	5499      	strb	r1, [r3, r2]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2241      	movs	r2, #65	; 0x41
 80035fe:	2101      	movs	r1, #1
 8003600:	5499      	strb	r1, [r3, r2]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2242      	movs	r2, #66	; 0x42
 8003606:	2101      	movs	r1, #1
 8003608:	5499      	strb	r1, [r3, r2]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2243      	movs	r2, #67	; 0x43
 800360e:	2101      	movs	r1, #1
 8003610:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2244      	movs	r2, #68	; 0x44
 8003616:	2101      	movs	r1, #1
 8003618:	5499      	strb	r1, [r3, r2]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2245      	movs	r2, #69	; 0x45
 800361e:	2101      	movs	r1, #1
 8003620:	5499      	strb	r1, [r3, r2]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2246      	movs	r2, #70	; 0x46
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2247      	movs	r2, #71	; 0x47
 800362e:	2101      	movs	r1, #1
 8003630:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	223d      	movs	r2, #61	; 0x3d
 8003636:	2101      	movs	r1, #1
 8003638:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800363a:	2300      	movs	r3, #0
}
 800363c:	0018      	movs	r0, r3
 800363e:	46bd      	mov	sp, r7
 8003640:	b002      	add	sp, #8
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e04a      	b.n	80036ec <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	223d      	movs	r2, #61	; 0x3d
 800365a:	5c9b      	ldrb	r3, [r3, r2]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d107      	bne.n	8003672 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	223c      	movs	r2, #60	; 0x3c
 8003666:	2100      	movs	r1, #0
 8003668:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	0018      	movs	r0, r3
 800366e:	f7fd fdcf 	bl	8001210 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	223d      	movs	r2, #61	; 0x3d
 8003676:	2102      	movs	r1, #2
 8003678:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3304      	adds	r3, #4
 8003682:	0019      	movs	r1, r3
 8003684:	0010      	movs	r0, r2
 8003686:	f000 fac1 	bl	8003c0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2248      	movs	r2, #72	; 0x48
 800368e:	2101      	movs	r1, #1
 8003690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	223e      	movs	r2, #62	; 0x3e
 8003696:	2101      	movs	r1, #1
 8003698:	5499      	strb	r1, [r3, r2]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	223f      	movs	r2, #63	; 0x3f
 800369e:	2101      	movs	r1, #1
 80036a0:	5499      	strb	r1, [r3, r2]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2240      	movs	r2, #64	; 0x40
 80036a6:	2101      	movs	r1, #1
 80036a8:	5499      	strb	r1, [r3, r2]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2241      	movs	r2, #65	; 0x41
 80036ae:	2101      	movs	r1, #1
 80036b0:	5499      	strb	r1, [r3, r2]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2242      	movs	r2, #66	; 0x42
 80036b6:	2101      	movs	r1, #1
 80036b8:	5499      	strb	r1, [r3, r2]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2243      	movs	r2, #67	; 0x43
 80036be:	2101      	movs	r1, #1
 80036c0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2244      	movs	r2, #68	; 0x44
 80036c6:	2101      	movs	r1, #1
 80036c8:	5499      	strb	r1, [r3, r2]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2245      	movs	r2, #69	; 0x45
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2246      	movs	r2, #70	; 0x46
 80036d6:	2101      	movs	r1, #1
 80036d8:	5499      	strb	r1, [r3, r2]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2247      	movs	r2, #71	; 0x47
 80036de:	2101      	movs	r1, #1
 80036e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	223d      	movs	r2, #61	; 0x3d
 80036e6:	2101      	movs	r1, #1
 80036e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	0018      	movs	r0, r3
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <HAL_TIM_PWM_Start+0x22>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	223e      	movs	r2, #62	; 0x3e
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	b2db      	uxtb	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	1e5a      	subs	r2, r3, #1
 8003710:	4193      	sbcs	r3, r2
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e037      	b.n	8003786 <HAL_TIM_PWM_Start+0x92>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b04      	cmp	r3, #4
 800371a:	d108      	bne.n	800372e <HAL_TIM_PWM_Start+0x3a>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	223f      	movs	r2, #63	; 0x3f
 8003720:	5c9b      	ldrb	r3, [r3, r2]
 8003722:	b2db      	uxtb	r3, r3
 8003724:	3b01      	subs	r3, #1
 8003726:	1e5a      	subs	r2, r3, #1
 8003728:	4193      	sbcs	r3, r2
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e02b      	b.n	8003786 <HAL_TIM_PWM_Start+0x92>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d108      	bne.n	8003746 <HAL_TIM_PWM_Start+0x52>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2240      	movs	r2, #64	; 0x40
 8003738:	5c9b      	ldrb	r3, [r3, r2]
 800373a:	b2db      	uxtb	r3, r3
 800373c:	3b01      	subs	r3, #1
 800373e:	1e5a      	subs	r2, r3, #1
 8003740:	4193      	sbcs	r3, r2
 8003742:	b2db      	uxtb	r3, r3
 8003744:	e01f      	b.n	8003786 <HAL_TIM_PWM_Start+0x92>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2b0c      	cmp	r3, #12
 800374a:	d108      	bne.n	800375e <HAL_TIM_PWM_Start+0x6a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2241      	movs	r2, #65	; 0x41
 8003750:	5c9b      	ldrb	r3, [r3, r2]
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3b01      	subs	r3, #1
 8003756:	1e5a      	subs	r2, r3, #1
 8003758:	4193      	sbcs	r3, r2
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e013      	b.n	8003786 <HAL_TIM_PWM_Start+0x92>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b10      	cmp	r3, #16
 8003762:	d108      	bne.n	8003776 <HAL_TIM_PWM_Start+0x82>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2242      	movs	r2, #66	; 0x42
 8003768:	5c9b      	ldrb	r3, [r3, r2]
 800376a:	b2db      	uxtb	r3, r3
 800376c:	3b01      	subs	r3, #1
 800376e:	1e5a      	subs	r2, r3, #1
 8003770:	4193      	sbcs	r3, r2
 8003772:	b2db      	uxtb	r3, r3
 8003774:	e007      	b.n	8003786 <HAL_TIM_PWM_Start+0x92>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2243      	movs	r2, #67	; 0x43
 800377a:	5c9b      	ldrb	r3, [r3, r2]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	3b01      	subs	r3, #1
 8003780:	1e5a      	subs	r2, r3, #1
 8003782:	4193      	sbcs	r3, r2
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e085      	b.n	800389a <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d104      	bne.n	800379e <HAL_TIM_PWM_Start+0xaa>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	223e      	movs	r2, #62	; 0x3e
 8003798:	2102      	movs	r1, #2
 800379a:	5499      	strb	r1, [r3, r2]
 800379c:	e023      	b.n	80037e6 <HAL_TIM_PWM_Start+0xf2>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d104      	bne.n	80037ae <HAL_TIM_PWM_Start+0xba>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	223f      	movs	r2, #63	; 0x3f
 80037a8:	2102      	movs	r1, #2
 80037aa:	5499      	strb	r1, [r3, r2]
 80037ac:	e01b      	b.n	80037e6 <HAL_TIM_PWM_Start+0xf2>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b08      	cmp	r3, #8
 80037b2:	d104      	bne.n	80037be <HAL_TIM_PWM_Start+0xca>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2240      	movs	r2, #64	; 0x40
 80037b8:	2102      	movs	r1, #2
 80037ba:	5499      	strb	r1, [r3, r2]
 80037bc:	e013      	b.n	80037e6 <HAL_TIM_PWM_Start+0xf2>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b0c      	cmp	r3, #12
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0xda>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2241      	movs	r2, #65	; 0x41
 80037c8:	2102      	movs	r1, #2
 80037ca:	5499      	strb	r1, [r3, r2]
 80037cc:	e00b      	b.n	80037e6 <HAL_TIM_PWM_Start+0xf2>
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b10      	cmp	r3, #16
 80037d2:	d104      	bne.n	80037de <HAL_TIM_PWM_Start+0xea>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2242      	movs	r2, #66	; 0x42
 80037d8:	2102      	movs	r1, #2
 80037da:	5499      	strb	r1, [r3, r2]
 80037dc:	e003      	b.n	80037e6 <HAL_TIM_PWM_Start+0xf2>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2243      	movs	r2, #67	; 0x43
 80037e2:	2102      	movs	r1, #2
 80037e4:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6839      	ldr	r1, [r7, #0]
 80037ec:	2201      	movs	r2, #1
 80037ee:	0018      	movs	r0, r3
 80037f0:	f000 fd46 	bl	8004280 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a2a      	ldr	r2, [pc, #168]	; (80038a4 <HAL_TIM_PWM_Start+0x1b0>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d00e      	beq.n	800381c <HAL_TIM_PWM_Start+0x128>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a29      	ldr	r2, [pc, #164]	; (80038a8 <HAL_TIM_PWM_Start+0x1b4>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d009      	beq.n	800381c <HAL_TIM_PWM_Start+0x128>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a27      	ldr	r2, [pc, #156]	; (80038ac <HAL_TIM_PWM_Start+0x1b8>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d004      	beq.n	800381c <HAL_TIM_PWM_Start+0x128>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a26      	ldr	r2, [pc, #152]	; (80038b0 <HAL_TIM_PWM_Start+0x1bc>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d101      	bne.n	8003820 <HAL_TIM_PWM_Start+0x12c>
 800381c:	2301      	movs	r3, #1
 800381e:	e000      	b.n	8003822 <HAL_TIM_PWM_Start+0x12e>
 8003820:	2300      	movs	r3, #0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d008      	beq.n	8003838 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2180      	movs	r1, #128	; 0x80
 8003832:	0209      	lsls	r1, r1, #8
 8003834:	430a      	orrs	r2, r1
 8003836:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a19      	ldr	r2, [pc, #100]	; (80038a4 <HAL_TIM_PWM_Start+0x1b0>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d009      	beq.n	8003856 <HAL_TIM_PWM_Start+0x162>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a1b      	ldr	r2, [pc, #108]	; (80038b4 <HAL_TIM_PWM_Start+0x1c0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d004      	beq.n	8003856 <HAL_TIM_PWM_Start+0x162>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a15      	ldr	r2, [pc, #84]	; (80038a8 <HAL_TIM_PWM_Start+0x1b4>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d116      	bne.n	8003884 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_TIM_PWM_Start+0x1c4>)
 800385e:	4013      	ands	r3, r2
 8003860:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2b06      	cmp	r3, #6
 8003866:	d016      	beq.n	8003896 <HAL_TIM_PWM_Start+0x1a2>
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	025b      	lsls	r3, r3, #9
 800386e:	429a      	cmp	r2, r3
 8003870:	d011      	beq.n	8003896 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2101      	movs	r1, #1
 800387e:	430a      	orrs	r2, r1
 8003880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	e008      	b.n	8003896 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2101      	movs	r1, #1
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	e000      	b.n	8003898 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003896:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b004      	add	sp, #16
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	46c0      	nop			; (mov r8, r8)
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800
 80038b4:	40000400 	.word	0x40000400
 80038b8:	00010007 	.word	0x00010007

080038bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e090      	b.n	80039f2 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223d      	movs	r2, #61	; 0x3d
 80038d4:	5c9b      	ldrb	r3, [r3, r2]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	223c      	movs	r2, #60	; 0x3c
 80038e0:	2100      	movs	r1, #0
 80038e2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	0018      	movs	r0, r3
 80038e8:	f7fd fb9c 	bl	8001024 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	223d      	movs	r2, #61	; 0x3d
 80038f0:	2102      	movs	r1, #2
 80038f2:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	493f      	ldr	r1, [pc, #252]	; (80039fc <HAL_TIM_Encoder_Init+0x140>)
 8003900:	400a      	ands	r2, r1
 8003902:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	3304      	adds	r3, #4
 800390c:	0019      	movs	r1, r3
 800390e:	0010      	movs	r0, r2
 8003910:	f000 f97c 	bl	8003c0c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	697a      	ldr	r2, [r7, #20]
 8003932:	4313      	orrs	r3, r2
 8003934:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	4a31      	ldr	r2, [pc, #196]	; (8003a00 <HAL_TIM_Encoder_Init+0x144>)
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	021b      	lsls	r3, r3, #8
 8003948:	4313      	orrs	r3, r2
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4313      	orrs	r3, r2
 800394e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	4a2c      	ldr	r2, [pc, #176]	; (8003a04 <HAL_TIM_Encoder_Init+0x148>)
 8003954:	4013      	ands	r3, r2
 8003956:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4a2b      	ldr	r2, [pc, #172]	; (8003a08 <HAL_TIM_Encoder_Init+0x14c>)
 800395c:	4013      	ands	r3, r2
 800395e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68da      	ldr	r2, [r3, #12]
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	021b      	lsls	r3, r3, #8
 800396a:	4313      	orrs	r3, r2
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	011a      	lsls	r2, r3, #4
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	6a1b      	ldr	r3, [r3, #32]
 800397c:	031b      	lsls	r3, r3, #12
 800397e:	4313      	orrs	r3, r2
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2222      	movs	r2, #34	; 0x22
 800398a:	4393      	bics	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2288      	movs	r2, #136	; 0x88
 8003992:	4393      	bics	r3, r2
 8003994:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4313      	orrs	r3, r2
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2248      	movs	r2, #72	; 0x48
 80039c4:	2101      	movs	r1, #1
 80039c6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	223e      	movs	r2, #62	; 0x3e
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	223f      	movs	r2, #63	; 0x3f
 80039d4:	2101      	movs	r1, #1
 80039d6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2244      	movs	r2, #68	; 0x44
 80039dc:	2101      	movs	r1, #1
 80039de:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2245      	movs	r2, #69	; 0x45
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	223d      	movs	r2, #61	; 0x3d
 80039ec:	2101      	movs	r1, #1
 80039ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b006      	add	sp, #24
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	46c0      	nop			; (mov r8, r8)
 80039fc:	fffebff8 	.word	0xfffebff8
 8003a00:	fffffcfc 	.word	0xfffffcfc
 8003a04:	fffff3f3 	.word	0xfffff3f3
 8003a08:	ffff0f0f 	.word	0xffff0f0f

08003a0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a18:	2317      	movs	r3, #23
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	223c      	movs	r2, #60	; 0x3c
 8003a24:	5c9b      	ldrb	r3, [r3, r2]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d101      	bne.n	8003a2e <HAL_TIM_PWM_ConfigChannel+0x22>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e0e5      	b.n	8003bfa <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	223c      	movs	r2, #60	; 0x3c
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b14      	cmp	r3, #20
 8003a3a:	d900      	bls.n	8003a3e <HAL_TIM_PWM_ConfigChannel+0x32>
 8003a3c:	e0d1      	b.n	8003be2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	009a      	lsls	r2, r3, #2
 8003a42:	4b70      	ldr	r3, [pc, #448]	; (8003c04 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8003a44:	18d3      	adds	r3, r2, r3
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	0011      	movs	r1, r2
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 f950 	bl	8003cf8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	699a      	ldr	r2, [r3, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	2108      	movs	r1, #8
 8003a64:	430a      	orrs	r2, r1
 8003a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	699a      	ldr	r2, [r3, #24]
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2104      	movs	r1, #4
 8003a74:	438a      	bics	r2, r1
 8003a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6999      	ldr	r1, [r3, #24]
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	691a      	ldr	r2, [r3, #16]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	430a      	orrs	r2, r1
 8003a88:	619a      	str	r2, [r3, #24]
      break;
 8003a8a:	e0af      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	0011      	movs	r1, r2
 8003a94:	0018      	movs	r0, r3
 8003a96:	f000 f9b9 	bl	8003e0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699a      	ldr	r2, [r3, #24]
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	2180      	movs	r1, #128	; 0x80
 8003aa6:	0109      	lsls	r1, r1, #4
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4954      	ldr	r1, [pc, #336]	; (8003c08 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003ab8:	400a      	ands	r2, r1
 8003aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	6999      	ldr	r1, [r3, #24]
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	021a      	lsls	r2, r3, #8
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	430a      	orrs	r2, r1
 8003ace:	619a      	str	r2, [r3, #24]
      break;
 8003ad0:	e08c      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68ba      	ldr	r2, [r7, #8]
 8003ad8:	0011      	movs	r1, r2
 8003ada:	0018      	movs	r0, r3
 8003adc:	f000 fa1a 	bl	8003f14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2108      	movs	r1, #8
 8003aec:	430a      	orrs	r2, r1
 8003aee:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	69da      	ldr	r2, [r3, #28]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2104      	movs	r1, #4
 8003afc:	438a      	bics	r2, r1
 8003afe:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69d9      	ldr	r1, [r3, #28]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	691a      	ldr	r2, [r3, #16]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	61da      	str	r2, [r3, #28]
      break;
 8003b12:	e06b      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 fa81 	bl	8004024 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	69da      	ldr	r2, [r3, #28]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2180      	movs	r1, #128	; 0x80
 8003b2e:	0109      	lsls	r1, r1, #4
 8003b30:	430a      	orrs	r2, r1
 8003b32:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	69da      	ldr	r2, [r3, #28]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4932      	ldr	r1, [pc, #200]	; (8003c08 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003b40:	400a      	ands	r2, r1
 8003b42:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	69d9      	ldr	r1, [r3, #28]
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	021a      	lsls	r2, r3, #8
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	61da      	str	r2, [r3, #28]
      break;
 8003b58:	e048      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	0011      	movs	r1, r2
 8003b62:	0018      	movs	r0, r3
 8003b64:	f000 fac8 	bl	80040f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	2108      	movs	r1, #8
 8003b74:	430a      	orrs	r2, r1
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2104      	movs	r1, #4
 8003b84:	438a      	bics	r2, r1
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003b9a:	e027      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	0011      	movs	r1, r2
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 fb07 	bl	80041b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2180      	movs	r1, #128	; 0x80
 8003bb6:	0109      	lsls	r1, r1, #4
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4910      	ldr	r1, [pc, #64]	; (8003c08 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	021a      	lsls	r2, r3, #8
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003be0:	e004      	b.n	8003bec <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8003be2:	2317      	movs	r3, #23
 8003be4:	18fb      	adds	r3, r7, r3
 8003be6:	2201      	movs	r2, #1
 8003be8:	701a      	strb	r2, [r3, #0]
      break;
 8003bea:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	223c      	movs	r2, #60	; 0x3c
 8003bf0:	2100      	movs	r1, #0
 8003bf2:	5499      	strb	r1, [r3, r2]

  return status;
 8003bf4:	2317      	movs	r3, #23
 8003bf6:	18fb      	adds	r3, r7, r3
 8003bf8:	781b      	ldrb	r3, [r3, #0]
}
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	b006      	add	sp, #24
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	08007f2c 	.word	0x08007f2c
 8003c08:	fffffbff 	.word	0xfffffbff

08003c0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
 8003c14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a2f      	ldr	r2, [pc, #188]	; (8003cdc <TIM_Base_SetConfig+0xd0>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d003      	beq.n	8003c2c <TIM_Base_SetConfig+0x20>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a2e      	ldr	r2, [pc, #184]	; (8003ce0 <TIM_Base_SetConfig+0xd4>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d108      	bne.n	8003c3e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2270      	movs	r2, #112	; 0x70
 8003c30:	4393      	bics	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	68fa      	ldr	r2, [r7, #12]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <TIM_Base_SetConfig+0xd0>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a25      	ldr	r2, [pc, #148]	; (8003ce0 <TIM_Base_SetConfig+0xd4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00f      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a24      	ldr	r2, [pc, #144]	; (8003ce4 <TIM_Base_SetConfig+0xd8>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d00b      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <TIM_Base_SetConfig+0xdc>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d007      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a22      	ldr	r2, [pc, #136]	; (8003cec <TIM_Base_SetConfig+0xe0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d003      	beq.n	8003c6e <TIM_Base_SetConfig+0x62>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a21      	ldr	r2, [pc, #132]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d108      	bne.n	8003c80 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4a20      	ldr	r2, [pc, #128]	; (8003cf4 <TIM_Base_SetConfig+0xe8>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2280      	movs	r2, #128	; 0x80
 8003c84:	4393      	bics	r3, r2
 8003c86:	001a      	movs	r2, r3
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a0c      	ldr	r2, [pc, #48]	; (8003cdc <TIM_Base_SetConfig+0xd0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00b      	beq.n	8003cc6 <TIM_Base_SetConfig+0xba>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a0d      	ldr	r2, [pc, #52]	; (8003ce8 <TIM_Base_SetConfig+0xdc>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <TIM_Base_SetConfig+0xba>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a0c      	ldr	r2, [pc, #48]	; (8003cec <TIM_Base_SetConfig+0xe0>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d003      	beq.n	8003cc6 <TIM_Base_SetConfig+0xba>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a0b      	ldr	r2, [pc, #44]	; (8003cf0 <TIM_Base_SetConfig+0xe4>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d103      	bne.n	8003cce <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691a      	ldr	r2, [r3, #16]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	615a      	str	r2, [r3, #20]
}
 8003cd4:	46c0      	nop			; (mov r8, r8)
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b004      	add	sp, #16
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	40012c00 	.word	0x40012c00
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40002000 	.word	0x40002000
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800
 8003cf4:	fffffcff 	.word	0xfffffcff

08003cf8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a1b      	ldr	r3, [r3, #32]
 8003d06:	2201      	movs	r2, #1
 8003d08:	4393      	bics	r3, r2
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6a1b      	ldr	r3, [r3, #32]
 8003d14:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4a32      	ldr	r2, [pc, #200]	; (8003df0 <TIM_OC1_SetConfig+0xf8>)
 8003d26:	4013      	ands	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	4393      	bics	r3, r2
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2202      	movs	r2, #2
 8003d40:	4393      	bics	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <TIM_OC1_SetConfig+0xfc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d00b      	beq.n	8003d6e <TIM_OC1_SetConfig+0x76>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a27      	ldr	r2, [pc, #156]	; (8003df8 <TIM_OC1_SetConfig+0x100>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d007      	beq.n	8003d6e <TIM_OC1_SetConfig+0x76>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <TIM_OC1_SetConfig+0x104>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC1_SetConfig+0x76>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a25      	ldr	r2, [pc, #148]	; (8003e00 <TIM_OC1_SetConfig+0x108>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d10c      	bne.n	8003d88 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2208      	movs	r2, #8
 8003d72:	4393      	bics	r3, r2
 8003d74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	2204      	movs	r2, #4
 8003d84:	4393      	bics	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <TIM_OC1_SetConfig+0xfc>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d00b      	beq.n	8003da8 <TIM_OC1_SetConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <TIM_OC1_SetConfig+0x100>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d007      	beq.n	8003da8 <TIM_OC1_SetConfig+0xb0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a18      	ldr	r2, [pc, #96]	; (8003dfc <TIM_OC1_SetConfig+0x104>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_OC1_SetConfig+0xb0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a17      	ldr	r2, [pc, #92]	; (8003e00 <TIM_OC1_SetConfig+0x108>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d111      	bne.n	8003dcc <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4a16      	ldr	r2, [pc, #88]	; (8003e04 <TIM_OC1_SetConfig+0x10c>)
 8003dac:	4013      	ands	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	4a15      	ldr	r2, [pc, #84]	; (8003e08 <TIM_OC1_SetConfig+0x110>)
 8003db4:	4013      	ands	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	693a      	ldr	r2, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	699b      	ldr	r3, [r3, #24]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685a      	ldr	r2, [r3, #4]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	621a      	str	r2, [r3, #32]
}
 8003de6:	46c0      	nop			; (mov r8, r8)
 8003de8:	46bd      	mov	sp, r7
 8003dea:	b006      	add	sp, #24
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	46c0      	nop			; (mov r8, r8)
 8003df0:	fffeff8f 	.word	0xfffeff8f
 8003df4:	40012c00 	.word	0x40012c00
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800
 8003e04:	fffffeff 	.word	0xfffffeff
 8003e08:	fffffdff 	.word	0xfffffdff

08003e0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	2210      	movs	r2, #16
 8003e1c:	4393      	bics	r3, r2
 8003e1e:	001a      	movs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	699b      	ldr	r3, [r3, #24]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	4a2e      	ldr	r2, [pc, #184]	; (8003ef4 <TIM_OC2_SetConfig+0xe8>)
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <TIM_OC2_SetConfig+0xec>)
 8003e42:	4013      	ands	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	021b      	lsls	r3, r3, #8
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2220      	movs	r2, #32
 8003e56:	4393      	bics	r3, r2
 8003e58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	011b      	lsls	r3, r3, #4
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a24      	ldr	r2, [pc, #144]	; (8003efc <TIM_OC2_SetConfig+0xf0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d10d      	bne.n	8003e8a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	2280      	movs	r2, #128	; 0x80
 8003e72:	4393      	bics	r3, r2
 8003e74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2240      	movs	r2, #64	; 0x40
 8003e86:	4393      	bics	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	; (8003efc <TIM_OC2_SetConfig+0xf0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00b      	beq.n	8003eaa <TIM_OC2_SetConfig+0x9e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <TIM_OC2_SetConfig+0xf4>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d007      	beq.n	8003eaa <TIM_OC2_SetConfig+0x9e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a19      	ldr	r2, [pc, #100]	; (8003f04 <TIM_OC2_SetConfig+0xf8>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d003      	beq.n	8003eaa <TIM_OC2_SetConfig+0x9e>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a18      	ldr	r2, [pc, #96]	; (8003f08 <TIM_OC2_SetConfig+0xfc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d113      	bne.n	8003ed2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	4a17      	ldr	r2, [pc, #92]	; (8003f0c <TIM_OC2_SetConfig+0x100>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4a16      	ldr	r2, [pc, #88]	; (8003f10 <TIM_OC2_SetConfig+0x104>)
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	693a      	ldr	r2, [r7, #16]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68fa      	ldr	r2, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b006      	add	sp, #24
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	feff8fff 	.word	0xfeff8fff
 8003ef8:	fffffcff 	.word	0xfffffcff
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800
 8003f0c:	fffffbff 	.word	0xfffffbff
 8003f10:	fffff7ff 	.word	0xfffff7ff

08003f14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a1b      	ldr	r3, [r3, #32]
 8003f22:	4a35      	ldr	r2, [pc, #212]	; (8003ff8 <TIM_OC3_SetConfig+0xe4>)
 8003f24:	401a      	ands	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a1b      	ldr	r3, [r3, #32]
 8003f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	4a2f      	ldr	r2, [pc, #188]	; (8003ffc <TIM_OC3_SetConfig+0xe8>)
 8003f40:	4013      	ands	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2203      	movs	r2, #3
 8003f48:	4393      	bics	r3, r2
 8003f4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	4a29      	ldr	r2, [pc, #164]	; (8004000 <TIM_OC3_SetConfig+0xec>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	021b      	lsls	r3, r3, #8
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <TIM_OC3_SetConfig+0xf0>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d10d      	bne.n	8003f8e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	4a24      	ldr	r2, [pc, #144]	; (8004008 <TIM_OC3_SetConfig+0xf4>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	4a20      	ldr	r2, [pc, #128]	; (800400c <TIM_OC3_SetConfig+0xf8>)
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <TIM_OC3_SetConfig+0xf0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_OC3_SetConfig+0x9a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <TIM_OC3_SetConfig+0xfc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_OC3_SetConfig+0x9a>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a1c      	ldr	r2, [pc, #112]	; (8004014 <TIM_OC3_SetConfig+0x100>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_OC3_SetConfig+0x9a>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a1b      	ldr	r2, [pc, #108]	; (8004018 <TIM_OC3_SetConfig+0x104>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d113      	bne.n	8003fd6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	4a1a      	ldr	r2, [pc, #104]	; (800401c <TIM_OC3_SetConfig+0x108>)
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a19      	ldr	r2, [pc, #100]	; (8004020 <TIM_OC3_SetConfig+0x10c>)
 8003fba:	4013      	ands	r3, r2
 8003fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	011b      	lsls	r3, r3, #4
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	011b      	lsls	r3, r3, #4
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	697a      	ldr	r2, [r7, #20]
 8003fee:	621a      	str	r2, [r3, #32]
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b006      	add	sp, #24
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	fffffeff 	.word	0xfffffeff
 8003ffc:	fffeff8f 	.word	0xfffeff8f
 8004000:	fffffdff 	.word	0xfffffdff
 8004004:	40012c00 	.word	0x40012c00
 8004008:	fffff7ff 	.word	0xfffff7ff
 800400c:	fffffbff 	.word	0xfffffbff
 8004010:	40014000 	.word	0x40014000
 8004014:	40014400 	.word	0x40014400
 8004018:	40014800 	.word	0x40014800
 800401c:	ffffefff 	.word	0xffffefff
 8004020:	ffffdfff 	.word	0xffffdfff

08004024 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a28      	ldr	r2, [pc, #160]	; (80040d4 <TIM_OC4_SetConfig+0xb0>)
 8004034:	401a      	ands	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <TIM_OC4_SetConfig+0xb4>)
 8004050:	4013      	ands	r3, r2
 8004052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4a21      	ldr	r2, [pc, #132]	; (80040dc <TIM_OC4_SetConfig+0xb8>)
 8004058:	4013      	ands	r3, r2
 800405a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	021b      	lsls	r3, r3, #8
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <TIM_OC4_SetConfig+0xbc>)
 800406c:	4013      	ands	r3, r2
 800406e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	031b      	lsls	r3, r3, #12
 8004076:	693a      	ldr	r2, [r7, #16]
 8004078:	4313      	orrs	r3, r2
 800407a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <TIM_OC4_SetConfig+0xc0>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d00b      	beq.n	800409c <TIM_OC4_SetConfig+0x78>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <TIM_OC4_SetConfig+0xc4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d007      	beq.n	800409c <TIM_OC4_SetConfig+0x78>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a17      	ldr	r2, [pc, #92]	; (80040ec <TIM_OC4_SetConfig+0xc8>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_OC4_SetConfig+0x78>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a16      	ldr	r2, [pc, #88]	; (80040f0 <TIM_OC4_SetConfig+0xcc>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d109      	bne.n	80040b0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <TIM_OC4_SetConfig+0xd0>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	019b      	lsls	r3, r3, #6
 80040aa:	697a      	ldr	r2, [r7, #20]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	697a      	ldr	r2, [r7, #20]
 80040b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	68fa      	ldr	r2, [r7, #12]
 80040ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	685a      	ldr	r2, [r3, #4]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	693a      	ldr	r2, [r7, #16]
 80040c8:	621a      	str	r2, [r3, #32]
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b006      	add	sp, #24
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	46c0      	nop			; (mov r8, r8)
 80040d4:	ffffefff 	.word	0xffffefff
 80040d8:	feff8fff 	.word	0xfeff8fff
 80040dc:	fffffcff 	.word	0xfffffcff
 80040e0:	ffffdfff 	.word	0xffffdfff
 80040e4:	40012c00 	.word	0x40012c00
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800
 80040f4:	ffffbfff 	.word	0xffffbfff

080040f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a1b      	ldr	r3, [r3, #32]
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <TIM_OC5_SetConfig+0xa4>)
 8004108:	401a      	ands	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800411e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a1f      	ldr	r2, [pc, #124]	; (80041a0 <TIM_OC5_SetConfig+0xa8>)
 8004124:	4013      	ands	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	4313      	orrs	r3, r2
 8004130:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <TIM_OC5_SetConfig+0xac>)
 8004136:	4013      	ands	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	693a      	ldr	r2, [r7, #16]
 8004142:	4313      	orrs	r3, r2
 8004144:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a17      	ldr	r2, [pc, #92]	; (80041a8 <TIM_OC5_SetConfig+0xb0>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d00b      	beq.n	8004166 <TIM_OC5_SetConfig+0x6e>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a16      	ldr	r2, [pc, #88]	; (80041ac <TIM_OC5_SetConfig+0xb4>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d007      	beq.n	8004166 <TIM_OC5_SetConfig+0x6e>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <TIM_OC5_SetConfig+0xb8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d003      	beq.n	8004166 <TIM_OC5_SetConfig+0x6e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a14      	ldr	r2, [pc, #80]	; (80041b4 <TIM_OC5_SetConfig+0xbc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d109      	bne.n	800417a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	4a0c      	ldr	r2, [pc, #48]	; (800419c <TIM_OC5_SetConfig+0xa4>)
 800416a:	4013      	ands	r3, r2
 800416c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	021b      	lsls	r3, r3, #8
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	4313      	orrs	r3, r2
 8004178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	621a      	str	r2, [r3, #32]
}
 8004194:	46c0      	nop			; (mov r8, r8)
 8004196:	46bd      	mov	sp, r7
 8004198:	b006      	add	sp, #24
 800419a:	bd80      	pop	{r7, pc}
 800419c:	fffeffff 	.word	0xfffeffff
 80041a0:	fffeff8f 	.word	0xfffeff8f
 80041a4:	fffdffff 	.word	0xfffdffff
 80041a8:	40012c00 	.word	0x40012c00
 80041ac:	40014000 	.word	0x40014000
 80041b0:	40014400 	.word	0x40014400
 80041b4:	40014800 	.word	0x40014800

080041b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b086      	sub	sp, #24
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4a26      	ldr	r2, [pc, #152]	; (8004260 <TIM_OC6_SetConfig+0xa8>)
 80041c8:	401a      	ands	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	4a20      	ldr	r2, [pc, #128]	; (8004264 <TIM_OC6_SetConfig+0xac>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	021b      	lsls	r3, r3, #8
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	4a1c      	ldr	r2, [pc, #112]	; (8004268 <TIM_OC6_SetConfig+0xb0>)
 80041f8:	4013      	ands	r3, r2
 80041fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	051b      	lsls	r3, r3, #20
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	4313      	orrs	r3, r2
 8004206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a18      	ldr	r2, [pc, #96]	; (800426c <TIM_OC6_SetConfig+0xb4>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d00b      	beq.n	8004228 <TIM_OC6_SetConfig+0x70>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a17      	ldr	r2, [pc, #92]	; (8004270 <TIM_OC6_SetConfig+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d007      	beq.n	8004228 <TIM_OC6_SetConfig+0x70>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	4a16      	ldr	r2, [pc, #88]	; (8004274 <TIM_OC6_SetConfig+0xbc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d003      	beq.n	8004228 <TIM_OC6_SetConfig+0x70>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	4a15      	ldr	r2, [pc, #84]	; (8004278 <TIM_OC6_SetConfig+0xc0>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d109      	bne.n	800423c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	4a14      	ldr	r2, [pc, #80]	; (800427c <TIM_OC6_SetConfig+0xc4>)
 800422c:	4013      	ands	r3, r2
 800422e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	029b      	lsls	r3, r3, #10
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	697a      	ldr	r2, [r7, #20]
 8004240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	46bd      	mov	sp, r7
 800425a:	b006      	add	sp, #24
 800425c:	bd80      	pop	{r7, pc}
 800425e:	46c0      	nop			; (mov r8, r8)
 8004260:	ffefffff 	.word	0xffefffff
 8004264:	feff8fff 	.word	0xfeff8fff
 8004268:	ffdfffff 	.word	0xffdfffff
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40014000 	.word	0x40014000
 8004274:	40014400 	.word	0x40014400
 8004278:	40014800 	.word	0x40014800
 800427c:	fffbffff 	.word	0xfffbffff

08004280 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	221f      	movs	r2, #31
 8004290:	4013      	ands	r3, r2
 8004292:	2201      	movs	r2, #1
 8004294:	409a      	lsls	r2, r3
 8004296:	0013      	movs	r3, r2
 8004298:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	697a      	ldr	r2, [r7, #20]
 80042a0:	43d2      	mvns	r2, r2
 80042a2:	401a      	ands	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a1a      	ldr	r2, [r3, #32]
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	211f      	movs	r1, #31
 80042b0:	400b      	ands	r3, r1
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	4099      	lsls	r1, r3
 80042b6:	000b      	movs	r3, r1
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	621a      	str	r2, [r3, #32]
}
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	46bd      	mov	sp, r7
 80042c2:	b006      	add	sp, #24
 80042c4:	bd80      	pop	{r7, pc}
	...

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	223c      	movs	r2, #60	; 0x3c
 80042d6:	5c9b      	ldrb	r3, [r3, r2]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e04f      	b.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	223c      	movs	r2, #60	; 0x3c
 80042e4:	2101      	movs	r1, #1
 80042e6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	223d      	movs	r2, #61	; 0x3d
 80042ec:	2102      	movs	r1, #2
 80042ee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a20      	ldr	r2, [pc, #128]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d108      	bne.n	800431c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4a1f      	ldr	r2, [pc, #124]	; (800438c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800430e:	4013      	ands	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	4313      	orrs	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2270      	movs	r2, #112	; 0x70
 8004320:	4393      	bics	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a13      	ldr	r2, [pc, #76]	; (8004388 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d009      	beq.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a12      	ldr	r2, [pc, #72]	; (8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d004      	beq.n	8004354 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a11      	ldr	r2, [pc, #68]	; (8004394 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d10c      	bne.n	800436e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	4393      	bics	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	68ba      	ldr	r2, [r7, #8]
 8004362:	4313      	orrs	r3, r2
 8004364:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	223d      	movs	r2, #61	; 0x3d
 8004372:	2101      	movs	r1, #1
 8004374:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	223c      	movs	r2, #60	; 0x3c
 800437a:	2100      	movs	r1, #0
 800437c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	0018      	movs	r0, r3
 8004382:	46bd      	mov	sp, r7
 8004384:	b004      	add	sp, #16
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40012c00 	.word	0x40012c00
 800438c:	ff0fffff 	.word	0xff0fffff
 8004390:	40000400 	.word	0x40000400
 8004394:	40014000 	.word	0x40014000

08004398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	223c      	movs	r2, #60	; 0x3c
 80043aa:	5c9b      	ldrb	r3, [r3, r2]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e079      	b.n	80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	223c      	movs	r2, #60	; 0x3c
 80043b8:	2101      	movs	r1, #1
 80043ba:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	22ff      	movs	r2, #255	; 0xff
 80043c0:	4393      	bics	r3, r2
 80043c2:	001a      	movs	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4a38      	ldr	r2, [pc, #224]	; (80044b0 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80043d0:	401a      	ands	r2, r3
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	4a35      	ldr	r2, [pc, #212]	; (80044b4 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80043de:	401a      	ands	r2, r3
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80043ec:	401a      	ands	r2, r3
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a30      	ldr	r2, [pc, #192]	; (80044bc <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80043fa:	401a      	ands	r2, r3
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	4313      	orrs	r3, r2
 8004402:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4a2e      	ldr	r2, [pc, #184]	; (80044c0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8004408:	401a      	ands	r2, r3
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	4313      	orrs	r3, r2
 8004410:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	4a2b      	ldr	r2, [pc, #172]	; (80044c4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8004416:	401a      	ands	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	4a29      	ldr	r2, [pc, #164]	; (80044c8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8004424:	401a      	ands	r2, r3
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	041b      	lsls	r3, r3, #16
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a25      	ldr	r2, [pc, #148]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d106      	bne.n	8004448 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	4a24      	ldr	r2, [pc, #144]	; (80044d0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800443e:	401a      	ands	r2, r3
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	69db      	ldr	r3, [r3, #28]
 8004444:	4313      	orrs	r3, r2
 8004446:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a1f      	ldr	r2, [pc, #124]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d121      	bne.n	8004496 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	4a1f      	ldr	r2, [pc, #124]	; (80044d4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004456:	401a      	ands	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445c:	051b      	lsls	r3, r3, #20
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8004466:	401a      	ands	r2, r3
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	4313      	orrs	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a1a      	ldr	r2, [pc, #104]	; (80044dc <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8004474:	401a      	ands	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a12      	ldr	r2, [pc, #72]	; (80044cc <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d106      	bne.n	8004496 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	4a15      	ldr	r2, [pc, #84]	; (80044e0 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 800448c:	401a      	ands	r2, r3
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004492:	4313      	orrs	r3, r2
 8004494:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	223c      	movs	r2, #60	; 0x3c
 80044a2:	2100      	movs	r1, #0
 80044a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	0018      	movs	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	b004      	add	sp, #16
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	fffffcff 	.word	0xfffffcff
 80044b4:	fffffbff 	.word	0xfffffbff
 80044b8:	fffff7ff 	.word	0xfffff7ff
 80044bc:	ffffefff 	.word	0xffffefff
 80044c0:	ffffdfff 	.word	0xffffdfff
 80044c4:	ffffbfff 	.word	0xffffbfff
 80044c8:	fff0ffff 	.word	0xfff0ffff
 80044cc:	40012c00 	.word	0x40012c00
 80044d0:	efffffff 	.word	0xefffffff
 80044d4:	ff0fffff 	.word	0xff0fffff
 80044d8:	feffffff 	.word	0xfeffffff
 80044dc:	fdffffff 	.word	0xfdffffff
 80044e0:	dfffffff 	.word	0xdfffffff

080044e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e046      	b.n	8004584 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2288      	movs	r2, #136	; 0x88
 80044fa:	589b      	ldr	r3, [r3, r2]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d107      	bne.n	8004510 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2284      	movs	r2, #132	; 0x84
 8004504:	2100      	movs	r1, #0
 8004506:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	0018      	movs	r0, r3
 800450c:	f7fd f830 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2288      	movs	r2, #136	; 0x88
 8004514:	2124      	movs	r1, #36	; 0x24
 8004516:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2101      	movs	r1, #1
 8004524:	438a      	bics	r2, r1
 8004526:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	0018      	movs	r0, r3
 800452c:	f000 fc6e 	bl	8004e0c <UART_SetConfig>
 8004530:	0003      	movs	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d101      	bne.n	800453a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e024      	b.n	8004584 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d003      	beq.n	800454a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	0018      	movs	r0, r3
 8004546:	f000 fe05 	bl	8005154 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	490d      	ldr	r1, [pc, #52]	; (800458c <HAL_UART_Init+0xa8>)
 8004556:	400a      	ands	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	212a      	movs	r1, #42	; 0x2a
 8004566:	438a      	bics	r2, r1
 8004568:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2101      	movs	r1, #1
 8004576:	430a      	orrs	r2, r1
 8004578:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	0018      	movs	r0, r3
 800457e:	f000 fe9d 	bl	80052bc <UART_CheckIdleState>
 8004582:	0003      	movs	r3, r0
}
 8004584:	0018      	movs	r0, r3
 8004586:	46bd      	mov	sp, r7
 8004588:	b002      	add	sp, #8
 800458a:	bd80      	pop	{r7, pc}
 800458c:	ffffb7ff 	.word	0xffffb7ff

08004590 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08a      	sub	sp, #40	; 0x28
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	1dbb      	adds	r3, r7, #6
 800459e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2288      	movs	r2, #136	; 0x88
 80045a4:	589b      	ldr	r3, [r3, r2]
 80045a6:	2b20      	cmp	r3, #32
 80045a8:	d000      	beq.n	80045ac <HAL_UART_Transmit+0x1c>
 80045aa:	e088      	b.n	80046be <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_UART_Transmit+0x2a>
 80045b2:	1dbb      	adds	r3, r7, #6
 80045b4:	881b      	ldrh	r3, [r3, #0]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e080      	b.n	80046c0 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	015b      	lsls	r3, r3, #5
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d109      	bne.n	80045de <HAL_UART_Transmit+0x4e>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d105      	bne.n	80045de <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80045d2:	68bb      	ldr	r3, [r7, #8]
 80045d4:	2201      	movs	r2, #1
 80045d6:	4013      	ands	r3, r2
 80045d8:	d001      	beq.n	80045de <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e070      	b.n	80046c0 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2290      	movs	r2, #144	; 0x90
 80045e2:	2100      	movs	r1, #0
 80045e4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2288      	movs	r2, #136	; 0x88
 80045ea:	2121      	movs	r1, #33	; 0x21
 80045ec:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ee:	f7fd fcf7 	bl	8001fe0 <HAL_GetTick>
 80045f2:	0003      	movs	r3, r0
 80045f4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	1dba      	adds	r2, r7, #6
 80045fa:	2154      	movs	r1, #84	; 0x54
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	1dba      	adds	r2, r7, #6
 8004604:	2156      	movs	r1, #86	; 0x56
 8004606:	8812      	ldrh	r2, [r2, #0]
 8004608:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	015b      	lsls	r3, r3, #5
 8004612:	429a      	cmp	r2, r3
 8004614:	d108      	bne.n	8004628 <HAL_UART_Transmit+0x98>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d104      	bne.n	8004628 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800461e:	2300      	movs	r3, #0
 8004620:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e003      	b.n	8004630 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800462c:	2300      	movs	r3, #0
 800462e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004630:	e02c      	b.n	800468c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	68f8      	ldr	r0, [r7, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	0013      	movs	r3, r2
 800463c:	2200      	movs	r2, #0
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	f000 fe8a 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 8004644:	1e03      	subs	r3, r0, #0
 8004646:	d001      	beq.n	800464c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e039      	b.n	80046c0 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10b      	bne.n	800466a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	881b      	ldrh	r3, [r3, #0]
 8004656:	001a      	movs	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	05d2      	lsls	r2, r2, #23
 800465e:	0dd2      	lsrs	r2, r2, #23
 8004660:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004662:	69bb      	ldr	r3, [r7, #24]
 8004664:	3302      	adds	r3, #2
 8004666:	61bb      	str	r3, [r7, #24]
 8004668:	e007      	b.n	800467a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	781a      	ldrb	r2, [r3, #0]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	3301      	adds	r3, #1
 8004678:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	2256      	movs	r2, #86	; 0x56
 800467e:	5a9b      	ldrh	r3, [r3, r2]
 8004680:	b29b      	uxth	r3, r3
 8004682:	3b01      	subs	r3, #1
 8004684:	b299      	uxth	r1, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2256      	movs	r2, #86	; 0x56
 800468a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2256      	movs	r2, #86	; 0x56
 8004690:	5a9b      	ldrh	r3, [r3, r2]
 8004692:	b29b      	uxth	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1cc      	bne.n	8004632 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	0013      	movs	r3, r2
 80046a2:	2200      	movs	r2, #0
 80046a4:	2140      	movs	r1, #64	; 0x40
 80046a6:	f000 fe57 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 80046aa:	1e03      	subs	r3, r0, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80046ae:	2303      	movs	r3, #3
 80046b0:	e006      	b.n	80046c0 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2288      	movs	r2, #136	; 0x88
 80046b6:	2120      	movs	r1, #32
 80046b8:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	e000      	b.n	80046c0 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80046be:	2302      	movs	r3, #2
  }
}
 80046c0:	0018      	movs	r0, r3
 80046c2:	46bd      	mov	sp, r7
 80046c4:	b008      	add	sp, #32
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b088      	sub	sp, #32
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	1dbb      	adds	r3, r7, #6
 80046d4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	228c      	movs	r2, #140	; 0x8c
 80046da:	589b      	ldr	r3, [r3, r2]
 80046dc:	2b20      	cmp	r3, #32
 80046de:	d145      	bne.n	800476c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_UART_Receive_IT+0x26>
 80046e6:	1dbb      	adds	r3, r7, #6
 80046e8:	881b      	ldrh	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d101      	bne.n	80046f2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	e03d      	b.n	800476e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	689a      	ldr	r2, [r3, #8]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	015b      	lsls	r3, r3, #5
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d109      	bne.n	8004712 <HAL_UART_Receive_IT+0x4a>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d105      	bne.n	8004712 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	2201      	movs	r2, #1
 800470a:	4013      	ands	r3, r2
 800470c:	d001      	beq.n	8004712 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e02d      	b.n	800476e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685a      	ldr	r2, [r3, #4]
 800471e:	2380      	movs	r3, #128	; 0x80
 8004720:	041b      	lsls	r3, r3, #16
 8004722:	4013      	ands	r3, r2
 8004724:	d019      	beq.n	800475a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004726:	f3ef 8310 	mrs	r3, PRIMASK
 800472a:	613b      	str	r3, [r7, #16]
  return(result);
 800472c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	2301      	movs	r3, #1
 8004732:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	f383 8810 	msr	PRIMASK, r3
}
 800473a:	46c0      	nop			; (mov r8, r8)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2180      	movs	r1, #128	; 0x80
 8004748:	04c9      	lsls	r1, r1, #19
 800474a:	430a      	orrs	r2, r1
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f383 8810 	msr	PRIMASK, r3
}
 8004758:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800475a:	1dbb      	adds	r3, r7, #6
 800475c:	881a      	ldrh	r2, [r3, #0]
 800475e:	68b9      	ldr	r1, [r7, #8]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	0018      	movs	r0, r3
 8004764:	f000 fec0 	bl	80054e8 <UART_Start_Receive_IT>
 8004768:	0003      	movs	r3, r0
 800476a:	e000      	b.n	800476e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800476c:	2302      	movs	r3, #2
  }
}
 800476e:	0018      	movs	r0, r3
 8004770:	46bd      	mov	sp, r7
 8004772:	b008      	add	sp, #32
 8004774:	bd80      	pop	{r7, pc}
	...

08004778 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004778:	b5b0      	push	{r4, r5, r7, lr}
 800477a:	b0aa      	sub	sp, #168	; 0xa8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	22a4      	movs	r2, #164	; 0xa4
 8004788:	18b9      	adds	r1, r7, r2
 800478a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	20a0      	movs	r0, #160	; 0xa0
 8004794:	1839      	adds	r1, r7, r0
 8004796:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	249c      	movs	r4, #156	; 0x9c
 80047a0:	1939      	adds	r1, r7, r4
 80047a2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80047a4:	0011      	movs	r1, r2
 80047a6:	18bb      	adds	r3, r7, r2
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4aa2      	ldr	r2, [pc, #648]	; (8004a34 <HAL_UART_IRQHandler+0x2bc>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	2298      	movs	r2, #152	; 0x98
 80047b0:	18bd      	adds	r5, r7, r2
 80047b2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80047b4:	18bb      	adds	r3, r7, r2
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d11a      	bne.n	80047f2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80047bc:	187b      	adds	r3, r7, r1
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	4013      	ands	r3, r2
 80047c4:	d015      	beq.n	80047f2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80047c6:	183b      	adds	r3, r7, r0
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2220      	movs	r2, #32
 80047cc:	4013      	ands	r3, r2
 80047ce:	d105      	bne.n	80047dc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80047d0:	193b      	adds	r3, r7, r4
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	055b      	lsls	r3, r3, #21
 80047d8:	4013      	ands	r3, r2
 80047da:	d00a      	beq.n	80047f2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d100      	bne.n	80047e6 <HAL_UART_IRQHandler+0x6e>
 80047e4:	e2dc      	b.n	8004da0 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	0010      	movs	r0, r2
 80047ee:	4798      	blx	r3
      }
      return;
 80047f0:	e2d6      	b.n	8004da0 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80047f2:	2398      	movs	r3, #152	; 0x98
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d100      	bne.n	80047fe <HAL_UART_IRQHandler+0x86>
 80047fc:	e122      	b.n	8004a44 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80047fe:	239c      	movs	r3, #156	; 0x9c
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a8c      	ldr	r2, [pc, #560]	; (8004a38 <HAL_UART_IRQHandler+0x2c0>)
 8004806:	4013      	ands	r3, r2
 8004808:	d106      	bne.n	8004818 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800480a:	23a0      	movs	r3, #160	; 0xa0
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a8a      	ldr	r2, [pc, #552]	; (8004a3c <HAL_UART_IRQHandler+0x2c4>)
 8004812:	4013      	ands	r3, r2
 8004814:	d100      	bne.n	8004818 <HAL_UART_IRQHandler+0xa0>
 8004816:	e115      	b.n	8004a44 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004818:	23a4      	movs	r3, #164	; 0xa4
 800481a:	18fb      	adds	r3, r7, r3
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2201      	movs	r2, #1
 8004820:	4013      	ands	r3, r2
 8004822:	d012      	beq.n	800484a <HAL_UART_IRQHandler+0xd2>
 8004824:	23a0      	movs	r3, #160	; 0xa0
 8004826:	18fb      	adds	r3, r7, r3
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	2380      	movs	r3, #128	; 0x80
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	4013      	ands	r3, r2
 8004830:	d00b      	beq.n	800484a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2290      	movs	r2, #144	; 0x90
 800483e:	589b      	ldr	r3, [r3, r2]
 8004840:	2201      	movs	r2, #1
 8004842:	431a      	orrs	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2190      	movs	r1, #144	; 0x90
 8004848:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800484a:	23a4      	movs	r3, #164	; 0xa4
 800484c:	18fb      	adds	r3, r7, r3
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2202      	movs	r2, #2
 8004852:	4013      	ands	r3, r2
 8004854:	d011      	beq.n	800487a <HAL_UART_IRQHandler+0x102>
 8004856:	239c      	movs	r3, #156	; 0x9c
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2201      	movs	r2, #1
 800485e:	4013      	ands	r3, r2
 8004860:	d00b      	beq.n	800487a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2202      	movs	r2, #2
 8004868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2290      	movs	r2, #144	; 0x90
 800486e:	589b      	ldr	r3, [r3, r2]
 8004870:	2204      	movs	r2, #4
 8004872:	431a      	orrs	r2, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2190      	movs	r1, #144	; 0x90
 8004878:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800487a:	23a4      	movs	r3, #164	; 0xa4
 800487c:	18fb      	adds	r3, r7, r3
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2204      	movs	r2, #4
 8004882:	4013      	ands	r3, r2
 8004884:	d011      	beq.n	80048aa <HAL_UART_IRQHandler+0x132>
 8004886:	239c      	movs	r3, #156	; 0x9c
 8004888:	18fb      	adds	r3, r7, r3
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2201      	movs	r2, #1
 800488e:	4013      	ands	r3, r2
 8004890:	d00b      	beq.n	80048aa <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2204      	movs	r2, #4
 8004898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2290      	movs	r2, #144	; 0x90
 800489e:	589b      	ldr	r3, [r3, r2]
 80048a0:	2202      	movs	r2, #2
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2190      	movs	r1, #144	; 0x90
 80048a8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80048aa:	23a4      	movs	r3, #164	; 0xa4
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2208      	movs	r2, #8
 80048b2:	4013      	ands	r3, r2
 80048b4:	d017      	beq.n	80048e6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048b6:	23a0      	movs	r3, #160	; 0xa0
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2220      	movs	r2, #32
 80048be:	4013      	ands	r3, r2
 80048c0:	d105      	bne.n	80048ce <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80048c2:	239c      	movs	r3, #156	; 0x9c
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a5b      	ldr	r2, [pc, #364]	; (8004a38 <HAL_UART_IRQHandler+0x2c0>)
 80048ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80048cc:	d00b      	beq.n	80048e6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2208      	movs	r2, #8
 80048d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2290      	movs	r2, #144	; 0x90
 80048da:	589b      	ldr	r3, [r3, r2]
 80048dc:	2208      	movs	r2, #8
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2190      	movs	r1, #144	; 0x90
 80048e4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80048e6:	23a4      	movs	r3, #164	; 0xa4
 80048e8:	18fb      	adds	r3, r7, r3
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	011b      	lsls	r3, r3, #4
 80048f0:	4013      	ands	r3, r2
 80048f2:	d013      	beq.n	800491c <HAL_UART_IRQHandler+0x1a4>
 80048f4:	23a0      	movs	r3, #160	; 0xa0
 80048f6:	18fb      	adds	r3, r7, r3
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	2380      	movs	r3, #128	; 0x80
 80048fc:	04db      	lsls	r3, r3, #19
 80048fe:	4013      	ands	r3, r2
 8004900:	d00c      	beq.n	800491c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2280      	movs	r2, #128	; 0x80
 8004908:	0112      	lsls	r2, r2, #4
 800490a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2290      	movs	r2, #144	; 0x90
 8004910:	589b      	ldr	r3, [r3, r2]
 8004912:	2220      	movs	r2, #32
 8004914:	431a      	orrs	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2190      	movs	r1, #144	; 0x90
 800491a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2290      	movs	r2, #144	; 0x90
 8004920:	589b      	ldr	r3, [r3, r2]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d100      	bne.n	8004928 <HAL_UART_IRQHandler+0x1b0>
 8004926:	e23d      	b.n	8004da4 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004928:	23a4      	movs	r3, #164	; 0xa4
 800492a:	18fb      	adds	r3, r7, r3
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2220      	movs	r2, #32
 8004930:	4013      	ands	r3, r2
 8004932:	d015      	beq.n	8004960 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004934:	23a0      	movs	r3, #160	; 0xa0
 8004936:	18fb      	adds	r3, r7, r3
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	4013      	ands	r3, r2
 800493e:	d106      	bne.n	800494e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004940:	239c      	movs	r3, #156	; 0x9c
 8004942:	18fb      	adds	r3, r7, r3
 8004944:	681a      	ldr	r2, [r3, #0]
 8004946:	2380      	movs	r3, #128	; 0x80
 8004948:	055b      	lsls	r3, r3, #21
 800494a:	4013      	ands	r3, r2
 800494c:	d008      	beq.n	8004960 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800495a:	687a      	ldr	r2, [r7, #4]
 800495c:	0010      	movs	r0, r2
 800495e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2290      	movs	r2, #144	; 0x90
 8004964:	589b      	ldr	r3, [r3, r2]
 8004966:	2194      	movs	r1, #148	; 0x94
 8004968:	187a      	adds	r2, r7, r1
 800496a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	2240      	movs	r2, #64	; 0x40
 8004974:	4013      	ands	r3, r2
 8004976:	2b40      	cmp	r3, #64	; 0x40
 8004978:	d004      	beq.n	8004984 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800497a:	187b      	adds	r3, r7, r1
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2228      	movs	r2, #40	; 0x28
 8004980:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004982:	d04c      	beq.n	8004a1e <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f000 fed2 	bl	8005730 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	4013      	ands	r3, r2
 8004996:	2b40      	cmp	r3, #64	; 0x40
 8004998:	d13c      	bne.n	8004a14 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800499a:	f3ef 8310 	mrs	r3, PRIMASK
 800499e:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80049a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	2090      	movs	r0, #144	; 0x90
 80049a4:	183a      	adds	r2, r7, r0
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	2301      	movs	r3, #1
 80049aa:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2140      	movs	r1, #64	; 0x40
 80049c0:	438a      	bics	r2, r1
 80049c2:	609a      	str	r2, [r3, #8]
 80049c4:	183b      	adds	r3, r7, r0
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049cc:	f383 8810 	msr	PRIMASK, r3
}
 80049d0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2280      	movs	r2, #128	; 0x80
 80049d6:	589b      	ldr	r3, [r3, r2]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d016      	beq.n	8004a0a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2280      	movs	r2, #128	; 0x80
 80049e0:	589b      	ldr	r3, [r3, r2]
 80049e2:	4a17      	ldr	r2, [pc, #92]	; (8004a40 <HAL_UART_IRQHandler+0x2c8>)
 80049e4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2280      	movs	r2, #128	; 0x80
 80049ea:	589b      	ldr	r3, [r3, r2]
 80049ec:	0018      	movs	r0, r3
 80049ee:	f7fd fc41 	bl	8002274 <HAL_DMA_Abort_IT>
 80049f2:	1e03      	subs	r3, r0, #0
 80049f4:	d01c      	beq.n	8004a30 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2280      	movs	r2, #128	; 0x80
 80049fa:	589b      	ldr	r3, [r3, r2]
 80049fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	2180      	movs	r1, #128	; 0x80
 8004a02:	5852      	ldr	r2, [r2, r1]
 8004a04:	0010      	movs	r0, r2
 8004a06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a08:	e012      	b.n	8004a30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	0018      	movs	r0, r3
 8004a0e:	f000 f9e9 	bl	8004de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a12:	e00d      	b.n	8004a30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	0018      	movs	r0, r3
 8004a18:	f000 f9e4 	bl	8004de4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e008      	b.n	8004a30 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	0018      	movs	r0, r3
 8004a22:	f000 f9df 	bl	8004de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2290      	movs	r2, #144	; 0x90
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004a2e:	e1b9      	b.n	8004da4 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a30:	46c0      	nop			; (mov r8, r8)
    return;
 8004a32:	e1b7      	b.n	8004da4 <HAL_UART_IRQHandler+0x62c>
 8004a34:	0000080f 	.word	0x0000080f
 8004a38:	10000001 	.word	0x10000001
 8004a3c:	04000120 	.word	0x04000120
 8004a40:	080057fd 	.word	0x080057fd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a48:	2b01      	cmp	r3, #1
 8004a4a:	d000      	beq.n	8004a4e <HAL_UART_IRQHandler+0x2d6>
 8004a4c:	e13e      	b.n	8004ccc <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004a4e:	23a4      	movs	r3, #164	; 0xa4
 8004a50:	18fb      	adds	r3, r7, r3
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2210      	movs	r2, #16
 8004a56:	4013      	ands	r3, r2
 8004a58:	d100      	bne.n	8004a5c <HAL_UART_IRQHandler+0x2e4>
 8004a5a:	e137      	b.n	8004ccc <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004a5c:	23a0      	movs	r3, #160	; 0xa0
 8004a5e:	18fb      	adds	r3, r7, r3
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2210      	movs	r2, #16
 8004a64:	4013      	ands	r3, r2
 8004a66:	d100      	bne.n	8004a6a <HAL_UART_IRQHandler+0x2f2>
 8004a68:	e130      	b.n	8004ccc <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	2210      	movs	r2, #16
 8004a70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2240      	movs	r2, #64	; 0x40
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b40      	cmp	r3, #64	; 0x40
 8004a7e:	d000      	beq.n	8004a82 <HAL_UART_IRQHandler+0x30a>
 8004a80:	e0a4      	b.n	8004bcc <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2280      	movs	r2, #128	; 0x80
 8004a86:	589b      	ldr	r3, [r3, r2]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	217e      	movs	r1, #126	; 0x7e
 8004a8e:	187b      	adds	r3, r7, r1
 8004a90:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004a92:	187b      	adds	r3, r7, r1
 8004a94:	881b      	ldrh	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d100      	bne.n	8004a9c <HAL_UART_IRQHandler+0x324>
 8004a9a:	e185      	b.n	8004da8 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	225c      	movs	r2, #92	; 0x5c
 8004aa0:	5a9b      	ldrh	r3, [r3, r2]
 8004aa2:	187a      	adds	r2, r7, r1
 8004aa4:	8812      	ldrh	r2, [r2, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d300      	bcc.n	8004aac <HAL_UART_IRQHandler+0x334>
 8004aaa:	e17d      	b.n	8004da8 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	187a      	adds	r2, r7, r1
 8004ab0:	215e      	movs	r1, #94	; 0x5e
 8004ab2:	8812      	ldrh	r2, [r2, #0]
 8004ab4:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2280      	movs	r2, #128	; 0x80
 8004aba:	589b      	ldr	r3, [r3, r2]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	d170      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ac6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aca:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ace:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad6:	f383 8810 	msr	PRIMASK, r3
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	49b4      	ldr	r1, [pc, #720]	; (8004db8 <HAL_UART_IRQHandler+0x640>)
 8004ae8:	400a      	ands	r2, r1
 8004aea:	601a      	str	r2, [r3, #0]
 8004aec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aee:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af2:	f383 8810 	msr	PRIMASK, r3
}
 8004af6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004af8:	f3ef 8310 	mrs	r3, PRIMASK
 8004afc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004afe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b00:	677b      	str	r3, [r7, #116]	; 0x74
 8004b02:	2301      	movs	r3, #1
 8004b04:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b08:	f383 8810 	msr	PRIMASK, r3
}
 8004b0c:	46c0      	nop			; (mov r8, r8)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2101      	movs	r1, #1
 8004b1a:	438a      	bics	r2, r1
 8004b1c:	609a      	str	r2, [r3, #8]
 8004b1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b20:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b2a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b32:	673b      	str	r3, [r7, #112]	; 0x70
 8004b34:	2301      	movs	r3, #1
 8004b36:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b3a:	f383 8810 	msr	PRIMASK, r3
}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689a      	ldr	r2, [r3, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2140      	movs	r1, #64	; 0x40
 8004b4c:	438a      	bics	r2, r1
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b52:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b56:	f383 8810 	msr	PRIMASK, r3
}
 8004b5a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	228c      	movs	r2, #140	; 0x8c
 8004b60:	2120      	movs	r1, #32
 8004b62:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b6a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b6e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004b70:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b74:	2301      	movs	r3, #1
 8004b76:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b7a:	f383 8810 	msr	PRIMASK, r3
}
 8004b7e:	46c0      	nop			; (mov r8, r8)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2110      	movs	r1, #16
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
 8004b90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b92:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b96:	f383 8810 	msr	PRIMASK, r3
}
 8004b9a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2280      	movs	r2, #128	; 0x80
 8004ba0:	589b      	ldr	r3, [r3, r2]
 8004ba2:	0018      	movs	r0, r3
 8004ba4:	f7fd fb04 	bl	80021b0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	225c      	movs	r2, #92	; 0x5c
 8004bb2:	5a9a      	ldrh	r2, [r3, r2]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	215e      	movs	r1, #94	; 0x5e
 8004bb8:	5a5b      	ldrh	r3, [r3, r1]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f000 f915 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004bca:	e0ed      	b.n	8004da8 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	225c      	movs	r2, #92	; 0x5c
 8004bd0:	5a99      	ldrh	r1, [r3, r2]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	225e      	movs	r2, #94	; 0x5e
 8004bd6:	5a9b      	ldrh	r3, [r3, r2]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	208e      	movs	r0, #142	; 0x8e
 8004bdc:	183b      	adds	r3, r7, r0
 8004bde:	1a8a      	subs	r2, r1, r2
 8004be0:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	225e      	movs	r2, #94	; 0x5e
 8004be6:	5a9b      	ldrh	r3, [r3, r2]
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d100      	bne.n	8004bf0 <HAL_UART_IRQHandler+0x478>
 8004bee:	e0dd      	b.n	8004dac <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004bf0:	183b      	adds	r3, r7, r0
 8004bf2:	881b      	ldrh	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d100      	bne.n	8004bfa <HAL_UART_IRQHandler+0x482>
 8004bf8:	e0d8      	b.n	8004dac <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfa:	f3ef 8310 	mrs	r3, PRIMASK
 8004bfe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c00:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004c02:	2488      	movs	r4, #136	; 0x88
 8004c04:	193a      	adds	r2, r7, r4
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	2301      	movs	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4967      	ldr	r1, [pc, #412]	; (8004dbc <HAL_UART_IRQHandler+0x644>)
 8004c20:	400a      	ands	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	193b      	adds	r3, r7, r4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	f383 8810 	msr	PRIMASK, r3
}
 8004c30:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c32:	f3ef 8310 	mrs	r3, PRIMASK
 8004c36:	61bb      	str	r3, [r7, #24]
  return(result);
 8004c38:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c3a:	2484      	movs	r4, #132	; 0x84
 8004c3c:	193a      	adds	r2, r7, r4
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	2301      	movs	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	f383 8810 	msr	PRIMASK, r3
}
 8004c4a:	46c0      	nop			; (mov r8, r8)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689a      	ldr	r2, [r3, #8]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	495a      	ldr	r1, [pc, #360]	; (8004dc0 <HAL_UART_IRQHandler+0x648>)
 8004c58:	400a      	ands	r2, r1
 8004c5a:	609a      	str	r2, [r3, #8]
 8004c5c:	193b      	adds	r3, r7, r4
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c62:	6a3b      	ldr	r3, [r7, #32]
 8004c64:	f383 8810 	msr	PRIMASK, r3
}
 8004c68:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	228c      	movs	r2, #140	; 0x8c
 8004c6e:	2120      	movs	r1, #32
 8004c70:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c86:	2480      	movs	r4, #128	; 0x80
 8004c88:	193a      	adds	r2, r7, r4
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c92:	f383 8810 	msr	PRIMASK, r3
}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2110      	movs	r1, #16
 8004ca4:	438a      	bics	r2, r1
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	193b      	adds	r3, r7, r4
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cb0:	f383 8810 	msr	PRIMASK, r3
}
 8004cb4:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2202      	movs	r2, #2
 8004cba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cbc:	183b      	adds	r3, r7, r0
 8004cbe:	881a      	ldrh	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	0011      	movs	r1, r2
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f000 f895 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cca:	e06f      	b.n	8004dac <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ccc:	23a4      	movs	r3, #164	; 0xa4
 8004cce:	18fb      	adds	r3, r7, r3
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	2380      	movs	r3, #128	; 0x80
 8004cd4:	035b      	lsls	r3, r3, #13
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	d010      	beq.n	8004cfc <HAL_UART_IRQHandler+0x584>
 8004cda:	239c      	movs	r3, #156	; 0x9c
 8004cdc:	18fb      	adds	r3, r7, r3
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	2380      	movs	r3, #128	; 0x80
 8004ce2:	03db      	lsls	r3, r3, #15
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	d009      	beq.n	8004cfc <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2280      	movs	r2, #128	; 0x80
 8004cee:	0352      	lsls	r2, r2, #13
 8004cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	0018      	movs	r0, r3
 8004cf6:	f001 fa25 	bl	8006144 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cfa:	e05a      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004cfc:	23a4      	movs	r3, #164	; 0xa4
 8004cfe:	18fb      	adds	r3, r7, r3
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2280      	movs	r2, #128	; 0x80
 8004d04:	4013      	ands	r3, r2
 8004d06:	d016      	beq.n	8004d36 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004d08:	23a0      	movs	r3, #160	; 0xa0
 8004d0a:	18fb      	adds	r3, r7, r3
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	4013      	ands	r3, r2
 8004d12:	d106      	bne.n	8004d22 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d14:	239c      	movs	r3, #156	; 0x9c
 8004d16:	18fb      	adds	r3, r7, r3
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	4013      	ands	r3, r2
 8004d20:	d009      	beq.n	8004d36 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d042      	beq.n	8004db0 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	0010      	movs	r0, r2
 8004d32:	4798      	blx	r3
    }
    return;
 8004d34:	e03c      	b.n	8004db0 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d36:	23a4      	movs	r3, #164	; 0xa4
 8004d38:	18fb      	adds	r3, r7, r3
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	4013      	ands	r3, r2
 8004d40:	d00a      	beq.n	8004d58 <HAL_UART_IRQHandler+0x5e0>
 8004d42:	23a0      	movs	r3, #160	; 0xa0
 8004d44:	18fb      	adds	r3, r7, r3
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2240      	movs	r2, #64	; 0x40
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	d004      	beq.n	8004d58 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	0018      	movs	r0, r3
 8004d52:	f000 fd6a 	bl	800582a <UART_EndTransmit_IT>
    return;
 8004d56:	e02c      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d58:	23a4      	movs	r3, #164	; 0xa4
 8004d5a:	18fb      	adds	r3, r7, r3
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	041b      	lsls	r3, r3, #16
 8004d62:	4013      	ands	r3, r2
 8004d64:	d00b      	beq.n	8004d7e <HAL_UART_IRQHandler+0x606>
 8004d66:	23a0      	movs	r3, #160	; 0xa0
 8004d68:	18fb      	adds	r3, r7, r3
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	2380      	movs	r3, #128	; 0x80
 8004d6e:	05db      	lsls	r3, r3, #23
 8004d70:	4013      	ands	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	0018      	movs	r0, r3
 8004d78:	f001 f9f4 	bl	8006164 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d7c:	e019      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d7e:	23a4      	movs	r3, #164	; 0xa4
 8004d80:	18fb      	adds	r3, r7, r3
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	2380      	movs	r3, #128	; 0x80
 8004d86:	045b      	lsls	r3, r3, #17
 8004d88:	4013      	ands	r3, r2
 8004d8a:	d012      	beq.n	8004db2 <HAL_UART_IRQHandler+0x63a>
 8004d8c:	23a0      	movs	r3, #160	; 0xa0
 8004d8e:	18fb      	adds	r3, r7, r3
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	da0d      	bge.n	8004db2 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	0018      	movs	r0, r3
 8004d9a:	f001 f9db 	bl	8006154 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d9e:	e008      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
      return;
 8004da0:	46c0      	nop			; (mov r8, r8)
 8004da2:	e006      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
    return;
 8004da4:	46c0      	nop			; (mov r8, r8)
 8004da6:	e004      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
      return;
 8004da8:	46c0      	nop			; (mov r8, r8)
 8004daa:	e002      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
      return;
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	e000      	b.n	8004db2 <HAL_UART_IRQHandler+0x63a>
    return;
 8004db0:	46c0      	nop			; (mov r8, r8)
  }
}
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b02a      	add	sp, #168	; 0xa8
 8004db6:	bdb0      	pop	{r4, r5, r7, pc}
 8004db8:	fffffeff 	.word	0xfffffeff
 8004dbc:	fffffedf 	.word	0xfffffedf
 8004dc0:	effffffe 	.word	0xeffffffe

08004dc4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004dcc:	46c0      	nop			; (mov r8, r8)
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	b002      	add	sp, #8
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004ddc:	46c0      	nop			; (mov r8, r8)
 8004dde:	46bd      	mov	sp, r7
 8004de0:	b002      	add	sp, #8
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dec:	46c0      	nop			; (mov r8, r8)
 8004dee:	46bd      	mov	sp, r7
 8004df0:	b002      	add	sp, #8
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b082      	sub	sp, #8
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	000a      	movs	r2, r1
 8004dfe:	1cbb      	adds	r3, r7, #2
 8004e00:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b002      	add	sp, #8
 8004e08:	bd80      	pop	{r7, pc}
	...

08004e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b088      	sub	sp, #32
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e14:	231a      	movs	r3, #26
 8004e16:	18fb      	adds	r3, r7, r3
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	695b      	ldr	r3, [r3, #20]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4abc      	ldr	r2, [pc, #752]	; (800512c <UART_SetConfig+0x320>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	0019      	movs	r1, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	69fa      	ldr	r2, [r7, #28]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4ab7      	ldr	r2, [pc, #732]	; (8005130 <UART_SetConfig+0x324>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	0019      	movs	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	430a      	orrs	r2, r1
 8004e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	699b      	ldr	r3, [r3, #24]
 8004e66:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a1b      	ldr	r3, [r3, #32]
 8004e6c:	69fa      	ldr	r2, [r7, #28]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	4aae      	ldr	r2, [pc, #696]	; (8005134 <UART_SetConfig+0x328>)
 8004e7a:	4013      	ands	r3, r2
 8004e7c:	0019      	movs	r1, r3
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69fa      	ldr	r2, [r7, #28]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8e:	220f      	movs	r2, #15
 8004e90:	4393      	bics	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4aa4      	ldr	r2, [pc, #656]	; (8005138 <UART_SetConfig+0x32c>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d127      	bne.n	8004efa <UART_SetConfig+0xee>
 8004eaa:	4ba4      	ldr	r3, [pc, #656]	; (800513c <UART_SetConfig+0x330>)
 8004eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eae:	2203      	movs	r2, #3
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	2b03      	cmp	r3, #3
 8004eb4:	d017      	beq.n	8004ee6 <UART_SetConfig+0xda>
 8004eb6:	d81b      	bhi.n	8004ef0 <UART_SetConfig+0xe4>
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d00a      	beq.n	8004ed2 <UART_SetConfig+0xc6>
 8004ebc:	d818      	bhi.n	8004ef0 <UART_SetConfig+0xe4>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <UART_SetConfig+0xbc>
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d00a      	beq.n	8004edc <UART_SetConfig+0xd0>
 8004ec6:	e013      	b.n	8004ef0 <UART_SetConfig+0xe4>
 8004ec8:	231b      	movs	r3, #27
 8004eca:	18fb      	adds	r3, r7, r3
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	e058      	b.n	8004f84 <UART_SetConfig+0x178>
 8004ed2:	231b      	movs	r3, #27
 8004ed4:	18fb      	adds	r3, r7, r3
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	e053      	b.n	8004f84 <UART_SetConfig+0x178>
 8004edc:	231b      	movs	r3, #27
 8004ede:	18fb      	adds	r3, r7, r3
 8004ee0:	2204      	movs	r2, #4
 8004ee2:	701a      	strb	r2, [r3, #0]
 8004ee4:	e04e      	b.n	8004f84 <UART_SetConfig+0x178>
 8004ee6:	231b      	movs	r3, #27
 8004ee8:	18fb      	adds	r3, r7, r3
 8004eea:	2208      	movs	r2, #8
 8004eec:	701a      	strb	r2, [r3, #0]
 8004eee:	e049      	b.n	8004f84 <UART_SetConfig+0x178>
 8004ef0:	231b      	movs	r3, #27
 8004ef2:	18fb      	adds	r3, r7, r3
 8004ef4:	2210      	movs	r2, #16
 8004ef6:	701a      	strb	r2, [r3, #0]
 8004ef8:	e044      	b.n	8004f84 <UART_SetConfig+0x178>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a90      	ldr	r2, [pc, #576]	; (8005140 <UART_SetConfig+0x334>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d127      	bne.n	8004f54 <UART_SetConfig+0x148>
 8004f04:	4b8d      	ldr	r3, [pc, #564]	; (800513c <UART_SetConfig+0x330>)
 8004f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f08:	220c      	movs	r2, #12
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	d017      	beq.n	8004f40 <UART_SetConfig+0x134>
 8004f10:	d81b      	bhi.n	8004f4a <UART_SetConfig+0x13e>
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d00a      	beq.n	8004f2c <UART_SetConfig+0x120>
 8004f16:	d818      	bhi.n	8004f4a <UART_SetConfig+0x13e>
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <UART_SetConfig+0x116>
 8004f1c:	2b04      	cmp	r3, #4
 8004f1e:	d00a      	beq.n	8004f36 <UART_SetConfig+0x12a>
 8004f20:	e013      	b.n	8004f4a <UART_SetConfig+0x13e>
 8004f22:	231b      	movs	r3, #27
 8004f24:	18fb      	adds	r3, r7, r3
 8004f26:	2200      	movs	r2, #0
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	e02b      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f2c:	231b      	movs	r3, #27
 8004f2e:	18fb      	adds	r3, r7, r3
 8004f30:	2202      	movs	r2, #2
 8004f32:	701a      	strb	r2, [r3, #0]
 8004f34:	e026      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f36:	231b      	movs	r3, #27
 8004f38:	18fb      	adds	r3, r7, r3
 8004f3a:	2204      	movs	r2, #4
 8004f3c:	701a      	strb	r2, [r3, #0]
 8004f3e:	e021      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f40:	231b      	movs	r3, #27
 8004f42:	18fb      	adds	r3, r7, r3
 8004f44:	2208      	movs	r2, #8
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	e01c      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f4a:	231b      	movs	r3, #27
 8004f4c:	18fb      	adds	r3, r7, r3
 8004f4e:	2210      	movs	r2, #16
 8004f50:	701a      	strb	r2, [r3, #0]
 8004f52:	e017      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a7a      	ldr	r2, [pc, #488]	; (8005144 <UART_SetConfig+0x338>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d104      	bne.n	8004f68 <UART_SetConfig+0x15c>
 8004f5e:	231b      	movs	r3, #27
 8004f60:	18fb      	adds	r3, r7, r3
 8004f62:	2200      	movs	r2, #0
 8004f64:	701a      	strb	r2, [r3, #0]
 8004f66:	e00d      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a76      	ldr	r2, [pc, #472]	; (8005148 <UART_SetConfig+0x33c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d104      	bne.n	8004f7c <UART_SetConfig+0x170>
 8004f72:	231b      	movs	r3, #27
 8004f74:	18fb      	adds	r3, r7, r3
 8004f76:	2200      	movs	r2, #0
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	e003      	b.n	8004f84 <UART_SetConfig+0x178>
 8004f7c:	231b      	movs	r3, #27
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	2210      	movs	r2, #16
 8004f82:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	021b      	lsls	r3, r3, #8
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d000      	beq.n	8004f92 <UART_SetConfig+0x186>
 8004f90:	e065      	b.n	800505e <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8004f92:	231b      	movs	r3, #27
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d015      	beq.n	8004fc8 <UART_SetConfig+0x1bc>
 8004f9c:	dc18      	bgt.n	8004fd0 <UART_SetConfig+0x1c4>
 8004f9e:	2b04      	cmp	r3, #4
 8004fa0:	d00d      	beq.n	8004fbe <UART_SetConfig+0x1b2>
 8004fa2:	dc15      	bgt.n	8004fd0 <UART_SetConfig+0x1c4>
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d002      	beq.n	8004fae <UART_SetConfig+0x1a2>
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d005      	beq.n	8004fb8 <UART_SetConfig+0x1ac>
 8004fac:	e010      	b.n	8004fd0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fae:	f7fe f9a7 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 8004fb2:	0003      	movs	r3, r0
 8004fb4:	617b      	str	r3, [r7, #20]
        break;
 8004fb6:	e012      	b.n	8004fde <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b64      	ldr	r3, [pc, #400]	; (800514c <UART_SetConfig+0x340>)
 8004fba:	617b      	str	r3, [r7, #20]
        break;
 8004fbc:	e00f      	b.n	8004fde <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7fe f915 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 8004fc2:	0003      	movs	r3, r0
 8004fc4:	617b      	str	r3, [r7, #20]
        break;
 8004fc6:	e00a      	b.n	8004fde <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	021b      	lsls	r3, r3, #8
 8004fcc:	617b      	str	r3, [r7, #20]
        break;
 8004fce:	e006      	b.n	8004fde <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004fd4:	231a      	movs	r3, #26
 8004fd6:	18fb      	adds	r3, r7, r3
 8004fd8:	2201      	movs	r2, #1
 8004fda:	701a      	strb	r2, [r3, #0]
        break;
 8004fdc:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d100      	bne.n	8004fe6 <UART_SetConfig+0x1da>
 8004fe4:	e08d      	b.n	8005102 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004fea:	4b59      	ldr	r3, [pc, #356]	; (8005150 <UART_SetConfig+0x344>)
 8004fec:	0052      	lsls	r2, r2, #1
 8004fee:	5ad3      	ldrh	r3, [r2, r3]
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f7fb f890 	bl	8000118 <__udivsi3>
 8004ff8:	0003      	movs	r3, r0
 8004ffa:	005a      	lsls	r2, r3, #1
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	085b      	lsrs	r3, r3, #1
 8005002:	18d2      	adds	r2, r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	0019      	movs	r1, r3
 800500a:	0010      	movs	r0, r2
 800500c:	f7fb f884 	bl	8000118 <__udivsi3>
 8005010:	0003      	movs	r3, r0
 8005012:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d91c      	bls.n	8005054 <UART_SetConfig+0x248>
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	2380      	movs	r3, #128	; 0x80
 800501e:	025b      	lsls	r3, r3, #9
 8005020:	429a      	cmp	r2, r3
 8005022:	d217      	bcs.n	8005054 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	b29a      	uxth	r2, r3
 8005028:	200e      	movs	r0, #14
 800502a:	183b      	adds	r3, r7, r0
 800502c:	210f      	movs	r1, #15
 800502e:	438a      	bics	r2, r1
 8005030:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	085b      	lsrs	r3, r3, #1
 8005036:	b29b      	uxth	r3, r3
 8005038:	2207      	movs	r2, #7
 800503a:	4013      	ands	r3, r2
 800503c:	b299      	uxth	r1, r3
 800503e:	183b      	adds	r3, r7, r0
 8005040:	183a      	adds	r2, r7, r0
 8005042:	8812      	ldrh	r2, [r2, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	183a      	adds	r2, r7, r0
 800504e:	8812      	ldrh	r2, [r2, #0]
 8005050:	60da      	str	r2, [r3, #12]
 8005052:	e056      	b.n	8005102 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8005054:	231a      	movs	r3, #26
 8005056:	18fb      	adds	r3, r7, r3
 8005058:	2201      	movs	r2, #1
 800505a:	701a      	strb	r2, [r3, #0]
 800505c:	e051      	b.n	8005102 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800505e:	231b      	movs	r3, #27
 8005060:	18fb      	adds	r3, r7, r3
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b08      	cmp	r3, #8
 8005066:	d015      	beq.n	8005094 <UART_SetConfig+0x288>
 8005068:	dc18      	bgt.n	800509c <UART_SetConfig+0x290>
 800506a:	2b04      	cmp	r3, #4
 800506c:	d00d      	beq.n	800508a <UART_SetConfig+0x27e>
 800506e:	dc15      	bgt.n	800509c <UART_SetConfig+0x290>
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <UART_SetConfig+0x26e>
 8005074:	2b02      	cmp	r3, #2
 8005076:	d005      	beq.n	8005084 <UART_SetConfig+0x278>
 8005078:	e010      	b.n	800509c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800507a:	f7fe f941 	bl	8003300 <HAL_RCC_GetPCLK1Freq>
 800507e:	0003      	movs	r3, r0
 8005080:	617b      	str	r3, [r7, #20]
        break;
 8005082:	e012      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005084:	4b31      	ldr	r3, [pc, #196]	; (800514c <UART_SetConfig+0x340>)
 8005086:	617b      	str	r3, [r7, #20]
        break;
 8005088:	e00f      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800508a:	f7fe f8af 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 800508e:	0003      	movs	r3, r0
 8005090:	617b      	str	r3, [r7, #20]
        break;
 8005092:	e00a      	b.n	80050aa <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005094:	2380      	movs	r3, #128	; 0x80
 8005096:	021b      	lsls	r3, r3, #8
 8005098:	617b      	str	r3, [r7, #20]
        break;
 800509a:	e006      	b.n	80050aa <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80050a0:	231a      	movs	r3, #26
 80050a2:	18fb      	adds	r3, r7, r3
 80050a4:	2201      	movs	r2, #1
 80050a6:	701a      	strb	r2, [r3, #0]
        break;
 80050a8:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d028      	beq.n	8005102 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050b4:	4b26      	ldr	r3, [pc, #152]	; (8005150 <UART_SetConfig+0x344>)
 80050b6:	0052      	lsls	r2, r2, #1
 80050b8:	5ad3      	ldrh	r3, [r2, r3]
 80050ba:	0019      	movs	r1, r3
 80050bc:	6978      	ldr	r0, [r7, #20]
 80050be:	f7fb f82b 	bl	8000118 <__udivsi3>
 80050c2:	0003      	movs	r3, r0
 80050c4:	001a      	movs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	085b      	lsrs	r3, r3, #1
 80050cc:	18d2      	adds	r2, r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	0019      	movs	r1, r3
 80050d4:	0010      	movs	r0, r2
 80050d6:	f7fb f81f 	bl	8000118 <__udivsi3>
 80050da:	0003      	movs	r3, r0
 80050dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b0f      	cmp	r3, #15
 80050e2:	d90a      	bls.n	80050fa <UART_SetConfig+0x2ee>
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	2380      	movs	r3, #128	; 0x80
 80050e8:	025b      	lsls	r3, r3, #9
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d205      	bcs.n	80050fa <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e003      	b.n	8005102 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80050fa:	231a      	movs	r3, #26
 80050fc:	18fb      	adds	r3, r7, r3
 80050fe:	2201      	movs	r2, #1
 8005100:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	226a      	movs	r2, #106	; 0x6a
 8005106:	2101      	movs	r1, #1
 8005108:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2268      	movs	r2, #104	; 0x68
 800510e:	2101      	movs	r1, #1
 8005110:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800511e:	231a      	movs	r3, #26
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	781b      	ldrb	r3, [r3, #0]
}
 8005124:	0018      	movs	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	b008      	add	sp, #32
 800512a:	bd80      	pop	{r7, pc}
 800512c:	cfff69f3 	.word	0xcfff69f3
 8005130:	ffffcfff 	.word	0xffffcfff
 8005134:	11fff4ff 	.word	0x11fff4ff
 8005138:	40013800 	.word	0x40013800
 800513c:	40021000 	.word	0x40021000
 8005140:	40004400 	.word	0x40004400
 8005144:	40004800 	.word	0x40004800
 8005148:	40004c00 	.word	0x40004c00
 800514c:	00f42400 	.word	0x00f42400
 8005150:	08007f80 	.word	0x08007f80

08005154 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005160:	2201      	movs	r2, #1
 8005162:	4013      	ands	r3, r2
 8005164:	d00b      	beq.n	800517e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	4a4a      	ldr	r2, [pc, #296]	; (8005298 <UART_AdvFeatureConfig+0x144>)
 800516e:	4013      	ands	r3, r2
 8005170:	0019      	movs	r1, r3
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	430a      	orrs	r2, r1
 800517c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005182:	2202      	movs	r2, #2
 8005184:	4013      	ands	r3, r2
 8005186:	d00b      	beq.n	80051a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	4a43      	ldr	r2, [pc, #268]	; (800529c <UART_AdvFeatureConfig+0x148>)
 8005190:	4013      	ands	r3, r2
 8005192:	0019      	movs	r1, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051a4:	2204      	movs	r2, #4
 80051a6:	4013      	ands	r3, r2
 80051a8:	d00b      	beq.n	80051c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a3b      	ldr	r2, [pc, #236]	; (80052a0 <UART_AdvFeatureConfig+0x14c>)
 80051b2:	4013      	ands	r3, r2
 80051b4:	0019      	movs	r1, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c6:	2208      	movs	r2, #8
 80051c8:	4013      	ands	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <UART_AdvFeatureConfig+0x150>)
 80051d4:	4013      	ands	r3, r2
 80051d6:	0019      	movs	r1, r3
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	430a      	orrs	r2, r1
 80051e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e8:	2210      	movs	r2, #16
 80051ea:	4013      	ands	r3, r2
 80051ec:	d00b      	beq.n	8005206 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	4a2c      	ldr	r2, [pc, #176]	; (80052a8 <UART_AdvFeatureConfig+0x154>)
 80051f6:	4013      	ands	r3, r2
 80051f8:	0019      	movs	r1, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	430a      	orrs	r2, r1
 8005204:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520a:	2220      	movs	r2, #32
 800520c:	4013      	ands	r3, r2
 800520e:	d00b      	beq.n	8005228 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	4a25      	ldr	r2, [pc, #148]	; (80052ac <UART_AdvFeatureConfig+0x158>)
 8005218:	4013      	ands	r3, r2
 800521a:	0019      	movs	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522c:	2240      	movs	r2, #64	; 0x40
 800522e:	4013      	ands	r3, r2
 8005230:	d01d      	beq.n	800526e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	4a1d      	ldr	r2, [pc, #116]	; (80052b0 <UART_AdvFeatureConfig+0x15c>)
 800523a:	4013      	ands	r3, r2
 800523c:	0019      	movs	r1, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	430a      	orrs	r2, r1
 8005248:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800524e:	2380      	movs	r3, #128	; 0x80
 8005250:	035b      	lsls	r3, r3, #13
 8005252:	429a      	cmp	r2, r3
 8005254:	d10b      	bne.n	800526e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	4a15      	ldr	r2, [pc, #84]	; (80052b4 <UART_AdvFeatureConfig+0x160>)
 800525e:	4013      	ands	r3, r2
 8005260:	0019      	movs	r1, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005272:	2280      	movs	r2, #128	; 0x80
 8005274:	4013      	ands	r3, r2
 8005276:	d00b      	beq.n	8005290 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	4a0e      	ldr	r2, [pc, #56]	; (80052b8 <UART_AdvFeatureConfig+0x164>)
 8005280:	4013      	ands	r3, r2
 8005282:	0019      	movs	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }
}
 8005290:	46c0      	nop			; (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b002      	add	sp, #8
 8005296:	bd80      	pop	{r7, pc}
 8005298:	fffdffff 	.word	0xfffdffff
 800529c:	fffeffff 	.word	0xfffeffff
 80052a0:	fffbffff 	.word	0xfffbffff
 80052a4:	ffff7fff 	.word	0xffff7fff
 80052a8:	ffffefff 	.word	0xffffefff
 80052ac:	ffffdfff 	.word	0xffffdfff
 80052b0:	ffefffff 	.word	0xffefffff
 80052b4:	ff9fffff 	.word	0xff9fffff
 80052b8:	fff7ffff 	.word	0xfff7ffff

080052bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2290      	movs	r2, #144	; 0x90
 80052c8:	2100      	movs	r1, #0
 80052ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052cc:	f7fc fe88 	bl	8001fe0 <HAL_GetTick>
 80052d0:	0003      	movs	r3, r0
 80052d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	2208      	movs	r2, #8
 80052dc:	4013      	ands	r3, r2
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d10c      	bne.n	80052fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2280      	movs	r2, #128	; 0x80
 80052e6:	0391      	lsls	r1, r2, #14
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4a1a      	ldr	r2, [pc, #104]	; (8005354 <UART_CheckIdleState+0x98>)
 80052ec:	9200      	str	r2, [sp, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f000 f832 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 80052f4:	1e03      	subs	r3, r0, #0
 80052f6:	d001      	beq.n	80052fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e026      	b.n	800534a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2204      	movs	r2, #4
 8005304:	4013      	ands	r3, r2
 8005306:	2b04      	cmp	r3, #4
 8005308:	d10c      	bne.n	8005324 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2280      	movs	r2, #128	; 0x80
 800530e:	03d1      	lsls	r1, r2, #15
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <UART_CheckIdleState+0x98>)
 8005314:	9200      	str	r2, [sp, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	f000 f81e 	bl	8005358 <UART_WaitOnFlagUntilTimeout>
 800531c:	1e03      	subs	r3, r0, #0
 800531e:	d001      	beq.n	8005324 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e012      	b.n	800534a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2288      	movs	r2, #136	; 0x88
 8005328:	2120      	movs	r1, #32
 800532a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	228c      	movs	r2, #140	; 0x8c
 8005330:	2120      	movs	r1, #32
 8005332:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2284      	movs	r2, #132	; 0x84
 8005344:	2100      	movs	r1, #0
 8005346:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005348:	2300      	movs	r3, #0
}
 800534a:	0018      	movs	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	b004      	add	sp, #16
 8005350:	bd80      	pop	{r7, pc}
 8005352:	46c0      	nop			; (mov r8, r8)
 8005354:	01ffffff 	.word	0x01ffffff

08005358 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b094      	sub	sp, #80	; 0x50
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	1dfb      	adds	r3, r7, #7
 8005366:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005368:	e0a7      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800536a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800536c:	3301      	adds	r3, #1
 800536e:	d100      	bne.n	8005372 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005370:	e0a3      	b.n	80054ba <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005372:	f7fc fe35 	bl	8001fe0 <HAL_GetTick>
 8005376:	0002      	movs	r2, r0
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800537e:	429a      	cmp	r2, r3
 8005380:	d302      	bcc.n	8005388 <UART_WaitOnFlagUntilTimeout+0x30>
 8005382:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005384:	2b00      	cmp	r3, #0
 8005386:	d13f      	bne.n	8005408 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005388:	f3ef 8310 	mrs	r3, PRIMASK
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
 8005392:	2301      	movs	r3, #1
 8005394:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	f383 8810 	msr	PRIMASK, r3
}
 800539c:	46c0      	nop			; (mov r8, r8)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	494e      	ldr	r1, [pc, #312]	; (80054e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80053aa:	400a      	ands	r2, r1
 80053ac:	601a      	str	r2, [r3, #0]
 80053ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b4:	f383 8810 	msr	PRIMASK, r3
}
 80053b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053ba:	f3ef 8310 	mrs	r3, PRIMASK
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80053c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053c2:	643b      	str	r3, [r7, #64]	; 0x40
 80053c4:	2301      	movs	r3, #1
 80053c6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ca:	f383 8810 	msr	PRIMASK, r3
}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2101      	movs	r1, #1
 80053dc:	438a      	bics	r2, r1
 80053de:	609a      	str	r2, [r3, #8]
 80053e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e6:	f383 8810 	msr	PRIMASK, r3
}
 80053ea:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2288      	movs	r2, #136	; 0x88
 80053f0:	2120      	movs	r1, #32
 80053f2:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	228c      	movs	r2, #140	; 0x8c
 80053f8:	2120      	movs	r1, #32
 80053fa:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2284      	movs	r2, #132	; 0x84
 8005400:	2100      	movs	r1, #0
 8005402:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e069      	b.n	80054dc <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2204      	movs	r2, #4
 8005410:	4013      	ands	r3, r2
 8005412:	d052      	beq.n	80054ba <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	2380      	movs	r3, #128	; 0x80
 800541c:	011b      	lsls	r3, r3, #4
 800541e:	401a      	ands	r2, r3
 8005420:	2380      	movs	r3, #128	; 0x80
 8005422:	011b      	lsls	r3, r3, #4
 8005424:	429a      	cmp	r2, r3
 8005426:	d148      	bne.n	80054ba <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2280      	movs	r2, #128	; 0x80
 800542e:	0112      	lsls	r2, r2, #4
 8005430:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005432:	f3ef 8310 	mrs	r3, PRIMASK
 8005436:	613b      	str	r3, [r7, #16]
  return(result);
 8005438:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800543a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800543c:	2301      	movs	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f383 8810 	msr	PRIMASK, r3
}
 8005446:	46c0      	nop			; (mov r8, r8)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4924      	ldr	r1, [pc, #144]	; (80054e4 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005454:	400a      	ands	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800545a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	f383 8810 	msr	PRIMASK, r3
}
 8005462:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005464:	f3ef 8310 	mrs	r3, PRIMASK
 8005468:	61fb      	str	r3, [r7, #28]
  return(result);
 800546a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800546c:	64bb      	str	r3, [r7, #72]	; 0x48
 800546e:	2301      	movs	r3, #1
 8005470:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005472:	6a3b      	ldr	r3, [r7, #32]
 8005474:	f383 8810 	msr	PRIMASK, r3
}
 8005478:	46c0      	nop			; (mov r8, r8)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689a      	ldr	r2, [r3, #8]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2101      	movs	r1, #1
 8005486:	438a      	bics	r2, r1
 8005488:	609a      	str	r2, [r3, #8]
 800548a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800548e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005490:	f383 8810 	msr	PRIMASK, r3
}
 8005494:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2288      	movs	r2, #136	; 0x88
 800549a:	2120      	movs	r1, #32
 800549c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	228c      	movs	r2, #140	; 0x8c
 80054a2:	2120      	movs	r1, #32
 80054a4:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2290      	movs	r2, #144	; 0x90
 80054aa:	2120      	movs	r1, #32
 80054ac:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2284      	movs	r2, #132	; 0x84
 80054b2:	2100      	movs	r1, #0
 80054b4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e010      	b.n	80054dc <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	69db      	ldr	r3, [r3, #28]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	4013      	ands	r3, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	425a      	negs	r2, r3
 80054ca:	4153      	adcs	r3, r2
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	001a      	movs	r2, r3
 80054d0:	1dfb      	adds	r3, r7, #7
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d100      	bne.n	80054da <UART_WaitOnFlagUntilTimeout+0x182>
 80054d8:	e747      	b.n	800536a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	0018      	movs	r0, r3
 80054de:	46bd      	mov	sp, r7
 80054e0:	b014      	add	sp, #80	; 0x50
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	fffffe5f 	.word	0xfffffe5f

080054e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b098      	sub	sp, #96	; 0x60
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	60f8      	str	r0, [r7, #12]
 80054f0:	60b9      	str	r1, [r7, #8]
 80054f2:	1dbb      	adds	r3, r7, #6
 80054f4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	68ba      	ldr	r2, [r7, #8]
 80054fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	1dba      	adds	r2, r7, #6
 8005500:	215c      	movs	r1, #92	; 0x5c
 8005502:	8812      	ldrh	r2, [r2, #0]
 8005504:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	1dba      	adds	r2, r7, #6
 800550a:	215e      	movs	r1, #94	; 0x5e
 800550c:	8812      	ldrh	r2, [r2, #0]
 800550e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	689a      	ldr	r2, [r3, #8]
 800551a:	2380      	movs	r3, #128	; 0x80
 800551c:	015b      	lsls	r3, r3, #5
 800551e:	429a      	cmp	r2, r3
 8005520:	d10d      	bne.n	800553e <UART_Start_Receive_IT+0x56>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d104      	bne.n	8005534 <UART_Start_Receive_IT+0x4c>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2260      	movs	r2, #96	; 0x60
 800552e:	497b      	ldr	r1, [pc, #492]	; (800571c <UART_Start_Receive_IT+0x234>)
 8005530:	5299      	strh	r1, [r3, r2]
 8005532:	e02e      	b.n	8005592 <UART_Start_Receive_IT+0xaa>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2260      	movs	r2, #96	; 0x60
 8005538:	21ff      	movs	r1, #255	; 0xff
 800553a:	5299      	strh	r1, [r3, r2]
 800553c:	e029      	b.n	8005592 <UART_Start_Receive_IT+0xaa>
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d10d      	bne.n	8005562 <UART_Start_Receive_IT+0x7a>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d104      	bne.n	8005558 <UART_Start_Receive_IT+0x70>
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2260      	movs	r2, #96	; 0x60
 8005552:	21ff      	movs	r1, #255	; 0xff
 8005554:	5299      	strh	r1, [r3, r2]
 8005556:	e01c      	b.n	8005592 <UART_Start_Receive_IT+0xaa>
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2260      	movs	r2, #96	; 0x60
 800555c:	217f      	movs	r1, #127	; 0x7f
 800555e:	5299      	strh	r1, [r3, r2]
 8005560:	e017      	b.n	8005592 <UART_Start_Receive_IT+0xaa>
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	2380      	movs	r3, #128	; 0x80
 8005568:	055b      	lsls	r3, r3, #21
 800556a:	429a      	cmp	r2, r3
 800556c:	d10d      	bne.n	800558a <UART_Start_Receive_IT+0xa2>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d104      	bne.n	8005580 <UART_Start_Receive_IT+0x98>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2260      	movs	r2, #96	; 0x60
 800557a:	217f      	movs	r1, #127	; 0x7f
 800557c:	5299      	strh	r1, [r3, r2]
 800557e:	e008      	b.n	8005592 <UART_Start_Receive_IT+0xaa>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2260      	movs	r2, #96	; 0x60
 8005584:	213f      	movs	r1, #63	; 0x3f
 8005586:	5299      	strh	r1, [r3, r2]
 8005588:	e003      	b.n	8005592 <UART_Start_Receive_IT+0xaa>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2260      	movs	r2, #96	; 0x60
 800558e:	2100      	movs	r1, #0
 8005590:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2290      	movs	r2, #144	; 0x90
 8005596:	2100      	movs	r1, #0
 8005598:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	228c      	movs	r2, #140	; 0x8c
 800559e:	2122      	movs	r1, #34	; 0x22
 80055a0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a2:	f3ef 8310 	mrs	r3, PRIMASK
 80055a6:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80055a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055ac:	2301      	movs	r3, #1
 80055ae:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2101      	movs	r1, #1
 80055c4:	430a      	orrs	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80055ca:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055d8:	2380      	movs	r3, #128	; 0x80
 80055da:	059b      	lsls	r3, r3, #22
 80055dc:	429a      	cmp	r2, r3
 80055de:	d150      	bne.n	8005682 <UART_Start_Receive_IT+0x19a>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2268      	movs	r2, #104	; 0x68
 80055e4:	5a9b      	ldrh	r3, [r3, r2]
 80055e6:	1dba      	adds	r2, r7, #6
 80055e8:	8812      	ldrh	r2, [r2, #0]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d349      	bcc.n	8005682 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	2380      	movs	r3, #128	; 0x80
 80055f4:	015b      	lsls	r3, r3, #5
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d107      	bne.n	800560a <UART_Start_Receive_IT+0x122>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4a46      	ldr	r2, [pc, #280]	; (8005720 <UART_Start_Receive_IT+0x238>)
 8005606:	675a      	str	r2, [r3, #116]	; 0x74
 8005608:	e002      	b.n	8005610 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	4a45      	ldr	r2, [pc, #276]	; (8005724 <UART_Start_Receive_IT+0x23c>)
 800560e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	691b      	ldr	r3, [r3, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d019      	beq.n	800564c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005618:	f3ef 8310 	mrs	r3, PRIMASK
 800561c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005620:	65bb      	str	r3, [r7, #88]	; 0x58
 8005622:	2301      	movs	r3, #1
 8005624:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005628:	f383 8810 	msr	PRIMASK, r3
}
 800562c:	46c0      	nop			; (mov r8, r8)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2180      	movs	r1, #128	; 0x80
 800563a:	0049      	lsls	r1, r1, #1
 800563c:	430a      	orrs	r2, r1
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005642:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005646:	f383 8810 	msr	PRIMASK, r3
}
 800564a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800564c:	f3ef 8310 	mrs	r3, PRIMASK
 8005650:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005652:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005654:	657b      	str	r3, [r7, #84]	; 0x54
 8005656:	2301      	movs	r3, #1
 8005658:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800565a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800565c:	f383 8810 	msr	PRIMASK, r3
}
 8005660:	46c0      	nop			; (mov r8, r8)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	2180      	movs	r1, #128	; 0x80
 800566e:	0549      	lsls	r1, r1, #21
 8005670:	430a      	orrs	r2, r1
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005676:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	f383 8810 	msr	PRIMASK, r3
}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	e047      	b.n	8005712 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	2380      	movs	r3, #128	; 0x80
 8005688:	015b      	lsls	r3, r3, #5
 800568a:	429a      	cmp	r2, r3
 800568c:	d107      	bne.n	800569e <UART_Start_Receive_IT+0x1b6>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d103      	bne.n	800569e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	4a23      	ldr	r2, [pc, #140]	; (8005728 <UART_Start_Receive_IT+0x240>)
 800569a:	675a      	str	r2, [r3, #116]	; 0x74
 800569c:	e002      	b.n	80056a4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	4a22      	ldr	r2, [pc, #136]	; (800572c <UART_Start_Receive_IT+0x244>)
 80056a2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d019      	beq.n	80056e0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ac:	f3ef 8310 	mrs	r3, PRIMASK
 80056b0:	61fb      	str	r3, [r7, #28]
  return(result);
 80056b2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80056b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056b6:	2301      	movs	r3, #1
 80056b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	f383 8810 	msr	PRIMASK, r3
}
 80056c0:	46c0      	nop			; (mov r8, r8)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2190      	movs	r1, #144	; 0x90
 80056ce:	0049      	lsls	r1, r1, #1
 80056d0:	430a      	orrs	r2, r1
 80056d2:	601a      	str	r2, [r3, #0]
 80056d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056d6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f383 8810 	msr	PRIMASK, r3
}
 80056de:	e018      	b.n	8005712 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056e0:	f3ef 8310 	mrs	r3, PRIMASK
 80056e4:	613b      	str	r3, [r7, #16]
  return(result);
 80056e6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056e8:	653b      	str	r3, [r7, #80]	; 0x50
 80056ea:	2301      	movs	r3, #1
 80056ec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	f383 8810 	msr	PRIMASK, r3
}
 80056f4:	46c0      	nop			; (mov r8, r8)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2120      	movs	r1, #32
 8005702:	430a      	orrs	r2, r1
 8005704:	601a      	str	r2, [r3, #0]
 8005706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005708:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	f383 8810 	msr	PRIMASK, r3
}
 8005710:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b018      	add	sp, #96	; 0x60
 800571a:	bd80      	pop	{r7, pc}
 800571c:	000001ff 	.word	0x000001ff
 8005720:	08005e59 	.word	0x08005e59
 8005724:	08005b6d 	.word	0x08005b6d
 8005728:	080059f9 	.word	0x080059f9
 800572c:	08005885 	.word	0x08005885

08005730 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08e      	sub	sp, #56	; 0x38
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005738:	f3ef 8310 	mrs	r3, PRIMASK
 800573c:	617b      	str	r3, [r7, #20]
  return(result);
 800573e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005740:	637b      	str	r3, [r7, #52]	; 0x34
 8005742:	2301      	movs	r3, #1
 8005744:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	f383 8810 	msr	PRIMASK, r3
}
 800574c:	46c0      	nop			; (mov r8, r8)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4926      	ldr	r1, [pc, #152]	; (80057f4 <UART_EndRxTransfer+0xc4>)
 800575a:	400a      	ands	r2, r1
 800575c:	601a      	str	r2, [r3, #0]
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005760:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	f383 8810 	msr	PRIMASK, r3
}
 8005768:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800576a:	f3ef 8310 	mrs	r3, PRIMASK
 800576e:	623b      	str	r3, [r7, #32]
  return(result);
 8005770:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005772:	633b      	str	r3, [r7, #48]	; 0x30
 8005774:	2301      	movs	r3, #1
 8005776:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800577a:	f383 8810 	msr	PRIMASK, r3
}
 800577e:	46c0      	nop			; (mov r8, r8)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	491b      	ldr	r1, [pc, #108]	; (80057f8 <UART_EndRxTransfer+0xc8>)
 800578c:	400a      	ands	r2, r1
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005792:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005796:	f383 8810 	msr	PRIMASK, r3
}
 800579a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a0:	2b01      	cmp	r3, #1
 80057a2:	d118      	bne.n	80057d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057a4:	f3ef 8310 	mrs	r3, PRIMASK
 80057a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80057aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ae:	2301      	movs	r3, #1
 80057b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f383 8810 	msr	PRIMASK, r3
}
 80057b8:	46c0      	nop			; (mov r8, r8)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2110      	movs	r1, #16
 80057c6:	438a      	bics	r2, r1
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f383 8810 	msr	PRIMASK, r3
}
 80057d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	228c      	movs	r2, #140	; 0x8c
 80057da:	2120      	movs	r1, #32
 80057dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	675a      	str	r2, [r3, #116]	; 0x74
}
 80057ea:	46c0      	nop			; (mov r8, r8)
 80057ec:	46bd      	mov	sp, r7
 80057ee:	b00e      	add	sp, #56	; 0x38
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	46c0      	nop			; (mov r8, r8)
 80057f4:	fffffedf 	.word	0xfffffedf
 80057f8:	effffffe 	.word	0xeffffffe

080057fc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005808:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	225e      	movs	r2, #94	; 0x5e
 800580e:	2100      	movs	r1, #0
 8005810:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2256      	movs	r2, #86	; 0x56
 8005816:	2100      	movs	r1, #0
 8005818:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	0018      	movs	r0, r3
 800581e:	f7ff fae1 	bl	8004de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005822:	46c0      	nop			; (mov r8, r8)
 8005824:	46bd      	mov	sp, r7
 8005826:	b004      	add	sp, #16
 8005828:	bd80      	pop	{r7, pc}

0800582a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005832:	f3ef 8310 	mrs	r3, PRIMASK
 8005836:	60bb      	str	r3, [r7, #8]
  return(result);
 8005838:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	2301      	movs	r3, #1
 800583e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f383 8810 	msr	PRIMASK, r3
}
 8005846:	46c0      	nop			; (mov r8, r8)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681a      	ldr	r2, [r3, #0]
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2140      	movs	r1, #64	; 0x40
 8005854:	438a      	bics	r2, r1
 8005856:	601a      	str	r2, [r3, #0]
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f383 8810 	msr	PRIMASK, r3
}
 8005862:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2288      	movs	r2, #136	; 0x88
 8005868:	2120      	movs	r1, #32
 800586a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	0018      	movs	r0, r3
 8005876:	f7ff faa5 	bl	8004dc4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800587a:	46c0      	nop			; (mov r8, r8)
 800587c:	46bd      	mov	sp, r7
 800587e:	b006      	add	sp, #24
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b090      	sub	sp, #64	; 0x40
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800588c:	203e      	movs	r0, #62	; 0x3e
 800588e:	183b      	adds	r3, r7, r0
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	2160      	movs	r1, #96	; 0x60
 8005894:	5a52      	ldrh	r2, [r2, r1]
 8005896:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	228c      	movs	r2, #140	; 0x8c
 800589c:	589b      	ldr	r3, [r3, r2]
 800589e:	2b22      	cmp	r3, #34	; 0x22
 80058a0:	d000      	beq.n	80058a4 <UART_RxISR_8BIT+0x20>
 80058a2:	e09a      	b.n	80059da <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058aa:	213c      	movs	r1, #60	; 0x3c
 80058ac:	187b      	adds	r3, r7, r1
 80058ae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058b0:	187b      	adds	r3, r7, r1
 80058b2:	881b      	ldrh	r3, [r3, #0]
 80058b4:	b2da      	uxtb	r2, r3
 80058b6:	183b      	adds	r3, r7, r0
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	b2d9      	uxtb	r1, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c0:	400a      	ands	r2, r1
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ca:	1c5a      	adds	r2, r3, #1
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	225e      	movs	r2, #94	; 0x5e
 80058d4:	5a9b      	ldrh	r3, [r3, r2]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	3b01      	subs	r3, #1
 80058da:	b299      	uxth	r1, r3
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	225e      	movs	r2, #94	; 0x5e
 80058e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	225e      	movs	r2, #94	; 0x5e
 80058e6:	5a9b      	ldrh	r3, [r3, r2]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d000      	beq.n	80058f0 <UART_RxISR_8BIT+0x6c>
 80058ee:	e07c      	b.n	80059ea <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f0:	f3ef 8310 	mrs	r3, PRIMASK
 80058f4:	61bb      	str	r3, [r7, #24]
  return(result);
 80058f6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80058fa:	2301      	movs	r3, #1
 80058fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	f383 8810 	msr	PRIMASK, r3
}
 8005904:	46c0      	nop			; (mov r8, r8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4938      	ldr	r1, [pc, #224]	; (80059f4 <UART_RxISR_8BIT+0x170>)
 8005912:	400a      	ands	r2, r1
 8005914:	601a      	str	r2, [r3, #0]
 8005916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005918:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	6a3b      	ldr	r3, [r7, #32]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005922:	f3ef 8310 	mrs	r3, PRIMASK
 8005926:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	637b      	str	r3, [r7, #52]	; 0x34
 800592c:	2301      	movs	r3, #1
 800592e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005932:	f383 8810 	msr	PRIMASK, r3
}
 8005936:	46c0      	nop			; (mov r8, r8)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2101      	movs	r1, #1
 8005944:	438a      	bics	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	f383 8810 	msr	PRIMASK, r3
}
 8005952:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	228c      	movs	r2, #140	; 0x8c
 8005958:	2120      	movs	r1, #32
 800595a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800596c:	2b01      	cmp	r3, #1
 800596e:	d12f      	bne.n	80059d0 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005976:	f3ef 8310 	mrs	r3, PRIMASK
 800597a:	60fb      	str	r3, [r7, #12]
  return(result);
 800597c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800597e:	633b      	str	r3, [r7, #48]	; 0x30
 8005980:	2301      	movs	r3, #1
 8005982:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f383 8810 	msr	PRIMASK, r3
}
 800598a:	46c0      	nop			; (mov r8, r8)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681a      	ldr	r2, [r3, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2110      	movs	r1, #16
 8005998:	438a      	bics	r2, r1
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	2210      	movs	r2, #16
 80059b0:	4013      	ands	r3, r2
 80059b2:	2b10      	cmp	r3, #16
 80059b4:	d103      	bne.n	80059be <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	2210      	movs	r2, #16
 80059bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	225c      	movs	r2, #92	; 0x5c
 80059c2:	5a9a      	ldrh	r2, [r3, r2]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	0011      	movs	r1, r2
 80059c8:	0018      	movs	r0, r3
 80059ca:	f7ff fa13 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80059ce:	e00c      	b.n	80059ea <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	0018      	movs	r0, r3
 80059d4:	f7ff f9fe 	bl	8004dd4 <HAL_UART_RxCpltCallback>
}
 80059d8:	e007      	b.n	80059ea <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	699a      	ldr	r2, [r3, #24]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2108      	movs	r1, #8
 80059e6:	430a      	orrs	r2, r1
 80059e8:	619a      	str	r2, [r3, #24]
}
 80059ea:	46c0      	nop			; (mov r8, r8)
 80059ec:	46bd      	mov	sp, r7
 80059ee:	b010      	add	sp, #64	; 0x40
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	fffffedf 	.word	0xfffffedf

080059f8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b090      	sub	sp, #64	; 0x40
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a00:	203e      	movs	r0, #62	; 0x3e
 8005a02:	183b      	adds	r3, r7, r0
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	2160      	movs	r1, #96	; 0x60
 8005a08:	5a52      	ldrh	r2, [r2, r1]
 8005a0a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	228c      	movs	r2, #140	; 0x8c
 8005a10:	589b      	ldr	r3, [r3, r2]
 8005a12:	2b22      	cmp	r3, #34	; 0x22
 8005a14:	d000      	beq.n	8005a18 <UART_RxISR_16BIT+0x20>
 8005a16:	e09a      	b.n	8005b4e <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a1e:	213c      	movs	r1, #60	; 0x3c
 8005a20:	187b      	adds	r3, r7, r1
 8005a22:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a28:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a2a:	187b      	adds	r3, r7, r1
 8005a2c:	183a      	adds	r2, r7, r0
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	8812      	ldrh	r2, [r2, #0]
 8005a32:	4013      	ands	r3, r2
 8005a34:	b29a      	uxth	r2, r3
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a3e:	1c9a      	adds	r2, r3, #2
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	225e      	movs	r2, #94	; 0x5e
 8005a48:	5a9b      	ldrh	r3, [r3, r2]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	b299      	uxth	r1, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	225e      	movs	r2, #94	; 0x5e
 8005a54:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	225e      	movs	r2, #94	; 0x5e
 8005a5a:	5a9b      	ldrh	r3, [r3, r2]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d000      	beq.n	8005a64 <UART_RxISR_16BIT+0x6c>
 8005a62:	e07c      	b.n	8005b5e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a64:	f3ef 8310 	mrs	r3, PRIMASK
 8005a68:	617b      	str	r3, [r7, #20]
  return(result);
 8005a6a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a6c:	637b      	str	r3, [r7, #52]	; 0x34
 8005a6e:	2301      	movs	r3, #1
 8005a70:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	f383 8810 	msr	PRIMASK, r3
}
 8005a78:	46c0      	nop			; (mov r8, r8)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4938      	ldr	r1, [pc, #224]	; (8005b68 <UART_RxISR_16BIT+0x170>)
 8005a86:	400a      	ands	r2, r1
 8005a88:	601a      	str	r2, [r3, #0]
 8005a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a8e:	69fb      	ldr	r3, [r7, #28]
 8005a90:	f383 8810 	msr	PRIMASK, r3
}
 8005a94:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a96:	f3ef 8310 	mrs	r3, PRIMASK
 8005a9a:	623b      	str	r3, [r7, #32]
  return(result);
 8005a9c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9e:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa6:	f383 8810 	msr	PRIMASK, r3
}
 8005aaa:	46c0      	nop			; (mov r8, r8)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	438a      	bics	r2, r1
 8005aba:	609a      	str	r2, [r3, #8]
 8005abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac2:	f383 8810 	msr	PRIMASK, r3
}
 8005ac6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	228c      	movs	r2, #140	; 0x8c
 8005acc:	2120      	movs	r1, #32
 8005ace:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d12f      	bne.n	8005b44 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aea:	f3ef 8310 	mrs	r3, PRIMASK
 8005aee:	60bb      	str	r3, [r7, #8]
  return(result);
 8005af0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005af4:	2301      	movs	r3, #1
 8005af6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f383 8810 	msr	PRIMASK, r3
}
 8005afe:	46c0      	nop			; (mov r8, r8)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	2110      	movs	r1, #16
 8005b0c:	438a      	bics	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	f383 8810 	msr	PRIMASK, r3
}
 8005b1a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	69db      	ldr	r3, [r3, #28]
 8005b22:	2210      	movs	r2, #16
 8005b24:	4013      	ands	r3, r2
 8005b26:	2b10      	cmp	r3, #16
 8005b28:	d103      	bne.n	8005b32 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2210      	movs	r2, #16
 8005b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	225c      	movs	r2, #92	; 0x5c
 8005b36:	5a9a      	ldrh	r2, [r3, r2]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	0011      	movs	r1, r2
 8005b3c:	0018      	movs	r0, r3
 8005b3e:	f7ff f959 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b42:	e00c      	b.n	8005b5e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f7ff f944 	bl	8004dd4 <HAL_UART_RxCpltCallback>
}
 8005b4c:	e007      	b.n	8005b5e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	699a      	ldr	r2, [r3, #24]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2108      	movs	r1, #8
 8005b5a:	430a      	orrs	r2, r1
 8005b5c:	619a      	str	r2, [r3, #24]
}
 8005b5e:	46c0      	nop			; (mov r8, r8)
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b010      	add	sp, #64	; 0x40
 8005b64:	bd80      	pop	{r7, pc}
 8005b66:	46c0      	nop			; (mov r8, r8)
 8005b68:	fffffedf 	.word	0xfffffedf

08005b6c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b09c      	sub	sp, #112	; 0x70
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b74:	236a      	movs	r3, #106	; 0x6a
 8005b76:	18fb      	adds	r3, r7, r3
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	2160      	movs	r1, #96	; 0x60
 8005b7c:	5a52      	ldrh	r2, [r2, r1]
 8005b7e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	228c      	movs	r2, #140	; 0x8c
 8005b9c:	589b      	ldr	r3, [r3, r2]
 8005b9e:	2b22      	cmp	r3, #34	; 0x22
 8005ba0:	d000      	beq.n	8005ba4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005ba2:	e144      	b.n	8005e2e <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ba4:	235e      	movs	r3, #94	; 0x5e
 8005ba6:	18fb      	adds	r3, r7, r3
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	2168      	movs	r1, #104	; 0x68
 8005bac:	5a52      	ldrh	r2, [r2, r1]
 8005bae:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bb0:	e0eb      	b.n	8005d8a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bb8:	215c      	movs	r1, #92	; 0x5c
 8005bba:	187b      	adds	r3, r7, r1
 8005bbc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	236a      	movs	r3, #106	; 0x6a
 8005bc6:	18fb      	adds	r3, r7, r3
 8005bc8:	881b      	ldrh	r3, [r3, #0]
 8005bca:	b2d9      	uxtb	r1, r3
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bd0:	400a      	ands	r2, r1
 8005bd2:	b2d2      	uxtb	r2, r2
 8005bd4:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	225e      	movs	r2, #94	; 0x5e
 8005be4:	5a9b      	ldrh	r3, [r3, r2]
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b299      	uxth	r1, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	225e      	movs	r2, #94	; 0x5e
 8005bf0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	69db      	ldr	r3, [r3, #28]
 8005bf8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005bfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bfc:	2207      	movs	r2, #7
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d049      	beq.n	8005c96 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	2201      	movs	r2, #1
 8005c06:	4013      	ands	r3, r2
 8005c08:	d010      	beq.n	8005c2c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005c0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4013      	ands	r3, r2
 8005c12:	d00b      	beq.n	8005c2c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2290      	movs	r2, #144	; 0x90
 8005c20:	589b      	ldr	r3, [r3, r2]
 8005c22:	2201      	movs	r2, #1
 8005c24:	431a      	orrs	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2190      	movs	r1, #144	; 0x90
 8005c2a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4013      	ands	r3, r2
 8005c32:	d00f      	beq.n	8005c54 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005c34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c36:	2201      	movs	r2, #1
 8005c38:	4013      	ands	r3, r2
 8005c3a:	d00b      	beq.n	8005c54 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2202      	movs	r2, #2
 8005c42:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2290      	movs	r2, #144	; 0x90
 8005c48:	589b      	ldr	r3, [r3, r2]
 8005c4a:	2204      	movs	r2, #4
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2190      	movs	r1, #144	; 0x90
 8005c52:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c56:	2204      	movs	r2, #4
 8005c58:	4013      	ands	r3, r2
 8005c5a:	d00f      	beq.n	8005c7c <UART_RxISR_8BIT_FIFOEN+0x110>
 8005c5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c5e:	2201      	movs	r2, #1
 8005c60:	4013      	ands	r3, r2
 8005c62:	d00b      	beq.n	8005c7c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2204      	movs	r2, #4
 8005c6a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2290      	movs	r2, #144	; 0x90
 8005c70:	589b      	ldr	r3, [r3, r2]
 8005c72:	2202      	movs	r2, #2
 8005c74:	431a      	orrs	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2190      	movs	r1, #144	; 0x90
 8005c7a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2290      	movs	r2, #144	; 0x90
 8005c80:	589b      	ldr	r3, [r3, r2]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d007      	beq.n	8005c96 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	0018      	movs	r0, r3
 8005c8a:	f7ff f8ab 	bl	8004de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2290      	movs	r2, #144	; 0x90
 8005c92:	2100      	movs	r1, #0
 8005c94:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	225e      	movs	r2, #94	; 0x5e
 8005c9a:	5a9b      	ldrh	r3, [r3, r2]
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d173      	bne.n	8005d8a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ca2:	f3ef 8310 	mrs	r3, PRIMASK
 8005ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005caa:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cac:	2301      	movs	r3, #1
 8005cae:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb2:	f383 8810 	msr	PRIMASK, r3
}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4961      	ldr	r1, [pc, #388]	; (8005e48 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8005cc4:	400a      	ands	r2, r1
 8005cc6:	601a      	str	r2, [r3, #0]
 8005cc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cce:	f383 8810 	msr	PRIMASK, r3
}
 8005cd2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005cdc:	657b      	str	r3, [r7, #84]	; 0x54
 8005cde:	2301      	movs	r3, #1
 8005ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ce4:	f383 8810 	msr	PRIMASK, r3
}
 8005ce8:	46c0      	nop			; (mov r8, r8)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4955      	ldr	r1, [pc, #340]	; (8005e4c <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8005cf6:	400a      	ands	r2, r1
 8005cf8:	609a      	str	r2, [r3, #8]
 8005cfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cfc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d00:	f383 8810 	msr	PRIMASK, r3
}
 8005d04:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	228c      	movs	r2, #140	; 0x8c
 8005d0a:	2120      	movs	r1, #32
 8005d0c:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d1e:	2b01      	cmp	r3, #1
 8005d20:	d12f      	bne.n	8005d82 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d28:	f3ef 8310 	mrs	r3, PRIMASK
 8005d2c:	623b      	str	r3, [r7, #32]
  return(result);
 8005d2e:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d30:	653b      	str	r3, [r7, #80]	; 0x50
 8005d32:	2301      	movs	r3, #1
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d38:	f383 8810 	msr	PRIMASK, r3
}
 8005d3c:	46c0      	nop			; (mov r8, r8)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	2110      	movs	r1, #16
 8005d4a:	438a      	bics	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d50:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	2210      	movs	r2, #16
 8005d62:	4013      	ands	r3, r2
 8005d64:	2b10      	cmp	r3, #16
 8005d66:	d103      	bne.n	8005d70 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2210      	movs	r2, #16
 8005d6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	225c      	movs	r2, #92	; 0x5c
 8005d74:	5a9a      	ldrh	r2, [r3, r2]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	0011      	movs	r1, r2
 8005d7a:	0018      	movs	r0, r3
 8005d7c:	f7ff f83a 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
 8005d80:	e003      	b.n	8005d8a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	0018      	movs	r0, r3
 8005d86:	f7ff f825 	bl	8004dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d8a:	235e      	movs	r3, #94	; 0x5e
 8005d8c:	18fb      	adds	r3, r7, r3
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d004      	beq.n	8005d9e <UART_RxISR_8BIT_FIFOEN+0x232>
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	2220      	movs	r2, #32
 8005d98:	4013      	ands	r3, r2
 8005d9a:	d000      	beq.n	8005d9e <UART_RxISR_8BIT_FIFOEN+0x232>
 8005d9c:	e709      	b.n	8005bb2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d9e:	204e      	movs	r0, #78	; 0x4e
 8005da0:	183b      	adds	r3, r7, r0
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	215e      	movs	r1, #94	; 0x5e
 8005da6:	5a52      	ldrh	r2, [r2, r1]
 8005da8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005daa:	0001      	movs	r1, r0
 8005dac:	187b      	adds	r3, r7, r1
 8005dae:	881b      	ldrh	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d044      	beq.n	8005e3e <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2268      	movs	r2, #104	; 0x68
 8005db8:	5a9b      	ldrh	r3, [r3, r2]
 8005dba:	187a      	adds	r2, r7, r1
 8005dbc:	8812      	ldrh	r2, [r2, #0]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d23d      	bcs.n	8005e3e <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8005dc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dcc:	2301      	movs	r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f383 8810 	msr	PRIMASK, r3
}
 8005dd6:	46c0      	nop			; (mov r8, r8)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	491b      	ldr	r1, [pc, #108]	; (8005e50 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8005de4:	400a      	ands	r2, r1
 8005de6:	609a      	str	r2, [r3, #8]
 8005de8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f383 8810 	msr	PRIMASK, r3
}
 8005df2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a17      	ldr	r2, [pc, #92]	; (8005e54 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8005df8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dfa:	f3ef 8310 	mrs	r3, PRIMASK
 8005dfe:	617b      	str	r3, [r7, #20]
  return(result);
 8005e00:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
 8005e04:	2301      	movs	r3, #1
 8005e06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	f383 8810 	msr	PRIMASK, r3
}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2120      	movs	r1, #32
 8005e1c:	430a      	orrs	r2, r1
 8005e1e:	601a      	str	r2, [r3, #0]
 8005e20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f383 8810 	msr	PRIMASK, r3
}
 8005e2a:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e2c:	e007      	b.n	8005e3e <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	699a      	ldr	r2, [r3, #24]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2108      	movs	r1, #8
 8005e3a:	430a      	orrs	r2, r1
 8005e3c:	619a      	str	r2, [r3, #24]
}
 8005e3e:	46c0      	nop			; (mov r8, r8)
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b01c      	add	sp, #112	; 0x70
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	46c0      	nop			; (mov r8, r8)
 8005e48:	fffffeff 	.word	0xfffffeff
 8005e4c:	effffffe 	.word	0xeffffffe
 8005e50:	efffffff 	.word	0xefffffff
 8005e54:	08005885 	.word	0x08005885

08005e58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b09e      	sub	sp, #120	; 0x78
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005e60:	2372      	movs	r3, #114	; 0x72
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	687a      	ldr	r2, [r7, #4]
 8005e66:	2160      	movs	r1, #96	; 0x60
 8005e68:	5a52      	ldrh	r2, [r2, r1]
 8005e6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	69db      	ldr	r3, [r3, #28]
 8005e72:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	228c      	movs	r2, #140	; 0x8c
 8005e88:	589b      	ldr	r3, [r3, r2]
 8005e8a:	2b22      	cmp	r3, #34	; 0x22
 8005e8c:	d000      	beq.n	8005e90 <UART_RxISR_16BIT_FIFOEN+0x38>
 8005e8e:	e144      	b.n	800611a <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e90:	2366      	movs	r3, #102	; 0x66
 8005e92:	18fb      	adds	r3, r7, r3
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	2168      	movs	r1, #104	; 0x68
 8005e98:	5a52      	ldrh	r2, [r2, r1]
 8005e9a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e9c:	e0eb      	b.n	8006076 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ea4:	2164      	movs	r1, #100	; 0x64
 8005ea6:	187b      	adds	r3, r7, r1
 8005ea8:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eae:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8005eb0:	187b      	adds	r3, r7, r1
 8005eb2:	2272      	movs	r2, #114	; 0x72
 8005eb4:	18ba      	adds	r2, r7, r2
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	8812      	ldrh	r2, [r2, #0]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	b29a      	uxth	r2, r3
 8005ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ec0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ec6:	1c9a      	adds	r2, r3, #2
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	225e      	movs	r2, #94	; 0x5e
 8005ed0:	5a9b      	ldrh	r3, [r3, r2]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b299      	uxth	r1, r3
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	225e      	movs	r2, #94	; 0x5e
 8005edc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	2207      	movs	r2, #7
 8005eea:	4013      	ands	r3, r2
 8005eec:	d049      	beq.n	8005f82 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	d010      	beq.n	8005f18 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8005ef6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ef8:	2380      	movs	r3, #128	; 0x80
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4013      	ands	r3, r2
 8005efe:	d00b      	beq.n	8005f18 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2201      	movs	r2, #1
 8005f06:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2290      	movs	r2, #144	; 0x90
 8005f0c:	589b      	ldr	r3, [r3, r2]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2190      	movs	r1, #144	; 0x90
 8005f16:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	d00f      	beq.n	8005f40 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8005f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f22:	2201      	movs	r2, #1
 8005f24:	4013      	ands	r3, r2
 8005f26:	d00b      	beq.n	8005f40 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2202      	movs	r2, #2
 8005f2e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2290      	movs	r2, #144	; 0x90
 8005f34:	589b      	ldr	r3, [r3, r2]
 8005f36:	2204      	movs	r2, #4
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2190      	movs	r1, #144	; 0x90
 8005f3e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f42:	2204      	movs	r2, #4
 8005f44:	4013      	ands	r3, r2
 8005f46:	d00f      	beq.n	8005f68 <UART_RxISR_16BIT_FIFOEN+0x110>
 8005f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	d00b      	beq.n	8005f68 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2204      	movs	r2, #4
 8005f56:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2290      	movs	r2, #144	; 0x90
 8005f5c:	589b      	ldr	r3, [r3, r2]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2190      	movs	r1, #144	; 0x90
 8005f66:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2290      	movs	r2, #144	; 0x90
 8005f6c:	589b      	ldr	r3, [r3, r2]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	0018      	movs	r0, r3
 8005f76:	f7fe ff35 	bl	8004de4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2290      	movs	r2, #144	; 0x90
 8005f7e:	2100      	movs	r1, #0
 8005f80:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	225e      	movs	r2, #94	; 0x5e
 8005f86:	5a9b      	ldrh	r3, [r3, r2]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d173      	bne.n	8006076 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f8e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f92:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f98:	2301      	movs	r3, #1
 8005f9a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f9e:	f383 8810 	msr	PRIMASK, r3
}
 8005fa2:	46c0      	nop			; (mov r8, r8)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4961      	ldr	r1, [pc, #388]	; (8006134 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8005fb0:	400a      	ands	r2, r1
 8005fb2:	601a      	str	r2, [r3, #0]
 8005fb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fba:	f383 8810 	msr	PRIMASK, r3
}
 8005fbe:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8005fc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005fc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fca:	2301      	movs	r3, #1
 8005fcc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fd0:	f383 8810 	msr	PRIMASK, r3
}
 8005fd4:	46c0      	nop			; (mov r8, r8)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	689a      	ldr	r2, [r3, #8]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4955      	ldr	r1, [pc, #340]	; (8006138 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8005fe2:	400a      	ands	r2, r1
 8005fe4:	609a      	str	r2, [r3, #8]
 8005fe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005fe8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005fec:	f383 8810 	msr	PRIMASK, r3
}
 8005ff0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	228c      	movs	r2, #140	; 0x8c
 8005ff6:	2120      	movs	r1, #32
 8005ff8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d12f      	bne.n	800606e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2200      	movs	r2, #0
 8006012:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006014:	f3ef 8310 	mrs	r3, PRIMASK
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800601c:	657b      	str	r3, [r7, #84]	; 0x54
 800601e:	2301      	movs	r3, #1
 8006020:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006024:	f383 8810 	msr	PRIMASK, r3
}
 8006028:	46c0      	nop			; (mov r8, r8)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2110      	movs	r1, #16
 8006036:	438a      	bics	r2, r1
 8006038:	601a      	str	r2, [r3, #0]
 800603a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800603c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800603e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006040:	f383 8810 	msr	PRIMASK, r3
}
 8006044:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	2210      	movs	r2, #16
 800604e:	4013      	ands	r3, r2
 8006050:	2b10      	cmp	r3, #16
 8006052:	d103      	bne.n	800605c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2210      	movs	r2, #16
 800605a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	225c      	movs	r2, #92	; 0x5c
 8006060:	5a9a      	ldrh	r2, [r3, r2]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0011      	movs	r1, r2
 8006066:	0018      	movs	r0, r3
 8006068:	f7fe fec4 	bl	8004df4 <HAL_UARTEx_RxEventCallback>
 800606c:	e003      	b.n	8006076 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	0018      	movs	r0, r3
 8006072:	f7fe feaf 	bl	8004dd4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006076:	2366      	movs	r3, #102	; 0x66
 8006078:	18fb      	adds	r3, r7, r3
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d004      	beq.n	800608a <UART_RxISR_16BIT_FIFOEN+0x232>
 8006080:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006082:	2220      	movs	r2, #32
 8006084:	4013      	ands	r3, r2
 8006086:	d000      	beq.n	800608a <UART_RxISR_16BIT_FIFOEN+0x232>
 8006088:	e709      	b.n	8005e9e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800608a:	2052      	movs	r0, #82	; 0x52
 800608c:	183b      	adds	r3, r7, r0
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	215e      	movs	r1, #94	; 0x5e
 8006092:	5a52      	ldrh	r2, [r2, r1]
 8006094:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006096:	0001      	movs	r1, r0
 8006098:	187b      	adds	r3, r7, r1
 800609a:	881b      	ldrh	r3, [r3, #0]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d044      	beq.n	800612a <UART_RxISR_16BIT_FIFOEN+0x2d2>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2268      	movs	r2, #104	; 0x68
 80060a4:	5a9b      	ldrh	r3, [r3, r2]
 80060a6:	187a      	adds	r2, r7, r1
 80060a8:	8812      	ldrh	r2, [r2, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d23d      	bcs.n	800612a <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ae:	f3ef 8310 	mrs	r3, PRIMASK
 80060b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80060b4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80060b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80060b8:	2301      	movs	r3, #1
 80060ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	491b      	ldr	r1, [pc, #108]	; (800613c <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80060d0:	400a      	ands	r2, r1
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a17      	ldr	r2, [pc, #92]	; (8006140 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80060e4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060e6:	f3ef 8310 	mrs	r3, PRIMASK
 80060ea:	61bb      	str	r3, [r7, #24]
  return(result);
 80060ec:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80060f0:	2301      	movs	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	f383 8810 	msr	PRIMASK, r3
}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2120      	movs	r1, #32
 8006108:	430a      	orrs	r2, r1
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800610e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f383 8810 	msr	PRIMASK, r3
}
 8006116:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006118:	e007      	b.n	800612a <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	699a      	ldr	r2, [r3, #24]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2108      	movs	r1, #8
 8006126:	430a      	orrs	r2, r1
 8006128:	619a      	str	r2, [r3, #24]
}
 800612a:	46c0      	nop			; (mov r8, r8)
 800612c:	46bd      	mov	sp, r7
 800612e:	b01e      	add	sp, #120	; 0x78
 8006130:	bd80      	pop	{r7, pc}
 8006132:	46c0      	nop			; (mov r8, r8)
 8006134:	fffffeff 	.word	0xfffffeff
 8006138:	effffffe 	.word	0xeffffffe
 800613c:	efffffff 	.word	0xefffffff
 8006140:	080059f9 	.word	0x080059f9

08006144 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800614c:	46c0      	nop			; (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b002      	add	sp, #8
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800615c:	46c0      	nop			; (mov r8, r8)
 800615e:	46bd      	mov	sp, r7
 8006160:	b002      	add	sp, #8
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800616c:	46c0      	nop			; (mov r8, r8)
 800616e:	46bd      	mov	sp, r7
 8006170:	b002      	add	sp, #8
 8006172:	bd80      	pop	{r7, pc}

08006174 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2284      	movs	r2, #132	; 0x84
 8006180:	5c9b      	ldrb	r3, [r3, r2]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d101      	bne.n	800618a <HAL_UARTEx_DisableFifoMode+0x16>
 8006186:	2302      	movs	r3, #2
 8006188:	e027      	b.n	80061da <HAL_UARTEx_DisableFifoMode+0x66>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2284      	movs	r2, #132	; 0x84
 800618e:	2101      	movs	r1, #1
 8006190:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2288      	movs	r2, #136	; 0x88
 8006196:	2124      	movs	r1, #36	; 0x24
 8006198:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	2101      	movs	r1, #1
 80061ae:	438a      	bics	r2, r1
 80061b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	4a0b      	ldr	r2, [pc, #44]	; (80061e4 <HAL_UARTEx_DisableFifoMode+0x70>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2200      	movs	r2, #0
 80061be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2288      	movs	r2, #136	; 0x88
 80061cc:	2120      	movs	r1, #32
 80061ce:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2284      	movs	r2, #132	; 0x84
 80061d4:	2100      	movs	r1, #0
 80061d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	0018      	movs	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	b004      	add	sp, #16
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	dfffffff 	.word	0xdfffffff

080061e8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2284      	movs	r2, #132	; 0x84
 80061f6:	5c9b      	ldrb	r3, [r3, r2]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	d101      	bne.n	8006200 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061fc:	2302      	movs	r3, #2
 80061fe:	e02e      	b.n	800625e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2284      	movs	r2, #132	; 0x84
 8006204:	2101      	movs	r1, #1
 8006206:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2288      	movs	r2, #136	; 0x88
 800620c:	2124      	movs	r1, #36	; 0x24
 800620e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2101      	movs	r1, #1
 8006224:	438a      	bics	r2, r1
 8006226:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	00db      	lsls	r3, r3, #3
 8006230:	08d9      	lsrs	r1, r3, #3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	683a      	ldr	r2, [r7, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	0018      	movs	r0, r3
 8006240:	f000 f854 	bl	80062ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2288      	movs	r2, #136	; 0x88
 8006250:	2120      	movs	r1, #32
 8006252:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2284      	movs	r2, #132	; 0x84
 8006258:	2100      	movs	r1, #0
 800625a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2284      	movs	r2, #132	; 0x84
 8006276:	5c9b      	ldrb	r3, [r3, r2]
 8006278:	2b01      	cmp	r3, #1
 800627a:	d101      	bne.n	8006280 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800627c:	2302      	movs	r3, #2
 800627e:	e02f      	b.n	80062e0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2284      	movs	r2, #132	; 0x84
 8006284:	2101      	movs	r1, #1
 8006286:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2288      	movs	r2, #136	; 0x88
 800628c:	2124      	movs	r1, #36	; 0x24
 800628e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2101      	movs	r1, #1
 80062a4:	438a      	bics	r2, r1
 80062a6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	4a0e      	ldr	r2, [pc, #56]	; (80062e8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	0019      	movs	r1, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0018      	movs	r0, r3
 80062c2:	f000 f813 	bl	80062ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68fa      	ldr	r2, [r7, #12]
 80062cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2288      	movs	r2, #136	; 0x88
 80062d2:	2120      	movs	r1, #32
 80062d4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2284      	movs	r2, #132	; 0x84
 80062da:	2100      	movs	r1, #0
 80062dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	0018      	movs	r0, r3
 80062e2:	46bd      	mov	sp, r7
 80062e4:	b004      	add	sp, #16
 80062e6:	bd80      	pop	{r7, pc}
 80062e8:	f1ffffff 	.word	0xf1ffffff

080062ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d108      	bne.n	800630e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	226a      	movs	r2, #106	; 0x6a
 8006300:	2101      	movs	r1, #1
 8006302:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2268      	movs	r2, #104	; 0x68
 8006308:	2101      	movs	r1, #1
 800630a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800630c:	e043      	b.n	8006396 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800630e:	260f      	movs	r6, #15
 8006310:	19bb      	adds	r3, r7, r6
 8006312:	2208      	movs	r2, #8
 8006314:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006316:	200e      	movs	r0, #14
 8006318:	183b      	adds	r3, r7, r0
 800631a:	2208      	movs	r2, #8
 800631c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	0e5b      	lsrs	r3, r3, #25
 8006326:	b2da      	uxtb	r2, r3
 8006328:	240d      	movs	r4, #13
 800632a:	193b      	adds	r3, r7, r4
 800632c:	2107      	movs	r1, #7
 800632e:	400a      	ands	r2, r1
 8006330:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	0f5b      	lsrs	r3, r3, #29
 800633a:	b2da      	uxtb	r2, r3
 800633c:	250c      	movs	r5, #12
 800633e:	197b      	adds	r3, r7, r5
 8006340:	2107      	movs	r1, #7
 8006342:	400a      	ands	r2, r1
 8006344:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006346:	183b      	adds	r3, r7, r0
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	197a      	adds	r2, r7, r5
 800634c:	7812      	ldrb	r2, [r2, #0]
 800634e:	4914      	ldr	r1, [pc, #80]	; (80063a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006350:	5c8a      	ldrb	r2, [r1, r2]
 8006352:	435a      	muls	r2, r3
 8006354:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8006356:	197b      	adds	r3, r7, r5
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	4a12      	ldr	r2, [pc, #72]	; (80063a4 <UARTEx_SetNbDataToProcess+0xb8>)
 800635c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800635e:	0019      	movs	r1, r3
 8006360:	f7f9 ff64 	bl	800022c <__divsi3>
 8006364:	0003      	movs	r3, r0
 8006366:	b299      	uxth	r1, r3
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	226a      	movs	r2, #106	; 0x6a
 800636c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636e:	19bb      	adds	r3, r7, r6
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	193a      	adds	r2, r7, r4
 8006374:	7812      	ldrb	r2, [r2, #0]
 8006376:	490a      	ldr	r1, [pc, #40]	; (80063a0 <UARTEx_SetNbDataToProcess+0xb4>)
 8006378:	5c8a      	ldrb	r2, [r1, r2]
 800637a:	435a      	muls	r2, r3
 800637c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800637e:	193b      	adds	r3, r7, r4
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	4a08      	ldr	r2, [pc, #32]	; (80063a4 <UARTEx_SetNbDataToProcess+0xb8>)
 8006384:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006386:	0019      	movs	r1, r3
 8006388:	f7f9 ff50 	bl	800022c <__divsi3>
 800638c:	0003      	movs	r3, r0
 800638e:	b299      	uxth	r1, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2268      	movs	r2, #104	; 0x68
 8006394:	5299      	strh	r1, [r3, r2]
}
 8006396:	46c0      	nop			; (mov r8, r8)
 8006398:	46bd      	mov	sp, r7
 800639a:	b005      	add	sp, #20
 800639c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800639e:	46c0      	nop			; (mov r8, r8)
 80063a0:	08007f98 	.word	0x08007f98
 80063a4:	08007fa0 	.word	0x08007fa0

080063a8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	0002      	movs	r2, r0
 80063b0:	1dbb      	adds	r3, r7, #6
 80063b2:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80063b4:	2300      	movs	r3, #0
 80063b6:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80063b8:	1dbb      	adds	r3, r7, #6
 80063ba:	2200      	movs	r2, #0
 80063bc:	5e9b      	ldrsh	r3, [r3, r2]
 80063be:	2b84      	cmp	r3, #132	; 0x84
 80063c0:	d006      	beq.n	80063d0 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80063c2:	1dbb      	adds	r3, r7, #6
 80063c4:	2200      	movs	r2, #0
 80063c6:	5e9a      	ldrsh	r2, [r3, r2]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	18d3      	adds	r3, r2, r3
 80063cc:	3303      	adds	r3, #3
 80063ce:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80063d0:	68fb      	ldr	r3, [r7, #12]
}
 80063d2:	0018      	movs	r0, r3
 80063d4:	46bd      	mov	sp, r7
 80063d6:	b004      	add	sp, #16
 80063d8:	bd80      	pop	{r7, pc}

080063da <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80063de:	f000 fdeb 	bl	8006fb8 <vTaskStartScheduler>
  
  return osOK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	0018      	movs	r0, r3
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80063ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ec:	b087      	sub	sp, #28
 80063ee:	af02      	add	r7, sp, #8
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685c      	ldr	r4, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006400:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2208      	movs	r2, #8
 8006406:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8006408:	0018      	movs	r0, r3
 800640a:	f7ff ffcd 	bl	80063a8 <makeFreeRtosPriority>
 800640e:	0001      	movs	r1, r0
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	230c      	movs	r3, #12
 8006414:	18fb      	adds	r3, r7, r3
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	9100      	str	r1, [sp, #0]
 800641a:	0013      	movs	r3, r2
 800641c:	0032      	movs	r2, r6
 800641e:	0029      	movs	r1, r5
 8006420:	0020      	movs	r0, r4
 8006422:	f000 fc75 	bl	8006d10 <xTaskCreate>
 8006426:	0003      	movs	r3, r0
 8006428:	2b01      	cmp	r3, #1
 800642a:	d001      	beq.n	8006430 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8006430:	68fb      	ldr	r3, [r7, #12]
}
 8006432:	0018      	movs	r0, r3
 8006434:	46bd      	mov	sp, r7
 8006436:	b005      	add	sp, #20
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800643a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b084      	sub	sp, #16
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <osDelay+0x16>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	e000      	b.n	8006452 <osDelay+0x18>
 8006450:	2301      	movs	r3, #1
 8006452:	0018      	movs	r0, r3
 8006454:	f000 fd8a 	bl	8006f6c <vTaskDelay>
  
  return osOK;
 8006458:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800645a:	0018      	movs	r0, r3
 800645c:	46bd      	mov	sp, r7
 800645e:	b004      	add	sp, #16
 8006460:	bd80      	pop	{r7, pc}

08006462 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b082      	sub	sp, #8
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3308      	adds	r3, #8
 800646e:	001a      	movs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	4252      	negs	r2, r2
 800647a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	3308      	adds	r3, #8
 8006480:	001a      	movs	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3308      	adds	r3, #8
 800648a:	001a      	movs	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	46bd      	mov	sp, r7
 800649a:	b002      	add	sp, #8
 800649c:	bd80      	pop	{r7, pc}

0800649e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b082      	sub	sp, #8
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80064ac:	46c0      	nop			; (mov r8, r8)
 80064ae:	46bd      	mov	sp, r7
 80064b0:	b002      	add	sp, #8
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	689a      	ldr	r2, [r3, #8]
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	1c5a      	adds	r2, r3, #1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	601a      	str	r2, [r3, #0]
}
 80064f0:	46c0      	nop			; (mov r8, r8)
 80064f2:	46bd      	mov	sp, r7
 80064f4:	b004      	add	sp, #16
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	3301      	adds	r3, #1
 800650c:	d103      	bne.n	8006516 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e00c      	b.n	8006530 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3308      	adds	r3, #8
 800651a:	60fb      	str	r3, [r7, #12]
 800651c:	e002      	b.n	8006524 <vListInsert+0x2c>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	60fb      	str	r3, [r7, #12]
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	429a      	cmp	r2, r3
 800652e:	d2f6      	bcs.n	800651e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	683a      	ldr	r2, [r7, #0]
 800653e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	1c5a      	adds	r2, r3, #1
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	601a      	str	r2, [r3, #0]
}
 800655c:	46c0      	nop			; (mov r8, r8)
 800655e:	46bd      	mov	sp, r7
 8006560:	b004      	add	sp, #16
 8006562:	bd80      	pop	{r7, pc}

08006564 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b084      	sub	sp, #16
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	6892      	ldr	r2, [r2, #8]
 800657a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	6852      	ldr	r2, [r2, #4]
 8006584:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	429a      	cmp	r2, r3
 800658e:	d103      	bne.n	8006598 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	1e5a      	subs	r2, r3, #1
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
}
 80065ac:	0018      	movs	r0, r3
 80065ae:	46bd      	mov	sp, r7
 80065b0:	b004      	add	sp, #16
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b084      	sub	sp, #16
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <xQueueGenericReset+0x18>
 80065c8:	b672      	cpsid	i
 80065ca:	e7fe      	b.n	80065ca <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 80065cc:	f001 f9c8 	bl	8007960 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065dc:	434b      	muls	r3, r1
 80065de:	18d2      	adds	r2, r2, r3
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2200      	movs	r2, #0
 80065e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	1e59      	subs	r1, r3, #1
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	434b      	muls	r3, r1
 8006602:	18d2      	adds	r2, r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2244      	movs	r2, #68	; 0x44
 800660c:	21ff      	movs	r1, #255	; 0xff
 800660e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2245      	movs	r2, #69	; 0x45
 8006614:	21ff      	movs	r1, #255	; 0xff
 8006616:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d013      	beq.n	800664e <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	3310      	adds	r3, #16
 800662a:	0018      	movs	r0, r3
 800662c:	f000 feb2 	bl	8007394 <xTaskRemoveFromEventList>
 8006630:	1e03      	subs	r3, r0, #0
 8006632:	d00c      	beq.n	800664e <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006634:	f001 f984 	bl	8007940 <vPortYield>
 8006638:	e009      	b.n	800664e <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3310      	adds	r3, #16
 800663e:	0018      	movs	r0, r3
 8006640:	f7ff ff0f 	bl	8006462 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	3324      	adds	r3, #36	; 0x24
 8006648:	0018      	movs	r0, r3
 800664a:	f7ff ff0a 	bl	8006462 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800664e:	f001 f999 	bl	8007984 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006652:	2301      	movs	r3, #1
}
 8006654:	0018      	movs	r0, r3
 8006656:	46bd      	mov	sp, r7
 8006658:	b004      	add	sp, #16
 800665a:	bd80      	pop	{r7, pc}

0800665c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800665c:	b590      	push	{r4, r7, lr}
 800665e:	b08b      	sub	sp, #44	; 0x2c
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	1dfb      	adds	r3, r7, #7
 8006668:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <xQueueGenericCreate+0x18>
 8006670:	b672      	cpsid	i
 8006672:	e7fe      	b.n	8006672 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	4353      	muls	r3, r2
 800667a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	3348      	adds	r3, #72	; 0x48
 8006680:	0018      	movs	r0, r3
 8006682:	f001 fa05 	bl	8007a90 <pvPortMalloc>
 8006686:	0003      	movs	r3, r0
 8006688:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00e      	beq.n	80066ae <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	3348      	adds	r3, #72	; 0x48
 8006698:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800669a:	1dfb      	adds	r3, r7, #7
 800669c:	781c      	ldrb	r4, [r3, #0]
 800669e:	697a      	ldr	r2, [r7, #20]
 80066a0:	68b9      	ldr	r1, [r7, #8]
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	0023      	movs	r3, r4
 80066aa:	f000 f805 	bl	80066b8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80066ae:	69bb      	ldr	r3, [r7, #24]
	}
 80066b0:	0018      	movs	r0, r3
 80066b2:	46bd      	mov	sp, r7
 80066b4:	b009      	add	sp, #36	; 0x24
 80066b6:	bd90      	pop	{r4, r7, pc}

080066b8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	001a      	movs	r2, r3
 80066c6:	1cfb      	adds	r3, r7, #3
 80066c8:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d103      	bne.n	80066d8 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80066d0:	69bb      	ldr	r3, [r7, #24]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	601a      	str	r2, [r3, #0]
 80066d6:	e002      	b.n	80066de <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	687a      	ldr	r2, [r7, #4]
 80066dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2101      	movs	r1, #1
 80066ee:	0018      	movs	r0, r3
 80066f0:	f7ff ff60 	bl	80065b4 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80066f4:	46c0      	nop			; (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b004      	add	sp, #16
 80066fa:	bd80      	pop	{r7, pc}

080066fc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b08a      	sub	sp, #40	; 0x28
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800670a:	2300      	movs	r3, #0
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006712:	6a3b      	ldr	r3, [r7, #32]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <xQueueGenericSend+0x20>
 8006718:	b672      	cpsid	i
 800671a:	e7fe      	b.n	800671a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d103      	bne.n	800672a <xQueueGenericSend+0x2e>
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <xQueueGenericSend+0x32>
 800672a:	2301      	movs	r3, #1
 800672c:	e000      	b.n	8006730 <xQueueGenericSend+0x34>
 800672e:	2300      	movs	r3, #0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <xQueueGenericSend+0x3c>
 8006734:	b672      	cpsid	i
 8006736:	e7fe      	b.n	8006736 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d103      	bne.n	8006746 <xQueueGenericSend+0x4a>
 800673e:	6a3b      	ldr	r3, [r7, #32]
 8006740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006742:	2b01      	cmp	r3, #1
 8006744:	d101      	bne.n	800674a <xQueueGenericSend+0x4e>
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <xQueueGenericSend+0x50>
 800674a:	2300      	movs	r3, #0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d101      	bne.n	8006754 <xQueueGenericSend+0x58>
 8006750:	b672      	cpsid	i
 8006752:	e7fe      	b.n	8006752 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006754:	f000 ff9a 	bl	800768c <xTaskGetSchedulerState>
 8006758:	1e03      	subs	r3, r0, #0
 800675a:	d102      	bne.n	8006762 <xQueueGenericSend+0x66>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d101      	bne.n	8006766 <xQueueGenericSend+0x6a>
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <xQueueGenericSend+0x6c>
 8006766:	2300      	movs	r3, #0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d101      	bne.n	8006770 <xQueueGenericSend+0x74>
 800676c:	b672      	cpsid	i
 800676e:	e7fe      	b.n	800676e <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006770:	f001 f8f6 	bl	8007960 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006774:	6a3b      	ldr	r3, [r7, #32]
 8006776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800677c:	429a      	cmp	r2, r3
 800677e:	d302      	bcc.n	8006786 <xQueueGenericSend+0x8a>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b02      	cmp	r3, #2
 8006784:	d11e      	bne.n	80067c4 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	68b9      	ldr	r1, [r7, #8]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	0018      	movs	r0, r3
 800678e:	f000 f9a2 	bl	8006ad6 <prvCopyDataToQueue>
 8006792:	0003      	movs	r3, r0
 8006794:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006796:	6a3b      	ldr	r3, [r7, #32]
 8006798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800679a:	2b00      	cmp	r3, #0
 800679c:	d009      	beq.n	80067b2 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	3324      	adds	r3, #36	; 0x24
 80067a2:	0018      	movs	r0, r3
 80067a4:	f000 fdf6 	bl	8007394 <xTaskRemoveFromEventList>
 80067a8:	1e03      	subs	r3, r0, #0
 80067aa:	d007      	beq.n	80067bc <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80067ac:	f001 f8c8 	bl	8007940 <vPortYield>
 80067b0:	e004      	b.n	80067bc <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d001      	beq.n	80067bc <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80067b8:	f001 f8c2 	bl	8007940 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80067bc:	f001 f8e2 	bl	8007984 <vPortExitCritical>
				return pdPASS;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e05b      	b.n	800687c <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80067ca:	f001 f8db 	bl	8007984 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	e054      	b.n	800687c <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 80067d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d106      	bne.n	80067e6 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80067d8:	2314      	movs	r3, #20
 80067da:	18fb      	adds	r3, r7, r3
 80067dc:	0018      	movs	r0, r3
 80067de:	f000 fe35 	bl	800744c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80067e2:	2301      	movs	r3, #1
 80067e4:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80067e6:	f001 f8cd 	bl	8007984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80067ea:	f000 fc1b 	bl	8007024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80067ee:	f001 f8b7 	bl	8007960 <vPortEnterCritical>
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2244      	movs	r2, #68	; 0x44
 80067f6:	5c9b      	ldrb	r3, [r3, r2]
 80067f8:	b25b      	sxtb	r3, r3
 80067fa:	3301      	adds	r3, #1
 80067fc:	d103      	bne.n	8006806 <xQueueGenericSend+0x10a>
 80067fe:	6a3b      	ldr	r3, [r7, #32]
 8006800:	2244      	movs	r2, #68	; 0x44
 8006802:	2100      	movs	r1, #0
 8006804:	5499      	strb	r1, [r3, r2]
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	2245      	movs	r2, #69	; 0x45
 800680a:	5c9b      	ldrb	r3, [r3, r2]
 800680c:	b25b      	sxtb	r3, r3
 800680e:	3301      	adds	r3, #1
 8006810:	d103      	bne.n	800681a <xQueueGenericSend+0x11e>
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	2245      	movs	r2, #69	; 0x45
 8006816:	2100      	movs	r1, #0
 8006818:	5499      	strb	r1, [r3, r2]
 800681a:	f001 f8b3 	bl	8007984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800681e:	1d3a      	adds	r2, r7, #4
 8006820:	2314      	movs	r3, #20
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	0011      	movs	r1, r2
 8006826:	0018      	movs	r0, r3
 8006828:	f000 fe24 	bl	8007474 <xTaskCheckForTimeOut>
 800682c:	1e03      	subs	r3, r0, #0
 800682e:	d11e      	bne.n	800686e <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	0018      	movs	r0, r3
 8006834:	f000 fa54 	bl	8006ce0 <prvIsQueueFull>
 8006838:	1e03      	subs	r3, r0, #0
 800683a:	d011      	beq.n	8006860 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800683c:	6a3b      	ldr	r3, [r7, #32]
 800683e:	3310      	adds	r3, #16
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	0011      	movs	r1, r2
 8006844:	0018      	movs	r0, r3
 8006846:	f000 fd87 	bl	8007358 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	0018      	movs	r0, r3
 800684e:	f000 f9d3 	bl	8006bf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006852:	f000 fbf3 	bl	800703c <xTaskResumeAll>
 8006856:	1e03      	subs	r3, r0, #0
 8006858:	d18a      	bne.n	8006770 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800685a:	f001 f871 	bl	8007940 <vPortYield>
 800685e:	e787      	b.n	8006770 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006860:	6a3b      	ldr	r3, [r7, #32]
 8006862:	0018      	movs	r0, r3
 8006864:	f000 f9c8 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006868:	f000 fbe8 	bl	800703c <xTaskResumeAll>
 800686c:	e780      	b.n	8006770 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	0018      	movs	r0, r3
 8006872:	f000 f9c1 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006876:	f000 fbe1 	bl	800703c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800687a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800687c:	0018      	movs	r0, r3
 800687e:	46bd      	mov	sp, r7
 8006880:	b00a      	add	sp, #40	; 0x28
 8006882:	bd80      	pop	{r7, pc}

08006884 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006884:	b590      	push	{r4, r7, lr}
 8006886:	b08b      	sub	sp, #44	; 0x2c
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	607a      	str	r2, [r7, #4]
 8006890:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d101      	bne.n	80068a0 <xQueueGenericSendFromISR+0x1c>
 800689c:	b672      	cpsid	i
 800689e:	e7fe      	b.n	800689e <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d103      	bne.n	80068ae <xQueueGenericSendFromISR+0x2a>
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <xQueueGenericSendFromISR+0x2e>
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <xQueueGenericSendFromISR+0x30>
 80068b2:	2300      	movs	r3, #0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d101      	bne.n	80068bc <xQueueGenericSendFromISR+0x38>
 80068b8:	b672      	cpsid	i
 80068ba:	e7fe      	b.n	80068ba <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	2b02      	cmp	r3, #2
 80068c0:	d103      	bne.n	80068ca <xQueueGenericSendFromISR+0x46>
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <xQueueGenericSendFromISR+0x4a>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e000      	b.n	80068d0 <xQueueGenericSendFromISR+0x4c>
 80068ce:	2300      	movs	r3, #0
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <xQueueGenericSendFromISR+0x54>
 80068d4:	b672      	cpsid	i
 80068d6:	e7fe      	b.n	80068d6 <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068d8:	f001 f86c 	bl	80079b4 <ulSetInterruptMaskFromISR>
 80068dc:	0003      	movs	r3, r0
 80068de:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e4:	6a3b      	ldr	r3, [r7, #32]
 80068e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <xQueueGenericSendFromISR+0x6e>
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	d131      	bne.n	8006956 <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80068f2:	241b      	movs	r4, #27
 80068f4:	193b      	adds	r3, r7, r4
 80068f6:	6a3a      	ldr	r2, [r7, #32]
 80068f8:	2145      	movs	r1, #69	; 0x45
 80068fa:	5c52      	ldrb	r2, [r2, r1]
 80068fc:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068fe:	6a3b      	ldr	r3, [r7, #32]
 8006900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006902:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	68b9      	ldr	r1, [r7, #8]
 8006908:	6a3b      	ldr	r3, [r7, #32]
 800690a:	0018      	movs	r0, r3
 800690c:	f000 f8e3 	bl	8006ad6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006910:	193b      	adds	r3, r7, r4
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	b25b      	sxtb	r3, r3
 8006916:	3301      	adds	r3, #1
 8006918:	d111      	bne.n	800693e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800691a:	6a3b      	ldr	r3, [r7, #32]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	d016      	beq.n	8006950 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	3324      	adds	r3, #36	; 0x24
 8006926:	0018      	movs	r0, r3
 8006928:	f000 fd34 	bl	8007394 <xTaskRemoveFromEventList>
 800692c:	1e03      	subs	r3, r0, #0
 800692e:	d00f      	beq.n	8006950 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00c      	beq.n	8006950 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]
 800693c:	e008      	b.n	8006950 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800693e:	231b      	movs	r3, #27
 8006940:	18fb      	adds	r3, r7, r3
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	3301      	adds	r3, #1
 8006946:	b2db      	uxtb	r3, r3
 8006948:	b259      	sxtb	r1, r3
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	2245      	movs	r2, #69	; 0x45
 800694e:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8006950:	2301      	movs	r3, #1
 8006952:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8006954:	e001      	b.n	800695a <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006956:	2300      	movs	r3, #0
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	0018      	movs	r0, r3
 800695e:	f001 f82f 	bl	80079c0 <vClearInterruptMaskFromISR>

	return xReturn;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006964:	0018      	movs	r0, r3
 8006966:	46bd      	mov	sp, r7
 8006968:	b00b      	add	sp, #44	; 0x2c
 800696a:	bd90      	pop	{r4, r7, pc}

0800696c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b08a      	sub	sp, #40	; 0x28
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006978:	2300      	movs	r3, #0
 800697a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d101      	bne.n	800698a <xQueueReceive+0x1e>
 8006986:	b672      	cpsid	i
 8006988:	e7fe      	b.n	8006988 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d103      	bne.n	8006998 <xQueueReceive+0x2c>
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <xQueueReceive+0x30>
 8006998:	2301      	movs	r3, #1
 800699a:	e000      	b.n	800699e <xQueueReceive+0x32>
 800699c:	2300      	movs	r3, #0
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <xQueueReceive+0x3a>
 80069a2:	b672      	cpsid	i
 80069a4:	e7fe      	b.n	80069a4 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069a6:	f000 fe71 	bl	800768c <xTaskGetSchedulerState>
 80069aa:	1e03      	subs	r3, r0, #0
 80069ac:	d102      	bne.n	80069b4 <xQueueReceive+0x48>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <xQueueReceive+0x4c>
 80069b4:	2301      	movs	r3, #1
 80069b6:	e000      	b.n	80069ba <xQueueReceive+0x4e>
 80069b8:	2300      	movs	r3, #0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <xQueueReceive+0x56>
 80069be:	b672      	cpsid	i
 80069c0:	e7fe      	b.n	80069c0 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069c2:	f000 ffcd 	bl	8007960 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d01a      	beq.n	8006a08 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069d2:	68ba      	ldr	r2, [r7, #8]
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	0011      	movs	r1, r2
 80069d8:	0018      	movs	r0, r3
 80069da:	f000 f8e7 	bl	8006bac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	1e5a      	subs	r2, r3, #1
 80069e2:	6a3b      	ldr	r3, [r7, #32]
 80069e4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e6:	6a3b      	ldr	r3, [r7, #32]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ee:	6a3b      	ldr	r3, [r7, #32]
 80069f0:	3310      	adds	r3, #16
 80069f2:	0018      	movs	r0, r3
 80069f4:	f000 fcce 	bl	8007394 <xTaskRemoveFromEventList>
 80069f8:	1e03      	subs	r3, r0, #0
 80069fa:	d001      	beq.n	8006a00 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80069fc:	f000 ffa0 	bl	8007940 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a00:	f000 ffc0 	bl	8007984 <vPortExitCritical>
				return pdPASS;
 8006a04:	2301      	movs	r3, #1
 8006a06:	e062      	b.n	8006ace <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d103      	bne.n	8006a16 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a0e:	f000 ffb9 	bl	8007984 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e05b      	b.n	8006ace <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d106      	bne.n	8006a2a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a1c:	2314      	movs	r3, #20
 8006a1e:	18fb      	adds	r3, r7, r3
 8006a20:	0018      	movs	r0, r3
 8006a22:	f000 fd13 	bl	800744c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a26:	2301      	movs	r3, #1
 8006a28:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a2a:	f000 ffab 	bl	8007984 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a2e:	f000 faf9 	bl	8007024 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a32:	f000 ff95 	bl	8007960 <vPortEnterCritical>
 8006a36:	6a3b      	ldr	r3, [r7, #32]
 8006a38:	2244      	movs	r2, #68	; 0x44
 8006a3a:	5c9b      	ldrb	r3, [r3, r2]
 8006a3c:	b25b      	sxtb	r3, r3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	d103      	bne.n	8006a4a <xQueueReceive+0xde>
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	2244      	movs	r2, #68	; 0x44
 8006a46:	2100      	movs	r1, #0
 8006a48:	5499      	strb	r1, [r3, r2]
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	2245      	movs	r2, #69	; 0x45
 8006a4e:	5c9b      	ldrb	r3, [r3, r2]
 8006a50:	b25b      	sxtb	r3, r3
 8006a52:	3301      	adds	r3, #1
 8006a54:	d103      	bne.n	8006a5e <xQueueReceive+0xf2>
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	2245      	movs	r2, #69	; 0x45
 8006a5a:	2100      	movs	r1, #0
 8006a5c:	5499      	strb	r1, [r3, r2]
 8006a5e:	f000 ff91 	bl	8007984 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a62:	1d3a      	adds	r2, r7, #4
 8006a64:	2314      	movs	r3, #20
 8006a66:	18fb      	adds	r3, r7, r3
 8006a68:	0011      	movs	r1, r2
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f000 fd02 	bl	8007474 <xTaskCheckForTimeOut>
 8006a70:	1e03      	subs	r3, r0, #0
 8006a72:	d11e      	bne.n	8006ab2 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006a74:	6a3b      	ldr	r3, [r7, #32]
 8006a76:	0018      	movs	r0, r3
 8006a78:	f000 f91c 	bl	8006cb4 <prvIsQueueEmpty>
 8006a7c:	1e03      	subs	r3, r0, #0
 8006a7e:	d011      	beq.n	8006aa4 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	3324      	adds	r3, #36	; 0x24
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	0011      	movs	r1, r2
 8006a88:	0018      	movs	r0, r3
 8006a8a:	f000 fc65 	bl	8007358 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	0018      	movs	r0, r3
 8006a92:	f000 f8b1 	bl	8006bf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006a96:	f000 fad1 	bl	800703c <xTaskResumeAll>
 8006a9a:	1e03      	subs	r3, r0, #0
 8006a9c:	d191      	bne.n	80069c2 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8006a9e:	f000 ff4f 	bl	8007940 <vPortYield>
 8006aa2:	e78e      	b.n	80069c2 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	0018      	movs	r0, r3
 8006aa8:	f000 f8a6 	bl	8006bf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aac:	f000 fac6 	bl	800703c <xTaskResumeAll>
 8006ab0:	e787      	b.n	80069c2 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	0018      	movs	r0, r3
 8006ab6:	f000 f89f 	bl	8006bf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006aba:	f000 fabf 	bl	800703c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006abe:	6a3b      	ldr	r3, [r7, #32]
 8006ac0:	0018      	movs	r0, r3
 8006ac2:	f000 f8f7 	bl	8006cb4 <prvIsQueueEmpty>
 8006ac6:	1e03      	subs	r3, r0, #0
 8006ac8:	d100      	bne.n	8006acc <xQueueReceive+0x160>
 8006aca:	e77a      	b.n	80069c2 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006acc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ace:	0018      	movs	r0, r3
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	b00a      	add	sp, #40	; 0x28
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b086      	sub	sp, #24
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10e      	bne.n	8006b12 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d14e      	bne.n	8006b9a <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	0018      	movs	r0, r3
 8006b02:	f000 fddf 	bl	80076c4 <xTaskPriorityDisinherit>
 8006b06:	0003      	movs	r3, r0
 8006b08:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	e043      	b.n	8006b9a <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d119      	bne.n	8006b4c <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6858      	ldr	r0, [r3, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	0019      	movs	r1, r3
 8006b24:	f001 f992 	bl	8007e4c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b30:	18d2      	adds	r2, r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685a      	ldr	r2, [r3, #4]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d32b      	bcc.n	8006b9a <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	605a      	str	r2, [r3, #4]
 8006b4a:	e026      	b.n	8006b9a <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	68d8      	ldr	r0, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	0019      	movs	r1, r3
 8006b58:	f001 f978 	bl	8007e4c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b64:	425b      	negs	r3, r3
 8006b66:	18d2      	adds	r2, r2, r3
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d207      	bcs.n	8006b88 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689a      	ldr	r2, [r3, #8]
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b80:	425b      	negs	r3, r3
 8006b82:	18d2      	adds	r2, r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d105      	bne.n	8006b9a <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d002      	beq.n	8006b9a <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006ba2:	697b      	ldr	r3, [r7, #20]
}
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	b006      	add	sp, #24
 8006baa:	bd80      	pop	{r7, pc}

08006bac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d018      	beq.n	8006bf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	68da      	ldr	r2, [r3, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc6:	18d2      	adds	r2, r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68da      	ldr	r2, [r3, #12]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d303      	bcc.n	8006be0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68d9      	ldr	r1, [r3, #12]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	0018      	movs	r0, r3
 8006bec:	f001 f92e 	bl	8007e4c <memcpy>
	}
}
 8006bf0:	46c0      	nop			; (mov r8, r8)
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	b002      	add	sp, #8
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006c00:	f000 feae 	bl	8007960 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006c04:	230f      	movs	r3, #15
 8006c06:	18fb      	adds	r3, r7, r3
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	2145      	movs	r1, #69	; 0x45
 8006c0c:	5c52      	ldrb	r2, [r2, r1]
 8006c0e:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c10:	e013      	b.n	8006c3a <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d016      	beq.n	8006c48 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	3324      	adds	r3, #36	; 0x24
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f000 fbb8 	bl	8007394 <xTaskRemoveFromEventList>
 8006c24:	1e03      	subs	r3, r0, #0
 8006c26:	d001      	beq.n	8006c2c <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006c28:	f000 fc74 	bl	8007514 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006c2c:	210f      	movs	r1, #15
 8006c2e:	187b      	adds	r3, r7, r1
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	3b01      	subs	r3, #1
 8006c34:	b2da      	uxtb	r2, r3
 8006c36:	187b      	adds	r3, r7, r1
 8006c38:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006c3a:	230f      	movs	r3, #15
 8006c3c:	18fb      	adds	r3, r7, r3
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	b25b      	sxtb	r3, r3
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	dce5      	bgt.n	8006c12 <prvUnlockQueue+0x1a>
 8006c46:	e000      	b.n	8006c4a <prvUnlockQueue+0x52>
					break;
 8006c48:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2245      	movs	r2, #69	; 0x45
 8006c4e:	21ff      	movs	r1, #255	; 0xff
 8006c50:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006c52:	f000 fe97 	bl	8007984 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006c56:	f000 fe83 	bl	8007960 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006c5a:	230e      	movs	r3, #14
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	2144      	movs	r1, #68	; 0x44
 8006c62:	5c52      	ldrb	r2, [r2, r1]
 8006c64:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c66:	e013      	b.n	8006c90 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d016      	beq.n	8006c9e <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3310      	adds	r3, #16
 8006c74:	0018      	movs	r0, r3
 8006c76:	f000 fb8d 	bl	8007394 <xTaskRemoveFromEventList>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d001      	beq.n	8006c82 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8006c7e:	f000 fc49 	bl	8007514 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006c82:	210e      	movs	r1, #14
 8006c84:	187b      	adds	r3, r7, r1
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	3b01      	subs	r3, #1
 8006c8a:	b2da      	uxtb	r2, r3
 8006c8c:	187b      	adds	r3, r7, r1
 8006c8e:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006c90:	230e      	movs	r3, #14
 8006c92:	18fb      	adds	r3, r7, r3
 8006c94:	781b      	ldrb	r3, [r3, #0]
 8006c96:	b25b      	sxtb	r3, r3
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	dce5      	bgt.n	8006c68 <prvUnlockQueue+0x70>
 8006c9c:	e000      	b.n	8006ca0 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8006c9e:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2244      	movs	r2, #68	; 0x44
 8006ca4:	21ff      	movs	r1, #255	; 0xff
 8006ca6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8006ca8:	f000 fe6c 	bl	8007984 <vPortExitCritical>
}
 8006cac:	46c0      	nop			; (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b004      	add	sp, #16
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006cbc:	f000 fe50 	bl	8007960 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d102      	bne.n	8006cce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	e001      	b.n	8006cd2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006cd2:	f000 fe57 	bl	8007984 <vPortExitCritical>

	return xReturn;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	b004      	add	sp, #16
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006ce8:	f000 fe3a 	bl	8007960 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d102      	bne.n	8006cfe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	e001      	b.n	8006d02 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006d02:	f000 fe3f 	bl	8007984 <vPortExitCritical>

	return xReturn;
 8006d06:	68fb      	ldr	r3, [r7, #12]
}
 8006d08:	0018      	movs	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b004      	add	sp, #16
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006d10:	b590      	push	{r4, r7, lr}
 8006d12:	b08d      	sub	sp, #52	; 0x34
 8006d14:	af04      	add	r7, sp, #16
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	1dbb      	adds	r3, r7, #6
 8006d1e:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006d20:	1dbb      	adds	r3, r7, #6
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	0018      	movs	r0, r3
 8006d28:	f000 feb2 	bl	8007a90 <pvPortMalloc>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d010      	beq.n	8006d58 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006d36:	2054      	movs	r0, #84	; 0x54
 8006d38:	f000 feaa 	bl	8007a90 <pvPortMalloc>
 8006d3c:	0003      	movs	r3, r0
 8006d3e:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	697a      	ldr	r2, [r7, #20]
 8006d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8006d4c:	e006      	b.n	8006d5c <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	0018      	movs	r0, r3
 8006d52:	f000 ff49 	bl	8007be8 <vPortFree>
 8006d56:	e001      	b.n	8006d5c <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d016      	beq.n	8006d90 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d62:	1dbb      	adds	r3, r7, #6
 8006d64:	881a      	ldrh	r2, [r3, #0]
 8006d66:	683c      	ldr	r4, [r7, #0]
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	9303      	str	r3, [sp, #12]
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	9302      	str	r3, [sp, #8]
 8006d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d76:	9301      	str	r3, [sp, #4]
 8006d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d7a:	9300      	str	r3, [sp, #0]
 8006d7c:	0023      	movs	r3, r4
 8006d7e:	f000 f80f 	bl	8006da0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d82:	69fb      	ldr	r3, [r7, #28]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f000 f88d 	bl	8006ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	61bb      	str	r3, [r7, #24]
 8006d8e:	e002      	b.n	8006d96 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d90:	2301      	movs	r3, #1
 8006d92:	425b      	negs	r3, r3
 8006d94:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d96:	69bb      	ldr	r3, [r7, #24]
	}
 8006d98:	0018      	movs	r0, r3
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	b009      	add	sp, #36	; 0x24
 8006d9e:	bd90      	pop	{r4, r7, pc}

08006da0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	493a      	ldr	r1, [pc, #232]	; (8006ea0 <prvInitialiseNewTask+0x100>)
 8006db6:	468c      	mov	ip, r1
 8006db8:	4463      	add	r3, ip
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	18d3      	adds	r3, r2, r3
 8006dbe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	2207      	movs	r2, #7
 8006dc4:	4393      	bics	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	2207      	movs	r2, #7
 8006dcc:	4013      	ands	r3, r2
 8006dce:	d001      	beq.n	8006dd4 <prvInitialiseNewTask+0x34>
 8006dd0:	b672      	cpsid	i
 8006dd2:	e7fe      	b.n	8006dd2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d020      	beq.n	8006e1c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	e013      	b.n	8006e08 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	18d3      	adds	r3, r2, r3
 8006de6:	7818      	ldrb	r0, [r3, #0]
 8006de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dea:	2134      	movs	r1, #52	; 0x34
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	18d3      	adds	r3, r2, r3
 8006df0:	185b      	adds	r3, r3, r1
 8006df2:	1c02      	adds	r2, r0, #0
 8006df4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	18d3      	adds	r3, r2, r3
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d006      	beq.n	8006e10 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	3301      	adds	r3, #1
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	2b0f      	cmp	r3, #15
 8006e0c:	d9e8      	bls.n	8006de0 <prvInitialiseNewTask+0x40>
 8006e0e:	e000      	b.n	8006e12 <prvInitialiseNewTask+0x72>
			{
				break;
 8006e10:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e14:	2243      	movs	r2, #67	; 0x43
 8006e16:	2100      	movs	r1, #0
 8006e18:	5499      	strb	r1, [r3, r2]
 8006e1a:	e003      	b.n	8006e24 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1e:	2234      	movs	r2, #52	; 0x34
 8006e20:	2100      	movs	r1, #0
 8006e22:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e24:	6a3b      	ldr	r3, [r7, #32]
 8006e26:	2b06      	cmp	r3, #6
 8006e28:	d901      	bls.n	8006e2e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e2a:	2306      	movs	r3, #6
 8006e2c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e30:	6a3a      	ldr	r2, [r7, #32]
 8006e32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	6a3a      	ldr	r2, [r7, #32]
 8006e38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e42:	3304      	adds	r3, #4
 8006e44:	0018      	movs	r0, r3
 8006e46:	f7ff fb2a 	bl	800649e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	3318      	adds	r3, #24
 8006e4e:	0018      	movs	r0, r3
 8006e50:	f7ff fb25 	bl	800649e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	2207      	movs	r2, #7
 8006e5e:	1ad2      	subs	r2, r2, r3
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e72:	2250      	movs	r2, #80	; 0x50
 8006e74:	2100      	movs	r1, #0
 8006e76:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	68f9      	ldr	r1, [r7, #12]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	0018      	movs	r0, r3
 8006e80:	f000 fcd0 	bl	8007824 <pxPortInitialiseStack>
 8006e84:	0002      	movs	r2, r0
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d002      	beq.n	8006e96 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e96:	46c0      	nop			; (mov r8, r8)
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	b006      	add	sp, #24
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	3fffffff 	.word	0x3fffffff

08006ea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006eac:	f000 fd58 	bl	8007960 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006eb0:	4b28      	ldr	r3, [pc, #160]	; (8006f54 <prvAddNewTaskToReadyList+0xb0>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	1c5a      	adds	r2, r3, #1
 8006eb6:	4b27      	ldr	r3, [pc, #156]	; (8006f54 <prvAddNewTaskToReadyList+0xb0>)
 8006eb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8006eba:	4b27      	ldr	r3, [pc, #156]	; (8006f58 <prvAddNewTaskToReadyList+0xb4>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ec2:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <prvAddNewTaskToReadyList+0xb4>)
 8006ec4:	687a      	ldr	r2, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ec8:	4b22      	ldr	r3, [pc, #136]	; (8006f54 <prvAddNewTaskToReadyList+0xb0>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d110      	bne.n	8006ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ed0:	f000 fb3a 	bl	8007548 <prvInitialiseTaskLists>
 8006ed4:	e00d      	b.n	8006ef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ed6:	4b21      	ldr	r3, [pc, #132]	; (8006f5c <prvAddNewTaskToReadyList+0xb8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006ede:	4b1e      	ldr	r3, [pc, #120]	; (8006f58 <prvAddNewTaskToReadyList+0xb4>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d802      	bhi.n	8006ef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006eec:	4b1a      	ldr	r3, [pc, #104]	; (8006f58 <prvAddNewTaskToReadyList+0xb4>)
 8006eee:	687a      	ldr	r2, [r7, #4]
 8006ef0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006ef2:	4b1b      	ldr	r3, [pc, #108]	; (8006f60 <prvAddNewTaskToReadyList+0xbc>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	1c5a      	adds	r2, r3, #1
 8006ef8:	4b19      	ldr	r3, [pc, #100]	; (8006f60 <prvAddNewTaskToReadyList+0xbc>)
 8006efa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f00:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <prvAddNewTaskToReadyList+0xc0>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d903      	bls.n	8006f10 <prvAddNewTaskToReadyList+0x6c>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f0c:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <prvAddNewTaskToReadyList+0xc0>)
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f14:	0013      	movs	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	189b      	adds	r3, r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4a12      	ldr	r2, [pc, #72]	; (8006f68 <prvAddNewTaskToReadyList+0xc4>)
 8006f1e:	189a      	adds	r2, r3, r2
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3304      	adds	r3, #4
 8006f24:	0019      	movs	r1, r3
 8006f26:	0010      	movs	r0, r2
 8006f28:	f7ff fac4 	bl	80064b4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f2c:	f000 fd2a 	bl	8007984 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f30:	4b0a      	ldr	r3, [pc, #40]	; (8006f5c <prvAddNewTaskToReadyList+0xb8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d008      	beq.n	8006f4a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f38:	4b07      	ldr	r3, [pc, #28]	; (8006f58 <prvAddNewTaskToReadyList+0xb4>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d201      	bcs.n	8006f4a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f46:	f000 fcfb 	bl	8007940 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	b002      	add	sp, #8
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	46c0      	nop			; (mov r8, r8)
 8006f54:	200005e0 	.word	0x200005e0
 8006f58:	200004e0 	.word	0x200004e0
 8006f5c:	200005ec 	.word	0x200005ec
 8006f60:	200005fc 	.word	0x200005fc
 8006f64:	200005e8 	.word	0x200005e8
 8006f68:	200004e4 	.word	0x200004e4

08006f6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f74:	2300      	movs	r3, #0
 8006f76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d010      	beq.n	8006fa0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006f7e:	4b0d      	ldr	r3, [pc, #52]	; (8006fb4 <vTaskDelay+0x48>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <vTaskDelay+0x1e>
 8006f86:	b672      	cpsid	i
 8006f88:	e7fe      	b.n	8006f88 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8006f8a:	f000 f84b 	bl	8007024 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2100      	movs	r1, #0
 8006f92:	0018      	movs	r0, r3
 8006f94:	f000 fbf2 	bl	800777c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006f98:	f000 f850 	bl	800703c <xTaskResumeAll>
 8006f9c:	0003      	movs	r3, r0
 8006f9e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d101      	bne.n	8006faa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8006fa6:	f000 fccb 	bl	8007940 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b004      	add	sp, #16
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	20000608 	.word	0x20000608

08006fb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8006fbe:	4913      	ldr	r1, [pc, #76]	; (800700c <vTaskStartScheduler+0x54>)
 8006fc0:	4813      	ldr	r0, [pc, #76]	; (8007010 <vTaskStartScheduler+0x58>)
 8006fc2:	4b14      	ldr	r3, [pc, #80]	; (8007014 <vTaskStartScheduler+0x5c>)
 8006fc4:	9301      	str	r3, [sp, #4]
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	9300      	str	r3, [sp, #0]
 8006fca:	2300      	movs	r3, #0
 8006fcc:	2280      	movs	r2, #128	; 0x80
 8006fce:	f7ff fe9f 	bl	8006d10 <xTaskCreate>
 8006fd2:	0003      	movs	r3, r0
 8006fd4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d10d      	bne.n	8006ff8 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8006fdc:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006fde:	4b0e      	ldr	r3, [pc, #56]	; (8007018 <vTaskStartScheduler+0x60>)
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	4252      	negs	r2, r2
 8006fe4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006fe6:	4b0d      	ldr	r3, [pc, #52]	; (800701c <vTaskStartScheduler+0x64>)
 8006fe8:	2201      	movs	r2, #1
 8006fea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006fec:	4b0c      	ldr	r3, [pc, #48]	; (8007020 <vTaskStartScheduler+0x68>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006ff2:	f000 fc81 	bl	80078f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006ff6:	e004      	b.n	8007002 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	d101      	bne.n	8007002 <vTaskStartScheduler+0x4a>
 8006ffe:	b672      	cpsid	i
 8007000:	e7fe      	b.n	8007000 <vTaskStartScheduler+0x48>
}
 8007002:	46c0      	nop			; (mov r8, r8)
 8007004:	46bd      	mov	sp, r7
 8007006:	b002      	add	sp, #8
 8007008:	bd80      	pop	{r7, pc}
 800700a:	46c0      	nop			; (mov r8, r8)
 800700c:	08007ec4 	.word	0x08007ec4
 8007010:	08007529 	.word	0x08007529
 8007014:	20000604 	.word	0x20000604
 8007018:	20000600 	.word	0x20000600
 800701c:	200005ec 	.word	0x200005ec
 8007020:	200005e4 	.word	0x200005e4

08007024 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007028:	4b03      	ldr	r3, [pc, #12]	; (8007038 <vTaskSuspendAll+0x14>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	4b02      	ldr	r3, [pc, #8]	; (8007038 <vTaskSuspendAll+0x14>)
 8007030:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007032:	46c0      	nop			; (mov r8, r8)
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	20000608 	.word	0x20000608

0800703c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007042:	2300      	movs	r3, #0
 8007044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800704a:	4b3a      	ldr	r3, [pc, #232]	; (8007134 <xTaskResumeAll+0xf8>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d101      	bne.n	8007056 <xTaskResumeAll+0x1a>
 8007052:	b672      	cpsid	i
 8007054:	e7fe      	b.n	8007054 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007056:	f000 fc83 	bl	8007960 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800705a:	4b36      	ldr	r3, [pc, #216]	; (8007134 <xTaskResumeAll+0xf8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	1e5a      	subs	r2, r3, #1
 8007060:	4b34      	ldr	r3, [pc, #208]	; (8007134 <xTaskResumeAll+0xf8>)
 8007062:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007064:	4b33      	ldr	r3, [pc, #204]	; (8007134 <xTaskResumeAll+0xf8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d15b      	bne.n	8007124 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800706c:	4b32      	ldr	r3, [pc, #200]	; (8007138 <xTaskResumeAll+0xfc>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d057      	beq.n	8007124 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007074:	e02f      	b.n	80070d6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007076:	4b31      	ldr	r3, [pc, #196]	; (800713c <xTaskResumeAll+0x100>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	68db      	ldr	r3, [r3, #12]
 800707c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3318      	adds	r3, #24
 8007082:	0018      	movs	r0, r3
 8007084:	f7ff fa6e 	bl	8006564 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3304      	adds	r3, #4
 800708c:	0018      	movs	r0, r3
 800708e:	f7ff fa69 	bl	8006564 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007096:	4b2a      	ldr	r3, [pc, #168]	; (8007140 <xTaskResumeAll+0x104>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d903      	bls.n	80070a6 <xTaskResumeAll+0x6a>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070a2:	4b27      	ldr	r3, [pc, #156]	; (8007140 <xTaskResumeAll+0x104>)
 80070a4:	601a      	str	r2, [r3, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070aa:	0013      	movs	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	189b      	adds	r3, r3, r2
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	4a24      	ldr	r2, [pc, #144]	; (8007144 <xTaskResumeAll+0x108>)
 80070b4:	189a      	adds	r2, r3, r2
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	3304      	adds	r3, #4
 80070ba:	0019      	movs	r1, r3
 80070bc:	0010      	movs	r0, r2
 80070be:	f7ff f9f9 	bl	80064b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070c6:	4b20      	ldr	r3, [pc, #128]	; (8007148 <xTaskResumeAll+0x10c>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d302      	bcc.n	80070d6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <xTaskResumeAll+0x110>)
 80070d2:	2201      	movs	r2, #1
 80070d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80070d6:	4b19      	ldr	r3, [pc, #100]	; (800713c <xTaskResumeAll+0x100>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1cb      	bne.n	8007076 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d001      	beq.n	80070e8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80070e4:	f000 fab4 	bl	8007650 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80070e8:	4b19      	ldr	r3, [pc, #100]	; (8007150 <xTaskResumeAll+0x114>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00f      	beq.n	8007114 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80070f4:	f000 f82e 	bl	8007154 <xTaskIncrementTick>
 80070f8:	1e03      	subs	r3, r0, #0
 80070fa:	d002      	beq.n	8007102 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80070fc:	4b13      	ldr	r3, [pc, #76]	; (800714c <xTaskResumeAll+0x110>)
 80070fe:	2201      	movs	r2, #1
 8007100:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3b01      	subs	r3, #1
 8007106:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d1f2      	bne.n	80070f4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800710e:	4b10      	ldr	r3, [pc, #64]	; (8007150 <xTaskResumeAll+0x114>)
 8007110:	2200      	movs	r2, #0
 8007112:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <xTaskResumeAll+0x110>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800711c:	2301      	movs	r3, #1
 800711e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007120:	f000 fc0e 	bl	8007940 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007124:	f000 fc2e 	bl	8007984 <vPortExitCritical>

	return xAlreadyYielded;
 8007128:	68bb      	ldr	r3, [r7, #8]
}
 800712a:	0018      	movs	r0, r3
 800712c:	46bd      	mov	sp, r7
 800712e:	b004      	add	sp, #16
 8007130:	bd80      	pop	{r7, pc}
 8007132:	46c0      	nop			; (mov r8, r8)
 8007134:	20000608 	.word	0x20000608
 8007138:	200005e0 	.word	0x200005e0
 800713c:	200005a0 	.word	0x200005a0
 8007140:	200005e8 	.word	0x200005e8
 8007144:	200004e4 	.word	0x200004e4
 8007148:	200004e0 	.word	0x200004e0
 800714c:	200005f4 	.word	0x200005f4
 8007150:	200005f0 	.word	0x200005f0

08007154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800715e:	4b4a      	ldr	r3, [pc, #296]	; (8007288 <xTaskIncrementTick+0x134>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d000      	beq.n	8007168 <xTaskIncrementTick+0x14>
 8007166:	e084      	b.n	8007272 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007168:	4b48      	ldr	r3, [pc, #288]	; (800728c <xTaskIncrementTick+0x138>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007170:	4b46      	ldr	r3, [pc, #280]	; (800728c <xTaskIncrementTick+0x138>)
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d117      	bne.n	80071ac <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800717c:	4b44      	ldr	r3, [pc, #272]	; (8007290 <xTaskIncrementTick+0x13c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d001      	beq.n	800718a <xTaskIncrementTick+0x36>
 8007186:	b672      	cpsid	i
 8007188:	e7fe      	b.n	8007188 <xTaskIncrementTick+0x34>
 800718a:	4b41      	ldr	r3, [pc, #260]	; (8007290 <xTaskIncrementTick+0x13c>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	60fb      	str	r3, [r7, #12]
 8007190:	4b40      	ldr	r3, [pc, #256]	; (8007294 <xTaskIncrementTick+0x140>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	4b3e      	ldr	r3, [pc, #248]	; (8007290 <xTaskIncrementTick+0x13c>)
 8007196:	601a      	str	r2, [r3, #0]
 8007198:	4b3e      	ldr	r3, [pc, #248]	; (8007294 <xTaskIncrementTick+0x140>)
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	601a      	str	r2, [r3, #0]
 800719e:	4b3e      	ldr	r3, [pc, #248]	; (8007298 <xTaskIncrementTick+0x144>)
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	1c5a      	adds	r2, r3, #1
 80071a4:	4b3c      	ldr	r3, [pc, #240]	; (8007298 <xTaskIncrementTick+0x144>)
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f000 fa52 	bl	8007650 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80071ac:	4b3b      	ldr	r3, [pc, #236]	; (800729c <xTaskIncrementTick+0x148>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	693a      	ldr	r2, [r7, #16]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d349      	bcc.n	800724a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071b6:	4b36      	ldr	r3, [pc, #216]	; (8007290 <xTaskIncrementTick+0x13c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d104      	bne.n	80071ca <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c0:	4b36      	ldr	r3, [pc, #216]	; (800729c <xTaskIncrementTick+0x148>)
 80071c2:	2201      	movs	r2, #1
 80071c4:	4252      	negs	r2, r2
 80071c6:	601a      	str	r2, [r3, #0]
					break;
 80071c8:	e03f      	b.n	800724a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ca:	4b31      	ldr	r3, [pc, #196]	; (8007290 <xTaskIncrementTick+0x13c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	429a      	cmp	r2, r3
 80071e0:	d203      	bcs.n	80071ea <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80071e2:	4b2e      	ldr	r3, [pc, #184]	; (800729c <xTaskIncrementTick+0x148>)
 80071e4:	687a      	ldr	r2, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80071e8:	e02f      	b.n	800724a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071ea:	68bb      	ldr	r3, [r7, #8]
 80071ec:	3304      	adds	r3, #4
 80071ee:	0018      	movs	r0, r3
 80071f0:	f7ff f9b8 	bl	8006564 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d004      	beq.n	8007206 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071fc:	68bb      	ldr	r3, [r7, #8]
 80071fe:	3318      	adds	r3, #24
 8007200:	0018      	movs	r0, r3
 8007202:	f7ff f9af 	bl	8006564 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800720a:	4b25      	ldr	r3, [pc, #148]	; (80072a0 <xTaskIncrementTick+0x14c>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d903      	bls.n	800721a <xTaskIncrementTick+0xc6>
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007216:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <xTaskIncrementTick+0x14c>)
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800721e:	0013      	movs	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	189b      	adds	r3, r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <xTaskIncrementTick+0x150>)
 8007228:	189a      	adds	r2, r3, r2
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	3304      	adds	r3, #4
 800722e:	0019      	movs	r1, r3
 8007230:	0010      	movs	r0, r2
 8007232:	f7ff f93f 	bl	80064b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800723a:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <xTaskIncrementTick+0x154>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007240:	429a      	cmp	r2, r3
 8007242:	d3b8      	bcc.n	80071b6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8007244:	2301      	movs	r3, #1
 8007246:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007248:	e7b5      	b.n	80071b6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800724a:	4b17      	ldr	r3, [pc, #92]	; (80072a8 <xTaskIncrementTick+0x154>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007250:	4914      	ldr	r1, [pc, #80]	; (80072a4 <xTaskIncrementTick+0x150>)
 8007252:	0013      	movs	r3, r2
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	189b      	adds	r3, r3, r2
 8007258:	009b      	lsls	r3, r3, #2
 800725a:	585b      	ldr	r3, [r3, r1]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d901      	bls.n	8007264 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007264:	4b11      	ldr	r3, [pc, #68]	; (80072ac <xTaskIncrementTick+0x158>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d007      	beq.n	800727c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800726c:	2301      	movs	r3, #1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	e004      	b.n	800727c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <xTaskIncrementTick+0x15c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	1c5a      	adds	r2, r3, #1
 8007278:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <xTaskIncrementTick+0x15c>)
 800727a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800727c:	697b      	ldr	r3, [r7, #20]
}
 800727e:	0018      	movs	r0, r3
 8007280:	46bd      	mov	sp, r7
 8007282:	b006      	add	sp, #24
 8007284:	bd80      	pop	{r7, pc}
 8007286:	46c0      	nop			; (mov r8, r8)
 8007288:	20000608 	.word	0x20000608
 800728c:	200005e4 	.word	0x200005e4
 8007290:	20000598 	.word	0x20000598
 8007294:	2000059c 	.word	0x2000059c
 8007298:	200005f8 	.word	0x200005f8
 800729c:	20000600 	.word	0x20000600
 80072a0:	200005e8 	.word	0x200005e8
 80072a4:	200004e4 	.word	0x200004e4
 80072a8:	200004e0 	.word	0x200004e0
 80072ac:	200005f4 	.word	0x200005f4
 80072b0:	200005f0 	.word	0x200005f0

080072b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80072ba:	4b22      	ldr	r3, [pc, #136]	; (8007344 <vTaskSwitchContext+0x90>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d003      	beq.n	80072ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80072c2:	4b21      	ldr	r3, [pc, #132]	; (8007348 <vTaskSwitchContext+0x94>)
 80072c4:	2201      	movs	r2, #1
 80072c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80072c8:	e037      	b.n	800733a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80072ca:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <vTaskSwitchContext+0x94>)
 80072cc:	2200      	movs	r2, #0
 80072ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072d0:	4b1e      	ldr	r3, [pc, #120]	; (800734c <vTaskSwitchContext+0x98>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	e007      	b.n	80072e8 <vTaskSwitchContext+0x34>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <vTaskSwitchContext+0x2e>
 80072de:	b672      	cpsid	i
 80072e0:	e7fe      	b.n	80072e0 <vTaskSwitchContext+0x2c>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	3b01      	subs	r3, #1
 80072e6:	607b      	str	r3, [r7, #4]
 80072e8:	4919      	ldr	r1, [pc, #100]	; (8007350 <vTaskSwitchContext+0x9c>)
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	0013      	movs	r3, r2
 80072ee:	009b      	lsls	r3, r3, #2
 80072f0:	189b      	adds	r3, r3, r2
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	585b      	ldr	r3, [r3, r1]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d0ee      	beq.n	80072d8 <vTaskSwitchContext+0x24>
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	0013      	movs	r3, r2
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	189b      	adds	r3, r3, r2
 8007302:	009b      	lsls	r3, r3, #2
 8007304:	4a12      	ldr	r2, [pc, #72]	; (8007350 <vTaskSwitchContext+0x9c>)
 8007306:	189b      	adds	r3, r3, r2
 8007308:	603b      	str	r3, [r7, #0]
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	685a      	ldr	r2, [r3, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	605a      	str	r2, [r3, #4]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	3308      	adds	r3, #8
 800731c:	429a      	cmp	r2, r3
 800731e:	d104      	bne.n	800732a <vTaskSwitchContext+0x76>
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	685b      	ldr	r3, [r3, #4]
 8007324:	685a      	ldr	r2, [r3, #4]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	605a      	str	r2, [r3, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	4b08      	ldr	r3, [pc, #32]	; (8007354 <vTaskSwitchContext+0xa0>)
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	4b05      	ldr	r3, [pc, #20]	; (800734c <vTaskSwitchContext+0x98>)
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	601a      	str	r2, [r3, #0]
}
 800733a:	46c0      	nop			; (mov r8, r8)
 800733c:	46bd      	mov	sp, r7
 800733e:	b002      	add	sp, #8
 8007340:	bd80      	pop	{r7, pc}
 8007342:	46c0      	nop			; (mov r8, r8)
 8007344:	20000608 	.word	0x20000608
 8007348:	200005f4 	.word	0x200005f4
 800734c:	200005e8 	.word	0x200005e8
 8007350:	200004e4 	.word	0x200004e4
 8007354:	200004e0 	.word	0x200004e0

08007358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <vTaskPlaceOnEventList+0x14>
 8007368:	b672      	cpsid	i
 800736a:	e7fe      	b.n	800736a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800736c:	4b08      	ldr	r3, [pc, #32]	; (8007390 <vTaskPlaceOnEventList+0x38>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3318      	adds	r3, #24
 8007372:	001a      	movs	r2, r3
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	0011      	movs	r1, r2
 8007378:	0018      	movs	r0, r3
 800737a:	f7ff f8bd 	bl	80064f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2101      	movs	r1, #1
 8007382:	0018      	movs	r0, r3
 8007384:	f000 f9fa 	bl	800777c <prvAddCurrentTaskToDelayedList>
}
 8007388:	46c0      	nop			; (mov r8, r8)
 800738a:	46bd      	mov	sp, r7
 800738c:	b002      	add	sp, #8
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200004e0 	.word	0x200004e0

08007394 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <xTaskRemoveFromEventList+0x1a>
 80073aa:	b672      	cpsid	i
 80073ac:	e7fe      	b.n	80073ac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	3318      	adds	r3, #24
 80073b2:	0018      	movs	r0, r3
 80073b4:	f7ff f8d6 	bl	8006564 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073b8:	4b1e      	ldr	r3, [pc, #120]	; (8007434 <xTaskRemoveFromEventList+0xa0>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d11d      	bne.n	80073fc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	3304      	adds	r3, #4
 80073c4:	0018      	movs	r0, r3
 80073c6:	f7ff f8cd 	bl	8006564 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ce:	4b1a      	ldr	r3, [pc, #104]	; (8007438 <xTaskRemoveFromEventList+0xa4>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d903      	bls.n	80073de <xTaskRemoveFromEventList+0x4a>
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073da:	4b17      	ldr	r3, [pc, #92]	; (8007438 <xTaskRemoveFromEventList+0xa4>)
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073e2:	0013      	movs	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	189b      	adds	r3, r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4a14      	ldr	r2, [pc, #80]	; (800743c <xTaskRemoveFromEventList+0xa8>)
 80073ec:	189a      	adds	r2, r3, r2
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	3304      	adds	r3, #4
 80073f2:	0019      	movs	r1, r3
 80073f4:	0010      	movs	r0, r2
 80073f6:	f7ff f85d 	bl	80064b4 <vListInsertEnd>
 80073fa:	e007      	b.n	800740c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	3318      	adds	r3, #24
 8007400:	001a      	movs	r2, r3
 8007402:	4b0f      	ldr	r3, [pc, #60]	; (8007440 <xTaskRemoveFromEventList+0xac>)
 8007404:	0011      	movs	r1, r2
 8007406:	0018      	movs	r0, r3
 8007408:	f7ff f854 	bl	80064b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007410:	4b0c      	ldr	r3, [pc, #48]	; (8007444 <xTaskRemoveFromEventList+0xb0>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007416:	429a      	cmp	r2, r3
 8007418:	d905      	bls.n	8007426 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800741a:	2301      	movs	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800741e:	4b0a      	ldr	r3, [pc, #40]	; (8007448 <xTaskRemoveFromEventList+0xb4>)
 8007420:	2201      	movs	r2, #1
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	e001      	b.n	800742a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8007426:	2300      	movs	r3, #0
 8007428:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	0018      	movs	r0, r3
 800742e:	46bd      	mov	sp, r7
 8007430:	b004      	add	sp, #16
 8007432:	bd80      	pop	{r7, pc}
 8007434:	20000608 	.word	0x20000608
 8007438:	200005e8 	.word	0x200005e8
 800743c:	200004e4 	.word	0x200004e4
 8007440:	200005a0 	.word	0x200005a0
 8007444:	200004e0 	.word	0x200004e0
 8007448:	200005f4 	.word	0x200005f4

0800744c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <vTaskInternalSetTimeOutState+0x20>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800745c:	4b04      	ldr	r3, [pc, #16]	; (8007470 <vTaskInternalSetTimeOutState+0x24>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	605a      	str	r2, [r3, #4]
}
 8007464:	46c0      	nop			; (mov r8, r8)
 8007466:	46bd      	mov	sp, r7
 8007468:	b002      	add	sp, #8
 800746a:	bd80      	pop	{r7, pc}
 800746c:	200005f8 	.word	0x200005f8
 8007470:	200005e4 	.word	0x200005e4

08007474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <xTaskCheckForTimeOut+0x14>
 8007484:	b672      	cpsid	i
 8007486:	e7fe      	b.n	8007486 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d101      	bne.n	8007492 <xTaskCheckForTimeOut+0x1e>
 800748e:	b672      	cpsid	i
 8007490:	e7fe      	b.n	8007490 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8007492:	f000 fa65 	bl	8007960 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007496:	4b1d      	ldr	r3, [pc, #116]	; (800750c <xTaskCheckForTimeOut+0x98>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	693a      	ldr	r2, [r7, #16]
 80074a2:	1ad3      	subs	r3, r2, r3
 80074a4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3301      	adds	r3, #1
 80074ac:	d102      	bne.n	80074b4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	e024      	b.n	80074fe <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	4b15      	ldr	r3, [pc, #84]	; (8007510 <xTaskCheckForTimeOut+0x9c>)
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	429a      	cmp	r2, r3
 80074be:	d007      	beq.n	80074d0 <xTaskCheckForTimeOut+0x5c>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	429a      	cmp	r2, r3
 80074c8:	d302      	bcc.n	80074d0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80074ca:	2301      	movs	r3, #1
 80074cc:	617b      	str	r3, [r7, #20]
 80074ce:	e016      	b.n	80074fe <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d20c      	bcs.n	80074f4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681a      	ldr	r2, [r3, #0]
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	1ad2      	subs	r2, r2, r3
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7ff ffaf 	bl	800744c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80074ee:	2300      	movs	r3, #0
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	e004      	b.n	80074fe <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	2200      	movs	r2, #0
 80074f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80074fa:	2301      	movs	r3, #1
 80074fc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80074fe:	f000 fa41 	bl	8007984 <vPortExitCritical>

	return xReturn;
 8007502:	697b      	ldr	r3, [r7, #20]
}
 8007504:	0018      	movs	r0, r3
 8007506:	46bd      	mov	sp, r7
 8007508:	b006      	add	sp, #24
 800750a:	bd80      	pop	{r7, pc}
 800750c:	200005e4 	.word	0x200005e4
 8007510:	200005f8 	.word	0x200005f8

08007514 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007514:	b580      	push	{r7, lr}
 8007516:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007518:	4b02      	ldr	r3, [pc, #8]	; (8007524 <vTaskMissedYield+0x10>)
 800751a:	2201      	movs	r2, #1
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	46c0      	nop			; (mov r8, r8)
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}
 8007524:	200005f4 	.word	0x200005f4

08007528 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007530:	f000 f84e 	bl	80075d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007534:	4b03      	ldr	r3, [pc, #12]	; (8007544 <prvIdleTask+0x1c>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d9f9      	bls.n	8007530 <prvIdleTask+0x8>
			{
				taskYIELD();
 800753c:	f000 fa00 	bl	8007940 <vPortYield>
		prvCheckTasksWaitingTermination();
 8007540:	e7f6      	b.n	8007530 <prvIdleTask+0x8>
 8007542:	46c0      	nop			; (mov r8, r8)
 8007544:	200004e4 	.word	0x200004e4

08007548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800754e:	2300      	movs	r3, #0
 8007550:	607b      	str	r3, [r7, #4]
 8007552:	e00c      	b.n	800756e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	0013      	movs	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	189b      	adds	r3, r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4a14      	ldr	r2, [pc, #80]	; (80075b0 <prvInitialiseTaskLists+0x68>)
 8007560:	189b      	adds	r3, r3, r2
 8007562:	0018      	movs	r0, r3
 8007564:	f7fe ff7d 	bl	8006462 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3301      	adds	r3, #1
 800756c:	607b      	str	r3, [r7, #4]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b06      	cmp	r3, #6
 8007572:	d9ef      	bls.n	8007554 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007574:	4b0f      	ldr	r3, [pc, #60]	; (80075b4 <prvInitialiseTaskLists+0x6c>)
 8007576:	0018      	movs	r0, r3
 8007578:	f7fe ff73 	bl	8006462 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800757c:	4b0e      	ldr	r3, [pc, #56]	; (80075b8 <prvInitialiseTaskLists+0x70>)
 800757e:	0018      	movs	r0, r3
 8007580:	f7fe ff6f 	bl	8006462 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007584:	4b0d      	ldr	r3, [pc, #52]	; (80075bc <prvInitialiseTaskLists+0x74>)
 8007586:	0018      	movs	r0, r3
 8007588:	f7fe ff6b 	bl	8006462 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800758c:	4b0c      	ldr	r3, [pc, #48]	; (80075c0 <prvInitialiseTaskLists+0x78>)
 800758e:	0018      	movs	r0, r3
 8007590:	f7fe ff67 	bl	8006462 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007594:	4b0b      	ldr	r3, [pc, #44]	; (80075c4 <prvInitialiseTaskLists+0x7c>)
 8007596:	0018      	movs	r0, r3
 8007598:	f7fe ff63 	bl	8006462 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <prvInitialiseTaskLists+0x80>)
 800759e:	4a05      	ldr	r2, [pc, #20]	; (80075b4 <prvInitialiseTaskLists+0x6c>)
 80075a0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80075a2:	4b0a      	ldr	r3, [pc, #40]	; (80075cc <prvInitialiseTaskLists+0x84>)
 80075a4:	4a04      	ldr	r2, [pc, #16]	; (80075b8 <prvInitialiseTaskLists+0x70>)
 80075a6:	601a      	str	r2, [r3, #0]
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	46bd      	mov	sp, r7
 80075ac:	b002      	add	sp, #8
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	200004e4 	.word	0x200004e4
 80075b4:	20000570 	.word	0x20000570
 80075b8:	20000584 	.word	0x20000584
 80075bc:	200005a0 	.word	0x200005a0
 80075c0:	200005b4 	.word	0x200005b4
 80075c4:	200005cc 	.word	0x200005cc
 80075c8:	20000598 	.word	0x20000598
 80075cc:	2000059c 	.word	0x2000059c

080075d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b082      	sub	sp, #8
 80075d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80075d6:	e01a      	b.n	800760e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80075d8:	f000 f9c2 	bl	8007960 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075dc:	4b10      	ldr	r3, [pc, #64]	; (8007620 <prvCheckTasksWaitingTermination+0x50>)
 80075de:	68db      	ldr	r3, [r3, #12]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	3304      	adds	r3, #4
 80075e8:	0018      	movs	r0, r3
 80075ea:	f7fe ffbb 	bl	8006564 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80075ee:	4b0d      	ldr	r3, [pc, #52]	; (8007624 <prvCheckTasksWaitingTermination+0x54>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	1e5a      	subs	r2, r3, #1
 80075f4:	4b0b      	ldr	r3, [pc, #44]	; (8007624 <prvCheckTasksWaitingTermination+0x54>)
 80075f6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80075f8:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <prvCheckTasksWaitingTermination+0x58>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	1e5a      	subs	r2, r3, #1
 80075fe:	4b0a      	ldr	r3, [pc, #40]	; (8007628 <prvCheckTasksWaitingTermination+0x58>)
 8007600:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8007602:	f000 f9bf 	bl	8007984 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	0018      	movs	r0, r3
 800760a:	f000 f80f 	bl	800762c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800760e:	4b06      	ldr	r3, [pc, #24]	; (8007628 <prvCheckTasksWaitingTermination+0x58>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e0      	bne.n	80075d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007616:	46c0      	nop			; (mov r8, r8)
 8007618:	46c0      	nop			; (mov r8, r8)
 800761a:	46bd      	mov	sp, r7
 800761c:	b002      	add	sp, #8
 800761e:	bd80      	pop	{r7, pc}
 8007620:	200005b4 	.word	0x200005b4
 8007624:	200005e0 	.word	0x200005e0
 8007628:	200005c8 	.word	0x200005c8

0800762c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007638:	0018      	movs	r0, r3
 800763a:	f000 fad5 	bl	8007be8 <vPortFree>
			vPortFree( pxTCB );
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	0018      	movs	r0, r3
 8007642:	f000 fad1 	bl	8007be8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007646:	46c0      	nop			; (mov r8, r8)
 8007648:	46bd      	mov	sp, r7
 800764a:	b002      	add	sp, #8
 800764c:	bd80      	pop	{r7, pc}
	...

08007650 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b082      	sub	sp, #8
 8007654:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007656:	4b0b      	ldr	r3, [pc, #44]	; (8007684 <prvResetNextTaskUnblockTime+0x34>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d104      	bne.n	800766a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007660:	4b09      	ldr	r3, [pc, #36]	; (8007688 <prvResetNextTaskUnblockTime+0x38>)
 8007662:	2201      	movs	r2, #1
 8007664:	4252      	negs	r2, r2
 8007666:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007668:	e008      	b.n	800767c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800766a:	4b06      	ldr	r3, [pc, #24]	; (8007684 <prvResetNextTaskUnblockTime+0x34>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685a      	ldr	r2, [r3, #4]
 8007678:	4b03      	ldr	r3, [pc, #12]	; (8007688 <prvResetNextTaskUnblockTime+0x38>)
 800767a:	601a      	str	r2, [r3, #0]
}
 800767c:	46c0      	nop			; (mov r8, r8)
 800767e:	46bd      	mov	sp, r7
 8007680:	b002      	add	sp, #8
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20000598 	.word	0x20000598
 8007688:	20000600 	.word	0x20000600

0800768c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007692:	4b0a      	ldr	r3, [pc, #40]	; (80076bc <xTaskGetSchedulerState+0x30>)
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d102      	bne.n	80076a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800769a:	2301      	movs	r3, #1
 800769c:	607b      	str	r3, [r7, #4]
 800769e:	e008      	b.n	80076b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076a0:	4b07      	ldr	r3, [pc, #28]	; (80076c0 <xTaskGetSchedulerState+0x34>)
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d102      	bne.n	80076ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80076a8:	2302      	movs	r3, #2
 80076aa:	607b      	str	r3, [r7, #4]
 80076ac:	e001      	b.n	80076b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80076ae:	2300      	movs	r3, #0
 80076b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80076b2:	687b      	ldr	r3, [r7, #4]
	}
 80076b4:	0018      	movs	r0, r3
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b002      	add	sp, #8
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	200005ec 	.word	0x200005ec
 80076c0:	20000608 	.word	0x20000608

080076c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b084      	sub	sp, #16
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80076d0:	2300      	movs	r3, #0
 80076d2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d044      	beq.n	8007764 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076da:	4b25      	ldr	r3, [pc, #148]	; (8007770 <xTaskPriorityDisinherit+0xac>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	68ba      	ldr	r2, [r7, #8]
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d001      	beq.n	80076e8 <xTaskPriorityDisinherit+0x24>
 80076e4:	b672      	cpsid	i
 80076e6:	e7fe      	b.n	80076e6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d101      	bne.n	80076f4 <xTaskPriorityDisinherit+0x30>
 80076f0:	b672      	cpsid	i
 80076f2:	e7fe      	b.n	80076f2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076f8:	1e5a      	subs	r2, r3, #1
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007706:	429a      	cmp	r2, r3
 8007708:	d02c      	beq.n	8007764 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d128      	bne.n	8007764 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	3304      	adds	r3, #4
 8007716:	0018      	movs	r0, r3
 8007718:	f7fe ff24 	bl	8006564 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007728:	2207      	movs	r2, #7
 800772a:	1ad2      	subs	r2, r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007734:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <xTaskPriorityDisinherit+0xb0>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	429a      	cmp	r2, r3
 800773a:	d903      	bls.n	8007744 <xTaskPriorityDisinherit+0x80>
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <xTaskPriorityDisinherit+0xb0>)
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007748:	0013      	movs	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	189b      	adds	r3, r3, r2
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4a09      	ldr	r2, [pc, #36]	; (8007778 <xTaskPriorityDisinherit+0xb4>)
 8007752:	189a      	adds	r2, r3, r2
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	3304      	adds	r3, #4
 8007758:	0019      	movs	r1, r3
 800775a:	0010      	movs	r0, r2
 800775c:	f7fe feaa 	bl	80064b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007760:	2301      	movs	r3, #1
 8007762:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007764:	68fb      	ldr	r3, [r7, #12]
	}
 8007766:	0018      	movs	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	b004      	add	sp, #16
 800776c:	bd80      	pop	{r7, pc}
 800776e:	46c0      	nop			; (mov r8, r8)
 8007770:	200004e0 	.word	0x200004e0
 8007774:	200005e8 	.word	0x200005e8
 8007778:	200004e4 	.word	0x200004e4

0800777c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007786:	4b21      	ldr	r3, [pc, #132]	; (800780c <prvAddCurrentTaskToDelayedList+0x90>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800778c:	4b20      	ldr	r3, [pc, #128]	; (8007810 <prvAddCurrentTaskToDelayedList+0x94>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	3304      	adds	r3, #4
 8007792:	0018      	movs	r0, r3
 8007794:	f7fe fee6 	bl	8006564 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3301      	adds	r3, #1
 800779c:	d10b      	bne.n	80077b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a4:	4b1a      	ldr	r3, [pc, #104]	; (8007810 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	4b1a      	ldr	r3, [pc, #104]	; (8007814 <prvAddCurrentTaskToDelayedList+0x98>)
 80077ac:	0011      	movs	r1, r2
 80077ae:	0018      	movs	r0, r3
 80077b0:	f7fe fe80 	bl	80064b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077b4:	e026      	b.n	8007804 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	18d3      	adds	r3, r2, r3
 80077bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077be:	4b14      	ldr	r3, [pc, #80]	; (8007810 <prvAddCurrentTaskToDelayedList+0x94>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d209      	bcs.n	80077e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ce:	4b12      	ldr	r3, [pc, #72]	; (8007818 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	4b0f      	ldr	r3, [pc, #60]	; (8007810 <prvAddCurrentTaskToDelayedList+0x94>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	3304      	adds	r3, #4
 80077d8:	0019      	movs	r1, r3
 80077da:	0010      	movs	r0, r2
 80077dc:	f7fe fe8c 	bl	80064f8 <vListInsert>
}
 80077e0:	e010      	b.n	8007804 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077e2:	4b0e      	ldr	r3, [pc, #56]	; (800781c <prvAddCurrentTaskToDelayedList+0xa0>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	4b0a      	ldr	r3, [pc, #40]	; (8007810 <prvAddCurrentTaskToDelayedList+0x94>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	3304      	adds	r3, #4
 80077ec:	0019      	movs	r1, r3
 80077ee:	0010      	movs	r0, r2
 80077f0:	f7fe fe82 	bl	80064f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077f4:	4b0a      	ldr	r3, [pc, #40]	; (8007820 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68ba      	ldr	r2, [r7, #8]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	d202      	bcs.n	8007804 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077fe:	4b08      	ldr	r3, [pc, #32]	; (8007820 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007800:	68ba      	ldr	r2, [r7, #8]
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	46c0      	nop			; (mov r8, r8)
 8007806:	46bd      	mov	sp, r7
 8007808:	b004      	add	sp, #16
 800780a:	bd80      	pop	{r7, pc}
 800780c:	200005e4 	.word	0x200005e4
 8007810:	200004e0 	.word	0x200004e0
 8007814:	200005cc 	.word	0x200005cc
 8007818:	2000059c 	.word	0x2000059c
 800781c:	20000598 	.word	0x20000598
 8007820:	20000600 	.word	0x20000600

08007824 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b084      	sub	sp, #16
 8007828:	af00      	add	r7, sp, #0
 800782a:	60f8      	str	r0, [r7, #12]
 800782c:	60b9      	str	r1, [r7, #8]
 800782e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3b04      	subs	r3, #4
 8007834:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2280      	movs	r2, #128	; 0x80
 800783a:	0452      	lsls	r2, r2, #17
 800783c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	3b04      	subs	r3, #4
 8007842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8007844:	68ba      	ldr	r2, [r7, #8]
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b04      	subs	r3, #4
 800784e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007850:	4a08      	ldr	r2, [pc, #32]	; (8007874 <pxPortInitialiseStack+0x50>)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3b14      	subs	r3, #20
 800785a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800785c:	687a      	ldr	r2, [r7, #4]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	3b20      	subs	r3, #32
 8007866:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007868:	68fb      	ldr	r3, [r7, #12]
}
 800786a:	0018      	movs	r0, r3
 800786c:	46bd      	mov	sp, r7
 800786e:	b004      	add	sp, #16
 8007870:	bd80      	pop	{r7, pc}
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	08007879 	.word	0x08007879

08007878 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800787e:	2300      	movs	r3, #0
 8007880:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007882:	4b08      	ldr	r3, [pc, #32]	; (80078a4 <prvTaskExitError+0x2c>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	d001      	beq.n	800788e <prvTaskExitError+0x16>
 800788a:	b672      	cpsid	i
 800788c:	e7fe      	b.n	800788c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800788e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8007890:	46c0      	nop			; (mov r8, r8)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0fc      	beq.n	8007892 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007898:	46c0      	nop			; (mov r8, r8)
 800789a:	46c0      	nop			; (mov r8, r8)
 800789c:	46bd      	mov	sp, r7
 800789e:	b002      	add	sp, #8
 80078a0:	bd80      	pop	{r7, pc}
 80078a2:	46c0      	nop			; (mov r8, r8)
 80078a4:	2000003c 	.word	0x2000003c

080078a8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80078ac:	46c0      	nop			; (mov r8, r8)
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
	...

080078c0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80078c0:	4a0b      	ldr	r2, [pc, #44]	; (80078f0 <pxCurrentTCBConst2>)
 80078c2:	6813      	ldr	r3, [r2, #0]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	3020      	adds	r0, #32
 80078c8:	f380 8809 	msr	PSP, r0
 80078cc:	2002      	movs	r0, #2
 80078ce:	f380 8814 	msr	CONTROL, r0
 80078d2:	f3bf 8f6f 	isb	sy
 80078d6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80078d8:	46ae      	mov	lr, r5
 80078da:	bc08      	pop	{r3}
 80078dc:	bc04      	pop	{r2}
 80078de:	b662      	cpsie	i
 80078e0:	4718      	bx	r3
 80078e2:	46c0      	nop			; (mov r8, r8)
 80078e4:	46c0      	nop			; (mov r8, r8)
 80078e6:	46c0      	nop			; (mov r8, r8)
 80078e8:	46c0      	nop			; (mov r8, r8)
 80078ea:	46c0      	nop			; (mov r8, r8)
 80078ec:	46c0      	nop			; (mov r8, r8)
 80078ee:	46c0      	nop			; (mov r8, r8)

080078f0 <pxCurrentTCBConst2>:
 80078f0:	200004e0 	.word	0x200004e0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80078f4:	46c0      	nop			; (mov r8, r8)
 80078f6:	46c0      	nop			; (mov r8, r8)

080078f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <xPortStartScheduler+0x40>)
 80078fe:	681a      	ldr	r2, [r3, #0]
 8007900:	4b0d      	ldr	r3, [pc, #52]	; (8007938 <xPortStartScheduler+0x40>)
 8007902:	21ff      	movs	r1, #255	; 0xff
 8007904:	0409      	lsls	r1, r1, #16
 8007906:	430a      	orrs	r2, r1
 8007908:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <xPortStartScheduler+0x40>)
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	4b0a      	ldr	r3, [pc, #40]	; (8007938 <xPortStartScheduler+0x40>)
 8007910:	21ff      	movs	r1, #255	; 0xff
 8007912:	0609      	lsls	r1, r1, #24
 8007914:	430a      	orrs	r2, r1
 8007916:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007918:	f000 f898 	bl	8007a4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800791c:	4b07      	ldr	r3, [pc, #28]	; (800793c <xPortStartScheduler+0x44>)
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8007922:	f7ff ffcd 	bl	80078c0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007926:	f7ff fcc5 	bl	80072b4 <vTaskSwitchContext>
	prvTaskExitError();
 800792a:	f7ff ffa5 	bl	8007878 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800792e:	2300      	movs	r3, #0
}
 8007930:	0018      	movs	r0, r3
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	46c0      	nop			; (mov r8, r8)
 8007938:	e000ed20 	.word	0xe000ed20
 800793c:	2000003c 	.word	0x2000003c

08007940 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8007940:	b580      	push	{r7, lr}
 8007942:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007944:	4b05      	ldr	r3, [pc, #20]	; (800795c <vPortYield+0x1c>)
 8007946:	2280      	movs	r2, #128	; 0x80
 8007948:	0552      	lsls	r2, r2, #21
 800794a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800794c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007950:	f3bf 8f6f 	isb	sy
}
 8007954:	46c0      	nop			; (mov r8, r8)
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
 800795a:	46c0      	nop			; (mov r8, r8)
 800795c:	e000ed04 	.word	0xe000ed04

08007960 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007960:	b580      	push	{r7, lr}
 8007962:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8007964:	b672      	cpsid	i
	uxCriticalNesting++;
 8007966:	4b06      	ldr	r3, [pc, #24]	; (8007980 <vPortEnterCritical+0x20>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	4b04      	ldr	r3, [pc, #16]	; (8007980 <vPortEnterCritical+0x20>)
 800796e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8007970:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8007974:	f3bf 8f6f 	isb	sy
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	46c0      	nop			; (mov r8, r8)
 8007980:	2000003c 	.word	0x2000003c

08007984 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007984:	b580      	push	{r7, lr}
 8007986:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007988:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <vPortExitCritical+0x2c>)
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <vPortExitCritical+0x10>
 8007990:	b672      	cpsid	i
 8007992:	e7fe      	b.n	8007992 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <vPortExitCritical+0x2c>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	1e5a      	subs	r2, r3, #1
 800799a:	4b05      	ldr	r3, [pc, #20]	; (80079b0 <vPortExitCritical+0x2c>)
 800799c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800799e:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <vPortExitCritical+0x2c>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d100      	bne.n	80079a8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80079a6:	b662      	cpsie	i
	}
}
 80079a8:	46c0      	nop			; (mov r8, r8)
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	2000003c 	.word	0x2000003c

080079b4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80079b4:	f3ef 8010 	mrs	r0, PRIMASK
 80079b8:	b672      	cpsid	i
 80079ba:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80079bc:	46c0      	nop			; (mov r8, r8)
 80079be:	0018      	movs	r0, r3

080079c0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80079c0:	f380 8810 	msr	PRIMASK, r0
 80079c4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80079c6:	46c0      	nop			; (mov r8, r8)
	...

080079d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079d0:	f3ef 8009 	mrs	r0, PSP
 80079d4:	4b0e      	ldr	r3, [pc, #56]	; (8007a10 <pxCurrentTCBConst>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	3820      	subs	r0, #32
 80079da:	6010      	str	r0, [r2, #0]
 80079dc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80079de:	4644      	mov	r4, r8
 80079e0:	464d      	mov	r5, r9
 80079e2:	4656      	mov	r6, sl
 80079e4:	465f      	mov	r7, fp
 80079e6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80079e8:	b508      	push	{r3, lr}
 80079ea:	b672      	cpsid	i
 80079ec:	f7ff fc62 	bl	80072b4 <vTaskSwitchContext>
 80079f0:	b662      	cpsie	i
 80079f2:	bc0c      	pop	{r2, r3}
 80079f4:	6811      	ldr	r1, [r2, #0]
 80079f6:	6808      	ldr	r0, [r1, #0]
 80079f8:	3010      	adds	r0, #16
 80079fa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80079fc:	46a0      	mov	r8, r4
 80079fe:	46a9      	mov	r9, r5
 8007a00:	46b2      	mov	sl, r6
 8007a02:	46bb      	mov	fp, r7
 8007a04:	f380 8809 	msr	PSP, r0
 8007a08:	3820      	subs	r0, #32
 8007a0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8007a0c:	4718      	bx	r3
 8007a0e:	46c0      	nop			; (mov r8, r8)

08007a10 <pxCurrentTCBConst>:
 8007a10:	200004e0 	.word	0x200004e0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007a14:	46c0      	nop			; (mov r8, r8)
 8007a16:	46c0      	nop			; (mov r8, r8)

08007a18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a1e:	f7ff ffc9 	bl	80079b4 <ulSetInterruptMaskFromISR>
 8007a22:	0003      	movs	r3, r0
 8007a24:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a26:	f7ff fb95 	bl	8007154 <xTaskIncrementTick>
 8007a2a:	1e03      	subs	r3, r0, #0
 8007a2c:	d003      	beq.n	8007a36 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a2e:	4b06      	ldr	r3, [pc, #24]	; (8007a48 <xPortSysTickHandler+0x30>)
 8007a30:	2280      	movs	r2, #128	; 0x80
 8007a32:	0552      	lsls	r2, r2, #21
 8007a34:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f7ff ffc1 	bl	80079c0 <vClearInterruptMaskFromISR>
}
 8007a3e:	46c0      	nop			; (mov r8, r8)
 8007a40:	46bd      	mov	sp, r7
 8007a42:	b002      	add	sp, #8
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	e000ed04 	.word	0xe000ed04

08007a4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a56:	4b0b      	ldr	r3, [pc, #44]	; (8007a84 <vPortSetupTimerInterrupt+0x38>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a5c:	4b0a      	ldr	r3, [pc, #40]	; (8007a88 <vPortSetupTimerInterrupt+0x3c>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	22fa      	movs	r2, #250	; 0xfa
 8007a62:	0091      	lsls	r1, r2, #2
 8007a64:	0018      	movs	r0, r3
 8007a66:	f7f8 fb57 	bl	8000118 <__udivsi3>
 8007a6a:	0003      	movs	r3, r0
 8007a6c:	001a      	movs	r2, r3
 8007a6e:	4b07      	ldr	r3, [pc, #28]	; (8007a8c <vPortSetupTimerInterrupt+0x40>)
 8007a70:	3a01      	subs	r2, #1
 8007a72:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8007a74:	4b02      	ldr	r3, [pc, #8]	; (8007a80 <vPortSetupTimerInterrupt+0x34>)
 8007a76:	2207      	movs	r2, #7
 8007a78:	601a      	str	r2, [r3, #0]
}
 8007a7a:	46c0      	nop			; (mov r8, r8)
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	e000e010 	.word	0xe000e010
 8007a84:	e000e018 	.word	0xe000e018
 8007a88:	20000000 	.word	0x20000000
 8007a8c:	e000e014 	.word	0xe000e014

08007a90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8007a9c:	f7ff fac2 	bl	8007024 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007aa0:	4b4b      	ldr	r3, [pc, #300]	; (8007bd0 <pvPortMalloc+0x140>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d101      	bne.n	8007aac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007aa8:	f000 f8ec 	bl	8007c84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007aac:	4b49      	ldr	r3, [pc, #292]	; (8007bd4 <pvPortMalloc+0x144>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	687a      	ldr	r2, [r7, #4]
 8007ab2:	4013      	ands	r3, r2
 8007ab4:	d000      	beq.n	8007ab8 <pvPortMalloc+0x28>
 8007ab6:	e07e      	b.n	8007bb6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d012      	beq.n	8007ae4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8007abe:	2208      	movs	r2, #8
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	189b      	adds	r3, r3, r2
 8007ac4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2207      	movs	r2, #7
 8007aca:	4013      	ands	r3, r2
 8007acc:	d00a      	beq.n	8007ae4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2207      	movs	r2, #7
 8007ad2:	4393      	bics	r3, r2
 8007ad4:	3308      	adds	r3, #8
 8007ad6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2207      	movs	r2, #7
 8007adc:	4013      	ands	r3, r2
 8007ade:	d001      	beq.n	8007ae4 <pvPortMalloc+0x54>
 8007ae0:	b672      	cpsid	i
 8007ae2:	e7fe      	b.n	8007ae2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d065      	beq.n	8007bb6 <pvPortMalloc+0x126>
 8007aea:	4b3b      	ldr	r3, [pc, #236]	; (8007bd8 <pvPortMalloc+0x148>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d860      	bhi.n	8007bb6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007af4:	4b39      	ldr	r3, [pc, #228]	; (8007bdc <pvPortMalloc+0x14c>)
 8007af6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007af8:	4b38      	ldr	r3, [pc, #224]	; (8007bdc <pvPortMalloc+0x14c>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007afe:	e004      	b.n	8007b0a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d903      	bls.n	8007b1c <pvPortMalloc+0x8c>
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1f1      	bne.n	8007b00 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007b1c:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <pvPortMalloc+0x140>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	697a      	ldr	r2, [r7, #20]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d047      	beq.n	8007bb6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	2208      	movs	r2, #8
 8007b2c:	189b      	adds	r3, r3, r2
 8007b2e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681a      	ldr	r2, [r3, #0]
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	1ad2      	subs	r2, r2, r3
 8007b40:	2308      	movs	r3, #8
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d916      	bls.n	8007b76 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	18d3      	adds	r3, r2, r3
 8007b4e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b50:	68bb      	ldr	r3, [r7, #8]
 8007b52:	2207      	movs	r2, #7
 8007b54:	4013      	ands	r3, r2
 8007b56:	d001      	beq.n	8007b5c <pvPortMalloc+0xcc>
 8007b58:	b672      	cpsid	i
 8007b5a:	e7fe      	b.n	8007b5a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	1ad2      	subs	r2, r2, r3
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	0018      	movs	r0, r3
 8007b72:	f000 f8e7 	bl	8007d44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b76:	4b18      	ldr	r3, [pc, #96]	; (8007bd8 <pvPortMalloc+0x148>)
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	1ad2      	subs	r2, r2, r3
 8007b80:	4b15      	ldr	r3, [pc, #84]	; (8007bd8 <pvPortMalloc+0x148>)
 8007b82:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b84:	4b14      	ldr	r3, [pc, #80]	; (8007bd8 <pvPortMalloc+0x148>)
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <pvPortMalloc+0x150>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d203      	bcs.n	8007b98 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b90:	4b11      	ldr	r3, [pc, #68]	; (8007bd8 <pvPortMalloc+0x148>)
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <pvPortMalloc+0x150>)
 8007b96:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b98:	697b      	ldr	r3, [r7, #20]
 8007b9a:	685a      	ldr	r2, [r3, #4]
 8007b9c:	4b0d      	ldr	r3, [pc, #52]	; (8007bd4 <pvPortMalloc+0x144>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	431a      	orrs	r2, r3
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2200      	movs	r2, #0
 8007baa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007bac:	4b0d      	ldr	r3, [pc, #52]	; (8007be4 <pvPortMalloc+0x154>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <pvPortMalloc+0x154>)
 8007bb4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007bb6:	f7ff fa41 	bl	800703c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2207      	movs	r2, #7
 8007bbe:	4013      	ands	r3, r2
 8007bc0:	d001      	beq.n	8007bc6 <pvPortMalloc+0x136>
 8007bc2:	b672      	cpsid	i
 8007bc4:	e7fe      	b.n	8007bc4 <pvPortMalloc+0x134>
	return pvReturn;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
}
 8007bc8:	0018      	movs	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b006      	add	sp, #24
 8007bce:	bd80      	pop	{r7, pc}
 8007bd0:	20007e14 	.word	0x20007e14
 8007bd4:	20007e28 	.word	0x20007e28
 8007bd8:	20007e18 	.word	0x20007e18
 8007bdc:	20007e0c 	.word	0x20007e0c
 8007be0:	20007e1c 	.word	0x20007e1c
 8007be4:	20007e20 	.word	0x20007e20

08007be8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d03a      	beq.n	8007c70 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007bfa:	2308      	movs	r3, #8
 8007bfc:	425b      	negs	r3, r3
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	18d3      	adds	r3, r2, r3
 8007c02:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	685a      	ldr	r2, [r3, #4]
 8007c0c:	4b1a      	ldr	r3, [pc, #104]	; (8007c78 <vPortFree+0x90>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	4013      	ands	r3, r2
 8007c12:	d101      	bne.n	8007c18 <vPortFree+0x30>
 8007c14:	b672      	cpsid	i
 8007c16:	e7fe      	b.n	8007c16 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <vPortFree+0x3c>
 8007c20:	b672      	cpsid	i
 8007c22:	e7fe      	b.n	8007c22 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <vPortFree+0x90>)
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4013      	ands	r3, r2
 8007c2e:	d01f      	beq.n	8007c70 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d11b      	bne.n	8007c70 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	4b0e      	ldr	r3, [pc, #56]	; (8007c78 <vPortFree+0x90>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	43db      	mvns	r3, r3
 8007c42:	401a      	ands	r2, r3
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007c48:	f7ff f9ec 	bl	8007024 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	685a      	ldr	r2, [r3, #4]
 8007c50:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <vPortFree+0x94>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	18d2      	adds	r2, r2, r3
 8007c56:	4b09      	ldr	r3, [pc, #36]	; (8007c7c <vPortFree+0x94>)
 8007c58:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	0018      	movs	r0, r3
 8007c5e:	f000 f871 	bl	8007d44 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007c62:	4b07      	ldr	r3, [pc, #28]	; (8007c80 <vPortFree+0x98>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	1c5a      	adds	r2, r3, #1
 8007c68:	4b05      	ldr	r3, [pc, #20]	; (8007c80 <vPortFree+0x98>)
 8007c6a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8007c6c:	f7ff f9e6 	bl	800703c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007c70:	46c0      	nop			; (mov r8, r8)
 8007c72:	46bd      	mov	sp, r7
 8007c74:	b004      	add	sp, #16
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	20007e28 	.word	0x20007e28
 8007c7c:	20007e18 	.word	0x20007e18
 8007c80:	20007e24 	.word	0x20007e24

08007c84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c8a:	23f0      	movs	r3, #240	; 0xf0
 8007c8c:	01db      	lsls	r3, r3, #7
 8007c8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007c90:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <prvHeapInit+0xa8>)
 8007c92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2207      	movs	r2, #7
 8007c98:	4013      	ands	r3, r2
 8007c9a:	d00c      	beq.n	8007cb6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	3307      	adds	r3, #7
 8007ca0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2207      	movs	r2, #7
 8007ca6:	4393      	bics	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	1ad2      	subs	r2, r2, r3
 8007cb0:	4b1e      	ldr	r3, [pc, #120]	; (8007d2c <prvHeapInit+0xa8>)
 8007cb2:	18d3      	adds	r3, r2, r3
 8007cb4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cba:	4b1d      	ldr	r3, [pc, #116]	; (8007d30 <prvHeapInit+0xac>)
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007cc0:	4b1b      	ldr	r3, [pc, #108]	; (8007d30 <prvHeapInit+0xac>)
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	68ba      	ldr	r2, [r7, #8]
 8007cca:	18d3      	adds	r3, r2, r3
 8007ccc:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007cce:	2208      	movs	r2, #8
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	1a9b      	subs	r3, r3, r2
 8007cd4:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2207      	movs	r2, #7
 8007cda:	4393      	bics	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007cde:	68fa      	ldr	r2, [r7, #12]
 8007ce0:	4b14      	ldr	r3, [pc, #80]	; (8007d34 <prvHeapInit+0xb0>)
 8007ce2:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007ce4:	4b13      	ldr	r3, [pc, #76]	; (8007d34 <prvHeapInit+0xb0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007cec:	4b11      	ldr	r3, [pc, #68]	; (8007d34 <prvHeapInit+0xb0>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	68fa      	ldr	r2, [r7, #12]
 8007cfc:	1ad2      	subs	r2, r2, r3
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d02:	4b0c      	ldr	r3, [pc, #48]	; (8007d34 <prvHeapInit+0xb0>)
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	685a      	ldr	r2, [r3, #4]
 8007d0e:	4b0a      	ldr	r3, [pc, #40]	; (8007d38 <prvHeapInit+0xb4>)
 8007d10:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	4b09      	ldr	r3, [pc, #36]	; (8007d3c <prvHeapInit+0xb8>)
 8007d18:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d1a:	4b09      	ldr	r3, [pc, #36]	; (8007d40 <prvHeapInit+0xbc>)
 8007d1c:	2280      	movs	r2, #128	; 0x80
 8007d1e:	0612      	lsls	r2, r2, #24
 8007d20:	601a      	str	r2, [r3, #0]
}
 8007d22:	46c0      	nop			; (mov r8, r8)
 8007d24:	46bd      	mov	sp, r7
 8007d26:	b004      	add	sp, #16
 8007d28:	bd80      	pop	{r7, pc}
 8007d2a:	46c0      	nop			; (mov r8, r8)
 8007d2c:	2000060c 	.word	0x2000060c
 8007d30:	20007e0c 	.word	0x20007e0c
 8007d34:	20007e14 	.word	0x20007e14
 8007d38:	20007e1c 	.word	0x20007e1c
 8007d3c:	20007e18 	.word	0x20007e18
 8007d40:	20007e28 	.word	0x20007e28

08007d44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d4c:	4b27      	ldr	r3, [pc, #156]	; (8007dec <prvInsertBlockIntoFreeList+0xa8>)
 8007d4e:	60fb      	str	r3, [r7, #12]
 8007d50:	e002      	b.n	8007d58 <prvInsertBlockIntoFreeList+0x14>
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	60fb      	str	r3, [r7, #12]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	687a      	ldr	r2, [r7, #4]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d8f7      	bhi.n	8007d52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	68ba      	ldr	r2, [r7, #8]
 8007d6c:	18d3      	adds	r3, r2, r3
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	429a      	cmp	r2, r3
 8007d72:	d108      	bne.n	8007d86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	685a      	ldr	r2, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	18d2      	adds	r2, r2, r3
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	18d2      	adds	r2, r2, r3
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d118      	bne.n	8007dcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681a      	ldr	r2, [r3, #0]
 8007d9e:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <prvInsertBlockIntoFreeList+0xac>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d00d      	beq.n	8007dc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	18d2      	adds	r2, r2, r3
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	601a      	str	r2, [r3, #0]
 8007dc0:	e008      	b.n	8007dd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dc2:	4b0b      	ldr	r3, [pc, #44]	; (8007df0 <prvInsertBlockIntoFreeList+0xac>)
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e003      	b.n	8007dd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d002      	beq.n	8007de2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007de2:	46c0      	nop			; (mov r8, r8)
 8007de4:	46bd      	mov	sp, r7
 8007de6:	b004      	add	sp, #16
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	46c0      	nop			; (mov r8, r8)
 8007dec:	20007e0c 	.word	0x20007e0c
 8007df0:	20007e14 	.word	0x20007e14

08007df4 <memset>:
 8007df4:	0003      	movs	r3, r0
 8007df6:	1882      	adds	r2, r0, r2
 8007df8:	4293      	cmp	r3, r2
 8007dfa:	d100      	bne.n	8007dfe <memset+0xa>
 8007dfc:	4770      	bx	lr
 8007dfe:	7019      	strb	r1, [r3, #0]
 8007e00:	3301      	adds	r3, #1
 8007e02:	e7f9      	b.n	8007df8 <memset+0x4>

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	2600      	movs	r6, #0
 8007e08:	4c0c      	ldr	r4, [pc, #48]	; (8007e3c <__libc_init_array+0x38>)
 8007e0a:	4d0d      	ldr	r5, [pc, #52]	; (8007e40 <__libc_init_array+0x3c>)
 8007e0c:	1b64      	subs	r4, r4, r5
 8007e0e:	10a4      	asrs	r4, r4, #2
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	2600      	movs	r6, #0
 8007e16:	f000 f823 	bl	8007e60 <_init>
 8007e1a:	4c0a      	ldr	r4, [pc, #40]	; (8007e44 <__libc_init_array+0x40>)
 8007e1c:	4d0a      	ldr	r5, [pc, #40]	; (8007e48 <__libc_init_array+0x44>)
 8007e1e:	1b64      	subs	r4, r4, r5
 8007e20:	10a4      	asrs	r4, r4, #2
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	00b3      	lsls	r3, r6, #2
 8007e2a:	58eb      	ldr	r3, [r5, r3]
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	00b3      	lsls	r3, r6, #2
 8007e34:	58eb      	ldr	r3, [r5, r3]
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	08007fa8 	.word	0x08007fa8
 8007e40:	08007fa8 	.word	0x08007fa8
 8007e44:	08007fac 	.word	0x08007fac
 8007e48:	08007fa8 	.word	0x08007fa8

08007e4c <memcpy>:
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	b510      	push	{r4, lr}
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d100      	bne.n	8007e56 <memcpy+0xa>
 8007e54:	bd10      	pop	{r4, pc}
 8007e56:	5ccc      	ldrb	r4, [r1, r3]
 8007e58:	54c4      	strb	r4, [r0, r3]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	e7f8      	b.n	8007e50 <memcpy+0x4>
	...

08007e60 <_init>:
 8007e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e62:	46c0      	nop			; (mov r8, r8)
 8007e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e66:	bc08      	pop	{r3}
 8007e68:	469e      	mov	lr, r3
 8007e6a:	4770      	bx	lr

08007e6c <_fini>:
 8007e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e6e:	46c0      	nop			; (mov r8, r8)
 8007e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e72:	bc08      	pop	{r3}
 8007e74:	469e      	mov	lr, r3
 8007e76:	4770      	bx	lr
